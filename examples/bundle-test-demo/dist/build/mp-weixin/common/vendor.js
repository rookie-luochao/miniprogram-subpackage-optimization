'use strict';
var e,
  t,
  n,
  i,
  o,
  r,
  a,
  s,
  c,
  u,
  l = (e, t, n) => {
    if (!t.has(e)) throw TypeError('Cannot ' + n);
  },
  d = (e, t, n) => (
    l(e, t, 'read from private field'), n ? n.call(e) : t.get(e)
  ),
  p = (e, t, n) => {
    if (t.has(e))
      throw TypeError('Cannot add the same private member more than once');
    t instanceof WeakSet ? t.add(e) : t.set(e, n);
  },
  h = (e, t, n, i) => (
    l(e, t, 'write to private field'), i ? i.call(e, n) : t.set(e, n), n
  ),
  f = (e, t, n) => (l(e, t, 'access private method'), n);
/**
 * @vue/shared v3.4.21
 * (c) 2018-present Yuxi (Evan) You and Vue contributors
 * @license MIT
 **/
function g(e, t) {
  const n = new Set(e.split(','));
  return (e) => n.has(e);
}
const _ = {},
  v = [],
  m = () => {},
  y = () => !1,
  I = (e) =>
    111 === e.charCodeAt(0) &&
    110 === e.charCodeAt(1) &&
    (e.charCodeAt(2) > 122 || e.charCodeAt(2) < 97),
  M = (e) => e.startsWith('onUpdate:'),
  C = Object.assign,
  T = (e, t) => {
    const n = e.indexOf(t);
    n > -1 && e.splice(n, 1);
  },
  E = Object.prototype.hasOwnProperty,
  D = (e, t) => E.call(e, t),
  S = Array.isArray,
  k = (e) => '[object Map]' === w(e),
  R = (e) => '[object Set]' === w(e),
  L = (e) => 'function' == typeof e,
  A = (e) => 'string' == typeof e,
  O = (e) => 'symbol' == typeof e,
  b = (e) => null !== e && 'object' == typeof e,
  N = (e) => (b(e) || L(e)) && L(e.then) && L(e.catch),
  P = Object.prototype.toString,
  w = (e) => P.call(e),
  U = (e) => w(e).slice(8, -1),
  G = (e) => '[object Object]' === w(e),
  x = (e) => A(e) && 'NaN' !== e && '-' !== e[0] && '' + parseInt(e, 10) === e,
  F = g(
    ',key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted'
  ),
  q = (e) => {
    const t = Object.create(null);
    return (n) => t[n] || (t[n] = e(n));
  },
  V = /-(\w)/g,
  B = q((e) => e.replace(V, (e, t) => (t ? t.toUpperCase() : ''))),
  H = /\B([A-Z])/g,
  j = q((e) => e.replace(H, '-$1').toLowerCase()),
  K = q((e) => e.charAt(0).toUpperCase() + e.slice(1)),
  W = q((e) => (e ? `on${K(e)}` : '')),
  z = (e, t) => !Object.is(e, t),
  $ = (e, t) => {
    for (let n = 0; n < e.length; n++) e[n](t);
  },
  Y = (e, t, n) => {
    Object.defineProperty(e, t, { configurable: !0, enumerable: !1, value: n });
  },
  J = (e) => {
    const t = parseFloat(e);
    return isNaN(t) ? e : t;
  },
  X = (e) => {
    const t = A(e) ? Number(e) : NaN;
    return isNaN(t) ? e : t;
  };
let Z;
function Q(e) {
  if (S(e)) {
    const t = {};
    for (let n = 0; n < e.length; n++) {
      const i = e[n],
        o = A(i) ? ie(i) : Q(i);
      if (o) for (const e in o) t[e] = o[e];
    }
    return t;
  }
  if (A(e) || b(e)) return e;
}
const ee = /;(?![^(]*\))/g,
  te = /:([^]+)/,
  ne = /\/\*[^]*?\*\//g;
function ie(e) {
  const t = {};
  return (
    e
      .replace(ne, '')
      .split(ee)
      .forEach((e) => {
        if (e) {
          const n = e.split(te);
          n.length > 1 && (t[n[0].trim()] = n[1].trim());
        }
      }),
    t
  );
}
function oe(e) {
  let t = '';
  if (A(e)) t = e;
  else if (S(e))
    for (let n = 0; n < e.length; n++) {
      const i = oe(e[n]);
      i && (t += i + ' ');
    }
  else if (b(e)) for (const n in e) e[n] && (t += n + ' ');
  return t.trim();
}
const re = (e, t) =>
    t && t.__v_isRef
      ? re(e, t.value)
      : k(t)
        ? {
            [`Map(${t.size})`]: [...t.entries()].reduce(
              (e, [t, n], i) => ((e[ae(t, i) + ' =>'] = n), e),
              {}
            ),
          }
        : R(t)
          ? { [`Set(${t.size})`]: [...t.values()].map((e) => ae(e)) }
          : O(t)
            ? ae(t)
            : !b(t) || S(t) || G(t)
              ? t
              : String(t),
  ae = (e, t = '') => {
    var n;
    return O(e) ? `Symbol(${null != (n = e.description) ? n : t})` : e;
  },
  se = 'd',
  ce = 'onShow',
  ue = 'onHide',
  le = 'onLaunch',
  de = 'onError',
  pe = 'onThemeChange',
  he = 'onPageNotFound',
  fe = 'onUnhandledRejection',
  ge = 'onLoad',
  _e = 'onReady',
  ve = 'onUnload',
  me = 'onInit',
  ye = 'onSaveExitState',
  Ie = 'onResize',
  Me = 'onBackPress',
  Ce = 'onPageScroll',
  Te = 'onTabItemTap',
  Ee = 'onReachBottom',
  De = 'onPullDownRefresh',
  Se = 'onShareTimeline',
  ke = 'onAddToFavorites',
  Re = 'onShareAppMessage',
  Le = 'onNavigationBarButtonTap',
  Ae = 'onNavigationBarSearchInputClicked',
  Oe = 'onNavigationBarSearchInputChanged',
  be = 'onNavigationBarSearchInputConfirmed',
  Ne = 'onNavigationBarSearchInputFocusChanged',
  Pe = /:/g;
const we = (e, t) => {
  let n;
  for (let i = 0; i < e.length; i++) n = e[i](t);
  return n;
};
function Ue(e, t = null) {
  let n;
  return (...i) => (e && ((n = e.apply(t, i)), (e = null)), n);
}
function Ge(e, t) {
  if (!A(t)) return;
  const n = (t = t.replace(/\[(\d+)\]/g, '.$1')).split('.');
  let i = n[0];
  return e || (e = {}), 1 === n.length ? e[i] : Ge(e[i], n.slice(1).join('.'));
}
function xe(e) {
  let t = {};
  return (
    G(e) &&
      Object.keys(e)
        .sort()
        .forEach((n) => {
          const i = n;
          t[i] = e[i];
        }),
    Object.keys(t) ? t : e
  );
}
const Fe = encodeURIComponent;
function qe(e, t = Fe) {
  const n = e
    ? Object.keys(e)
        .map((n) => {
          let i = e[n];
          return (
            void 0 === typeof i || null === i
              ? (i = '')
              : G(i) && (i = JSON.stringify(i)),
            t(n) + '=' + t(i)
          );
        })
        .filter((e) => e.length > 0)
        .join('&')
    : null;
  return n ? `?${n}` : '';
}
const Ve = [
  me,
  ge,
  ce,
  ue,
  ve,
  Me,
  Ce,
  Te,
  Ee,
  De,
  Se,
  Re,
  ke,
  ye,
  Le,
  Ae,
  Oe,
  be,
  Ne,
];
const Be = [
    ce,
    ue,
    le,
    de,
    pe,
    he,
    fe,
    'onExit',
    me,
    ge,
    _e,
    ve,
    Ie,
    Me,
    Ce,
    Te,
    Ee,
    De,
    Se,
    ke,
    Re,
    ye,
    Le,
    Ae,
    Oe,
    be,
    Ne,
  ],
  He = (() => ({
    onPageScroll: 1,
    onShareAppMessage: 2,
    onShareTimeline: 4,
  }))();
function je(e, t, n = !0) {
  return !(n && !L(t)) && (Be.indexOf(e) > -1 || 0 === e.indexOf('on'));
}
let Ke;
const We = [];
const ze = Ue((e, t) => {
    if (L(e._component.onError)) return t(e);
  }),
  $e = function () {};
$e.prototype = {
  on: function (e, t, n) {
    var i = this.e || (this.e = {});
    return (i[e] || (i[e] = [])).push({ fn: t, ctx: n }), this;
  },
  once: function (e, t, n) {
    var i = this;
    function o() {
      i.off(e, o), t.apply(n, arguments);
    }
    return (o._ = t), this.on(e, o, n);
  },
  emit: function (e) {
    for (
      var t = [].slice.call(arguments, 1),
        n = ((this.e || (this.e = {}))[e] || []).slice(),
        i = 0,
        o = n.length;
      i < o;
      i++
    )
      n[i].fn.apply(n[i].ctx, t);
    return this;
  },
  off: function (e, t) {
    var n = this.e || (this.e = {}),
      i = n[e],
      o = [];
    if (i && t) {
      for (var r = i.length - 1; r >= 0; r--)
        if (i[r].fn === t || i[r].fn._ === t) {
          i.splice(r, 1);
          break;
        }
      o = i;
    }
    return o.length ? (n[e] = o) : delete n[e], this;
  },
};
var Ye = $e;
const Je = ['{', '}'];
const Xe = /^(?:\d)+/,
  Ze = /^(?:\w)+/;
const Qe = 'zh-Hans',
  et = 'zh-Hant',
  nt = 'en',
  it = 'fr',
  ot = 'es',
  rt = Object.prototype.hasOwnProperty,
  at = (e, t) => rt.call(e, t),
  st = new (class {
    constructor() {
      this._caches = Object.create(null);
    }
    interpolate(e, t, n = Je) {
      if (!t) return [e];
      let i = this._caches[e];
      return (
        i ||
          ((i = (function (e, [t, n]) {
            const i = [];
            let o = 0,
              r = '';
            for (; o < e.length; ) {
              let a = e[o++];
              if (a === t) {
                r && i.push({ type: 'text', value: r }), (r = '');
                let t = '';
                for (a = e[o++]; void 0 !== a && a !== n; )
                  (t += a), (a = e[o++]);
                const s = a === n,
                  c = Xe.test(t)
                    ? 'list'
                    : s && Ze.test(t)
                      ? 'named'
                      : 'unknown';
                i.push({ value: t, type: c });
              } else r += a;
            }
            return r && i.push({ type: 'text', value: r }), i;
          })(e, n)),
          (this._caches[e] = i)),
        (function (e, t) {
          const n = [];
          let i = 0;
          const o = Array.isArray(t)
            ? 'list'
            : ((r = t),
              null !== r && 'object' == typeof r ? 'named' : 'unknown');
          var r;
          if ('unknown' === o) return n;
          for (; i < e.length; ) {
            const r = e[i];
            switch (r.type) {
              case 'text':
                n.push(r.value);
                break;
              case 'list':
                n.push(t[parseInt(r.value, 10)]);
                break;
              case 'named':
                'named' === o && n.push(t[r.value]);
            }
            i++;
          }
          return n;
        })(i, t)
      );
    }
  })();
function ct(e, t) {
  if (!e) return;
  if (((e = e.trim().replace(/_/g, '-')), t && t[e])) return e;
  if ('chinese' === (e = e.toLowerCase())) return Qe;
  if (0 === e.indexOf('zh'))
    return e.indexOf('-hans') > -1
      ? Qe
      : e.indexOf('-hant') > -1
        ? et
        : ((n = e),
          ['-tw', '-hk', '-mo', '-cht'].find((e) => -1 !== n.indexOf(e))
            ? et
            : Qe);
  var n;
  let i = [nt, it, ot];
  t && Object.keys(t).length > 0 && (i = Object.keys(t));
  const o = (function (e, t) {
    return t.find((t) => 0 === e.indexOf(t));
  })(e, i);
  return o || void 0;
}
class ut {
  constructor({
    locale: e,
    fallbackLocale: t,
    messages: n,
    watcher: i,
    formater: o,
  }) {
    (this.locale = nt),
      (this.fallbackLocale = nt),
      (this.message = {}),
      (this.messages = {}),
      (this.watchers = []),
      t && (this.fallbackLocale = t),
      (this.formater = o || st),
      (this.messages = n || {}),
      this.setLocale(e || nt),
      i && this.watchLocale(i);
  }
  setLocale(e) {
    const t = this.locale;
    (this.locale = ct(e, this.messages) || this.fallbackLocale),
      this.messages[this.locale] || (this.messages[this.locale] = {}),
      (this.message = this.messages[this.locale]),
      t !== this.locale &&
        this.watchers.forEach((e) => {
          e(this.locale, t);
        });
  }
  getLocale() {
    return this.locale;
  }
  watchLocale(e) {
    const t = this.watchers.push(e) - 1;
    return () => {
      this.watchers.splice(t, 1);
    };
  }
  add(e, t, n = !0) {
    const i = this.messages[e];
    i
      ? n
        ? Object.assign(i, t)
        : Object.keys(t).forEach((e) => {
            at(i, e) || (i[e] = t[e]);
          })
      : (this.messages[e] = t);
  }
  f(e, t, n) {
    return this.formater.interpolate(e, t, n).join('');
  }
  t(e, t, n) {
    let i = this.message;
    return (
      'string' == typeof t
        ? (t = ct(t, this.messages)) && (i = this.messages[t])
        : (n = t),
      at(i, e)
        ? this.formater.interpolate(i[e], n).join('')
        : (console.warn(
            `Cannot translate the value of keypath ${e}. Use the value of keypath as default.`
          ),
          e)
    );
  }
}
function lt(e) {
  return function () {
    try {
      return e.apply(e, arguments);
    } catch (sc) {
      console.error(sc);
    }
  };
}
let dt = 1;
const pt = {};
function ht(e, t, n) {
  if ('number' == typeof e) {
    const i = pt[e];
    if (i) return i.keepAlive || delete pt[e], i.callback(t, n);
  }
  return t;
}
const ft = 'success',
  gt = 'fail',
  _t = 'complete';
function vt(e, t = {}, { beforeAll: n, beforeSuccess: i } = {}) {
  G(t) || (t = {});
  const {
      success: o,
      fail: r,
      complete: a,
    } = (function (e) {
      const t = {};
      for (const n in e) {
        const i = e[n];
        L(i) && ((t[n] = lt(i)), delete e[n]);
      }
      return t;
    })(t),
    s = L(o),
    c = L(r),
    u = L(a),
    l = dt++;
  return (
    (function (e, t, n, i = !1) {
      pt[e] = { name: t, keepAlive: i, callback: n };
    })(l, e, (l) => {
      ((l = l || {}).errMsg = (function (e, t) {
        return e && -1 !== e.indexOf(':fail')
          ? t + e.substring(e.indexOf(':fail'))
          : t + ':ok';
      })(l.errMsg, e)),
        L(n) && n(l),
        l.errMsg === e + ':ok' ? (L(i) && i(l, t), s && o(l)) : c && r(l),
        u && a(l);
    }),
    l
  );
}
const mt = 'success',
  yt = 'fail',
  It = 'complete',
  Mt = {},
  Ct = {};
function Tt(e, t) {
  return function (n) {
    return e(n, t) || n;
  };
}
function Et(e, t, n) {
  let i = !1;
  for (let o = 0; o < e.length; o++) {
    const r = e[o];
    if (i) i = Promise.resolve(Tt(r, n));
    else {
      const e = r(t, n);
      if ((N(e) && (i = Promise.resolve(e)), !1 === e))
        return { then() {}, catch() {} };
    }
  }
  return i || { then: (e) => e(t), catch() {} };
}
function Dt(e, t = {}) {
  return (
    [mt, yt, It].forEach((n) => {
      const i = e[n];
      if (!S(i)) return;
      const o = t[n];
      t[n] = function (e) {
        Et(i, e, t).then((e) => (L(o) && o(e)) || e);
      };
    }),
    t
  );
}
function St(e, t) {
  const n = [];
  S(Mt.returnValue) && n.push(...Mt.returnValue);
  const i = Ct[e];
  return (
    i && S(i.returnValue) && n.push(...i.returnValue),
    n.forEach((e) => {
      t = e(t) || t;
    }),
    t
  );
}
function kt(e) {
  const t = Object.create(null);
  Object.keys(Mt).forEach((e) => {
    'returnValue' !== e && (t[e] = Mt[e].slice());
  });
  const n = Ct[e];
  return (
    n &&
      Object.keys(n).forEach((e) => {
        'returnValue' !== e && (t[e] = (t[e] || []).concat(n[e]));
      }),
    t
  );
}
function Rt(e, t, n, i) {
  const o = kt(e);
  if (o && Object.keys(o).length) {
    if (S(o.invoke)) {
      return Et(o.invoke, n).then((n) => t(Dt(kt(e), n), ...i));
    }
    return t(Dt(o, n), ...i);
  }
  return t(n, ...i);
}
function Lt(e, t) {
  return (n = {}, ...i) =>
    (function (e) {
      return !(!G(e) || ![ft, gt, _t].find((t) => L(e[t])));
    })(n)
      ? St(e, Rt(e, t, n, i))
      : St(
          e,
          new Promise((o, r) => {
            Rt(e, t, C(n, { success: o, fail: r }), i);
          })
        );
}
function At(e, t, n, i = {}) {
  const o = t + ':fail' + (n ? ' ' + n : '');
  return delete i.errCode, ht(e, C({ errMsg: o }, i));
}
function Ot(e, t, n, i) {
  const o = (function (e, t) {
    e[0];
  })(t);
  if (o) return o;
}
function bt(e, t, n, i) {
  return (n) => {
    const o = vt(e, n, i),
      r = Ot(0, [n]);
    return r
      ? At(o, e, r)
      : t(n, {
          resolve: (t) =>
            (function (e, t, n) {
              return ht(e, C(n || {}, { errMsg: t + ':ok' }));
            })(o, e, t),
          reject: (t, n) =>
            At(
              o,
              e,
              (function (e) {
                return !e || A(e)
                  ? e
                  : e.stack
                    ? (console.error(e.message + '\n' + e.stack), e.message)
                    : e;
              })(t),
              n
            ),
        });
  };
}
function Nt(e, t, n, i) {
  return (function (e, t, n, i) {
    return (...e) => {
      const n = Ot(0, e);
      if (n) throw new Error(n);
      return t.apply(null, e);
    };
  })(0, t);
}
let Pt = !1,
  wt = 0,
  Ut = 0;
function Gt() {
  const { platform: e, pixelRatio: t, windowWidth: n } = wx.getSystemInfoSync();
  (wt = n), (Ut = t), (Pt = 'ios' === e);
}
const xt = Nt(0, (e, t) => {
  if ((0 === wt && Gt(), 0 === (e = Number(e)))) return 0;
  let n = (e / 750) * (t || wt);
  return (
    n < 0 && (n = -n),
    (n = Math.floor(n + 1e-4)),
    0 === n && (n = 1 !== Ut && Pt ? 0.5 : 1),
    e < 0 ? -n : n
  );
});
function Ft(e, t) {
  Object.keys(t).forEach((n) => {
    L(t[n]) &&
      (e[n] = (function (e, t) {
        const n = t ? (e ? e.concat(t) : S(t) ? t : [t]) : e;
        return n
          ? (function (e) {
              const t = [];
              for (let n = 0; n < e.length; n++)
                -1 === t.indexOf(e[n]) && t.push(e[n]);
              return t;
            })(n)
          : n;
      })(e[n], t[n]));
  });
}
function qt(e, t) {
  e &&
    t &&
    Object.keys(t).forEach((n) => {
      const i = e[n],
        o = t[n];
      S(i) && L(o) && T(i, o);
    });
}
const Vt = Nt(0, (e, t) => {
    A(e) && G(t) ? Ft(Ct[e] || (Ct[e] = {}), t) : G(e) && Ft(Mt, e);
  }),
  Bt = Nt(0, (e, t) => {
    A(e) ? (G(t) ? qt(Ct[e], t) : delete Ct[e]) : G(e) && qt(Mt, e);
  }),
  Ht = new Ye(),
  jt = Nt(0, (e, t) => (Ht.on(e, t), () => Ht.off(e, t))),
  Kt = Nt(0, (e, t) => (Ht.once(e, t), () => Ht.off(e, t))),
  Wt = Nt(0, (e, t) => {
    e ? (S(e) || (e = [e]), e.forEach((e) => Ht.off(e, t))) : (Ht.e = {});
  }),
  zt = Nt(0, (e, ...t) => {
    Ht.emit(e, ...t);
  });
let $t, Yt, Jt;
function Xt(e) {
  try {
    return JSON.parse(e);
  } catch (sc) {}
  return e;
}
const Zt = [];
function Qt(e, t) {
  Zt.forEach((n) => {
    n(e, t);
  }),
    (Zt.length = 0);
}
const en = Lt(
  (tn = 'getPushClientId'),
  (function (e, t, n, i) {
    return bt(e, t, 0, i);
  })(
    tn,
    (e, { resolve: t, reject: n }) => {
      Promise.resolve().then(() => {
        void 0 === Jt &&
          ((Jt = !1), ($t = ''), (Yt = 'uniPush is not enabled')),
          Zt.push((e, i) => {
            e ? t({ cid: e }) : n(i);
          }),
          void 0 !== $t && Qt($t, Yt);
      });
    },
    0,
    nn
  )
);
var tn, nn;
const on = [],
  rn =
    /^\$|getLocale|setLocale|sendNativeEvent|restoreGlobal|requireGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64|getDeviceInfo|getAppBaseInfo|getWindowInfo|getSystemSetting|getAppAuthorizeSetting/,
  an = /^create|Manager$/,
  sn = ['createBLEConnection'],
  cn = ['createBLEConnection'],
  un = /^on|^off/;
function ln(e) {
  return an.test(e) && -1 === sn.indexOf(e);
}
function dn(e) {
  return rn.test(e) && -1 === cn.indexOf(e);
}
function pn(e) {
  return !(
    ln(e) ||
    dn(e) ||
    (function (e) {
      return un.test(e) && 'onPush' !== e;
    })(e)
  );
}
function hn(e, t) {
  return pn(e) && L(t)
    ? function (n = {}, ...i) {
        return L(n.success) || L(n.fail) || L(n.complete)
          ? St(e, Rt(e, t, n, i))
          : St(
              e,
              new Promise((o, r) => {
                Rt(e, t, C({}, n, { success: o, fail: r }), i);
              })
            );
      }
    : t;
}
Promise.prototype.finally ||
  (Promise.prototype.finally = function (e) {
    const t = this.constructor;
    return this.then(
      (n) => t.resolve(e && e()).then(() => n),
      (n) =>
        t.resolve(e && e()).then(() => {
          throw n;
        })
    );
  });
const fn = ['success', 'fail', 'cancel', 'complete'];
const gn = () => {
    const e = L(getApp) && getApp({ allowDefault: !0 });
    return e && e.$vm
      ? e.$vm.$locale
      : ct(wx.getSystemInfoSync().language) || nt;
  },
  _n = [];
'undefined' != typeof global && (global.getLocale = gn);
const vn = '__DC_STAT_UUID';
let mn;
function yn(e = wx) {
  return function (t, n) {
    (mn = mn || e.getStorageSync(vn)),
      mn ||
        ((mn = Date.now() + '' + Math.floor(1e7 * Math.random())),
        wx.setStorage({ key: vn, data: mn })),
      (n.deviceId = mn);
  };
}
function In(e, t) {
  if (e.safeArea) {
    const n = e.safeArea;
    t.safeAreaInsets = {
      top: n.top,
      left: n.left,
      right: e.windowWidth - n.right,
      bottom: e.screenHeight - n.bottom,
    };
  }
}
function Mn(e, t) {
  let n = e.deviceType || 'phone';
  {
    const e = { ipad: 'pad', windows: 'pc', mac: 'pc' },
      i = Object.keys(e),
      o = t.toLocaleLowerCase();
    for (let t = 0; t < i.length; t++) {
      const r = i[t];
      if (-1 !== o.indexOf(r)) {
        n = e[r];
        break;
      }
    }
  }
  return n;
}
function Cn(e) {
  let t = e;
  return t && (t = t.toLocaleLowerCase()), t;
}
function Tn(e) {
  return gn ? gn() : e;
}
function En(e) {
  let t = e.hostName || 'WeChat';
  return (
    e.environment
      ? (t = e.environment)
      : e.host && e.host.env && (t = e.host.env),
    t
  );
}
const Dn = {
    returnValue: (e, t) => {
      In(e, t),
        yn()(e, t),
        (function (e, t) {
          const {
            brand: n = '',
            model: i = '',
            system: o = '',
            language: r = '',
            theme: a,
            version: s,
            platform: c,
            fontSizeSetting: u,
            SDKVersion: l,
            pixelRatio: d,
            deviceOrientation: p,
          } = e;
          let h = '',
            f = '';
          (h = o.split(' ')[0] || ''), (f = o.split(' ')[1] || '');
          let g = s,
            _ = Mn(e, i),
            v = Cn(n),
            m = En(e),
            y = p,
            I = d,
            M = l;
          const T = r.replace(/_/g, '-'),
            E = {
              appId: '',
              appName: '',
              appVersion: '1.0.0',
              appVersionCode: '100',
              appLanguage: Tn(T),
              uniCompileVersion: '4.19',
              uniRuntimeVersion: '4.19',
              uniPlatform: 'mp-weixin',
              deviceBrand: v,
              deviceModel: i,
              deviceType: _,
              devicePixelRatio: I,
              deviceOrientation: y,
              osName: h.toLocaleLowerCase(),
              osVersion: f,
              hostTheme: a,
              hostVersion: g,
              hostLanguage: T,
              hostName: m,
              hostSDKVersion: M,
              hostFontSizeSetting: u,
              windowTop: 0,
              windowBottom: 0,
              osLanguage: void 0,
              osTheme: void 0,
              ua: void 0,
              hostPackageName: void 0,
              browserName: void 0,
              browserVersion: void 0,
            };
          C(t, E);
        })(e, t);
    },
  },
  Sn = Dn,
  kn = {
    args(e, t) {
      let n = parseInt(e.current);
      if (isNaN(n)) return;
      const i = e.urls;
      if (!S(i)) return;
      const o = i.length;
      return o
        ? (n < 0 ? (n = 0) : n >= o && (n = o - 1),
          n > 0
            ? ((t.current = i[n]),
              (t.urls = i.filter((e, t) => !(t < n) || e !== i[n])))
            : (t.current = i[0]),
          { indicator: !1, loop: !1 })
        : void 0;
    },
  },
  Rn = {
    args(e, t) {
      t.alertText = e.title;
    },
  },
  Ln = {
    returnValue: (e, t) => {
      const { brand: n, model: i } = e;
      let o = Mn(e, i),
        r = Cn(n);
      yn()(e, t),
        (t = xe(C(t, { deviceType: o, deviceBrand: r, deviceModel: i })));
    },
  },
  An = {
    returnValue: (e, t) => {
      const { version: n, language: i, SDKVersion: o, theme: r } = e;
      let a = En(e),
        s = i.replace(/_/g, '-');
      t = xe(
        C(t, {
          hostVersion: n,
          hostLanguage: s,
          hostName: a,
          hostSDKVersion: o,
          hostTheme: r,
          appId: '',
          appName: '',
          appVersion: '1.0.0',
          appVersionCode: '100',
          appLanguage: Tn(s),
        })
      );
    },
  },
  On = {
    returnValue: (e, t) => {
      In(e, t), (t = xe(C(t, { windowTop: 0, windowBottom: 0 })));
    },
  },
  bn = {
    $on: jt,
    $off: Wt,
    $once: Kt,
    $emit: zt,
    upx2px: xt,
    interceptors: {},
    addInterceptor: Vt,
    removeInterceptor: Bt,
    onCreateVueApp: function (e) {
      if (Ke) return e(Ke);
      We.push(e);
    },
    invokeCreateVueAppHook: function (e) {
      (Ke = e), We.forEach((t) => t(e));
    },
    getLocale: gn,
    setLocale: (e) => {
      const t = L(getApp) && getApp();
      if (!t) return !1;
      return (
        t.$vm.$locale !== e &&
        ((t.$vm.$locale = e), _n.forEach((t) => t({ locale: e })), !0)
      );
    },
    onLocaleChange: (e) => {
      -1 === _n.indexOf(e) && _n.push(e);
    },
    getPushClientId: en,
    onPushMessage: (e) => {
      -1 === on.indexOf(e) && on.push(e);
    },
    offPushMessage: (e) => {
      if (e) {
        const t = on.indexOf(e);
        t > -1 && on.splice(t, 1);
      } else on.length = 0;
    },
    invokePushCallback: function (e) {
      if ('enabled' === e.type) Jt = !0;
      else if ('clientId' === e.type)
        ($t = e.cid), (Yt = e.errMsg), Qt($t, e.errMsg);
      else if ('pushMsg' === e.type) {
        const t = { type: 'receive', data: Xt(e.message) };
        for (let e = 0; e < on.length; e++) {
          if (((0, on[e])(t), t.stopped)) break;
        }
      } else
        'click' === e.type &&
          on.forEach((t) => {
            t({ type: 'click', data: Xt(e.message) });
          });
    },
  };
const Nn = [
    'qy',
    'env',
    'error',
    'version',
    'lanDebug',
    'cloud',
    'serviceMarket',
    'router',
    'worklet',
    '__webpack_require_UNI_MP_PLUGIN__',
  ],
  Pn = ['lanDebug', 'router', 'worklet'],
  wn = wx.getLaunchOptionsSync ? wx.getLaunchOptionsSync() : null;
function Un(e) {
  return (
    (!wn || 1154 !== wn.scene || !Pn.includes(e)) &&
    (Nn.indexOf(e) > -1 || 'function' == typeof wx[e])
  );
}
function Gn() {
  const e = {};
  for (const t in wx) Un(t) && (e[t] = wx[t]);
  return (
    'undefined' != typeof globalThis &&
      'undefined' == typeof requireMiniProgram &&
      (globalThis.wx = e),
    e
  );
}
const xn = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'],
  Fn =
    ((qn = {
      oauth: ['weixin'],
      share: ['weixin'],
      payment: ['wxpay'],
      push: ['weixin'],
    }),
    function ({ service: e, success: t, fail: n, complete: i }) {
      let o;
      qn[e]
        ? ((o = { errMsg: 'getProvider:ok', service: e, provider: qn[e] }),
          L(t) && t(o))
        : ((o = { errMsg: 'getProvider:fail:服务[' + e + ']不存在' }),
          L(n) && n(o)),
        L(i) && i(o);
    });
var qn;
const Vn = Gn();
let Bn = Vn.getAppBaseInfo && Vn.getAppBaseInfo();
Bn || (Bn = Vn.getSystemInfoSync());
const Hn = Bn ? Bn.host : null,
  jn =
    Hn && 'SAAASDK' === Hn.env
      ? Vn.miniapp.shareVideoMessage
      : Vn.shareVideoMessage;
var Kn = Object.freeze({
  __proto__: null,
  createSelectorQuery: function () {
    const e = Vn.createSelectorQuery(),
      t = e.in;
    return (
      (e.in = function (e) {
        return t.call(
          this,
          (function (e) {
            const t = Object.create(null);
            return (
              xn.forEach((n) => {
                t[n] = e[n];
              }),
              t
            );
          })(e)
        );
      }),
      e
    );
  },
  getProvider: Fn,
  shareVideoMessage: jn,
});
const Wn = {
  args(e, t) {
    e.compressedHeight &&
      !t.compressHeight &&
      (t.compressHeight = e.compressedHeight),
      e.compressedWidth &&
        !t.compressWidth &&
        (t.compressWidth = e.compressedWidth);
  },
};
var zn = Object.freeze({
  __proto__: null,
  compressImage: Wn,
  getAppAuthorizeSetting: {
    returnValue: function (e, t) {
      const { locationReducedAccuracy: n } = e;
      (t.locationAccuracy = 'unsupported'),
        !0 === n
          ? (t.locationAccuracy = 'reduced')
          : !1 === n && (t.locationAccuracy = 'full');
    },
  },
  getAppBaseInfo: An,
  getDeviceInfo: Ln,
  getSystemInfo: Dn,
  getSystemInfoSync: Sn,
  getWindowInfo: On,
  previewImage: kn,
  redirectTo: {},
  showActionSheet: Rn,
});
const $n = Gn();
var Yn = (function (e, t, n = wx) {
  const i = (function (e) {
    function t(e, t, n) {
      return function (o) {
        return t(i(e, o, n));
      };
    }
    function n(e, n, i = {}, o = {}, r = !1) {
      if (G(n)) {
        const a = !0 === r ? n : {};
        L(i) && (i = i(n, a) || {});
        for (const s in n)
          if (D(i, s)) {
            let t = i[s];
            L(t) && (t = t(n[s], n, a)),
              t
                ? A(t)
                  ? (a[t] = n[s])
                  : G(t) && (a[t.name ? t.name : s] = t.value)
                : console.warn(`微信小程序 ${e} 暂不支持 ${s}`);
          } else if (-1 !== fn.indexOf(s)) {
            const i = n[s];
            L(i) && (a[s] = t(e, i, o));
          } else r || D(a, s) || (a[s] = n[s]);
        return a;
      }
      return L(n) && (n = t(e, n, o)), n;
    }
    function i(t, i, o, r = !1) {
      return L(e.returnValue) && (i = e.returnValue(t, i)), n(t, i, o, {}, r);
    }
    return function (t, o) {
      if (!D(e, t)) return o;
      const r = e[t];
      return r
        ? function (e, o) {
            let a = r;
            L(r) && (a = r(e));
            const s = [(e = n(t, e, a.args, a.returnValue))];
            void 0 !== o && s.push(o);
            const c = wx[a.name || t].apply(wx, s);
            return dn(t) ? i(t, c, a.returnValue, ln(t)) : c;
          }
        : function () {
            console.error(`微信小程序 暂不支持${t}`);
          };
    };
  })(t);
  return new Proxy(
    {},
    {
      get: (t, o) =>
        D(t, o)
          ? t[o]
          : D(e, o)
            ? hn(o, e[o])
            : D(bn, o)
              ? hn(o, bn[o])
              : hn(o, i(o, n[o])),
    }
  );
})(Kn, zn, $n);
new Set(
  Object.getOwnPropertyNames(Symbol)
    .filter((e) => 'arguments' !== e && 'caller' !== e)
    .map((e) => Symbol[e])
    .filter(O)
);
{
  const e =
      Z ||
      (Z =
        'undefined' != typeof globalThis
          ? globalThis
          : 'undefined' != typeof self
            ? self
            : 'undefined' != typeof window
              ? window
              : 'undefined' != typeof global
                ? global
                : {}),
    t = (t, n) => {
      let i;
      return (
        (i = e[t]) || (i = e[t] = []),
        i.push(n),
        (e) => {
          i.length > 1 ? i.forEach((t) => t(e)) : i[0](e);
        }
      );
    };
  t('__VUE_INSTANCE_SETTERS__', (e) => e), t('__VUE_SSR_SETTERS__', (e) => e);
}
let Jn, Xn;
class Zn {
  constructor(e = !1) {
    (this.detached = e),
      (this._active = !0),
      (this.effects = []),
      (this.cleanups = []),
      (this.parent = Jn),
      !e && Jn && (this.index = (Jn.scopes || (Jn.scopes = [])).push(this) - 1);
  }
  get active() {
    return this._active;
  }
  run(e) {
    if (this._active) {
      const t = Jn;
      try {
        return (Jn = this), e();
      } finally {
        Jn = t;
      }
    }
  }
  on() {
    Jn = this;
  }
  off() {
    Jn = this.parent;
  }
  stop(e) {
    if (this._active) {
      let t, n;
      for (t = 0, n = this.effects.length; t < n; t++) this.effects[t].stop();
      for (t = 0, n = this.cleanups.length; t < n; t++) this.cleanups[t]();
      if (this.scopes)
        for (t = 0, n = this.scopes.length; t < n; t++) this.scopes[t].stop(!0);
      if (!this.detached && this.parent && !e) {
        const e = this.parent.scopes.pop();
        e &&
          e !== this &&
          ((this.parent.scopes[this.index] = e), (e.index = this.index));
      }
      (this.parent = void 0), (this._active = !1);
    }
  }
}
function Qn(e) {
  return new Zn(e);
}
function ei() {
  return Jn;
}
class ti {
  constructor(e, t, n, i) {
    (this.fn = e),
      (this.trigger = t),
      (this.scheduler = n),
      (this.active = !0),
      (this.deps = []),
      (this._dirtyLevel = 4),
      (this._trackId = 0),
      (this._runnings = 0),
      (this._shouldSchedule = !1),
      (this._depsLength = 0),
      (function (e, t = Jn) {
        t && t.active && t.effects.push(e);
      })(this, i);
  }
  get dirty() {
    if (2 === this._dirtyLevel || 3 === this._dirtyLevel) {
      (this._dirtyLevel = 1), ci();
      for (let e = 0; e < this._depsLength; e++) {
        const t = this.deps[e];
        if (t.computed && (t.computed.value, this._dirtyLevel >= 4)) break;
      }
      1 === this._dirtyLevel && (this._dirtyLevel = 0), ui();
    }
    return this._dirtyLevel >= 4;
  }
  set dirty(e) {
    this._dirtyLevel = e ? 4 : 0;
  }
  run() {
    if (((this._dirtyLevel = 0), !this.active)) return this.fn();
    let e = ri,
      t = Xn;
    try {
      return (ri = !0), (Xn = this), this._runnings++, ni(this), this.fn();
    } finally {
      ii(this), this._runnings--, (Xn = t), (ri = e);
    }
  }
  stop() {
    var e;
    this.active &&
      (ni(this),
      ii(this),
      null == (e = this.onStop) || e.call(this),
      (this.active = !1));
  }
}
function ni(e) {
  e._trackId++, (e._depsLength = 0);
}
function ii(e) {
  if (e.deps.length > e._depsLength) {
    for (let t = e._depsLength; t < e.deps.length; t++) oi(e.deps[t], e);
    e.deps.length = e._depsLength;
  }
}
function oi(e, t) {
  const n = e.get(t);
  void 0 !== n &&
    t._trackId !== n &&
    (e.delete(t), 0 === e.size && e.cleanup());
}
let ri = !0,
  ai = 0;
const si = [];
function ci() {
  si.push(ri), (ri = !1);
}
function ui() {
  const e = si.pop();
  ri = void 0 === e || e;
}
function li() {
  ai++;
}
function di() {
  for (ai--; !ai && hi.length; ) hi.shift()();
}
function pi(e, t, n) {
  if (t.get(e) !== e._trackId) {
    t.set(e, e._trackId);
    const n = e.deps[e._depsLength];
    n !== t ? (n && oi(n, e), (e.deps[e._depsLength++] = t)) : e._depsLength++;
  }
}
const hi = [];
function fi(e, t, n) {
  li();
  for (const i of e.keys()) {
    let n;
    i._dirtyLevel < t &&
      (null != n ? n : (n = e.get(i) === i._trackId)) &&
      (i._shouldSchedule || (i._shouldSchedule = 0 === i._dirtyLevel),
      (i._dirtyLevel = t)),
      i._shouldSchedule &&
        (null != n ? n : (n = e.get(i) === i._trackId)) &&
        (i.trigger(),
        (i._runnings && !i.allowRecurse) ||
          2 === i._dirtyLevel ||
          ((i._shouldSchedule = !1), i.scheduler && hi.push(i.scheduler)));
  }
  di();
}
const gi = (e, t) => {
    const n = new Map();
    return (n.cleanup = e), (n.computed = t), n;
  },
  _i = new WeakMap(),
  vi = Symbol(''),
  mi = Symbol('');
function yi(e, t, n) {
  if (ri && Xn) {
    let t = _i.get(e);
    t || _i.set(e, (t = new Map()));
    let i = t.get(n);
    i || t.set(n, (i = gi(() => t.delete(n)))), pi(Xn, i);
  }
}
function Ii(e, t, n, i, o, r) {
  const a = _i.get(e);
  if (!a) return;
  let s = [];
  if ('clear' === t) s = [...a.values()];
  else if ('length' === n && S(e)) {
    const e = Number(i);
    a.forEach((t, n) => {
      ('length' === n || (!O(n) && n >= e)) && s.push(t);
    });
  } else
    switch ((void 0 !== n && s.push(a.get(n)), t)) {
      case 'add':
        S(e)
          ? x(n) && s.push(a.get('length'))
          : (s.push(a.get(vi)), k(e) && s.push(a.get(mi)));
        break;
      case 'delete':
        S(e) || (s.push(a.get(vi)), k(e) && s.push(a.get(mi)));
        break;
      case 'set':
        k(e) && s.push(a.get(vi));
    }
  li();
  for (const c of s) c && fi(c, 4);
  di();
}
const Mi = g('__proto__,__v_isRef,__isVue'),
  Ci = new Set(
    Object.getOwnPropertyNames(Symbol)
      .filter((e) => 'arguments' !== e && 'caller' !== e)
      .map((e) => Symbol[e])
      .filter(O)
  ),
  Ti = Ei();
function Ei() {
  const e = {};
  return (
    ['includes', 'indexOf', 'lastIndexOf'].forEach((t) => {
      e[t] = function (...e) {
        const n = lo(this);
        for (let t = 0, o = this.length; t < o; t++) yi(n, 0, t + '');
        const i = n[t](...e);
        return -1 === i || !1 === i ? n[t](...e.map(lo)) : i;
      };
    }),
    ['push', 'pop', 'shift', 'unshift', 'splice'].forEach((t) => {
      e[t] = function (...e) {
        ci(), li();
        const n = lo(this)[t].apply(this, e);
        return di(), ui(), n;
      };
    }),
    e
  );
}
function Di(e) {
  const t = lo(this);
  return yi(t, 0, e), t.hasOwnProperty(e);
}
class Si {
  constructor(e = !1, t = !1) {
    (this._isReadonly = e), (this._isShallow = t);
  }
  get(e, t, n) {
    const i = this._isReadonly,
      o = this._isShallow;
    if ('__v_isReactive' === t) return !i;
    if ('__v_isReadonly' === t) return i;
    if ('__v_isShallow' === t) return o;
    if ('__v_raw' === t)
      return n === (i ? (o ? no : to) : o ? eo : Qi).get(e) ||
        Object.getPrototypeOf(e) === Object.getPrototypeOf(n)
        ? e
        : void 0;
    const r = S(e);
    if (!i) {
      if (r && D(Ti, t)) return Reflect.get(Ti, t, n);
      if ('hasOwnProperty' === t) return Di;
    }
    const a = Reflect.get(e, t, n);
    return (O(t) ? Ci.has(t) : Mi(t))
      ? a
      : (i || yi(e, 0, t),
        o
          ? a
          : mo(a)
            ? r && x(t)
              ? a
              : a.value
            : b(a)
              ? i
                ? ro(a)
                : io(a)
              : a);
  }
}
class ki extends Si {
  constructor(e = !1) {
    super(!1, e);
  }
  set(e, t, n, i) {
    let o = e[t];
    if (!this._isShallow) {
      const t = co(o);
      if (
        (uo(n) || co(n) || ((o = lo(o)), (n = lo(n))), !S(e) && mo(o) && !mo(n))
      )
        return !t && ((o.value = n), !0);
    }
    const r = S(e) && x(t) ? Number(t) < e.length : D(e, t),
      a = Reflect.set(e, t, n, i);
    return (
      e === lo(i) && (r ? z(n, o) && Ii(e, 'set', t, n) : Ii(e, 'add', t, n)), a
    );
  }
  deleteProperty(e, t) {
    const n = D(e, t);
    e[t];
    const i = Reflect.deleteProperty(e, t);
    return i && n && Ii(e, 'delete', t, void 0), i;
  }
  has(e, t) {
    const n = Reflect.has(e, t);
    return (O(t) && Ci.has(t)) || yi(e, 0, t), n;
  }
  ownKeys(e) {
    return yi(e, 0, S(e) ? 'length' : vi), Reflect.ownKeys(e);
  }
}
class Ri extends Si {
  constructor(e = !1) {
    super(!0, e);
  }
  set(e, t) {
    return !0;
  }
  deleteProperty(e, t) {
    return !0;
  }
}
const Li = new ki(),
  Ai = new Ri(),
  Oi = new ki(!0),
  bi = (e) => e,
  Ni = (e) => Reflect.getPrototypeOf(e);
function Pi(e, t, n = !1, i = !1) {
  const o = lo((e = e.__v_raw)),
    r = lo(t);
  n || (z(t, r) && yi(o, 0, t), yi(o, 0, r));
  const { has: a } = Ni(o),
    s = i ? bi : n ? fo : ho;
  return a.call(o, t)
    ? s(e.get(t))
    : a.call(o, r)
      ? s(e.get(r))
      : void (e !== o && e.get(t));
}
function wi(e, t = !1) {
  const n = this.__v_raw,
    i = lo(n),
    o = lo(e);
  return (
    t || (z(e, o) && yi(i, 0, e), yi(i, 0, o)),
    e === o ? n.has(e) : n.has(e) || n.has(o)
  );
}
function Ui(e, t = !1) {
  return (e = e.__v_raw), !t && yi(lo(e), 0, vi), Reflect.get(e, 'size', e);
}
function Gi(e) {
  e = lo(e);
  const t = lo(this);
  return Ni(t).has.call(t, e) || (t.add(e), Ii(t, 'add', e, e)), this;
}
function xi(e, t) {
  t = lo(t);
  const n = lo(this),
    { has: i, get: o } = Ni(n);
  let r = i.call(n, e);
  r || ((e = lo(e)), (r = i.call(n, e)));
  const a = o.call(n, e);
  return (
    n.set(e, t), r ? z(t, a) && Ii(n, 'set', e, t) : Ii(n, 'add', e, t), this
  );
}
function Fi(e) {
  const t = lo(this),
    { has: n, get: i } = Ni(t);
  let o = n.call(t, e);
  o || ((e = lo(e)), (o = n.call(t, e))), i && i.call(t, e);
  const r = t.delete(e);
  return o && Ii(t, 'delete', e, void 0), r;
}
function qi() {
  const e = lo(this),
    t = 0 !== e.size,
    n = e.clear();
  return t && Ii(e, 'clear', void 0, void 0), n;
}
function Vi(e, t) {
  return function (n, i) {
    const o = this,
      r = o.__v_raw,
      a = lo(r),
      s = t ? bi : e ? fo : ho;
    return !e && yi(a, 0, vi), r.forEach((e, t) => n.call(i, s(e), s(t), o));
  };
}
function Bi(e, t, n) {
  return function (...i) {
    const o = this.__v_raw,
      r = lo(o),
      a = k(r),
      s = 'entries' === e || (e === Symbol.iterator && a),
      c = 'keys' === e && a,
      u = o[e](...i),
      l = n ? bi : t ? fo : ho;
    return (
      !t && yi(r, 0, c ? mi : vi),
      {
        next() {
          const { value: e, done: t } = u.next();
          return t
            ? { value: e, done: t }
            : { value: s ? [l(e[0]), l(e[1])] : l(e), done: t };
        },
        [Symbol.iterator]() {
          return this;
        },
      }
    );
  };
}
function Hi(e) {
  return function (...t) {
    return 'delete' !== e && ('clear' === e ? void 0 : this);
  };
}
function ji() {
  const e = {
      get(e) {
        return Pi(this, e);
      },
      get size() {
        return Ui(this);
      },
      has: wi,
      add: Gi,
      set: xi,
      delete: Fi,
      clear: qi,
      forEach: Vi(!1, !1),
    },
    t = {
      get(e) {
        return Pi(this, e, !1, !0);
      },
      get size() {
        return Ui(this);
      },
      has: wi,
      add: Gi,
      set: xi,
      delete: Fi,
      clear: qi,
      forEach: Vi(!1, !0),
    },
    n = {
      get(e) {
        return Pi(this, e, !0);
      },
      get size() {
        return Ui(this, !0);
      },
      has(e) {
        return wi.call(this, e, !0);
      },
      add: Hi('add'),
      set: Hi('set'),
      delete: Hi('delete'),
      clear: Hi('clear'),
      forEach: Vi(!0, !1),
    },
    i = {
      get(e) {
        return Pi(this, e, !0, !0);
      },
      get size() {
        return Ui(this, !0);
      },
      has(e) {
        return wi.call(this, e, !0);
      },
      add: Hi('add'),
      set: Hi('set'),
      delete: Hi('delete'),
      clear: Hi('clear'),
      forEach: Vi(!0, !0),
    };
  return (
    ['keys', 'values', 'entries', Symbol.iterator].forEach((o) => {
      (e[o] = Bi(o, !1, !1)),
        (n[o] = Bi(o, !0, !1)),
        (t[o] = Bi(o, !1, !0)),
        (i[o] = Bi(o, !0, !0));
    }),
    [e, n, t, i]
  );
}
const [Ki, Wi, zi, $i] = ji();
function Yi(e, t) {
  const n = t ? (e ? $i : zi) : e ? Wi : Ki;
  return (t, i, o) =>
    '__v_isReactive' === i
      ? !e
      : '__v_isReadonly' === i
        ? e
        : '__v_raw' === i
          ? t
          : Reflect.get(D(n, i) && i in t ? n : t, i, o);
}
const Ji = { get: Yi(!1, !1) },
  Xi = { get: Yi(!1, !0) },
  Zi = { get: Yi(!0, !1) },
  Qi = new WeakMap(),
  eo = new WeakMap(),
  to = new WeakMap(),
  no = new WeakMap();
function io(e) {
  return co(e) ? e : ao(e, !1, Li, Ji, Qi);
}
function oo(e) {
  return ao(e, !1, Oi, Xi, eo);
}
function ro(e) {
  return ao(e, !0, Ai, Zi, to);
}
function ao(e, t, n, i, o) {
  if (!b(e)) return e;
  if (e.__v_raw && (!t || !e.__v_isReactive)) return e;
  const r = o.get(e);
  if (r) return r;
  const a =
    (s = e).__v_skip || !Object.isExtensible(s)
      ? 0
      : (function (e) {
          switch (e) {
            case 'Object':
            case 'Array':
              return 1;
            case 'Map':
            case 'Set':
            case 'WeakMap':
            case 'WeakSet':
              return 2;
            default:
              return 0;
          }
        })(U(s));
  var s;
  if (0 === a) return e;
  const c = new Proxy(e, 2 === a ? i : n);
  return o.set(e, c), c;
}
function so(e) {
  return co(e) ? so(e.__v_raw) : !(!e || !e.__v_isReactive);
}
function co(e) {
  return !(!e || !e.__v_isReadonly);
}
function uo(e) {
  return !(!e || !e.__v_isShallow);
}
function lo(e) {
  const t = e && e.__v_raw;
  return t ? lo(t) : e;
}
function po(e) {
  return Object.isExtensible(e) && Y(e, '__v_skip', !0), e;
}
const ho = (e) => (b(e) ? io(e) : e),
  fo = (e) => (b(e) ? ro(e) : e);
class go {
  constructor(e, t, n, i) {
    (this.getter = e),
      (this._setter = t),
      (this.dep = void 0),
      (this.__v_isRef = !0),
      (this.__v_isReadonly = !1),
      (this.effect = new ti(
        () => e(this._value),
        () => vo(this, 2 === this.effect._dirtyLevel ? 2 : 3)
      )),
      (this.effect.computed = this),
      (this.effect.active = this._cacheable = !i),
      (this.__v_isReadonly = n);
  }
  get value() {
    const e = lo(this);
    return (
      (e._cacheable && !e.effect.dirty) ||
        !z(e._value, (e._value = e.effect.run())) ||
        vo(e, 4),
      _o(e),
      e.effect._dirtyLevel >= 2 && vo(e, 2),
      e._value
    );
  }
  set value(e) {
    this._setter(e);
  }
  get _dirty() {
    return this.effect.dirty;
  }
  set _dirty(e) {
    this.effect.dirty = e;
  }
}
function _o(e) {
  var t;
  ri &&
    Xn &&
    ((e = lo(e)),
    pi(
      Xn,
      null != (t = e.dep)
        ? t
        : (e.dep = gi(() => (e.dep = void 0), e instanceof go ? e : void 0))
    ));
}
function vo(e, t = 4, n) {
  const i = (e = lo(e)).dep;
  i && fi(i, t);
}
function mo(e) {
  return !(!e || !0 !== e.__v_isRef);
}
function yo(e) {
  return (function (e, t) {
    if (mo(e)) return e;
    return new Io(e, t);
  })(e, !1);
}
class Io {
  constructor(e, t) {
    (this.__v_isShallow = t),
      (this.dep = void 0),
      (this.__v_isRef = !0),
      (this._rawValue = t ? e : lo(e)),
      (this._value = t ? e : ho(e));
  }
  get value() {
    return _o(this), this._value;
  }
  set value(e) {
    const t = this.__v_isShallow || uo(e) || co(e);
    (e = t ? e : lo(e)),
      z(e, this._rawValue) &&
        ((this._rawValue = e), (this._value = t ? e : ho(e)), vo(this, 4));
  }
}
function Mo(e) {
  return mo(e) ? e.value : e;
}
const Co = {
  get: (e, t, n) => Mo(Reflect.get(e, t, n)),
  set: (e, t, n, i) => {
    const o = e[t];
    return mo(o) && !mo(n) ? ((o.value = n), !0) : Reflect.set(e, t, n, i);
  },
};
function To(e) {
  return so(e) ? e : new Proxy(e, Co);
}
function Eo(e) {
  const t = S(e) ? new Array(e.length) : {};
  for (const n in e) t[n] = Ro(e, n);
  return t;
}
class Do {
  constructor(e, t, n) {
    (this._object = e),
      (this._key = t),
      (this._defaultValue = n),
      (this.__v_isRef = !0);
  }
  get value() {
    const e = this._object[this._key];
    return void 0 === e ? this._defaultValue : e;
  }
  set value(e) {
    this._object[this._key] = e;
  }
  get dep() {
    return (
      (e = lo(this._object)),
      (t = this._key),
      null == (n = _i.get(e)) ? void 0 : n.get(t)
    );
    var e, t, n;
  }
}
class So {
  constructor(e) {
    (this._getter = e), (this.__v_isRef = !0), (this.__v_isReadonly = !0);
  }
  get value() {
    return this._getter();
  }
}
function ko(e, t, n) {
  return mo(e)
    ? e
    : L(e)
      ? new So(e)
      : b(e) && arguments.length > 1
        ? Ro(e, t, n)
        : yo(e);
}
function Ro(e, t, n) {
  const i = e[t];
  return mo(i) ? i : new Do(e, t, n);
}
function Lo(e, t, n, i) {
  try {
    return i ? e(...i) : e();
  } catch (o) {
    Oo(o, t, n);
  }
}
function Ao(e, t, n, i) {
  if (L(e)) {
    const o = Lo(e, t, n, i);
    return (
      o &&
        N(o) &&
        o.catch((e) => {
          Oo(e, t, n);
        }),
      o
    );
  }
  const o = [];
  for (let r = 0; r < e.length; r++) o.push(Ao(e[r], t, n, i));
  return o;
}
function Oo(e, t, n, i = !0) {
  t && t.vnode;
  if (t) {
    let i = t.parent;
    const o = t.proxy,
      r = `https://vuejs.org/error-reference/#runtime-${n}`;
    for (; i; ) {
      const t = i.ec;
      if (t)
        for (let n = 0; n < t.length; n++) if (!1 === t[n](e, o, r)) return;
      i = i.parent;
    }
    const a = t.appContext.config.errorHandler;
    if (a) return void Lo(a, null, 10, [e, o, r]);
  }
  !(function (e, t, n, i = !0) {
    console.error(e);
  })(e, 0, 0, i);
}
let bo = !1,
  No = !1;
const Po = [];
let wo = 0;
const Uo = [];
let Go = null,
  xo = 0;
const Fo = Promise.resolve();
let qo = null;
function Vo(e) {
  const t = qo || Fo;
  return e ? t.then(this ? e.bind(this) : e) : t;
}
function Bo(e) {
  (Po.length && Po.includes(e, bo && e.allowRecurse ? wo + 1 : wo)) ||
    (null == e.id
      ? Po.push(e)
      : Po.splice(
          (function (e) {
            let t = wo + 1,
              n = Po.length;
            for (; t < n; ) {
              const i = (t + n) >>> 1,
                o = Po[i],
                r = Wo(o);
              r < e || (r === e && o.pre) ? (t = i + 1) : (n = i);
            }
            return t;
          })(e.id),
          0,
          e
        ),
    Ho());
}
function Ho() {
  bo || No || ((No = !0), (qo = Fo.then($o)));
}
function jo(e) {
  S(e)
    ? Uo.push(...e)
    : (Go && Go.includes(e, e.allowRecurse ? xo + 1 : xo)) || Uo.push(e),
    Ho();
}
function Ko(e, t, n = bo ? wo + 1 : 0) {
  for (; n < Po.length; n++) {
    const e = Po[n];
    e && e.pre && (Po.splice(n, 1), n--, e());
  }
}
const Wo = (e) => (null == e.id ? 1 / 0 : e.id),
  zo = (e, t) => {
    const n = Wo(e) - Wo(t);
    if (0 === n) {
      if (e.pre && !t.pre) return -1;
      if (t.pre && !e.pre) return 1;
    }
    return n;
  };
function $o(e) {
  (No = !1), (bo = !0), Po.sort(zo);
  try {
    for (wo = 0; wo < Po.length; wo++) {
      const e = Po[wo];
      e && !1 !== e.active && Lo(e, null, 14);
    }
  } finally {
    (wo = 0),
      (Po.length = 0),
      (function (e) {
        if (Uo.length) {
          const e = [...new Set(Uo)].sort((e, t) => Wo(e) - Wo(t));
          if (((Uo.length = 0), Go)) return void Go.push(...e);
          for (Go = e, xo = 0; xo < Go.length; xo++) Go[xo]();
          (Go = null), (xo = 0);
        }
      })(),
      (bo = !1),
      (qo = null),
      (Po.length || Uo.length) && $o();
  }
}
function Yo(e, t, ...n) {
  if (e.isUnmounted) return;
  const i = e.vnode.props || _;
  let o = n;
  const r = t.startsWith('update:'),
    a = r && t.slice(7);
  if (a && a in i) {
    const e = `${'modelValue' === a ? 'model' : a}Modifiers`,
      { number: t, trim: r } = i[e] || _;
    r && (o = n.map((e) => (A(e) ? e.trim() : e))), t && (o = n.map(J));
  }
  let s,
    c = i[(s = W(t))] || i[(s = W(B(t)))];
  !c && r && (c = i[(s = W(j(t)))]), c && Ao(c, e, 6, o);
  const u = i[s + 'Once'];
  if (u) {
    if (e.emitted) {
      if (e.emitted[s]) return;
    } else e.emitted = {};
    (e.emitted[s] = !0), Ao(u, e, 6, o);
  }
}
function Jo(e, t, n = !1) {
  const i = t.emitsCache,
    o = i.get(e);
  if (void 0 !== o) return o;
  const r = e.emits;
  let a = {},
    s = !1;
  if (!L(e)) {
    const i = (e) => {
      const n = Jo(e, t, !0);
      n && ((s = !0), C(a, n));
    };
    !n && t.mixins.length && t.mixins.forEach(i),
      e.extends && i(e.extends),
      e.mixins && e.mixins.forEach(i);
  }
  return r || s
    ? (S(r) ? r.forEach((e) => (a[e] = null)) : C(a, r), b(e) && i.set(e, a), a)
    : (b(e) && i.set(e, null), null);
}
function Xo(e, t) {
  return (
    !(!e || !I(t)) &&
    ((t = t.slice(2).replace(/Once$/, '')),
    D(e, t[0].toLowerCase() + t.slice(1)) || D(e, j(t)) || D(e, t))
  );
}
let Zo = null;
function Qo(e) {
  const t = Zo;
  return (Zo = e), e && e.type.__scopeId, t;
}
function er(e, t) {
  return e && (e[t] || e[B(t)] || e[K(B(t))]);
}
function tr(e, t) {
  return or(e, null, t);
}
const nr = {};
function ir(e, t, n) {
  return or(e, t, n);
}
function or(
  e,
  t,
  { immediate: n, deep: i, flush: o, once: r, onTrack: a, onTrigger: s } = _
) {
  if (t && r) {
    const e = t;
    t = (...t) => {
      e(...t), C();
    };
  }
  const c = aa,
    u = (e) => (!0 === i ? e : sr(e, !1 === i ? 1 : void 0));
  let l,
    d,
    p = !1,
    h = !1;
  if (
    (mo(e)
      ? ((l = () => e.value), (p = uo(e)))
      : so(e)
        ? ((l = () => u(e)), (p = !0))
        : S(e)
          ? ((h = !0),
            (p = e.some((e) => so(e) || uo(e))),
            (l = () =>
              e.map((e) =>
                mo(e) ? e.value : so(e) ? u(e) : L(e) ? Lo(e, c, 2) : void 0
              )))
          : (l = L(e)
              ? t
                ? () => Lo(e, c, 2)
                : () => (d && d(), Ao(e, c, 3, [f]))
              : m),
    t && i)
  ) {
    const e = l;
    l = () => sr(e());
  }
  let f = (e) => {
      d = I.onStop = () => {
        Lo(e, c, 4), (d = I.onStop = void 0);
      };
    },
    g = h ? new Array(e.length).fill(nr) : nr;
  const v = () => {
    if (I.active && I.dirty)
      if (t) {
        const e = I.run();
        (i || p || (h ? e.some((e, t) => z(e, g[t])) : z(e, g))) &&
          (d && d(),
          Ao(t, c, 3, [e, g === nr ? void 0 : h && g[0] === nr ? [] : g, f]),
          (g = e));
      } else I.run();
  };
  let y;
  (v.allowRecurse = !!t),
    'sync' === o
      ? (y = v)
      : 'post' === o
        ? (y = () => ea(v, c && c.suspense))
        : ((v.pre = !0), c && (v.id = c.uid), (y = () => Bo(v)));
  const I = new ti(l, m, y),
    M = ei(),
    C = () => {
      I.stop(), M && T(M.effects, I);
    };
  return (
    t
      ? n
        ? v()
        : (g = I.run())
      : 'post' === o
        ? ea(I.run.bind(I), c && c.suspense)
        : I.run(),
    C
  );
}
function rr(e, t, n) {
  const i = this.proxy,
    o = A(e) ? (e.includes('.') ? ar(i, e) : () => i[e]) : e.bind(i, i);
  let r;
  L(t) ? (r = t) : ((r = t.handler), (n = t));
  const a = la(this),
    s = or(o, r.bind(i), n);
  return a(), s;
}
function ar(e, t) {
  const n = t.split('.');
  return () => {
    let t = e;
    for (let e = 0; e < n.length && t; e++) t = t[n[e]];
    return t;
  };
}
function sr(e, t, n = 0, i) {
  if (!b(e) || e.__v_skip) return e;
  if (t && t > 0) {
    if (n >= t) return e;
    n++;
  }
  if ((i = i || new Set()).has(e)) return e;
  if ((i.add(e), mo(e))) sr(e.value, t, n, i);
  else if (S(e)) for (let o = 0; o < e.length; o++) sr(e[o], t, n, i);
  else if (R(e) || k(e))
    e.forEach((e) => {
      sr(e, t, n, i);
    });
  else if (G(e)) for (const o in e) sr(e[o], t, n, i);
  return e;
}
function cr() {
  return {
    app: null,
    config: {
      isNativeTag: y,
      performance: !1,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {},
    },
    mixins: [],
    components: {},
    directives: {},
    provides: Object.create(null),
    optionsCache: new WeakMap(),
    propsCache: new WeakMap(),
    emitsCache: new WeakMap(),
  };
}
let ur = 0;
let lr = null;
function dr(e, t) {
  if (aa) {
    let n = aa.provides;
    const i = aa.parent && aa.parent.provides;
    i === n && (n = aa.provides = Object.create(i)),
      (n[e] = t),
      'app' === aa.type.mpType && aa.appContext.app.provide(e, t);
  } else;
}
function pr(e, t, n = !1) {
  const i = aa || Zo;
  if (i || lr) {
    const o = i
      ? null == i.parent
        ? i.vnode.appContext && i.vnode.appContext.provides
        : i.parent.provides
      : lr._context.provides;
    if (o && e in o) return o[e];
    if (arguments.length > 1) return n && L(t) ? t.call(i && i.proxy) : t;
  }
}
const hr = (e) => e.type.__isKeepAlive;
function fr(e, t) {
  _r(e, 'a', t);
}
function gr(e, t) {
  _r(e, 'da', t);
}
function _r(e, t, n = aa) {
  const i =
    e.__wdc ||
    (e.__wdc = () => {
      let t = n;
      for (; t; ) {
        if (t.isDeactivated) return;
        t = t.parent;
      }
      return e();
    });
  if ((mr(t, i, n), n)) {
    let e = n.parent;
    for (; e && e.parent; )
      hr(e.parent.vnode) && vr(i, t, n, e), (e = e.parent);
  }
}
function vr(e, t, n, i) {
  const o = mr(t, e, i, !0);
  Dr(() => {
    T(i[t], o);
  }, n);
}
function mr(e, t, n = aa, i = !1) {
  if (n) {
    (function (e) {
      return Ve.indexOf(e) > -1;
    })(e) && (n = n.root);
    const o = n[e] || (n[e] = []),
      r =
        t.__weh ||
        (t.__weh = (...i) => {
          if (n.isUnmounted) return;
          ci();
          const o = la(n),
            r = Ao(t, n, e, i);
          return o(), ui(), r;
        });
    return i ? o.unshift(r) : o.push(r), r;
  }
}
const yr =
    (e) =>
    (t, n = aa) =>
      (!ha || 'sp' === e) && mr(e, (...e) => t(...e), n),
  Ir = yr('bm'),
  Mr = yr('m'),
  Cr = yr('bu'),
  Tr = yr('u'),
  Er = yr('bum'),
  Dr = yr('um'),
  Sr = yr('sp'),
  kr = yr('rtg'),
  Rr = yr('rtc');
function Lr(e, t = aa) {
  mr('ec', e, t);
}
const Ar = (e) => (e ? (pa(e) ? va(e) || e.proxy : Ar(e.parent)) : null),
  Or = C(Object.create(null), {
    $: (e) => e,
    $el: (e) => e.__$el || (e.__$el = {}),
    $data: (e) => e.data,
    $props: (e) => e.props,
    $attrs: (e) => e.attrs,
    $slots: (e) => e.slots,
    $refs: (e) => e.refs,
    $parent: (e) => Ar(e.parent),
    $root: (e) => Ar(e.root),
    $emit: (e) => e.emit,
    $options: (e) => Fr(e),
    $forceUpdate: (e) =>
      e.f ||
      (e.f = () => {
        (e.effect.dirty = !0), Bo(e.update);
      }),
    $watch: (e) => rr.bind(e),
  }),
  br = (e, t) => e !== _ && !e.__isScriptSetup && D(e, t),
  Nr = {
    get({ _: e }, t) {
      const {
        ctx: n,
        setupState: i,
        data: o,
        props: r,
        accessCache: a,
        type: s,
        appContext: c,
      } = e;
      let u;
      if ('$' !== t[0]) {
        const s = a[t];
        if (void 0 !== s)
          switch (s) {
            case 1:
              return i[t];
            case 2:
              return o[t];
            case 4:
              return n[t];
            case 3:
              return r[t];
          }
        else {
          if (br(i, t)) return (a[t] = 1), i[t];
          if (o !== _ && D(o, t)) return (a[t] = 2), o[t];
          if ((u = e.propsOptions[0]) && D(u, t)) return (a[t] = 3), r[t];
          if (n !== _ && D(n, t)) return (a[t] = 4), n[t];
          wr && (a[t] = 0);
        }
      }
      const l = Or[t];
      let d, p;
      return l
        ? ('$attrs' === t && yi(e, 0, t), l(e))
        : (d = s.__cssModules) && (d = d[t])
          ? d
          : n !== _ && D(n, t)
            ? ((a[t] = 4), n[t])
            : ((p = c.config.globalProperties), D(p, t) ? p[t] : void 0);
    },
    set({ _: e }, t, n) {
      const { data: i, setupState: o, ctx: r } = e;
      return br(o, t)
        ? ((o[t] = n), !0)
        : i !== _ && D(i, t)
          ? ((i[t] = n), !0)
          : !D(e.props, t) &&
            ('$' !== t[0] || !(t.slice(1) in e)) &&
            ((r[t] = n), !0);
    },
    has(
      {
        _: {
          data: e,
          setupState: t,
          accessCache: n,
          ctx: i,
          appContext: o,
          propsOptions: r,
        },
      },
      a
    ) {
      let s;
      return (
        !!n[a] ||
        (e !== _ && D(e, a)) ||
        br(t, a) ||
        ((s = r[0]) && D(s, a)) ||
        D(i, a) ||
        D(Or, a) ||
        D(o.config.globalProperties, a)
      );
    },
    defineProperty(e, t, n) {
      return (
        null != n.get
          ? (e._.accessCache[t] = 0)
          : D(n, 'value') && this.set(e, t, n.value, null),
        Reflect.defineProperty(e, t, n)
      );
    },
  };
function Pr(e) {
  return S(e) ? e.reduce((e, t) => ((e[t] = null), e), {}) : e;
}
let wr = !0;
function Ur(e) {
  const t = Fr(e),
    n = e.proxy,
    i = e.ctx;
  (wr = !1), t.beforeCreate && Gr(t.beforeCreate, e, 'bc');
  const {
    data: o,
    computed: r,
    methods: a,
    watch: s,
    provide: c,
    inject: u,
    created: l,
    beforeMount: d,
    mounted: p,
    beforeUpdate: h,
    updated: f,
    activated: g,
    deactivated: _,
    beforeDestroy: v,
    beforeUnmount: y,
    destroyed: I,
    unmounted: M,
    render: C,
    renderTracked: T,
    renderTriggered: E,
    errorCaptured: D,
    serverPrefetch: k,
    expose: R,
    inheritAttrs: A,
    components: O,
    directives: N,
    filters: P,
  } = t;
  if (
    (u &&
      (function (e, t, n = m) {
        S(e) && (e = Hr(e));
        for (const i in e) {
          const n = e[i];
          let o;
          (o = b(n)
            ? 'default' in n
              ? pr(n.from || i, n.default, !0)
              : pr(n.from || i)
            : pr(n)),
            mo(o)
              ? Object.defineProperty(t, i, {
                  enumerable: !0,
                  configurable: !0,
                  get: () => o.value,
                  set: (e) => (o.value = e),
                })
              : (t[i] = o);
        }
      })(u, i, null),
    a)
  )
    for (const m in a) {
      const e = a[m];
      L(e) && (i[m] = e.bind(n));
    }
  if (o) {
    const t = o.call(n, n);
    b(t) && (e.data = io(t));
  }
  if (((wr = !0), r))
    for (const S in r) {
      const e = r[S],
        t = L(e) ? e.bind(n, n) : L(e.get) ? e.get.bind(n, n) : m,
        o = !L(e) && L(e.set) ? e.set.bind(n) : m,
        a = ma({ get: t, set: o });
      Object.defineProperty(i, S, {
        enumerable: !0,
        configurable: !0,
        get: () => a.value,
        set: (e) => (a.value = e),
      });
    }
  if (s) for (const m in s) xr(s[m], i, n, m);
  if (c) {
    const e = L(c) ? c.call(n) : c;
    Reflect.ownKeys(e).forEach((t) => {
      dr(t, e[t]);
    });
  }
  function w(e, t) {
    S(t) ? t.forEach((t) => e(t.bind(n))) : t && e(t.bind(n));
  }
  if (
    (l && Gr(l, e, 'c'),
    w(Ir, d),
    w(Mr, p),
    w(Cr, h),
    w(Tr, f),
    w(fr, g),
    w(gr, _),
    w(Lr, D),
    w(Rr, T),
    w(kr, E),
    w(Er, y),
    w(Dr, M),
    w(Sr, k),
    S(R))
  )
    if (R.length) {
      const t = e.exposed || (e.exposed = {});
      R.forEach((e) => {
        Object.defineProperty(t, e, {
          get: () => n[e],
          set: (t) => (n[e] = t),
        });
      });
    } else e.exposed || (e.exposed = {});
  C && e.render === m && (e.render = C),
    null != A && (e.inheritAttrs = A),
    O && (e.components = O),
    N && (e.directives = N),
    e.ctx.$onApplyOptions && e.ctx.$onApplyOptions(t, e, n);
}
function Gr(e, t, n) {
  Ao(S(e) ? e.map((e) => e.bind(t.proxy)) : e.bind(t.proxy), t, n);
}
function xr(e, t, n, i) {
  const o = i.includes('.') ? ar(n, i) : () => n[i];
  if (A(e)) {
    const n = t[e];
    L(n) && ir(o, n);
  } else if (L(e)) ir(o, e.bind(n));
  else if (b(e))
    if (S(e)) e.forEach((e) => xr(e, t, n, i));
    else {
      const i = L(e.handler) ? e.handler.bind(n) : t[e.handler];
      L(i) && ir(o, i, e);
    }
}
function Fr(e) {
  const t = e.type,
    { mixins: n, extends: i } = t,
    {
      mixins: o,
      optionsCache: r,
      config: { optionMergeStrategies: a },
    } = e.appContext,
    s = r.get(t);
  let c;
  return (
    s
      ? (c = s)
      : o.length || n || i
        ? ((c = {}), o.length && o.forEach((e) => qr(c, e, a, !0)), qr(c, t, a))
        : (c = t),
    b(t) && r.set(t, c),
    c
  );
}
function qr(e, t, n, i = !1) {
  const { mixins: o, extends: r } = t;
  r && qr(e, r, n, !0), o && o.forEach((t) => qr(e, t, n, !0));
  for (const a in t)
    if (i && 'expose' === a);
    else {
      const i = Vr[a] || (n && n[a]);
      e[a] = i ? i(e[a], t[a]) : t[a];
    }
  return e;
}
const Vr = {
  data: Br,
  props: Wr,
  emits: Wr,
  methods: Kr,
  computed: Kr,
  beforeCreate: jr,
  created: jr,
  beforeMount: jr,
  mounted: jr,
  beforeUpdate: jr,
  updated: jr,
  beforeDestroy: jr,
  beforeUnmount: jr,
  destroyed: jr,
  unmounted: jr,
  activated: jr,
  deactivated: jr,
  errorCaptured: jr,
  serverPrefetch: jr,
  components: Kr,
  directives: Kr,
  watch: function (e, t) {
    if (!e) return t;
    if (!t) return e;
    const n = C(Object.create(null), e);
    for (const i in t) n[i] = jr(e[i], t[i]);
    return n;
  },
  provide: Br,
  inject: function (e, t) {
    return Kr(Hr(e), Hr(t));
  },
};
function Br(e, t) {
  return t
    ? e
      ? function () {
          return C(
            L(e) ? e.call(this, this) : e,
            L(t) ? t.call(this, this) : t
          );
        }
      : t
    : e;
}
function Hr(e) {
  if (S(e)) {
    const t = {};
    for (let n = 0; n < e.length; n++) t[e[n]] = e[n];
    return t;
  }
  return e;
}
function jr(e, t) {
  return e ? [...new Set([].concat(e, t))] : t;
}
function Kr(e, t) {
  return e ? C(Object.create(null), e, t) : t;
}
function Wr(e, t) {
  return e
    ? S(e) && S(t)
      ? [...new Set([...e, ...t])]
      : C(Object.create(null), Pr(e), Pr(null != t ? t : {}))
    : t;
}
function zr(e, t, n, i) {
  const [o, r] = e.propsOptions;
  let a,
    s = !1;
  if (t)
    for (let c in t) {
      if (F(c)) continue;
      const u = t[c];
      let l;
      o && D(o, (l = B(c)))
        ? r && r.includes(l)
          ? ((a || (a = {}))[l] = u)
          : (n[l] = u)
        : Xo(e.emitsOptions, c) ||
          (c in i && u === i[c]) ||
          ((i[c] = u), (s = !0));
    }
  if (r) {
    const t = lo(n),
      i = a || _;
    for (let a = 0; a < r.length; a++) {
      const s = r[a];
      n[s] = $r(o, t, s, i[s], e, !D(i, s));
    }
  }
  return s;
}
function $r(e, t, n, i, o, r) {
  const a = e[n];
  if (null != a) {
    const e = D(a, 'default');
    if (e && void 0 === i) {
      const e = a.default;
      if (a.type !== Function && !a.skipFactory && L(e)) {
        const { propsDefaults: r } = o;
        if (n in r) i = r[n];
        else {
          const a = la(o);
          (i = r[n] = e.call(null, t)), a();
        }
      } else i = e;
    }
    a[0] &&
      (r && !e ? (i = !1) : !a[1] || ('' !== i && i !== j(n)) || (i = !0));
  }
  return i;
}
function Yr(e, t, n = !1) {
  const i = t.propsCache,
    o = i.get(e);
  if (o) return o;
  const r = e.props,
    a = {},
    s = [];
  let c = !1;
  if (!L(e)) {
    const i = (e) => {
      c = !0;
      const [n, i] = Yr(e, t, !0);
      C(a, n), i && s.push(...i);
    };
    !n && t.mixins.length && t.mixins.forEach(i),
      e.extends && i(e.extends),
      e.mixins && e.mixins.forEach(i);
  }
  if (!r && !c) return b(e) && i.set(e, v), v;
  if (S(r))
    for (let l = 0; l < r.length; l++) {
      const e = B(r[l]);
      Jr(e) && (a[e] = _);
    }
  else if (r)
    for (const l in r) {
      const e = B(l);
      if (Jr(e)) {
        const t = r[l],
          n = (a[e] = S(t) || L(t) ? { type: t } : C({}, t));
        if (n) {
          const t = Qr(Boolean, n.type),
            i = Qr(String, n.type);
          (n[0] = t > -1),
            (n[1] = i < 0 || t < i),
            (t > -1 || D(n, 'default')) && s.push(e);
        }
      }
    }
  const u = [a, s];
  return b(e) && i.set(e, u), u;
}
function Jr(e) {
  return '$' !== e[0] && !F(e);
}
function Xr(e) {
  if (null === e) return 'null';
  if ('function' == typeof e) return e.name || '';
  if ('object' == typeof e) {
    return (e.constructor && e.constructor.name) || '';
  }
  return '';
}
function Zr(e, t) {
  return Xr(e) === Xr(t);
}
function Qr(e, t) {
  return S(t) ? t.findIndex((t) => Zr(t, e)) : L(t) && Zr(t, e) ? 0 : -1;
}
const ea = jo,
  ta = '__vInternal';
function na(e) {
  return e ? (so((t = e)) || co(t) || ta in e ? C({}, e) : e) : null;
  var t;
}
const ia = cr();
let oa = 0;
function ra(e, t, n) {
  const i = e.type,
    o = (t ? t.appContext : e.appContext) || ia,
    r = {
      uid: oa++,
      vnode: e,
      type: i,
      parent: t,
      appContext: o,
      root: null,
      next: null,
      subTree: null,
      effect: null,
      update: null,
      scope: new Zn(!0),
      render: null,
      proxy: null,
      exposed: null,
      exposeProxy: null,
      withProxy: null,
      provides: t ? t.provides : Object.create(o.provides),
      accessCache: null,
      renderCache: [],
      components: null,
      directives: null,
      propsOptions: Yr(i, o),
      emitsOptions: Jo(i, o),
      emit: null,
      emitted: null,
      propsDefaults: _,
      inheritAttrs: i.inheritAttrs,
      ctx: _,
      data: _,
      props: _,
      attrs: _,
      slots: _,
      refs: _,
      setupState: _,
      setupContext: null,
      attrsProxy: null,
      slotsProxy: null,
      suspense: n,
      suspenseId: n ? n.pendingId : 0,
      asyncDep: null,
      asyncResolved: !1,
      isMounted: !1,
      isUnmounted: !1,
      isDeactivated: !1,
      bc: null,
      c: null,
      bm: null,
      m: null,
      bu: null,
      u: null,
      um: null,
      bum: null,
      da: null,
      a: null,
      rtg: null,
      rtc: null,
      ec: null,
      sp: null,
    };
  return (
    (r.ctx = { _: r }),
    (r.root = t ? t.root : r),
    (r.emit = Yo.bind(null, r)),
    e.ce && e.ce(r),
    r
  );
}
let aa = null;
const sa = () => aa || Zo;
let ca, ua;
(ca = (e) => {
  aa = e;
}),
  (ua = (e) => {
    ha = e;
  });
const la = (e) => {
    const t = aa;
    return (
      ca(e),
      e.scope.on(),
      () => {
        e.scope.off(), ca(t);
      }
    );
  },
  da = () => {
    aa && aa.scope.off(), ca(null);
  };
function pa(e) {
  return 4 & e.vnode.shapeFlag;
}
let ha = !1;
function fa(e, t = !1) {
  t && ua(t);
  const { props: n } = e.vnode,
    i = pa(e);
  !(function (e, t, n, i = !1) {
    const o = {},
      r = {};
    (e.propsDefaults = Object.create(null)), zr(e, t, o, r);
    for (const a in e.propsOptions[0]) a in o || (o[a] = void 0);
    n
      ? (e.props = i ? o : oo(o))
      : e.type.props
        ? (e.props = o)
        : (e.props = r),
      (e.attrs = r);
  })(e, n, i, t);
  const o = i
    ? (function (e, t) {
        const n = e.type;
        (e.accessCache = Object.create(null)),
          (e.proxy = po(new Proxy(e.ctx, Nr)));
        const { setup: i } = n;
        if (i) {
          const t = (e.setupContext = i.length > 1 ? _a(e) : null),
            n = la(e);
          ci();
          const o = Lo(i, e, 0, [e.props, t]);
          ui(),
            n(),
            N(o)
              ? o.then(da, da)
              : (function (e, t, n) {
                  L(t) ? (e.render = t) : b(t) && (e.setupState = To(t));
                  ga(e);
                })(e, o);
        } else ga(e);
      })(e)
    : void 0;
  return t && ua(!1), o;
}
function ga(e, t, n) {
  const i = e.type;
  e.render || (e.render = i.render || m);
  {
    const t = la(e);
    ci();
    try {
      Ur(e);
    } finally {
      ui(), t();
    }
  }
}
function _a(e) {
  const t = (t) => {
    e.exposed = t || {};
  };
  return {
    get attrs() {
      return (function (e) {
        return (
          e.attrsProxy ||
          (e.attrsProxy = new Proxy(e.attrs, {
            get: (t, n) => (yi(e, 0, '$attrs'), t[n]),
          }))
        );
      })(e);
    },
    slots: e.slots,
    emit: e.emit,
    expose: t,
  };
}
function va(e) {
  if (e.exposed)
    return (
      e.exposeProxy ||
      (e.exposeProxy = new Proxy(To(po(e.exposed)), {
        get: (t, n) => (n in t ? t[n] : e.proxy[n]),
        has: (e, t) => t in e || t in Or,
      }))
    );
}
const ma = (e, t) => {
    const n = (function (e, t, n = !1) {
      let i, o;
      const r = L(e);
      return (
        r ? ((i = e), (o = m)) : ((i = e.get), (o = e.set)),
        new go(i, o, r || !o, n)
      );
    })(e, 0, ha);
    return n;
  },
  ya = '3.4.21';
function Ia(e) {
  return Mo(e);
}
const Ma = '[object Array]',
  Ca = '[object Object]';
function Ta(e, t) {
  const n = {};
  return Ea(e, t), Da(e, t, '', n), n;
}
function Ea(e, t) {
  if ((e = Ia(e)) === t) return;
  const n = w(e),
    i = w(t);
  if (n == Ca && i == Ca)
    for (let o in t) {
      const n = e[o];
      void 0 === n ? (e[o] = null) : Ea(n, t[o]);
    }
  else
    n == Ma &&
      i == Ma &&
      e.length >= t.length &&
      t.forEach((t, n) => {
        Ea(e[n], t);
      });
}
function Da(e, t, n, i) {
  if ((e = Ia(e)) === t) return;
  const o = w(e),
    r = w(t);
  if (o == Ca)
    if (r != Ca || Object.keys(e).length < Object.keys(t).length) Sa(i, n, e);
    else
      for (let a in e) {
        const o = Ia(e[a]),
          r = t[a],
          s = w(o),
          c = w(r);
        if (s != Ma && s != Ca)
          o != r && Sa(i, ('' == n ? '' : n + '.') + a, o);
        else if (s == Ma)
          c != Ma || o.length < r.length
            ? Sa(i, ('' == n ? '' : n + '.') + a, o)
            : o.forEach((e, t) => {
                Da(e, r[t], ('' == n ? '' : n + '.') + a + '[' + t + ']', i);
              });
        else if (s == Ca)
          if (c != Ca || Object.keys(o).length < Object.keys(r).length)
            Sa(i, ('' == n ? '' : n + '.') + a, o);
          else
            for (let e in o)
              Da(o[e], r[e], ('' == n ? '' : n + '.') + a + '.' + e, i);
      }
  else
    o == Ma
      ? r != Ma || e.length < t.length
        ? Sa(i, n, e)
        : e.forEach((e, o) => {
            Da(e, t[o], n + '[' + o + ']', i);
          })
      : Sa(i, n, e);
}
function Sa(e, t, n) {
  e[t] = n;
}
function ka(e) {
  const t = e.ctx.__next_tick_callbacks;
  if (t && t.length) {
    const e = t.slice(0);
    t.length = 0;
    for (let t = 0; t < e.length; t++) e[t]();
  }
}
function Ra(e, t) {
  const n = e.ctx;
  if (
    !n.__next_tick_pending &&
    !(function (e) {
      return Po.includes(e.update);
    })(e)
  )
    return Vo(t && t.bind(e.proxy));
  let i;
  return (
    n.__next_tick_callbacks || (n.__next_tick_callbacks = []),
    n.__next_tick_callbacks.push(() => {
      t ? Lo(t.bind(e.proxy), e, 14) : i && i(e.proxy);
    }),
    new Promise((e) => {
      i = e;
    })
  );
}
function La(e, t) {
  const n = typeof (e = Ia(e));
  if ('object' === n && null !== e) {
    let n = t.get(e);
    if (void 0 !== n) return n;
    if (S(e)) {
      const i = e.length;
      (n = new Array(i)), t.set(e, n);
      for (let o = 0; o < i; o++) n[o] = La(e[o], t);
    } else {
      (n = {}), t.set(e, n);
      for (const i in e) D(e, i) && (n[i] = La(e[i], t));
    }
    return n;
  }
  if ('symbol' !== n) return e;
}
function Aa(e) {
  return La(e, 'undefined' != typeof WeakMap ? new WeakMap() : new Map());
}
function Oa(e, t, n) {
  if (!t) return;
  t = Aa(t);
  const i = e.ctx,
    o = i.mpType;
  if ('page' === o || 'component' === o) {
    t.r0 = 1;
    const n = i.$scope,
      o = Ta(
        t,
        (function (e, t) {
          const n = e.data,
            i = Object.create(null);
          return (
            t.forEach((e) => {
              i[e] = n[e];
            }),
            i
          );
        })(n, Object.keys(t))
      );
    Object.keys(o).length
      ? ((i.__next_tick_pending = !0),
        n.setData(o, () => {
          (i.__next_tick_pending = !1), ka(e);
        }),
        Ko())
      : ka(e);
  }
}
function ba(e, t, n) {
  t.appContext.config.globalProperties.$applyOptions(e, t, n);
  const i = e.computed;
  if (i) {
    const e = Object.keys(i);
    if (e.length) {
      const n = t.ctx;
      n.$computedKeys || (n.$computedKeys = []), n.$computedKeys.push(...e);
    }
  }
  delete t.ctx.$onApplyOptions;
}
function Na(e, t = !1) {
  const {
    setupState: n,
    $templateRefs: i,
    ctx: { $scope: o, $mpPlatform: r },
  } = e;
  if ('mp-alipay' === r) return;
  if (!i || !o) return;
  if (t) return i.forEach((e) => Pa(e, null, n));
  const a = 'mp-baidu' === r || 'mp-toutiao' === r,
    s = (e) => {
      const t = (o.selectAllComponents('.r') || []).concat(
        o.selectAllComponents('.r-i-f') || []
      );
      return e.filter((e) => {
        const i = (function (e, t) {
          const n = e.find((e) => e && (e.properties || e.props).uI === t);
          if (n) {
            const e = n.$vm;
            return e
              ? va(e.$) || e
              : (function (e) {
                  b(e) && po(e);
                  return e;
                })(n);
          }
          return null;
        })(t, e.i);
        return !(!a || null !== i) || (Pa(e, i, n), !1);
      });
    },
    c = () => {
      const t = s(i);
      t.length &&
        e.proxy &&
        e.proxy.$scope &&
        e.proxy.$scope.setData({ r1: 1 }, () => {
          s(t);
        });
    };
  o._$setRef ? o._$setRef(c) : Ra(e, c);
}
function Pa({ r: e, f: t }, n, i) {
  if (L(e)) e(n, {});
  else {
    const o = A(e),
      r = mo(e);
    if (o || r)
      if (t) {
        if (!r) return;
        S(e.value) || (e.value = []);
        const t = e.value;
        if (-1 === t.indexOf(n)) {
          if ((t.push(n), !n)) return;
          Er(() => T(t, n), n.$);
        }
      } else o ? D(i, e) && (i[e] = n) : mo(e) && (e.value = n);
  }
}
const wa = jo;
function Ua(e, t) {
  const n = (e.component = ra(e, t.parentComponent, null));
  return (
    (n.ctx.$onApplyOptions = ba),
    (n.ctx.$children = []),
    'app' === t.mpType && (n.render = m),
    t.onBeforeSetup && t.onBeforeSetup(n, t),
    fa(n),
    t.parentComponent &&
      n.proxy &&
      t.parentComponent.ctx.$children.push(va(n) || n.proxy),
    (function (e) {
      const t = Va.bind(e);
      e.$updateScopedSlots = () => Vo(() => Bo(t));
      const n = () => {
          if (e.isMounted) {
            const { next: t, bu: n, u: i } = e;
            Ba(e, !1), qa(), n && $(n), Ba(e, !0), Oa(e, xa(e)), i && wa(i);
          } else
            Er(() => {
              Na(e, !0);
            }, e),
              Oa(e, xa(e));
        },
        i = (e.effect = new ti(n, m, () => Bo(o), e.scope)),
        o = (e.update = () => {
          i.dirty && i.run();
        });
      (o.id = e.uid), Ba(e, !0), o();
    })(n),
    n.proxy
  );
}
const Ga = (e) => {
  let t;
  for (const n in e)
    ('class' === n || 'style' === n || I(n)) && ((t || (t = {}))[n] = e[n]);
  return t;
};
function xa(e) {
  const {
    type: t,
    vnode: n,
    proxy: i,
    withProxy: o,
    props: r,
    propsOptions: [a],
    slots: s,
    attrs: c,
    emit: u,
    render: l,
    renderCache: d,
    data: p,
    setupState: h,
    ctx: f,
    uid: g,
    appContext: {
      app: {
        config: {
          globalProperties: { pruneComponentPropsCache: _ },
        },
      },
    },
    inheritAttrs: v,
  } = e;
  let m;
  (e.$templateRefs = []),
    (e.$ei = 0),
    _(g),
    (e.__counter = 0 === e.__counter ? 1 : 0);
  const y = Qo(e);
  try {
    if (4 & n.shapeFlag) {
      Fa(v, r, a, c);
      const e = o || i;
      m = l.call(e, e, d, r, h, p, f);
    } else {
      Fa(v, r, a, t.props ? c : Ga(c));
      const e = t;
      m = e.length > 1 ? e(r, { attrs: c, slots: s, emit: u }) : e(r, null);
    }
  } catch (I) {
    Oo(I, e, 1), (m = !1);
  }
  return Na(e), Qo(y), m;
}
function Fa(e, t, n, i) {
  if (t && i && !1 !== e) {
    const e = Object.keys(i).filter((e) => 'class' !== e && 'style' !== e);
    if (!e.length) return;
    n && e.some(M)
      ? e.forEach((e) => {
          (M(e) && e.slice(9) in n) || (t[e] = i[e]);
        })
      : e.forEach((e) => (t[e] = i[e]));
  }
}
const qa = (e) => {
  ci(), Ko(), ui();
};
function Va() {
  const e = this.$scopedSlotsData;
  if (!e || 0 === e.length) return;
  const t = this.ctx.$scope,
    n = t.data,
    i = Object.create(null);
  e.forEach(({ path: e, index: t, data: o }) => {
    const r = Ge(n, e),
      a = A(t) ? `${e}.${t}` : `${e}[${t}]`;
    if (void 0 === r || void 0 === r[t]) i[a] = o;
    else {
      const e = Ta(o, r[t]);
      Object.keys(e).forEach((t) => {
        i[a + '.' + t] = e[t];
      });
    }
  }),
    (e.length = 0),
    Object.keys(i).length && t.setData(i);
}
function Ba({ effect: e, update: t }, n) {
  e.allowRecurse = t.allowRecurse = n;
}
const Ha = function (e, t = null) {
  L(e) || (e = C({}, e)), null == t || b(t) || (t = null);
  const n = cr(),
    i = new WeakSet(),
    o = (n.app = {
      _uid: ur++,
      _component: e,
      _props: t,
      _container: null,
      _context: n,
      _instance: null,
      version: ya,
      get config() {
        return n.config;
      },
      set config(e) {},
      use: (e, ...t) => (
        i.has(e) ||
          (e && L(e.install)
            ? (i.add(e), e.install(o, ...t))
            : L(e) && (i.add(e), e(o, ...t))),
        o
      ),
      mixin: (e) => (n.mixins.includes(e) || n.mixins.push(e), o),
      component: (e, t) => (t ? ((n.components[e] = t), o) : n.components[e]),
      directive: (e, t) => (t ? ((n.directives[e] = t), o) : n.directives[e]),
      mount() {},
      unmount() {},
      provide: (e, t) => ((n.provides[e] = t), o),
      runWithContext(e) {
        const t = lr;
        lr = o;
        try {
          return e();
        } finally {
          lr = t;
        }
      },
    });
  return o;
};
function ja(e, t = null) {
  ('undefined' != typeof window
    ? window
    : 'undefined' != typeof globalThis
      ? globalThis
      : 'undefined' != typeof global
        ? global
        : 'undefined' != typeof my
          ? my
          : void 0
  ).__VUE__ = !0;
  const n = Ha(e, t),
    i = n._context;
  i.config.globalProperties.$nextTick = function (e) {
    return Ra(this.$, e);
  };
  const o = (e) => ((e.appContext = i), (e.shapeFlag = 6), e),
    r = function (e, t) {
      return Ua(o(e), t);
    },
    a = function (e) {
      return (
        e &&
        (function (e) {
          const { bum: t, scope: n, update: i, um: o } = e;
          t && $(t),
            n.stop(),
            i && (i.active = !1),
            o && wa(o),
            wa(() => {
              e.isUnmounted = !0;
            });
        })(e.$)
      );
    };
  return (
    (n.mount = function () {
      e.render = m;
      const t = Ua(o({ type: e }), {
        mpType: 'app',
        mpInstance: null,
        parentComponent: null,
        slots: [],
        props: null,
      });
      return (
        (n._instance = t.$),
        (t.$app = n),
        (t.$createComponent = r),
        (t.$destroyComponent = a),
        (i.$appInstance = t),
        t
      );
    }),
    (n.unmount = function () {}),
    n
  );
}
function Ka(e, t, n, i) {
  L(t) && mr(e, t.bind(n), i);
}
function Wa(e, t, n) {
  !(function (e, t, n) {
    const i = e.mpType || n.$mpType;
    i &&
      'component' !== i &&
      Object.keys(e).forEach((i) => {
        if (je(i, e[i], !1)) {
          const o = e[i];
          S(o) ? o.forEach((e) => Ka(i, e, n, t)) : Ka(i, o, n, t);
        }
      });
  })(e, t, n);
}
function za(e, t, n) {
  return (e[t] = n);
}
function $a(e, ...t) {
  const n = this[e];
  return n ? n(...t) : (console.error(`method ${e} not found`), null);
}
function Ya(e) {
  return function (t, n, i) {
    if (!n) throw t;
    const o = e._instance;
    if (!o || !o.proxy) throw t;
    o.proxy.$callHook(de, t);
  };
}
function Ja(e, t) {
  return e ? [...new Set([].concat(e, t))] : t;
}
let Xa;
const Za = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
  Qa = /^(?:[A-Za-z\d+/]{4})*?(?:[A-Za-z\d+/]{2}(?:==)?|[A-Za-z\d+/]{3}=?)?$/;
function es() {
  const e = Yn.getStorageSync('uni_id_token') || '',
    t = e.split('.');
  if (!e || 3 !== t.length)
    return { uid: null, role: [], permission: [], tokenExpired: 0 };
  let n;
  try {
    n = JSON.parse(
      ((i = t[1]),
      decodeURIComponent(
        Xa(i)
          .split('')
          .map(function (e) {
            return '%' + ('00' + e.charCodeAt(0).toString(16)).slice(-2);
          })
          .join('')
      ))
    );
  } catch (o) {
    throw new Error('获取当前用户信息出错，详细错误信息为：' + o.message);
  }
  var i;
  return (n.tokenExpired = 1e3 * n.exp), delete n.exp, delete n.iat, n;
}
function ts(e) {
  const t = e._context.config;
  var n;
  (t.errorHandler = ze(e, Ya)),
    (n = t.optionMergeStrategies),
    Be.forEach((e) => {
      n[e] = Ja;
    });
  const i = t.globalProperties;
  !(function (e) {
    (e.uniIDHasRole = function (e) {
      const { role: t } = es();
      return t.indexOf(e) > -1;
    }),
      (e.uniIDHasPermission = function (e) {
        const { permission: t } = es();
        return this.uniIDHasRole('admin') || t.indexOf(e) > -1;
      }),
      (e.uniIDTokenValid = function () {
        const { tokenExpired: e } = es();
        return e > Date.now();
      });
  })(i),
    (i.$set = za),
    (i.$applyOptions = Wa),
    (i.$callMethod = $a),
    Yn.invokeCreateVueAppHook(e);
}
Xa =
  'function' != typeof atob
    ? function (e) {
        if (((e = String(e).replace(/[\t\n\f\r ]+/g, '')), !Qa.test(e)))
          throw new Error(
            "Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded."
          );
        var t;
        e += '=='.slice(2 - (3 & e.length));
        for (var n, i, o = '', r = 0; r < e.length; )
          (t =
            (Za.indexOf(e.charAt(r++)) << 18) |
            (Za.indexOf(e.charAt(r++)) << 12) |
            ((n = Za.indexOf(e.charAt(r++))) << 6) |
            (i = Za.indexOf(e.charAt(r++)))),
            (o +=
              64 === n
                ? String.fromCharCode((t >> 16) & 255)
                : 64 === i
                  ? String.fromCharCode((t >> 16) & 255, (t >> 8) & 255)
                  : String.fromCharCode(
                      (t >> 16) & 255,
                      (t >> 8) & 255,
                      255 & t
                    ));
        return o;
      }
    : atob;
const ns = Object.create(null);
function is(e) {
  delete ns[e];
}
function os(e) {
  if (!e) return;
  const [t, n] = e.split(',');
  return ns[t] ? ns[t][parseInt(n)] : void 0;
}
var rs = {
  install(e) {
    ts(e), (e.config.globalProperties.pruneComponentPropsCache = is);
    const t = e.mount;
    e.mount = function (n) {
      const i = t.call(e, n),
        o = (function () {
          const e = 'createApp';
          if ('undefined' != typeof global && void 0 !== global[e])
            return global[e];
          if ('undefined' != typeof my) return my[e];
        })();
      return (
        o
          ? o(i)
          : 'undefined' != typeof createMiniProgramApp &&
            createMiniProgramApp(i),
        i
      );
    };
  },
};
function as(e, t) {
  const n = sa(),
    i = n.ctx,
    o =
      void 0 === t ||
      ('mp-weixin' !== i.$mpPlatform &&
        'mp-qq' !== i.$mpPlatform &&
        'mp-xhs' !== i.$mpPlatform) ||
      (!A(t) && 'number' != typeof t)
        ? ''
        : '_' + t,
    r = 'e' + n.$ei++ + o,
    a = i.$scope;
  if (!e) return delete a[r], r;
  const s = a[r];
  return (
    s
      ? (s.value = e)
      : (a[r] = (function (e, t) {
          const n = (e) => {
            var i;
            (i = e).type &&
              i.target &&
              ((i.preventDefault = m),
              (i.stopPropagation = m),
              (i.stopImmediatePropagation = m),
              D(i, 'detail') || (i.detail = {}),
              D(i, 'markerId') &&
                ((i.detail = 'object' == typeof i.detail ? i.detail : {}),
                (i.detail.markerId = i.markerId)),
              G(i.detail) &&
                D(i.detail, 'checked') &&
                !D(i.detail, 'value') &&
                (i.detail.value = i.detail.checked),
              G(i.detail) && (i.target = C({}, i.target, i.detail)));
            let o = [e];
            e.detail && e.detail.__args__ && (o = e.detail.__args__);
            const r = n.value,
              a = () =>
                Ao(
                  (function (e, t) {
                    if (S(t)) {
                      const n = e.stopImmediatePropagation;
                      return (
                        (e.stopImmediatePropagation = () => {
                          n && n.call(e), (e._stopped = !0);
                        }),
                        t.map((e) => (t) => !t._stopped && e(t))
                      );
                    }
                    return t;
                  })(e, r),
                  t,
                  5,
                  o
                ),
              s = e.target,
              c = !!s && !!s.dataset && 'true' === String(s.dataset.eventsync);
            if (!ss.includes(e.type) || c) {
              const t = a();
              if ('input' === e.type && (S(t) || N(t))) return;
              return t;
            }
            setTimeout(a);
          };
          return (n.value = e), n;
        })(e, n)),
    r
  );
}
const ss = [
  'tap',
  'longpress',
  'longtap',
  'transitionend',
  'animationstart',
  'animationiteration',
  'animationend',
  'touchforcechange',
];
function cs(e, t = {}, n) {
  const i = sa(),
    {
      parent: o,
      isMounted: r,
      ctx: { $scope: a },
    } = i,
    s = (a.properties || a.props).uI;
  if (!s) return;
  if (!o && !r)
    return void Mr(() => {
      cs(e, t, n);
    }, i);
  const c = (function (e, t) {
    let n = t.parent;
    for (; n; ) {
      const t = n.$ssi;
      if (t && t[e]) return t[e];
      n = n.parent;
    }
  })(s, i);
  c && c(e, t, n);
}
function us(e) {
  return A(e)
    ? e
    : (function (e) {
        let t = '';
        if (!e || A(e)) return t;
        for (const n in e) t += `${n.startsWith('--') ? n : j(n)}:${e[n]};`;
        return t;
      })(Q(e));
}
const ls = function (e, t = null) {
    return e && (e.mpType = 'app'), ja(e, t).use(rs);
  },
  ds = [
    'createSelectorQuery',
    'createIntersectionObserver',
    'selectAllComponents',
    'selectComponent',
  ];
function ps(e, t) {
  const n = e.ctx;
  (n.mpType = t.mpType),
    (n.$mpType = t.mpType),
    (n.$mpPlatform = 'mp-weixin'),
    (n.$scope = t.mpInstance),
    (n.$mp = {}),
    (n._self = {}),
    (e.slots = {}),
    S(t.slots) &&
      t.slots.length &&
      (t.slots.forEach((t) => {
        e.slots[t] = !0;
      }),
      e.slots[se] && (e.slots.default = !0)),
    (n.getOpenerEventChannel = function () {
      return t.mpInstance.getOpenerEventChannel();
    }),
    (n.$hasHook = hs),
    (n.$callHook = fs),
    (e.emit = (function (e, t) {
      return function (n, ...i) {
        const o = t.$scope;
        if (o && n) {
          const e = { __args__: i };
          o.triggerEvent(n, e);
        }
        return e.apply(this, [n, ...i]);
      };
    })(e.emit, n));
}
function hs(e) {
  const t = this.$[e];
  return !(!t || !t.length);
}
function fs(e, t) {
  'mounted' === e && (fs.call(this, 'bm'), (this.$.isMounted = !0), (e = 'm'));
  const n = this.$[e];
  return n && we(n, t);
}
const gs = [ge, ce, ue, ve, Ie, Te, Ee, De, ke];
function _s(e, t = new Set()) {
  if (e) {
    Object.keys(e).forEach((n) => {
      je(n, e[n]) && t.add(n);
    });
    {
      const { extends: n, mixins: i } = e;
      i && i.forEach((e) => _s(e, t)), n && _s(n, t);
    }
  }
  return t;
}
function vs(e, t, n) {
  -1 !== n.indexOf(t) ||
    D(e, t) ||
    (e[t] = function (e) {
      return this.$vm && this.$vm.$callHook(t, e);
    });
}
const ms = [_e];
function ys(e, t, n = ms) {
  t.forEach((t) => vs(e, t, n));
}
function Is(e, t, n = ms) {
  _s(t).forEach((t) => vs(e, t, n));
}
const Ms = Ue(() => {
  const e = [],
    t = L(getApp) && getApp({ allowDefault: !0 });
  if (t && t.$vm && t.$vm.$) {
    const n = t.$vm.$.appContext.mixins;
    if (S(n)) {
      const t = Object.keys(He);
      n.forEach((n) => {
        t.forEach((t) => {
          D(n, t) && !e.includes(t) && e.push(t);
        });
      });
    }
  }
  return e;
});
const Cs = [ce, ue, de, pe, he, fe];
function Ts(e, t) {
  const n = e.$,
    i = {
      globalData: (e.$options && e.$options.globalData) || {},
      $vm: e,
      onLaunch(t) {
        this.$vm = e;
        const i = n.ctx;
        (this.$vm && i.$scope) ||
          (ps(n, { mpType: 'app', mpInstance: this, slots: [] }),
          (i.globalData = this.globalData),
          e.$callHook(le, t));
      },
    },
    { onError: o } = n;
  o &&
    (n.appContext.config.errorHandler = (t) => {
      e.$callHook(de, t);
    }),
    (function (e) {
      const t = yo(ct(wx.getSystemInfoSync().language) || nt);
      Object.defineProperty(e, '$locale', {
        get: () => t.value,
        set(e) {
          t.value = e;
        },
      });
    })(e);
  const r = e.$.type;
  ys(i, Cs), Is(i, r);
  {
    const e = r.methods;
    e && C(i, e);
  }
  return i;
}
function Es(e, t) {
  if (L(e.onLaunch)) {
    const t = wx.getLaunchOptionsSync && wx.getLaunchOptionsSync();
    e.onLaunch(t);
  }
  L(e.onShow) &&
    wx.onAppShow &&
    wx.onAppShow((e) => {
      t.$callHook('onShow', e);
    }),
    L(e.onHide) &&
      wx.onAppHide &&
      wx.onAppHide((e) => {
        t.$callHook('onHide', e);
      });
}
const Ds = ['externalClasses'];
const Ss = /_(.*)_worklet_factory_/;
function ks(e, t) {
  const n = e.$children;
  for (let o = n.length - 1; o >= 0; o--) {
    const e = n[o];
    if (e.$scope._$vueId === t) return e;
  }
  let i;
  for (let o = n.length - 1; o >= 0; o--) if (((i = ks(n[o], t)), i)) return i;
}
const Rs = ['eO', 'uR', 'uRIF', 'uI', 'uT', 'uP', 'uS'];
function Ls(e) {
  e.properties || (e.properties = {}),
    C(
      e.properties,
      (function (e, t = !1) {
        const n = {};
        return (
          t ||
            (Rs.forEach((e) => {
              n[e] = { type: null, value: '' };
            }),
            (n.uS = {
              type: null,
              value: [],
              observer: function (e) {
                const t = Object.create(null);
                e &&
                  e.forEach((e) => {
                    t[e] = !0;
                  }),
                  this.setData({ $slots: t });
              },
            })),
          e.behaviors &&
            e.behaviors.includes('__GLOBAL__://form-field') &&
            ((e.properties && e.properties.name) ||
              (n.name = { type: null, value: '' }),
            (e.properties && e.properties.value) ||
              (n.value = { type: null, value: '' })),
          n
        );
      })(e),
      (function (e) {
        const t = {};
        return (
          e &&
            e.virtualHost &&
            ((t.virtualHostStyle = { type: null, value: '' }),
            (t.virtualHostClass = { type: null, value: '' })),
          t
        );
      })(e.options)
    );
}
const As = [String, Number, Boolean, Object, Array, null];
function Os(e, t) {
  const n = (function (e, t) {
    return S(e) && 1 === e.length ? e[0] : e;
  })(e);
  return -1 !== As.indexOf(n) ? n : null;
}
function bs(e, t) {
  return (
    (t
      ? (function (e) {
          const t = {};
          G(e) &&
            Object.keys(e).forEach((n) => {
              -1 === Rs.indexOf(n) && (t[n] = e[n]);
            });
          return t;
        })(e)
      : os(e.uP)) || {}
  );
}
function Ns(e) {
  const t = function () {
    const e = this.properties.uP;
    e &&
      (this.$vm
        ? (function (e, t) {
            const n = lo(t.props),
              i = os(e) || {};
            Ps(n, i) &&
              (!(function (e, t, n, i) {
                const {
                    props: o,
                    attrs: r,
                    vnode: { patchFlag: a },
                  } = e,
                  s = lo(o),
                  [c] = e.propsOptions;
                let u = !1;
                if (a > 0 && !(16 & a)) {
                  if (8 & a) {
                    const n = e.vnode.dynamicProps;
                    for (let i = 0; i < n.length; i++) {
                      let a = n[i];
                      if (Xo(e.emitsOptions, a)) continue;
                      const l = t[a];
                      if (c)
                        if (D(r, a)) l !== r[a] && ((r[a] = l), (u = !0));
                        else {
                          const t = B(a);
                          o[t] = $r(c, s, t, l, e, !1);
                        }
                      else l !== r[a] && ((r[a] = l), (u = !0));
                    }
                  }
                } else {
                  let i;
                  zr(e, t, o, r) && (u = !0);
                  for (const r in s)
                    (t && (D(t, r) || ((i = j(r)) !== r && D(t, i)))) ||
                      (c
                        ? !n ||
                          (void 0 === n[r] && void 0 === n[i]) ||
                          (o[r] = $r(c, s, r, void 0, e, !0))
                        : delete o[r]);
                  if (r !== s)
                    for (const e in r)
                      (t && D(t, e)) || (delete r[e], (u = !0));
                }
                u && Ii(e, 'set', '$attrs');
              })(t, i, n),
              (o = t.update),
              Po.indexOf(o) > -1 &&
                (function (e) {
                  const t = Po.indexOf(e);
                  t > wo && Po.splice(t, 1);
                })(t.update),
              t.update());
            var o;
          })(e, this.$vm.$)
        : 'm' === this.properties.uT &&
          (function (e, t) {
            const n = t.properties,
              i = os(e) || {};
            Ps(n, i, !1) && t.setData(i);
          })(e, this));
  };
  e.observers || (e.observers = {}), (e.observers.uP = t);
}
function Ps(e, t, n = !0) {
  const i = Object.keys(t);
  if (n && i.length !== Object.keys(e).length) return !0;
  for (let o = 0; o < i.length; o++) {
    const n = i[o];
    if (t[n] !== e[n]) return !0;
  }
  return !1;
}
function ws(e, t) {
  (e.data = {}),
    (e.behaviors = (function (e) {
      const t = e.behaviors;
      let n = e.props;
      n || (e.props = n = []);
      const i = [];
      return (
        S(t) &&
          t.forEach((e) => {
            i.push(e.replace('uni://', '__GLOBAL__://')),
              'uni://form-field' === e &&
                (S(n)
                  ? (n.push('name'), n.push('modelValue'))
                  : ((n.name = { type: String, default: '' }),
                    (n.modelValue = {
                      type: [String, Number, Boolean, Array, Object, Date],
                      default: '',
                    })));
          }),
        i
      );
    })(t));
}
function Us(
  e,
  {
    parse: t,
    mocks: n,
    isPage: i,
    initRelation: o,
    handleLink: r,
    initLifetimes: a,
  }
) {
  e = e.default || e;
  const s = { multipleSlots: !0, addGlobalClass: !0, pureDataPattern: /^uP$/ };
  S(e.mixins) &&
    e.mixins.forEach((e) => {
      b(e.options) && C(s, e.options);
    }),
    e.options && C(s, e.options);
  const c = {
    options: s,
    lifetimes: a({ mocks: n, isPage: i, initRelation: o, vueOptions: e }),
    pageLifetimes: {
      show() {
        this.$vm && this.$vm.$callHook('onPageShow');
      },
      hide() {
        this.$vm && this.$vm.$callHook('onPageHide');
      },
      resize(e) {
        this.$vm && this.$vm.$callHook('onPageResize', e);
      },
    },
    methods: { __l: r },
  };
  var u, l, d, p;
  return (
    ws(c, e),
    Ls(c),
    Ns(c),
    (function (e, t) {
      Ds.forEach((n) => {
        D(t, n) && (e[n] = t[n]);
      });
    })(c, e),
    (u = c.methods),
    (l = e.wxsCallMethods),
    S(l) &&
      l.forEach((e) => {
        u[e] = function (t) {
          return this.$vm[e](t);
        };
      }),
    (d = c.methods),
    (p = e.methods) &&
      Object.keys(p).forEach((e) => {
        const t = e.match(Ss);
        if (t) {
          const n = t[1];
          (d[e] = p[e]), (d[n] = p[n]);
        }
      }),
    t && t(c, { handleLink: r }),
    c
  );
}
let Gs, xs;
function Fs() {
  return getApp().$vm;
}
function qs(e, t) {
  const {
      parse: n,
      mocks: i,
      isPage: o,
      initRelation: r,
      handleLink: a,
      initLifetimes: s,
    } = t,
    c = Us(e, {
      mocks: i,
      isPage: o,
      initRelation: r,
      handleLink: a,
      initLifetimes: s,
    });
  !(function ({ properties: e }, t) {
    S(t)
      ? t.forEach((t) => {
          e[t] = { type: String, value: '' };
        })
      : G(t) &&
        Object.keys(t).forEach((n) => {
          const i = t[n];
          if (G(i)) {
            let t = i.default;
            L(t) && (t = t());
            const o = i.type;
            (i.type = Os(o)), (e[n] = { type: i.type, value: t });
          } else e[n] = { type: Os(i) };
        });
  })(c, (e.default || e).props);
  const u = c.methods;
  return (
    (u.onLoad = function (e) {
      var t;
      return (
        (this.options = e),
        (this.$page = {
          fullPath:
            ((t = this.route + qe(e)),
            (function (e) {
              return 0 === e.indexOf('/');
            })(t)
              ? t
              : '/' + t),
        }),
        this.$vm && this.$vm.$callHook(ge, e)
      );
    }),
    ys(u, gs),
    Is(u, e),
    (function (e, t) {
      if (!t) return;
      Object.keys(He).forEach((n) => {
        t & He[n] && vs(e, n, []);
      });
    })(u, e.__runtimeHooks),
    ys(u, Ms()),
    n && n(c, { handleLink: a }),
    c
  );
}
const Vs = Page,
  Bs = Component;
function Hs(e) {
  const t = e.triggerEvent,
    n = function (n, ...i) {
      return t.apply(e, [((o = n), B(o.replace(Pe, '-'))), ...i]);
      var o;
    };
  try {
    e.triggerEvent = n;
  } catch (i) {
    e._triggerEvent = n;
  }
}
function js(e, t, n) {
  const i = t[e];
  t[e] = i
    ? function (...e) {
        return Hs(this), i.apply(this, e);
      }
    : function () {
        Hs(this);
      };
}
(Page = function (e) {
  return js(ge, e), Vs(e);
}),
  (Component = function (e) {
    js('created', e);
    return (e.properties && e.properties.uP) || (Ls(e), Ns(e)), Bs(e);
  });
var Ks = Object.freeze({
  __proto__: null,
  handleLink: function (e) {
    const t = e.detail || e.value,
      n = t.vuePid;
    let i;
    n && (i = ks(this.$vm, n)), i || (i = this.$vm), (t.parent = i);
  },
  initLifetimes: function ({
    mocks: e,
    isPage: t,
    initRelation: n,
    vueOptions: i,
  }) {
    return {
      attached() {
        let o = this.properties;
        !(function (e, t) {
          if (!e) return;
          const n = e.split(','),
            i = n.length;
          1 === i
            ? (t._$vueId = n[0])
            : 2 === i && ((t._$vueId = n[0]), (t._$vuePid = n[1]));
        })(o.uI, this);
        const r = { vuePid: this._$vuePid };
        n(this, r);
        const a = this,
          s = t(a);
        let c = o;
        (this.$vm = (function (e, t) {
          Gs || (Gs = Fs().$createComponent);
          const n = Gs(e, t);
          return va(n.$) || n;
        })(
          { type: i, props: bs(c, s) },
          {
            mpType: s ? 'page' : 'component',
            mpInstance: a,
            slots: o.uS || {},
            parentComponent: r.parent && r.parent.$,
            onBeforeSetup(t, n) {
              !(function (e, t) {
                Object.defineProperty(e, 'refs', {
                  get() {
                    const e = {};
                    return (
                      (function (e, t, n) {
                        e.selectAllComponents(t).forEach((e) => {
                          const t = e.properties.uR;
                          n[t] = e.$vm || e;
                        });
                      })(t, '.r', e),
                      t.selectAllComponents('.r-i-f').forEach((t) => {
                        const n = t.properties.uR;
                        n && (e[n] || (e[n] = []), e[n].push(t.$vm || t));
                      }),
                      e
                    );
                  },
                });
              })(t, a),
                (function (e, t, n) {
                  const i = e.ctx;
                  n.forEach((n) => {
                    D(t, n) && (e[n] = i[n] = t[n]);
                  });
                })(t, a, e),
                (function (e, t) {
                  ps(e, t);
                  const n = e.ctx;
                  ds.forEach((e) => {
                    n[e] = function (...t) {
                      const i = n.$scope;
                      if (i && i[e]) return i[e].apply(i, t);
                    };
                  });
                })(t, n);
            },
          }
        )),
          s ||
            (function (e) {
              const t = e.$options;
              S(t.behaviors) &&
                t.behaviors.includes('uni://form-field') &&
                e.$watch(
                  'modelValue',
                  () => {
                    e.$scope &&
                      e.$scope.setData({ name: e.name, value: e.modelValue });
                  },
                  { immediate: !0 }
                );
            })(this.$vm);
      },
      ready() {
        this.$vm && (this.$vm.$callHook('mounted'), this.$vm.$callHook(_e));
      },
      detached() {
        var e;
        this.$vm &&
          (is(this.$vm.$.uid),
          (e = this.$vm),
          xs || (xs = Fs().$destroyComponent),
          xs(e));
      },
    };
  },
  initRelation: function (e, t) {
    e.triggerEvent('__l', t);
  },
  isPage: function (e) {
    return !!e.route;
  },
  mocks: ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'],
});
const Ws = function (e) {
    return App(Ts(e));
  },
  zs =
    (($s = Ks),
    function (e) {
      return Component(qs(e, $s));
    });
var $s;
const Ys = (function (e) {
    return function (t) {
      return Component(Us(t, e));
    };
  })(Ks),
  Js = function (e) {
    Es(Ts(e), e);
  },
  Xs = function (e) {
    const t = Ts(e),
      n = L(getApp) && getApp({ allowDefault: !0 });
    if (!n) return;
    e.$.ctx.$scope = n;
    const i = n.globalData;
    i &&
      Object.keys(t.globalData).forEach((e) => {
        D(i, e) || (i[e] = t.globalData[e]);
      }),
      Object.keys(t).forEach((e) => {
        D(n, e) || (n[e] = t[e]);
      }),
      Es(t, e);
  };
(wx.createApp = global.createApp = Ws),
  (wx.createPage = zs),
  (wx.createComponent = Ys),
  (wx.createPluginApp = global.createPluginApp = Js),
  (wx.createSubpackageApp = global.createSubpackageApp = Xs);
var Zs =
  'undefined' != typeof globalThis
    ? globalThis
    : 'undefined' != typeof window
      ? window
      : 'undefined' != typeof global
        ? global
        : 'undefined' != typeof self
          ? self
          : {};
function Qs(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, 'default')
    ? e.default
    : e;
}
function ec(e) {
  if (e.__esModule) return e;
  var t = e.default;
  if ('function' == typeof t) {
    var n = function e() {
      return this instanceof e
        ? Reflect.construct(t, arguments, this.constructor)
        : t.apply(this, arguments);
    };
    n.prototype = t.prototype;
  } else n = {};
  return (
    Object.defineProperty(n, '__esModule', { value: !0 }),
    Object.keys(e).forEach(function (t) {
      var i = Object.getOwnPropertyDescriptor(e, t);
      Object.defineProperty(
        n,
        t,
        i.get
          ? i
          : {
              enumerable: !0,
              get: function () {
                return e[t];
              },
            }
      );
    }),
    n
  );
}
var tc = { exports: {} };
tc.exports = (function () {
  var e = 1e3,
    t = 6e4,
    n = 36e5,
    i = 'millisecond',
    o = 'second',
    r = 'minute',
    a = 'hour',
    s = 'day',
    c = 'week',
    u = 'month',
    l = 'quarter',
    d = 'year',
    p = 'date',
    h = 'Invalid Date',
    f =
      /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
    g =
      /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
    _ = {
      name: 'en',
      weekdays:
        'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
      months:
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
        ),
      ordinal: function (e) {
        var t = ['th', 'st', 'nd', 'rd'],
          n = e % 100;
        return '[' + e + (t[(n - 20) % 10] || t[n] || t[0]) + ']';
      },
    },
    v = function (e, t, n) {
      var i = String(e);
      return !i || i.length >= t ? e : '' + Array(t + 1 - i.length).join(n) + e;
    },
    m = {
      s: v,
      z: function (e) {
        var t = -e.utcOffset(),
          n = Math.abs(t),
          i = Math.floor(n / 60),
          o = n % 60;
        return (t <= 0 ? '+' : '-') + v(i, 2, '0') + ':' + v(o, 2, '0');
      },
      m: function e(t, n) {
        if (t.date() < n.date()) return -e(n, t);
        var i = 12 * (n.year() - t.year()) + (n.month() - t.month()),
          o = t.clone().add(i, u),
          r = n - o < 0,
          a = t.clone().add(i + (r ? -1 : 1), u);
        return +(-(i + (n - o) / (r ? o - a : a - o)) || 0);
      },
      a: function (e) {
        return e < 0 ? Math.ceil(e) || 0 : Math.floor(e);
      },
      p: function (e) {
        return (
          { M: u, y: d, w: c, d: s, D: p, h: a, m: r, s: o, ms: i, Q: l }[e] ||
          String(e || '')
            .toLowerCase()
            .replace(/s$/, '')
        );
      },
      u: function (e) {
        return void 0 === e;
      },
    },
    y = 'en',
    I = {};
  I[y] = _;
  var M = '$isDayjsObject',
    C = function (e) {
      return e instanceof S || !(!e || !e[M]);
    },
    T = function e(t, n, i) {
      var o;
      if (!t) return y;
      if ('string' == typeof t) {
        var r = t.toLowerCase();
        I[r] && (o = r), n && ((I[r] = n), (o = r));
        var a = t.split('-');
        if (!o && a.length > 1) return e(a[0]);
      } else {
        var s = t.name;
        (I[s] = t), (o = s);
      }
      return !i && o && (y = o), o || (!i && y);
    },
    E = function (e, t) {
      if (C(e)) return e.clone();
      var n = 'object' == typeof t ? t : {};
      return (n.date = e), (n.args = arguments), new S(n);
    },
    D = m;
  (D.l = T),
    (D.i = C),
    (D.w = function (e, t) {
      return E(e, { locale: t.$L, utc: t.$u, x: t.$x, $offset: t.$offset });
    });
  var S = (function () {
      function _(e) {
        (this.$L = T(e.locale, null, !0)),
          this.parse(e),
          (this.$x = this.$x || e.x || {}),
          (this[M] = !0);
      }
      var v = _.prototype;
      return (
        (v.parse = function (e) {
          (this.$d = (function (e) {
            var t = e.date,
              n = e.utc;
            if (null === t) return new Date(NaN);
            if (D.u(t)) return new Date();
            if (t instanceof Date) return new Date(t);
            if ('string' == typeof t && !/Z$/i.test(t)) {
              var i = t.match(f);
              if (i) {
                var o = i[2] - 1 || 0,
                  r = (i[7] || '0').substring(0, 3);
                return n
                  ? new Date(
                      Date.UTC(
                        i[1],
                        o,
                        i[3] || 1,
                        i[4] || 0,
                        i[5] || 0,
                        i[6] || 0,
                        r
                      )
                    )
                  : new Date(
                      i[1],
                      o,
                      i[3] || 1,
                      i[4] || 0,
                      i[5] || 0,
                      i[6] || 0,
                      r
                    );
              }
            }
            return new Date(t);
          })(e)),
            this.init();
        }),
        (v.init = function () {
          var e = this.$d;
          (this.$y = e.getFullYear()),
            (this.$M = e.getMonth()),
            (this.$D = e.getDate()),
            (this.$W = e.getDay()),
            (this.$H = e.getHours()),
            (this.$m = e.getMinutes()),
            (this.$s = e.getSeconds()),
            (this.$ms = e.getMilliseconds());
        }),
        (v.$utils = function () {
          return D;
        }),
        (v.isValid = function () {
          return !(this.$d.toString() === h);
        }),
        (v.isSame = function (e, t) {
          var n = E(e);
          return this.startOf(t) <= n && n <= this.endOf(t);
        }),
        (v.isAfter = function (e, t) {
          return E(e) < this.startOf(t);
        }),
        (v.isBefore = function (e, t) {
          return this.endOf(t) < E(e);
        }),
        (v.$g = function (e, t, n) {
          return D.u(e) ? this[t] : this.set(n, e);
        }),
        (v.unix = function () {
          return Math.floor(this.valueOf() / 1e3);
        }),
        (v.valueOf = function () {
          return this.$d.getTime();
        }),
        (v.startOf = function (e, t) {
          var n = this,
            i = !!D.u(t) || t,
            l = D.p(e),
            h = function (e, t) {
              var o = D.w(
                n.$u ? Date.UTC(n.$y, t, e) : new Date(n.$y, t, e),
                n
              );
              return i ? o : o.endOf(s);
            },
            f = function (e, t) {
              return D.w(
                n
                  .toDate()
                  [
                    e
                  ].apply(n.toDate('s'), (i ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(t)),
                n
              );
            },
            g = this.$W,
            _ = this.$M,
            v = this.$D,
            m = 'set' + (this.$u ? 'UTC' : '');
          switch (l) {
            case d:
              return i ? h(1, 0) : h(31, 11);
            case u:
              return i ? h(1, _) : h(0, _ + 1);
            case c:
              var y = this.$locale().weekStart || 0,
                I = (g < y ? g + 7 : g) - y;
              return h(i ? v - I : v + (6 - I), _);
            case s:
            case p:
              return f(m + 'Hours', 0);
            case a:
              return f(m + 'Minutes', 1);
            case r:
              return f(m + 'Seconds', 2);
            case o:
              return f(m + 'Milliseconds', 3);
            default:
              return this.clone();
          }
        }),
        (v.endOf = function (e) {
          return this.startOf(e, !1);
        }),
        (v.$set = function (e, t) {
          var n,
            c = D.p(e),
            l = 'set' + (this.$u ? 'UTC' : ''),
            h = ((n = {}),
            (n[s] = l + 'Date'),
            (n[p] = l + 'Date'),
            (n[u] = l + 'Month'),
            (n[d] = l + 'FullYear'),
            (n[a] = l + 'Hours'),
            (n[r] = l + 'Minutes'),
            (n[o] = l + 'Seconds'),
            (n[i] = l + 'Milliseconds'),
            n)[c],
            f = c === s ? this.$D + (t - this.$W) : t;
          if (c === u || c === d) {
            var g = this.clone().set(p, 1);
            g.$d[h](f),
              g.init(),
              (this.$d = g.set(p, Math.min(this.$D, g.daysInMonth())).$d);
          } else h && this.$d[h](f);
          return this.init(), this;
        }),
        (v.set = function (e, t) {
          return this.clone().$set(e, t);
        }),
        (v.get = function (e) {
          return this[D.p(e)]();
        }),
        (v.add = function (i, l) {
          var p,
            h = this;
          i = Number(i);
          var f = D.p(l),
            g = function (e) {
              var t = E(h);
              return D.w(t.date(t.date() + Math.round(e * i)), h);
            };
          if (f === u) return this.set(u, this.$M + i);
          if (f === d) return this.set(d, this.$y + i);
          if (f === s) return g(1);
          if (f === c) return g(7);
          var _ = ((p = {}), (p[r] = t), (p[a] = n), (p[o] = e), p)[f] || 1,
            v = this.$d.getTime() + i * _;
          return D.w(v, this);
        }),
        (v.subtract = function (e, t) {
          return this.add(-1 * e, t);
        }),
        (v.format = function (e) {
          var t = this,
            n = this.$locale();
          if (!this.isValid()) return n.invalidDate || h;
          var i = e || 'YYYY-MM-DDTHH:mm:ssZ',
            o = D.z(this),
            r = this.$H,
            a = this.$m,
            s = this.$M,
            c = n.weekdays,
            u = n.months,
            l = n.meridiem,
            d = function (e, n, o, r) {
              return (e && (e[n] || e(t, i))) || o[n].slice(0, r);
            },
            p = function (e) {
              return D.s(r % 12 || 12, e, '0');
            },
            f =
              l ||
              function (e, t, n) {
                var i = e < 12 ? 'AM' : 'PM';
                return n ? i.toLowerCase() : i;
              };
          return i.replace(g, function (e, i) {
            return (
              i ||
              (function (e) {
                switch (e) {
                  case 'YY':
                    return String(t.$y).slice(-2);
                  case 'YYYY':
                    return D.s(t.$y, 4, '0');
                  case 'M':
                    return s + 1;
                  case 'MM':
                    return D.s(s + 1, 2, '0');
                  case 'MMM':
                    return d(n.monthsShort, s, u, 3);
                  case 'MMMM':
                    return d(u, s);
                  case 'D':
                    return t.$D;
                  case 'DD':
                    return D.s(t.$D, 2, '0');
                  case 'd':
                    return String(t.$W);
                  case 'dd':
                    return d(n.weekdaysMin, t.$W, c, 2);
                  case 'ddd':
                    return d(n.weekdaysShort, t.$W, c, 3);
                  case 'dddd':
                    return c[t.$W];
                  case 'H':
                    return String(r);
                  case 'HH':
                    return D.s(r, 2, '0');
                  case 'h':
                    return p(1);
                  case 'hh':
                    return p(2);
                  case 'a':
                    return f(r, a, !0);
                  case 'A':
                    return f(r, a, !1);
                  case 'm':
                    return String(a);
                  case 'mm':
                    return D.s(a, 2, '0');
                  case 's':
                    return String(t.$s);
                  case 'ss':
                    return D.s(t.$s, 2, '0');
                  case 'SSS':
                    return D.s(t.$ms, 3, '0');
                  case 'Z':
                    return o;
                }
                return null;
              })(e) ||
              o.replace(':', '')
            );
          });
        }),
        (v.utcOffset = function () {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }),
        (v.diff = function (i, p, h) {
          var f,
            g = this,
            _ = D.p(p),
            v = E(i),
            m = (v.utcOffset() - this.utcOffset()) * t,
            y = this - v,
            I = function () {
              return D.m(g, v);
            };
          switch (_) {
            case d:
              f = I() / 12;
              break;
            case u:
              f = I();
              break;
            case l:
              f = I() / 3;
              break;
            case c:
              f = (y - m) / 6048e5;
              break;
            case s:
              f = (y - m) / 864e5;
              break;
            case a:
              f = y / n;
              break;
            case r:
              f = y / t;
              break;
            case o:
              f = y / e;
              break;
            default:
              f = y;
          }
          return h ? f : D.a(f);
        }),
        (v.daysInMonth = function () {
          return this.endOf(u).$D;
        }),
        (v.$locale = function () {
          return I[this.$L];
        }),
        (v.locale = function (e, t) {
          if (!e) return this.$L;
          var n = this.clone(),
            i = T(e, t, !0);
          return i && (n.$L = i), n;
        }),
        (v.clone = function () {
          return D.w(this.$d, this);
        }),
        (v.toDate = function () {
          return new Date(this.valueOf());
        }),
        (v.toJSON = function () {
          return this.isValid() ? this.toISOString() : null;
        }),
        (v.toISOString = function () {
          return this.$d.toISOString();
        }),
        (v.toString = function () {
          return this.$d.toUTCString();
        }),
        _
      );
    })(),
    k = S.prototype;
  return (
    (E.prototype = k),
    [
      ['$ms', i],
      ['$s', o],
      ['$m', r],
      ['$H', a],
      ['$W', s],
      ['$M', u],
      ['$y', d],
      ['$D', p],
    ].forEach(function (e) {
      k[e[1]] = function (t) {
        return this.$g(t, e[0], e[1]);
      };
    }),
    (E.extend = function (e, t) {
      return e.$i || (e(t, S, E), (e.$i = !0)), E;
    }),
    (E.locale = T),
    (E.isDayjs = C),
    (E.unix = function (e) {
      return E(1e3 * e);
    }),
    (E.en = I[y]),
    (E.Ls = I),
    (E.p = {}),
    E
  );
})();
const nc = Qs(tc.exports);
var ic,
  oc,
  rc,
  ac,
  sc,
  cc,
  uc,
  lc,
  dc,
  pc,
  hc,
  fc,
  gc,
  _c,
  vc,
  mc,
  yc,
  Ic,
  Mc,
  Cc,
  Tc = { exports: {} };
const Ec = Qs(
    (Tc.exports =
      ((uc =
        /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g),
      (pc =
        /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/),
      (hc = {
        years: (lc = 31536e6),
        months: (dc = 2628e6),
        days: (cc = 864e5),
        hours: (sc = 36e5),
        minutes: (ac = 6e4),
        seconds: (rc = 1e3),
        milliseconds: 1,
        weeks: 6048e5,
      }),
      (fc = function (e) {
        return e instanceof Mc;
      }),
      (gc = function (e, t, n) {
        return new Mc(e, n, t.$l);
      }),
      (_c = function (e) {
        return oc.p(e) + 's';
      }),
      (vc = function (e) {
        return e < 0;
      }),
      (mc = function (e) {
        return vc(e) ? Math.ceil(e) : Math.floor(e);
      }),
      (yc = function (e) {
        return Math.abs(e);
      }),
      (Ic = function (e, t) {
        return e
          ? vc(e)
            ? { negative: !0, format: '' + yc(e) + t }
            : { negative: !1, format: '' + e + t }
          : { negative: !1, format: '' };
      }),
      (Mc = (function () {
        function e(e, t, n) {
          var i = this;
          if (
            ((this.$d = {}),
            (this.$l = n),
            void 0 === e && ((this.$ms = 0), this.parseFromMilliseconds()),
            t)
          )
            return gc(e * hc[_c(t)], this);
          if ('number' == typeof e)
            return (this.$ms = e), this.parseFromMilliseconds(), this;
          if ('object' == typeof e)
            return (
              Object.keys(e).forEach(function (t) {
                i.$d[_c(t)] = e[t];
              }),
              this.calMilliseconds(),
              this
            );
          if ('string' == typeof e) {
            var o = e.match(pc);
            if (o) {
              var r = o.slice(2).map(function (e) {
                return null != e ? Number(e) : 0;
              });
              return (
                (this.$d.years = r[0]),
                (this.$d.months = r[1]),
                (this.$d.weeks = r[2]),
                (this.$d.days = r[3]),
                (this.$d.hours = r[4]),
                (this.$d.minutes = r[5]),
                (this.$d.seconds = r[6]),
                this.calMilliseconds(),
                this
              );
            }
          }
          return this;
        }
        var t = e.prototype;
        return (
          (t.calMilliseconds = function () {
            var e = this;
            this.$ms = Object.keys(this.$d).reduce(function (t, n) {
              return t + (e.$d[n] || 0) * hc[n];
            }, 0);
          }),
          (t.parseFromMilliseconds = function () {
            var e = this.$ms;
            (this.$d.years = mc(e / lc)),
              (e %= lc),
              (this.$d.months = mc(e / dc)),
              (e %= dc),
              (this.$d.days = mc(e / cc)),
              (e %= cc),
              (this.$d.hours = mc(e / sc)),
              (e %= sc),
              (this.$d.minutes = mc(e / ac)),
              (e %= ac),
              (this.$d.seconds = mc(e / rc)),
              (e %= rc),
              (this.$d.milliseconds = e);
          }),
          (t.toISOString = function () {
            var e = Ic(this.$d.years, 'Y'),
              t = Ic(this.$d.months, 'M'),
              n = +this.$d.days || 0;
            this.$d.weeks && (n += 7 * this.$d.weeks);
            var i = Ic(n, 'D'),
              o = Ic(this.$d.hours, 'H'),
              r = Ic(this.$d.minutes, 'M'),
              a = this.$d.seconds || 0;
            this.$d.milliseconds &&
              ((a += this.$d.milliseconds / 1e3),
              (a = Math.round(1e3 * a) / 1e3));
            var s = Ic(a, 'S'),
              c =
                e.negative ||
                t.negative ||
                i.negative ||
                o.negative ||
                r.negative ||
                s.negative,
              u = o.format || r.format || s.format ? 'T' : '',
              l =
                (c ? '-' : '') +
                'P' +
                e.format +
                t.format +
                i.format +
                u +
                o.format +
                r.format +
                s.format;
            return 'P' === l || '-P' === l ? 'P0D' : l;
          }),
          (t.toJSON = function () {
            return this.toISOString();
          }),
          (t.format = function (e) {
            var t = e || 'YYYY-MM-DDTHH:mm:ss',
              n = {
                Y: this.$d.years,
                YY: oc.s(this.$d.years, 2, '0'),
                YYYY: oc.s(this.$d.years, 4, '0'),
                M: this.$d.months,
                MM: oc.s(this.$d.months, 2, '0'),
                D: this.$d.days,
                DD: oc.s(this.$d.days, 2, '0'),
                H: this.$d.hours,
                HH: oc.s(this.$d.hours, 2, '0'),
                m: this.$d.minutes,
                mm: oc.s(this.$d.minutes, 2, '0'),
                s: this.$d.seconds,
                ss: oc.s(this.$d.seconds, 2, '0'),
                SSS: oc.s(this.$d.milliseconds, 3, '0'),
              };
            return t.replace(uc, function (e, t) {
              return t || String(n[e]);
            });
          }),
          (t.as = function (e) {
            return this.$ms / hc[_c(e)];
          }),
          (t.get = function (e) {
            var t = this.$ms,
              n = _c(e);
            return (
              'milliseconds' === n
                ? (t %= 1e3)
                : (t = 'weeks' === n ? mc(t / hc[n]) : this.$d[n]),
              t || 0
            );
          }),
          (t.add = function (e, t, n) {
            var i;
            return (
              (i = t ? e * hc[_c(t)] : fc(e) ? e.$ms : gc(e, this).$ms),
              gc(this.$ms + i * (n ? -1 : 1), this)
            );
          }),
          (t.subtract = function (e, t) {
            return this.add(e, t, !0);
          }),
          (t.locale = function (e) {
            var t = this.clone();
            return (t.$l = e), t;
          }),
          (t.clone = function () {
            return gc(this.$ms, this);
          }),
          (t.humanize = function (e) {
            return ic().add(this.$ms, 'ms').locale(this.$l).fromNow(!e);
          }),
          (t.valueOf = function () {
            return this.asMilliseconds();
          }),
          (t.milliseconds = function () {
            return this.get('milliseconds');
          }),
          (t.asMilliseconds = function () {
            return this.as('milliseconds');
          }),
          (t.seconds = function () {
            return this.get('seconds');
          }),
          (t.asSeconds = function () {
            return this.as('seconds');
          }),
          (t.minutes = function () {
            return this.get('minutes');
          }),
          (t.asMinutes = function () {
            return this.as('minutes');
          }),
          (t.hours = function () {
            return this.get('hours');
          }),
          (t.asHours = function () {
            return this.as('hours');
          }),
          (t.days = function () {
            return this.get('days');
          }),
          (t.asDays = function () {
            return this.as('days');
          }),
          (t.weeks = function () {
            return this.get('weeks');
          }),
          (t.asWeeks = function () {
            return this.as('weeks');
          }),
          (t.months = function () {
            return this.get('months');
          }),
          (t.asMonths = function () {
            return this.as('months');
          }),
          (t.years = function () {
            return this.get('years');
          }),
          (t.asYears = function () {
            return this.as('years');
          }),
          e
        );
      })()),
      (Cc = function (e, t, n) {
        return e
          .add(t.years() * n, 'y')
          .add(t.months() * n, 'M')
          .add(t.days() * n, 'd')
          .add(t.hours() * n, 'h')
          .add(t.minutes() * n, 'm')
          .add(t.seconds() * n, 's')
          .add(t.milliseconds() * n, 'ms');
      }),
      function (e, t, n) {
        (ic = n),
          (oc = n().$utils()),
          (n.duration = function (e, t) {
            var i = n.locale();
            return gc(e, { $l: i }, t);
          }),
          (n.isDuration = fc);
        var i = t.prototype.add,
          o = t.prototype.subtract;
        (t.prototype.add = function (e, t) {
          return fc(e) ? Cc(this, e, 1) : i.bind(this)(e, t);
        }),
          (t.prototype.subtract = function (e, t) {
            return fc(e) ? Cc(this, e, -1) : o.bind(this)(e, t);
          });
      }))
  ),
  Dc = Symbol('globalData'),
  Sc = yo({ onShowFlag: !0 }),
  kc = (e) => {
    Sc.value = { ...Sc.value, ...e };
  };
/*!
 * pinia v2.2.2
 * (c) 2024 Eduardo San Martin Morote
 * @license MIT
 */
let Rc;
const Lc = (e) => (Rc = e),
  Ac = Symbol();
function Oc(e) {
  return (
    e &&
    'object' == typeof e &&
    '[object Object]' === Object.prototype.toString.call(e) &&
    'function' != typeof e.toJSON
  );
}
var bc, Nc;
((Nc = bc || (bc = {})).direct = 'direct'),
  (Nc.patchObject = 'patch object'),
  (Nc.patchFunction = 'patch function');
const Pc = () => {};
function wc(e, t, n, i = Pc) {
  e.push(t);
  const o = () => {
    const n = e.indexOf(t);
    n > -1 && (e.splice(n, 1), i());
  };
  return (
    !n &&
      ei() &&
      (function (e) {
        Jn && Jn.cleanups.push(e);
      })(o),
    o
  );
}
function Uc(e, ...t) {
  e.slice().forEach((e) => {
    e(...t);
  });
}
const Gc = (e) => e(),
  xc = Symbol(),
  Fc = Symbol();
function qc(e, t) {
  e instanceof Map && t instanceof Map
    ? t.forEach((t, n) => e.set(n, t))
    : e instanceof Set && t instanceof Set && t.forEach(e.add, e);
  for (const n in t) {
    if (!t.hasOwnProperty(n)) continue;
    const i = t[n],
      o = e[n];
    Oc(o) && Oc(i) && e.hasOwnProperty(n) && !mo(i) && !so(i)
      ? (e[n] = qc(o, i))
      : (e[n] = i);
  }
  return e;
}
const Vc = Symbol();
const { assign: Bc } = Object;
function Hc(e) {
  return !(!mo(e) || !e.effect);
}
function jc(e, t, n = {}, i, o, r) {
  let a;
  const s = Bc({ actions: {} }, n),
    c = { deep: !0 };
  let u,
    l,
    d,
    p = [],
    h = [];
  const f = i.state.value[e];
  let g;
  function _(t) {
    let n;
    (u = l = !1),
      'function' == typeof t
        ? (t(i.state.value[e]),
          (n = { type: bc.patchFunction, storeId: e, events: d }))
        : (qc(i.state.value[e], t),
          (n = { type: bc.patchObject, payload: t, storeId: e, events: d }));
    const o = (g = Symbol());
    Vo().then(() => {
      g === o && (u = !0);
    }),
      (l = !0),
      Uc(p, n, i.state.value[e]);
  }
  r || f || (i.state.value[e] = {}), yo({});
  const v = r
    ? function () {
        const { state: e } = n,
          t = e ? e() : {};
        this.$patch((e) => {
          Bc(e, t);
        });
      }
    : Pc;
  const m = (t, n = '') => {
      if (xc in t) return (t[Fc] = n), t;
      const o = function () {
        Lc(i);
        const n = Array.from(arguments),
          r = [],
          a = [];
        let s;
        Uc(h, {
          args: n,
          name: o[Fc],
          store: y,
          after: function (e) {
            r.push(e);
          },
          onError: function (e) {
            a.push(e);
          },
        });
        try {
          s = t.apply(this && this.$id === e ? this : y, n);
        } catch (c) {
          throw (Uc(a, c), c);
        }
        return s instanceof Promise
          ? s
              .then((e) => (Uc(r, e), e))
              .catch((e) => (Uc(a, e), Promise.reject(e)))
          : (Uc(r, s), s);
      };
      return (o[xc] = !0), (o[Fc] = n), o;
    },
    y = io({
      _p: i,
      $id: e,
      $onAction: wc.bind(null, h),
      $patch: _,
      $reset: v,
      $subscribe(t, n = {}) {
        const o = wc(p, t, n.detached, () => r()),
          r = a.run(() =>
            ir(
              () => i.state.value[e],
              (i) => {
                ('sync' === n.flush ? l : u) &&
                  t({ storeId: e, type: bc.direct, events: d }, i);
              },
              Bc({}, c, n)
            )
          );
        return o;
      },
      $dispose: function () {
        a.stop(), (p = []), (h = []), i._s.delete(e);
      },
    });
  i._s.set(e, y);
  const I = ((i._a && i._a.runWithContext) || Gc)(() =>
    i._e.run(() => (a = Qn()).run(() => t({ action: m })))
  );
  for (const C in I) {
    const t = I[C];
    if ((mo(t) && !Hc(t)) || so(t))
      r ||
        (!f ||
          (Oc((M = t)) && M.hasOwnProperty(Vc)) ||
          (mo(t) ? (t.value = f[C]) : qc(t, f[C])),
        (i.state.value[e][C] = t));
    else if ('function' == typeof t) {
      const e = m(t, C);
      (I[C] = e), (s.actions[C] = t);
    }
  }
  var M;
  return (
    Bc(y, I),
    Bc(lo(y), I),
    Object.defineProperty(y, '$state', {
      get: () => i.state.value[e],
      set: (e) => {
        _((t) => {
          Bc(t, e);
        });
      },
    }),
    i._p.forEach((e) => {
      Bc(
        y,
        a.run(() => e({ store: y, app: i._a, pinia: i, options: s }))
      );
    }),
    f && r && n.hydrate && n.hydrate(y.$state, f),
    (u = !0),
    (l = !0),
    y
  );
}
function Kc(e, t, n) {
  let i, o;
  const r = 'function' == typeof t;
  function a(e, n) {
    (e = e || (!!(aa || Zo || lr) ? pr(Ac, null) : null)) && Lc(e),
      (e = Rc)._s.has(i) ||
        (r
          ? jc(i, t, o, e)
          : (function (e, t, n, i) {
              const { state: o, actions: r, getters: a } = t,
                s = n.state.value[e];
              let c;
              c = jc(
                e,
                function () {
                  s || (n.state.value[e] = o ? o() : {});
                  const t = Eo(n.state.value[e]);
                  return Bc(
                    t,
                    r,
                    Object.keys(a || {}).reduce(
                      (t, i) => (
                        (t[i] = po(
                          ma(() => {
                            Lc(n);
                            const t = n._s.get(e);
                            return a[i].call(t, t);
                          })
                        )),
                        t
                      ),
                      {}
                    )
                  );
                },
                t,
                n,
                0,
                !0
              );
            })(i, o, e));
    return e._s.get(i);
  }
  return (
    'string' == typeof e ? ((i = e), (o = r ? n : t)) : ((o = e), (i = e.id)),
    (a.$id = i),
    a
  );
}
function Wc(e) {
  {
    e = lo(e);
    const t = {};
    for (const n in e) {
      const i = e[n];
      (mo(i) || so(i)) && (t[n] = ko(e, n));
    }
    return t;
  }
}
function zc(e, t) {
  return (
    (e = (function (e) {
      return 'object' == typeof e && null !== e;
    })(e)
      ? e
      : Object.create(null)),
    new Proxy(e, {
      get: (e, n, i) =>
        'key' === n
          ? Reflect.get(e, n, i)
          : Reflect.get(e, n, i) || Reflect.get(t, n, i),
    })
  );
}
function $c(e, { storage: t, serializer: n, key: i, debug: o }) {
  try {
    const o = null == t ? void 0 : t.getItem(i);
    o && e.$patch(null == n ? void 0 : n.deserialize(o));
  } catch (sc) {
    o && console.error('[pinia-plugin-persistedstate]', sc);
  }
}
function Yc(e, { storage: t, serializer: n, key: i, paths: o, debug: r }) {
  try {
    const r = Array.isArray(o)
      ? (function (e, t) {
          return t.reduce((t, n) => {
            const i = n.split('.');
            return (function (e, t, n) {
              return (
                (t
                  .slice(0, -1)
                  .reduce(
                    (e, t) =>
                      /^(__proto__)$/.test(t) ? {} : (e[t] = e[t] || {}),
                    e
                  )[t[t.length - 1]] = n),
                e
              );
            })(
              t,
              i,
              (function (e, t) {
                return t.reduce((e, t) => (null == e ? void 0 : e[t]), e);
              })(e, i)
            );
          }, {});
        })(e, o)
      : e;
    t.setItem(i, n.serialize(r));
  } catch (sc) {
    r && console.error('[pinia-plugin-persistedstate]', sc);
  }
}
var Jc = (function (e = {}) {
  return (t) => {
    const { auto: n = !1 } = e,
      {
        options: { persist: i = n },
        store: o,
        pinia: r,
      } = t;
    if (!i) return;
    if (!(o.$id in r.state.value)) {
      const e = r._s.get(o.$id.replace('__hot:', ''));
      return void (e && Promise.resolve().then(() => e.$persist()));
    }
    const a = (Array.isArray(i) ? i.map((t) => zc(t, e)) : [zc(i, e)])
      .map(
        (function (e, t) {
          return (n) => {
            var i;
            try {
              const {
                storage: o = localStorage,
                beforeRestore: r,
                afterRestore: a,
                serializer: s = {
                  serialize: JSON.stringify,
                  deserialize: JSON.parse,
                },
                key: c = t.$id,
                paths: u = null,
                debug: l = !1,
              } = n;
              return {
                storage: o,
                beforeRestore: r,
                afterRestore: a,
                serializer: s,
                key: (null != (i = e.key) ? i : (e) => e)(
                  'string' == typeof c ? c : c(t.$id)
                ),
                paths: u,
                debug: l,
              };
            } catch (sc) {
              return (
                n.debug && console.error('[pinia-plugin-persistedstate]', sc),
                null
              );
            }
          };
        })(e, o)
      )
      .filter(Boolean);
    (o.$persist = () => {
      a.forEach((e) => {
        Yc(o.$state, e);
      });
    }),
      (o.$hydrate = ({ runHooks: e = !0 } = {}) => {
        a.forEach((n) => {
          const { beforeRestore: i, afterRestore: r } = n;
          e && (null == i || i(t)), $c(o, n), e && (null == r || r(t));
        });
      }),
      a.forEach((e) => {
        const { beforeRestore: n, afterRestore: i } = e;
        null == n || n(t),
          $c(o, e),
          null == i || i(t),
          o.$subscribe(
            (t, n) => {
              Yc(n, e);
            },
            { detached: !0 }
          );
      });
  };
})();
const Xc = {
    getItem: (e) => Yn.getStorageSync(e),
    setItem: (e, t) => {
      Yn.setStorageSync(e, t);
    },
  },
  Zc = (e, t) => ({ key: e, paths: t, storage: Xc }),
  Qc = Kc(
    'clinic-appConfig',
    () => {
      const e = yo({});
      return {
        CONFIG: e,
        setAppConfig: (t) => {
          e.value = t;
        },
      };
    },
    { persist: Zc('clinic-appConfig') }
  ),
  eu = Kc(
    'clinic-medicalInsuranceAuth',
    () => {
      const e = yo(),
        t = yo(),
        n = yo({ orderDetail: '', payAuthNo: '' }),
        i = yo({ authNo: '' }),
        o = yo({ authNo: '' }),
        r = yo({ authNo: '' });
      return {
        medicalAuthStatus: e,
        setMedicalAuthStatus: (t) => {
          e.value = t;
        },
        medicalAuthType: t,
        setMedicalAuthType: (e) => {
          t.value = e;
        },
        paymentInfo: n,
        setPaymentInfo: (e) => {
          n.value = e;
        },
        userAuthInfo: i,
        setUserAuthInfo: (e) => {
          i.value = e;
        },
        payAuthInfo: r,
        setPayAuthInfo: (e) => {
          r.value = e;
        },
        prescriptionAuthInfo: o,
        setPrescriptionAuthInfo: (e) => {
          o.value = e;
        },
      };
    },
    { persist: Zc('clinic-medicalInsuranceAuth') }
  ),
  tu = Kc(
    'clinic-userInfo',
    () => {
      const e = yo(null);
      return {
        userInfo: e,
        setUserInfo: (t) => {
          e.value = t;
        },
      };
    },
    { persist: Zc('clinic-userInfo') }
  ),
  nu = (function () {
    const e = Qn(!0),
      t = e.run(() => yo({}));
    let n = [],
      i = [];
    const o = po({
      install(e) {
        Lc(o),
          (o._a = e),
          e.provide(Ac, o),
          (e.config.globalProperties.$pinia = o),
          i.forEach((e) => n.push(e)),
          (i = []);
      },
      use(e) {
        return this._a ? n.push(e) : i.push(e), this;
      },
      _p: n,
      _a: null,
      _e: e,
      _s: new Map(),
      state: t,
    });
    return o;
  })();
nu.use(Jc), nc.extend(Ec);
const iu = () => {
    const e = getCurrentPages(),
      t = e[e.length - 1],
      n = Object.keys(t.options)
        .map((e) => `${e}=${t.options[e]}`)
        .join('&'),
      i = n ? `/${t.route}?${n}` : `/${t.route}`;
    return {
      path: `/${t.route}` || '',
      query: t.options,
      queryString: n,
      fullPath: i,
    };
  },
  ou = () => {
    const e = yo(null),
      t = Qc(),
      { ORG_ID: n } = t.CONFIG,
      i = tu(),
      { userInfo: o } = Wc(i),
      r = eu(),
      { userAuthInfo: a, prescriptionAuthInfo: s, payAuthInfo: c } = Wc(r);
    return {
      medicalInfo: e,
      fetchMedicalUserInfo: async () => {
        var t;
        try {
          Yn.showLoading({ title: '加载中…', mask: !0 });
          const { data: i } = await Ud({
            qrcode: a.value.authNo,
            openid: null == (t = o.value) ? void 0 : t.openID,
            orgID: n,
          });
          if ((Yn.hideLoading(), 0 !== i.code))
            return void Yn.showToast({ title: i.message, icon: 'none' });
          if (!i.user_card_no)
            return void Yn.showToast({
              title: '未获取到身份信息，请重试',
              icon: 'none',
            });
          e.value = i;
        } catch (i) {
          Yn.hideLoading();
        } finally {
          r.setUserAuthInfo({ authNo: '' });
        }
      },
      fetchMedicalPayment: async () => {
        var t;
        try {
          Yn.showLoading({ title: '加载中…', mask: !0 });
          const { data: i } = await Gd({
            qrcode: c.value.authNo,
            openid: null == (t = o.value) ? void 0 : t.openID,
            orgID: n,
          });
          if ((Yn.hideLoading(), 0 !== i.code))
            return void Yn.showToast({ title: i.message, icon: 'none' });
          if (!i.pay_auth_no)
            return void Yn.showToast({
              title: '未获取到医保编码，请重试',
              icon: 'none',
            });
          e.value = i;
        } catch (i) {
          Yn.hideLoading();
        } finally {
          r.setPayAuthInfo({ authNo: '' });
        }
      },
      fetchMedicalPrescription: async () => {
        var t;
        try {
          Yn.showLoading({ title: '加载中…', mask: !0 });
          const { data: i } = await Ud({
            qrcode: s.value.authNo,
            openid: null == (t = o.value) ? void 0 : t.openID,
            orgID: n,
          });
          if ((Yn.hideLoading(), 0 !== i.code))
            return void Yn.showToast({ title: i.message, icon: 'none' });
          if (!i.auth_no)
            return void Yn.showToast({
              title: '未获取到医保编码，请重试',
              icon: 'none',
            });
          e.value = i;
        } catch (i) {
          Yn.hideLoading();
        } finally {
          r.setPrescriptionAuthInfo({ authNo: '' });
        }
      },
    };
  };
var ru = { exports: {} };
var au = { exports: {} };
const su = ec(
  Object.freeze(
    Object.defineProperty(
      { __proto__: null, default: {} },
      Symbol.toStringTag,
      { value: 'Module' }
    )
  )
);
var cu;
function uu() {
  return (
    cu ||
      ((cu = 1),
      (au.exports =
        ((e =
          e ||
          (function (e, t) {
            var n;
            if (
              ('undefined' != typeof window &&
                window.crypto &&
                (n = window.crypto),
              'undefined' != typeof self && self.crypto && (n = self.crypto),
              'undefined' != typeof globalThis &&
                globalThis.crypto &&
                (n = globalThis.crypto),
              !n &&
                'undefined' != typeof window &&
                window.msCrypto &&
                (n = window.msCrypto),
              !n && void 0 !== Zs && Zs.crypto && (n = Zs.crypto),
              !n)
            )
              try {
                n = su;
              } catch (g) {}
            var i = function () {
                if (n) {
                  if ('function' == typeof n.getRandomValues)
                    try {
                      return n.getRandomValues(new Uint32Array(1))[0];
                    } catch (g) {}
                  if ('function' == typeof n.randomBytes)
                    try {
                      return n.randomBytes(4).readInt32LE();
                    } catch (g) {}
                }
                throw new Error(
                  'Native crypto module could not be used to get secure random number.'
                );
              },
              o =
                Object.create ||
                (function () {
                  function e() {}
                  return function (t) {
                    var n;
                    return (
                      (e.prototype = t), (n = new e()), (e.prototype = null), n
                    );
                  };
                })(),
              r = {},
              a = (r.lib = {}),
              s = (a.Base = (function () {
                return {
                  extend: function (e) {
                    var t = o(this);
                    return (
                      e && t.mixIn(e),
                      (t.hasOwnProperty('init') && this.init !== t.init) ||
                        (t.init = function () {
                          t.$super.init.apply(this, arguments);
                        }),
                      (t.init.prototype = t),
                      (t.$super = this),
                      t
                    );
                  },
                  create: function () {
                    var e = this.extend();
                    return e.init.apply(e, arguments), e;
                  },
                  init: function () {},
                  mixIn: function (e) {
                    for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                    e.hasOwnProperty('toString') &&
                      (this.toString = e.toString);
                  },
                  clone: function () {
                    return this.init.prototype.extend(this);
                  },
                };
              })()),
              c = (a.WordArray = s.extend({
                init: function (e, n) {
                  (e = this.words = e || []),
                    (this.sigBytes = n != t ? n : 4 * e.length);
                },
                toString: function (e) {
                  return (e || l).stringify(this);
                },
                concat: function (e) {
                  var t = this.words,
                    n = e.words,
                    i = this.sigBytes,
                    o = e.sigBytes;
                  if ((this.clamp(), i % 4))
                    for (var r = 0; r < o; r++) {
                      var a = (n[r >>> 2] >>> (24 - (r % 4) * 8)) & 255;
                      t[(i + r) >>> 2] |= a << (24 - ((i + r) % 4) * 8);
                    }
                  else
                    for (var s = 0; s < o; s += 4)
                      t[(i + s) >>> 2] = n[s >>> 2];
                  return (this.sigBytes += o), this;
                },
                clamp: function () {
                  var t = this.words,
                    n = this.sigBytes;
                  (t[n >>> 2] &= 4294967295 << (32 - (n % 4) * 8)),
                    (t.length = e.ceil(n / 4));
                },
                clone: function () {
                  var e = s.clone.call(this);
                  return (e.words = this.words.slice(0)), e;
                },
                random: function (e) {
                  for (var t = [], n = 0; n < e; n += 4) t.push(i());
                  return new c.init(t, e);
                },
              })),
              u = (r.enc = {}),
              l = (u.Hex = {
                stringify: function (e) {
                  for (
                    var t = e.words, n = e.sigBytes, i = [], o = 0;
                    o < n;
                    o++
                  ) {
                    var r = (t[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                    i.push((r >>> 4).toString(16)),
                      i.push((15 & r).toString(16));
                  }
                  return i.join('');
                },
                parse: function (e) {
                  for (var t = e.length, n = [], i = 0; i < t; i += 2)
                    n[i >>> 3] |=
                      parseInt(e.substr(i, 2), 16) << (24 - (i % 8) * 4);
                  return new c.init(n, t / 2);
                },
              }),
              d = (u.Latin1 = {
                stringify: function (e) {
                  for (
                    var t = e.words, n = e.sigBytes, i = [], o = 0;
                    o < n;
                    o++
                  ) {
                    var r = (t[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                    i.push(String.fromCharCode(r));
                  }
                  return i.join('');
                },
                parse: function (e) {
                  for (var t = e.length, n = [], i = 0; i < t; i++)
                    n[i >>> 2] |= (255 & e.charCodeAt(i)) << (24 - (i % 4) * 8);
                  return new c.init(n, t);
                },
              }),
              p = (u.Utf8 = {
                stringify: function (e) {
                  try {
                    return decodeURIComponent(escape(d.stringify(e)));
                  } catch (sc) {
                    throw new Error('Malformed UTF-8 data');
                  }
                },
                parse: function (e) {
                  return d.parse(unescape(encodeURIComponent(e)));
                },
              }),
              h = (a.BufferedBlockAlgorithm = s.extend({
                reset: function () {
                  (this._data = new c.init()), (this._nDataBytes = 0);
                },
                _append: function (e) {
                  'string' == typeof e && (e = p.parse(e)),
                    this._data.concat(e),
                    (this._nDataBytes += e.sigBytes);
                },
                _process: function (t) {
                  var n,
                    i = this._data,
                    o = i.words,
                    r = i.sigBytes,
                    a = this.blockSize,
                    s = r / (4 * a),
                    u =
                      (s = t
                        ? e.ceil(s)
                        : e.max((0 | s) - this._minBufferSize, 0)) * a,
                    l = e.min(4 * u, r);
                  if (u) {
                    for (var d = 0; d < u; d += a) this._doProcessBlock(o, d);
                    (n = o.splice(0, u)), (i.sigBytes -= l);
                  }
                  return new c.init(n, l);
                },
                clone: function () {
                  var e = s.clone.call(this);
                  return (e._data = this._data.clone()), e;
                },
                _minBufferSize: 0,
              }));
            a.Hasher = h.extend({
              cfg: s.extend(),
              init: function (e) {
                (this.cfg = this.cfg.extend(e)), this.reset();
              },
              reset: function () {
                h.reset.call(this), this._doReset();
              },
              update: function (e) {
                return this._append(e), this._process(), this;
              },
              finalize: function (e) {
                return e && this._append(e), this._doFinalize();
              },
              blockSize: 16,
              _createHelper: function (e) {
                return function (t, n) {
                  return new e.init(n).finalize(t);
                };
              },
              _createHmacHelper: function (e) {
                return function (t, n) {
                  return new f.HMAC.init(e, n).finalize(t);
                };
              },
            });
            var f = (r.algo = {});
            return r;
          })(Math)),
        e))),
    au.exports
  );
  var e;
}
var lu,
  du = { exports: {} };
function pu() {
  return (
    lu ||
      ((lu = 1),
      (du.exports =
        ((a = uu()),
        (n = (t = a).lib),
        (i = n.Base),
        (o = n.WordArray),
        ((r = t.x64 = {}).Word = i.extend({
          init: function (e, t) {
            (this.high = e), (this.low = t);
          },
        })),
        (r.WordArray = i.extend({
          init: function (t, n) {
            (t = this.words = t || []),
              (this.sigBytes = n != e ? n : 8 * t.length);
          },
          toX32: function () {
            for (var e = this.words, t = e.length, n = [], i = 0; i < t; i++) {
              var r = e[i];
              n.push(r.high), n.push(r.low);
            }
            return o.create(n, this.sigBytes);
          },
          clone: function () {
            for (
              var e = i.clone.call(this),
                t = (e.words = this.words.slice(0)),
                n = t.length,
                o = 0;
              o < n;
              o++
            )
              t[o] = t[o].clone();
            return e;
          },
        })),
        a))),
    du.exports
  );
  var e, t, n, i, o, r, a;
}
var hu,
  fu = { exports: {} };
function gu() {
  return (
    hu ||
      ((hu = 1),
      (fu.exports =
        ((e = uu()),
        (function () {
          if ('function' == typeof ArrayBuffer) {
            var t = e.lib.WordArray,
              n = t.init,
              i = (t.init = function (e) {
                if (
                  (e instanceof ArrayBuffer && (e = new Uint8Array(e)),
                  (e instanceof Int8Array ||
                    ('undefined' != typeof Uint8ClampedArray &&
                      e instanceof Uint8ClampedArray) ||
                    e instanceof Int16Array ||
                    e instanceof Uint16Array ||
                    e instanceof Int32Array ||
                    e instanceof Uint32Array ||
                    e instanceof Float32Array ||
                    e instanceof Float64Array) &&
                    (e = new Uint8Array(e.buffer, e.byteOffset, e.byteLength)),
                  e instanceof Uint8Array)
                ) {
                  for (var t = e.byteLength, i = [], o = 0; o < t; o++)
                    i[o >>> 2] |= e[o] << (24 - (o % 4) * 8);
                  n.call(this, i, t);
                } else n.apply(this, arguments);
              });
            i.prototype = t;
          }
        })(),
        e.lib.WordArray))),
    fu.exports
  );
  var e;
}
var _u,
  vu = { exports: {} };
function mu() {
  return (
    _u ||
      ((_u = 1),
      (vu.exports =
        ((e = uu()),
        (function () {
          var t = e,
            n = t.lib.WordArray,
            i = t.enc;
          function o(e) {
            return ((e << 8) & 4278255360) | ((e >>> 8) & 16711935);
          }
          (i.Utf16 = i.Utf16BE =
            {
              stringify: function (e) {
                for (
                  var t = e.words, n = e.sigBytes, i = [], o = 0;
                  o < n;
                  o += 2
                ) {
                  var r = (t[o >>> 2] >>> (16 - (o % 4) * 8)) & 65535;
                  i.push(String.fromCharCode(r));
                }
                return i.join('');
              },
              parse: function (e) {
                for (var t = e.length, i = [], o = 0; o < t; o++)
                  i[o >>> 1] |= e.charCodeAt(o) << (16 - (o % 2) * 16);
                return n.create(i, 2 * t);
              },
            }),
            (i.Utf16LE = {
              stringify: function (e) {
                for (
                  var t = e.words, n = e.sigBytes, i = [], r = 0;
                  r < n;
                  r += 2
                ) {
                  var a = o((t[r >>> 2] >>> (16 - (r % 4) * 8)) & 65535);
                  i.push(String.fromCharCode(a));
                }
                return i.join('');
              },
              parse: function (e) {
                for (var t = e.length, i = [], r = 0; r < t; r++)
                  i[r >>> 1] |= o(e.charCodeAt(r) << (16 - (r % 2) * 16));
                return n.create(i, 2 * t);
              },
            });
        })(),
        e.enc.Utf16))),
    vu.exports
  );
  var e;
}
var yu,
  Iu = { exports: {} };
function Mu() {
  return (
    yu ||
      ((yu = 1),
      (Iu.exports =
        ((e = uu()),
        (function () {
          var t = e,
            n = t.lib.WordArray;
          function i(e, t, i) {
            for (var o = [], r = 0, a = 0; a < t; a++)
              if (a % 4) {
                var s =
                  (i[e.charCodeAt(a - 1)] << ((a % 4) * 2)) |
                  (i[e.charCodeAt(a)] >>> (6 - (a % 4) * 2));
                (o[r >>> 2] |= s << (24 - (r % 4) * 8)), r++;
              }
            return n.create(o, r);
          }
          t.enc.Base64 = {
            stringify: function (e) {
              var t = e.words,
                n = e.sigBytes,
                i = this._map;
              e.clamp();
              for (var o = [], r = 0; r < n; r += 3)
                for (
                  var a =
                      (((t[r >>> 2] >>> (24 - (r % 4) * 8)) & 255) << 16) |
                      (((t[(r + 1) >>> 2] >>> (24 - ((r + 1) % 4) * 8)) &
                        255) <<
                        8) |
                      ((t[(r + 2) >>> 2] >>> (24 - ((r + 2) % 4) * 8)) & 255),
                    s = 0;
                  s < 4 && r + 0.75 * s < n;
                  s++
                )
                  o.push(i.charAt((a >>> (6 * (3 - s))) & 63));
              var c = i.charAt(64);
              if (c) for (; o.length % 4; ) o.push(c);
              return o.join('');
            },
            parse: function (e) {
              var t = e.length,
                n = this._map,
                o = this._reverseMap;
              if (!o) {
                o = this._reverseMap = [];
                for (var r = 0; r < n.length; r++) o[n.charCodeAt(r)] = r;
              }
              var a = n.charAt(64);
              if (a) {
                var s = e.indexOf(a);
                -1 !== s && (t = s);
              }
              return i(e, t, o);
            },
            _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
          };
        })(),
        e.enc.Base64))),
    Iu.exports
  );
  var e;
}
var Cu,
  Tu = { exports: {} };
function Eu() {
  return (
    Cu ||
      ((Cu = 1),
      (Tu.exports =
        ((e = uu()),
        (function () {
          var t = e,
            n = t.lib.WordArray;
          function i(e, t, i) {
            for (var o = [], r = 0, a = 0; a < t; a++)
              if (a % 4) {
                var s =
                  (i[e.charCodeAt(a - 1)] << ((a % 4) * 2)) |
                  (i[e.charCodeAt(a)] >>> (6 - (a % 4) * 2));
                (o[r >>> 2] |= s << (24 - (r % 4) * 8)), r++;
              }
            return n.create(o, r);
          }
          t.enc.Base64url = {
            stringify: function (e, t) {
              void 0 === t && (t = !0);
              var n = e.words,
                i = e.sigBytes,
                o = t ? this._safe_map : this._map;
              e.clamp();
              for (var r = [], a = 0; a < i; a += 3)
                for (
                  var s =
                      (((n[a >>> 2] >>> (24 - (a % 4) * 8)) & 255) << 16) |
                      (((n[(a + 1) >>> 2] >>> (24 - ((a + 1) % 4) * 8)) &
                        255) <<
                        8) |
                      ((n[(a + 2) >>> 2] >>> (24 - ((a + 2) % 4) * 8)) & 255),
                    c = 0;
                  c < 4 && a + 0.75 * c < i;
                  c++
                )
                  r.push(o.charAt((s >>> (6 * (3 - c))) & 63));
              var u = o.charAt(64);
              if (u) for (; r.length % 4; ) r.push(u);
              return r.join('');
            },
            parse: function (e, t) {
              void 0 === t && (t = !0);
              var n = e.length,
                o = t ? this._safe_map : this._map,
                r = this._reverseMap;
              if (!r) {
                r = this._reverseMap = [];
                for (var a = 0; a < o.length; a++) r[o.charCodeAt(a)] = a;
              }
              var s = o.charAt(64);
              if (s) {
                var c = e.indexOf(s);
                -1 !== c && (n = c);
              }
              return i(e, n, r);
            },
            _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
            _safe_map:
              'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
          };
        })(),
        e.enc.Base64url))),
    Tu.exports
  );
  var e;
}
var Du,
  Su = { exports: {} };
function ku() {
  return (
    Du ||
      ((Du = 1),
      (Su.exports =
        ((e = uu()),
        (function (t) {
          var n = e,
            i = n.lib,
            o = i.WordArray,
            r = i.Hasher,
            a = n.algo,
            s = [];
          !(function () {
            for (var e = 0; e < 64; e++)
              s[e] = (4294967296 * t.abs(t.sin(e + 1))) | 0;
          })();
          var c = (a.MD5 = r.extend({
            _doReset: function () {
              this._hash = new o.init([
                1732584193, 4023233417, 2562383102, 271733878,
              ]);
            },
            _doProcessBlock: function (e, t) {
              for (var n = 0; n < 16; n++) {
                var i = t + n,
                  o = e[i];
                e[i] =
                  (16711935 & ((o << 8) | (o >>> 24))) |
                  (4278255360 & ((o << 24) | (o >>> 8)));
              }
              var r = this._hash.words,
                a = e[t + 0],
                c = e[t + 1],
                h = e[t + 2],
                f = e[t + 3],
                g = e[t + 4],
                _ = e[t + 5],
                v = e[t + 6],
                m = e[t + 7],
                y = e[t + 8],
                I = e[t + 9],
                M = e[t + 10],
                C = e[t + 11],
                T = e[t + 12],
                E = e[t + 13],
                D = e[t + 14],
                S = e[t + 15],
                k = r[0],
                R = r[1],
                L = r[2],
                A = r[3];
              (k = u(k, R, L, A, a, 7, s[0])),
                (A = u(A, k, R, L, c, 12, s[1])),
                (L = u(L, A, k, R, h, 17, s[2])),
                (R = u(R, L, A, k, f, 22, s[3])),
                (k = u(k, R, L, A, g, 7, s[4])),
                (A = u(A, k, R, L, _, 12, s[5])),
                (L = u(L, A, k, R, v, 17, s[6])),
                (R = u(R, L, A, k, m, 22, s[7])),
                (k = u(k, R, L, A, y, 7, s[8])),
                (A = u(A, k, R, L, I, 12, s[9])),
                (L = u(L, A, k, R, M, 17, s[10])),
                (R = u(R, L, A, k, C, 22, s[11])),
                (k = u(k, R, L, A, T, 7, s[12])),
                (A = u(A, k, R, L, E, 12, s[13])),
                (L = u(L, A, k, R, D, 17, s[14])),
                (k = l(
                  k,
                  (R = u(R, L, A, k, S, 22, s[15])),
                  L,
                  A,
                  c,
                  5,
                  s[16]
                )),
                (A = l(A, k, R, L, v, 9, s[17])),
                (L = l(L, A, k, R, C, 14, s[18])),
                (R = l(R, L, A, k, a, 20, s[19])),
                (k = l(k, R, L, A, _, 5, s[20])),
                (A = l(A, k, R, L, M, 9, s[21])),
                (L = l(L, A, k, R, S, 14, s[22])),
                (R = l(R, L, A, k, g, 20, s[23])),
                (k = l(k, R, L, A, I, 5, s[24])),
                (A = l(A, k, R, L, D, 9, s[25])),
                (L = l(L, A, k, R, f, 14, s[26])),
                (R = l(R, L, A, k, y, 20, s[27])),
                (k = l(k, R, L, A, E, 5, s[28])),
                (A = l(A, k, R, L, h, 9, s[29])),
                (L = l(L, A, k, R, m, 14, s[30])),
                (k = d(
                  k,
                  (R = l(R, L, A, k, T, 20, s[31])),
                  L,
                  A,
                  _,
                  4,
                  s[32]
                )),
                (A = d(A, k, R, L, y, 11, s[33])),
                (L = d(L, A, k, R, C, 16, s[34])),
                (R = d(R, L, A, k, D, 23, s[35])),
                (k = d(k, R, L, A, c, 4, s[36])),
                (A = d(A, k, R, L, g, 11, s[37])),
                (L = d(L, A, k, R, m, 16, s[38])),
                (R = d(R, L, A, k, M, 23, s[39])),
                (k = d(k, R, L, A, E, 4, s[40])),
                (A = d(A, k, R, L, a, 11, s[41])),
                (L = d(L, A, k, R, f, 16, s[42])),
                (R = d(R, L, A, k, v, 23, s[43])),
                (k = d(k, R, L, A, I, 4, s[44])),
                (A = d(A, k, R, L, T, 11, s[45])),
                (L = d(L, A, k, R, S, 16, s[46])),
                (k = p(
                  k,
                  (R = d(R, L, A, k, h, 23, s[47])),
                  L,
                  A,
                  a,
                  6,
                  s[48]
                )),
                (A = p(A, k, R, L, m, 10, s[49])),
                (L = p(L, A, k, R, D, 15, s[50])),
                (R = p(R, L, A, k, _, 21, s[51])),
                (k = p(k, R, L, A, T, 6, s[52])),
                (A = p(A, k, R, L, f, 10, s[53])),
                (L = p(L, A, k, R, M, 15, s[54])),
                (R = p(R, L, A, k, c, 21, s[55])),
                (k = p(k, R, L, A, y, 6, s[56])),
                (A = p(A, k, R, L, S, 10, s[57])),
                (L = p(L, A, k, R, v, 15, s[58])),
                (R = p(R, L, A, k, E, 21, s[59])),
                (k = p(k, R, L, A, g, 6, s[60])),
                (A = p(A, k, R, L, C, 10, s[61])),
                (L = p(L, A, k, R, h, 15, s[62])),
                (R = p(R, L, A, k, I, 21, s[63])),
                (r[0] = (r[0] + k) | 0),
                (r[1] = (r[1] + R) | 0),
                (r[2] = (r[2] + L) | 0),
                (r[3] = (r[3] + A) | 0);
            },
            _doFinalize: function () {
              var e = this._data,
                n = e.words,
                i = 8 * this._nDataBytes,
                o = 8 * e.sigBytes;
              n[o >>> 5] |= 128 << (24 - (o % 32));
              var r = t.floor(i / 4294967296),
                a = i;
              (n[15 + (((o + 64) >>> 9) << 4)] =
                (16711935 & ((r << 8) | (r >>> 24))) |
                (4278255360 & ((r << 24) | (r >>> 8)))),
                (n[14 + (((o + 64) >>> 9) << 4)] =
                  (16711935 & ((a << 8) | (a >>> 24))) |
                  (4278255360 & ((a << 24) | (a >>> 8)))),
                (e.sigBytes = 4 * (n.length + 1)),
                this._process();
              for (var s = this._hash, c = s.words, u = 0; u < 4; u++) {
                var l = c[u];
                c[u] =
                  (16711935 & ((l << 8) | (l >>> 24))) |
                  (4278255360 & ((l << 24) | (l >>> 8)));
              }
              return s;
            },
            clone: function () {
              var e = r.clone.call(this);
              return (e._hash = this._hash.clone()), e;
            },
          }));
          function u(e, t, n, i, o, r, a) {
            var s = e + ((t & n) | (~t & i)) + o + a;
            return ((s << r) | (s >>> (32 - r))) + t;
          }
          function l(e, t, n, i, o, r, a) {
            var s = e + ((t & i) | (n & ~i)) + o + a;
            return ((s << r) | (s >>> (32 - r))) + t;
          }
          function d(e, t, n, i, o, r, a) {
            var s = e + (t ^ n ^ i) + o + a;
            return ((s << r) | (s >>> (32 - r))) + t;
          }
          function p(e, t, n, i, o, r, a) {
            var s = e + (n ^ (t | ~i)) + o + a;
            return ((s << r) | (s >>> (32 - r))) + t;
          }
          (n.MD5 = r._createHelper(c)), (n.HmacMD5 = r._createHmacHelper(c));
        })(Math),
        e.MD5))),
    Su.exports
  );
  var e;
}
var Ru,
  Lu = { exports: {} };
function Au() {
  return (
    Ru ||
      ((Ru = 1),
      (Lu.exports =
        ((s = uu()),
        (t = (e = s).lib),
        (n = t.WordArray),
        (i = t.Hasher),
        (o = e.algo),
        (r = []),
        (a = o.SHA1 =
          i.extend({
            _doReset: function () {
              this._hash = new n.init([
                1732584193, 4023233417, 2562383102, 271733878, 3285377520,
              ]);
            },
            _doProcessBlock: function (e, t) {
              for (
                var n = this._hash.words,
                  i = n[0],
                  o = n[1],
                  a = n[2],
                  s = n[3],
                  c = n[4],
                  u = 0;
                u < 80;
                u++
              ) {
                if (u < 16) r[u] = 0 | e[t + u];
                else {
                  var l = r[u - 3] ^ r[u - 8] ^ r[u - 14] ^ r[u - 16];
                  r[u] = (l << 1) | (l >>> 31);
                }
                var d = ((i << 5) | (i >>> 27)) + c + r[u];
                (d +=
                  u < 20
                    ? 1518500249 + ((o & a) | (~o & s))
                    : u < 40
                      ? 1859775393 + (o ^ a ^ s)
                      : u < 60
                        ? ((o & a) | (o & s) | (a & s)) - 1894007588
                        : (o ^ a ^ s) - 899497514),
                  (c = s),
                  (s = a),
                  (a = (o << 30) | (o >>> 2)),
                  (o = i),
                  (i = d);
              }
              (n[0] = (n[0] + i) | 0),
                (n[1] = (n[1] + o) | 0),
                (n[2] = (n[2] + a) | 0),
                (n[3] = (n[3] + s) | 0),
                (n[4] = (n[4] + c) | 0);
            },
            _doFinalize: function () {
              var e = this._data,
                t = e.words,
                n = 8 * this._nDataBytes,
                i = 8 * e.sigBytes;
              return (
                (t[i >>> 5] |= 128 << (24 - (i % 32))),
                (t[14 + (((i + 64) >>> 9) << 4)] = Math.floor(n / 4294967296)),
                (t[15 + (((i + 64) >>> 9) << 4)] = n),
                (e.sigBytes = 4 * t.length),
                this._process(),
                this._hash
              );
            },
            clone: function () {
              var e = i.clone.call(this);
              return (e._hash = this._hash.clone()), e;
            },
          })),
        (e.SHA1 = i._createHelper(a)),
        (e.HmacSHA1 = i._createHmacHelper(a)),
        s.SHA1))),
    Lu.exports
  );
  var e, t, n, i, o, r, a, s;
}
var Ou,
  bu = { exports: {} };
function Nu() {
  return (
    Ou ||
      ((Ou = 1),
      (bu.exports =
        ((e = uu()),
        (function (t) {
          var n = e,
            i = n.lib,
            o = i.WordArray,
            r = i.Hasher,
            a = n.algo,
            s = [],
            c = [];
          !(function () {
            function e(e) {
              for (var n = t.sqrt(e), i = 2; i <= n; i++)
                if (!(e % i)) return !1;
              return !0;
            }
            function n(e) {
              return (4294967296 * (e - (0 | e))) | 0;
            }
            for (var i = 2, o = 0; o < 64; )
              e(i) &&
                (o < 8 && (s[o] = n(t.pow(i, 0.5))),
                (c[o] = n(t.pow(i, 1 / 3))),
                o++),
                i++;
          })();
          var u = [],
            l = (a.SHA256 = r.extend({
              _doReset: function () {
                this._hash = new o.init(s.slice(0));
              },
              _doProcessBlock: function (e, t) {
                for (
                  var n = this._hash.words,
                    i = n[0],
                    o = n[1],
                    r = n[2],
                    a = n[3],
                    s = n[4],
                    l = n[5],
                    d = n[6],
                    p = n[7],
                    h = 0;
                  h < 64;
                  h++
                ) {
                  if (h < 16) u[h] = 0 | e[t + h];
                  else {
                    var f = u[h - 15],
                      g =
                        ((f << 25) | (f >>> 7)) ^
                        ((f << 14) | (f >>> 18)) ^
                        (f >>> 3),
                      _ = u[h - 2],
                      v =
                        ((_ << 15) | (_ >>> 17)) ^
                        ((_ << 13) | (_ >>> 19)) ^
                        (_ >>> 10);
                    u[h] = g + u[h - 7] + v + u[h - 16];
                  }
                  var m = (i & o) ^ (i & r) ^ (o & r),
                    y =
                      ((i << 30) | (i >>> 2)) ^
                      ((i << 19) | (i >>> 13)) ^
                      ((i << 10) | (i >>> 22)),
                    I =
                      p +
                      (((s << 26) | (s >>> 6)) ^
                        ((s << 21) | (s >>> 11)) ^
                        ((s << 7) | (s >>> 25))) +
                      ((s & l) ^ (~s & d)) +
                      c[h] +
                      u[h];
                  (p = d),
                    (d = l),
                    (l = s),
                    (s = (a + I) | 0),
                    (a = r),
                    (r = o),
                    (o = i),
                    (i = (I + (y + m)) | 0);
                }
                (n[0] = (n[0] + i) | 0),
                  (n[1] = (n[1] + o) | 0),
                  (n[2] = (n[2] + r) | 0),
                  (n[3] = (n[3] + a) | 0),
                  (n[4] = (n[4] + s) | 0),
                  (n[5] = (n[5] + l) | 0),
                  (n[6] = (n[6] + d) | 0),
                  (n[7] = (n[7] + p) | 0);
              },
              _doFinalize: function () {
                var e = this._data,
                  n = e.words,
                  i = 8 * this._nDataBytes,
                  o = 8 * e.sigBytes;
                return (
                  (n[o >>> 5] |= 128 << (24 - (o % 32))),
                  (n[14 + (((o + 64) >>> 9) << 4)] = t.floor(i / 4294967296)),
                  (n[15 + (((o + 64) >>> 9) << 4)] = i),
                  (e.sigBytes = 4 * n.length),
                  this._process(),
                  this._hash
                );
              },
              clone: function () {
                var e = r.clone.call(this);
                return (e._hash = this._hash.clone()), e;
              },
            }));
          (n.SHA256 = r._createHelper(l)),
            (n.HmacSHA256 = r._createHmacHelper(l));
        })(Math),
        e.SHA256))),
    bu.exports
  );
  var e;
}
var Pu,
  wu = { exports: {} };
var Uu,
  Gu = { exports: {} };
function xu() {
  return (
    Uu ||
      ((Uu = 1),
      (Gu.exports =
        ((e = uu()),
        pu(),
        (function () {
          var t = e,
            n = t.lib.Hasher,
            i = t.x64,
            o = i.Word,
            r = i.WordArray,
            a = t.algo;
          function s() {
            return o.create.apply(o, arguments);
          }
          var c = [
              s(1116352408, 3609767458),
              s(1899447441, 602891725),
              s(3049323471, 3964484399),
              s(3921009573, 2173295548),
              s(961987163, 4081628472),
              s(1508970993, 3053834265),
              s(2453635748, 2937671579),
              s(2870763221, 3664609560),
              s(3624381080, 2734883394),
              s(310598401, 1164996542),
              s(607225278, 1323610764),
              s(1426881987, 3590304994),
              s(1925078388, 4068182383),
              s(2162078206, 991336113),
              s(2614888103, 633803317),
              s(3248222580, 3479774868),
              s(3835390401, 2666613458),
              s(4022224774, 944711139),
              s(264347078, 2341262773),
              s(604807628, 2007800933),
              s(770255983, 1495990901),
              s(1249150122, 1856431235),
              s(1555081692, 3175218132),
              s(1996064986, 2198950837),
              s(2554220882, 3999719339),
              s(2821834349, 766784016),
              s(2952996808, 2566594879),
              s(3210313671, 3203337956),
              s(3336571891, 1034457026),
              s(3584528711, 2466948901),
              s(113926993, 3758326383),
              s(338241895, 168717936),
              s(666307205, 1188179964),
              s(773529912, 1546045734),
              s(1294757372, 1522805485),
              s(1396182291, 2643833823),
              s(1695183700, 2343527390),
              s(1986661051, 1014477480),
              s(2177026350, 1206759142),
              s(2456956037, 344077627),
              s(2730485921, 1290863460),
              s(2820302411, 3158454273),
              s(3259730800, 3505952657),
              s(3345764771, 106217008),
              s(3516065817, 3606008344),
              s(3600352804, 1432725776),
              s(4094571909, 1467031594),
              s(275423344, 851169720),
              s(430227734, 3100823752),
              s(506948616, 1363258195),
              s(659060556, 3750685593),
              s(883997877, 3785050280),
              s(958139571, 3318307427),
              s(1322822218, 3812723403),
              s(1537002063, 2003034995),
              s(1747873779, 3602036899),
              s(1955562222, 1575990012),
              s(2024104815, 1125592928),
              s(2227730452, 2716904306),
              s(2361852424, 442776044),
              s(2428436474, 593698344),
              s(2756734187, 3733110249),
              s(3204031479, 2999351573),
              s(3329325298, 3815920427),
              s(3391569614, 3928383900),
              s(3515267271, 566280711),
              s(3940187606, 3454069534),
              s(4118630271, 4000239992),
              s(116418474, 1914138554),
              s(174292421, 2731055270),
              s(289380356, 3203993006),
              s(460393269, 320620315),
              s(685471733, 587496836),
              s(852142971, 1086792851),
              s(1017036298, 365543100),
              s(1126000580, 2618297676),
              s(1288033470, 3409855158),
              s(1501505948, 4234509866),
              s(1607167915, 987167468),
              s(1816402316, 1246189591),
            ],
            u = [];
          !(function () {
            for (var e = 0; e < 80; e++) u[e] = s();
          })();
          var l = (a.SHA512 = n.extend({
            _doReset: function () {
              this._hash = new r.init([
                new o.init(1779033703, 4089235720),
                new o.init(3144134277, 2227873595),
                new o.init(1013904242, 4271175723),
                new o.init(2773480762, 1595750129),
                new o.init(1359893119, 2917565137),
                new o.init(2600822924, 725511199),
                new o.init(528734635, 4215389547),
                new o.init(1541459225, 327033209),
              ]);
            },
            _doProcessBlock: function (e, t) {
              for (
                var n = this._hash.words,
                  i = n[0],
                  o = n[1],
                  r = n[2],
                  a = n[3],
                  s = n[4],
                  l = n[5],
                  d = n[6],
                  p = n[7],
                  h = i.high,
                  f = i.low,
                  g = o.high,
                  _ = o.low,
                  v = r.high,
                  m = r.low,
                  y = a.high,
                  I = a.low,
                  M = s.high,
                  C = s.low,
                  T = l.high,
                  E = l.low,
                  D = d.high,
                  S = d.low,
                  k = p.high,
                  R = p.low,
                  L = h,
                  A = f,
                  O = g,
                  b = _,
                  N = v,
                  P = m,
                  w = y,
                  U = I,
                  G = M,
                  x = C,
                  F = T,
                  q = E,
                  V = D,
                  B = S,
                  H = k,
                  j = R,
                  K = 0;
                K < 80;
                K++
              ) {
                var W,
                  z,
                  $ = u[K];
                if (K < 16)
                  (z = $.high = 0 | e[t + 2 * K]),
                    (W = $.low = 0 | e[t + 2 * K + 1]);
                else {
                  var Y = u[K - 15],
                    J = Y.high,
                    X = Y.low,
                    Z =
                      ((J >>> 1) | (X << 31)) ^
                      ((J >>> 8) | (X << 24)) ^
                      (J >>> 7),
                    Q =
                      ((X >>> 1) | (J << 31)) ^
                      ((X >>> 8) | (J << 24)) ^
                      ((X >>> 7) | (J << 25)),
                    ee = u[K - 2],
                    te = ee.high,
                    ne = ee.low,
                    ie =
                      ((te >>> 19) | (ne << 13)) ^
                      ((te << 3) | (ne >>> 29)) ^
                      (te >>> 6),
                    oe =
                      ((ne >>> 19) | (te << 13)) ^
                      ((ne << 3) | (te >>> 29)) ^
                      ((ne >>> 6) | (te << 26)),
                    re = u[K - 7],
                    ae = re.high,
                    se = re.low,
                    ce = u[K - 16],
                    ue = ce.high,
                    le = ce.low;
                  (z =
                    (z =
                      (z = Z + ae + ((W = Q + se) >>> 0 < Q >>> 0 ? 1 : 0)) +
                      ie +
                      ((W += oe) >>> 0 < oe >>> 0 ? 1 : 0)) +
                    ue +
                    ((W += le) >>> 0 < le >>> 0 ? 1 : 0)),
                    ($.high = z),
                    ($.low = W);
                }
                var de,
                  pe = (G & F) ^ (~G & V),
                  he = (x & q) ^ (~x & B),
                  fe = (L & O) ^ (L & N) ^ (O & N),
                  ge = (A & b) ^ (A & P) ^ (b & P),
                  _e =
                    ((L >>> 28) | (A << 4)) ^
                    ((L << 30) | (A >>> 2)) ^
                    ((L << 25) | (A >>> 7)),
                  ve =
                    ((A >>> 28) | (L << 4)) ^
                    ((A << 30) | (L >>> 2)) ^
                    ((A << 25) | (L >>> 7)),
                  me =
                    ((G >>> 14) | (x << 18)) ^
                    ((G >>> 18) | (x << 14)) ^
                    ((G << 23) | (x >>> 9)),
                  ye =
                    ((x >>> 14) | (G << 18)) ^
                    ((x >>> 18) | (G << 14)) ^
                    ((x << 23) | (G >>> 9)),
                  Ie = c[K],
                  Me = Ie.high,
                  Ce = Ie.low,
                  Te = H + me + ((de = j + ye) >>> 0 < j >>> 0 ? 1 : 0),
                  Ee = ve + ge;
                (H = V),
                  (j = B),
                  (V = F),
                  (B = q),
                  (F = G),
                  (q = x),
                  (G =
                    (w +
                      (Te =
                        (Te =
                          (Te =
                            Te + pe + ((de += he) >>> 0 < he >>> 0 ? 1 : 0)) +
                          Me +
                          ((de += Ce) >>> 0 < Ce >>> 0 ? 1 : 0)) +
                        z +
                        ((de += W) >>> 0 < W >>> 0 ? 1 : 0)) +
                      ((x = (U + de) | 0) >>> 0 < U >>> 0 ? 1 : 0)) |
                    0),
                  (w = N),
                  (U = P),
                  (N = O),
                  (P = b),
                  (O = L),
                  (b = A),
                  (L =
                    (Te +
                      (_e + fe + (Ee >>> 0 < ve >>> 0 ? 1 : 0)) +
                      ((A = (de + Ee) | 0) >>> 0 < de >>> 0 ? 1 : 0)) |
                    0);
              }
              (f = i.low = f + A),
                (i.high = h + L + (f >>> 0 < A >>> 0 ? 1 : 0)),
                (_ = o.low = _ + b),
                (o.high = g + O + (_ >>> 0 < b >>> 0 ? 1 : 0)),
                (m = r.low = m + P),
                (r.high = v + N + (m >>> 0 < P >>> 0 ? 1 : 0)),
                (I = a.low = I + U),
                (a.high = y + w + (I >>> 0 < U >>> 0 ? 1 : 0)),
                (C = s.low = C + x),
                (s.high = M + G + (C >>> 0 < x >>> 0 ? 1 : 0)),
                (E = l.low = E + q),
                (l.high = T + F + (E >>> 0 < q >>> 0 ? 1 : 0)),
                (S = d.low = S + B),
                (d.high = D + V + (S >>> 0 < B >>> 0 ? 1 : 0)),
                (R = p.low = R + j),
                (p.high = k + H + (R >>> 0 < j >>> 0 ? 1 : 0));
            },
            _doFinalize: function () {
              var e = this._data,
                t = e.words,
                n = 8 * this._nDataBytes,
                i = 8 * e.sigBytes;
              return (
                (t[i >>> 5] |= 128 << (24 - (i % 32))),
                (t[30 + (((i + 128) >>> 10) << 5)] = Math.floor(
                  n / 4294967296
                )),
                (t[31 + (((i + 128) >>> 10) << 5)] = n),
                (e.sigBytes = 4 * t.length),
                this._process(),
                this._hash.toX32()
              );
            },
            clone: function () {
              var e = n.clone.call(this);
              return (e._hash = this._hash.clone()), e;
            },
            blockSize: 32,
          }));
          (t.SHA512 = n._createHelper(l)),
            (t.HmacSHA512 = n._createHmacHelper(l));
        })(),
        e.SHA512))),
    Gu.exports
  );
  var e;
}
var Fu,
  qu = { exports: {} };
var Vu,
  Bu = { exports: {} };
function Hu() {
  return (
    Vu ||
      ((Vu = 1),
      (Bu.exports =
        ((e = uu()),
        pu(),
        (function (t) {
          var n = e,
            i = n.lib,
            o = i.WordArray,
            r = i.Hasher,
            a = n.x64.Word,
            s = n.algo,
            c = [],
            u = [],
            l = [];
          !(function () {
            for (var e = 1, t = 0, n = 0; n < 24; n++) {
              c[e + 5 * t] = (((n + 1) * (n + 2)) / 2) % 64;
              var i = (2 * e + 3 * t) % 5;
              (e = t % 5), (t = i);
            }
            for (e = 0; e < 5; e++)
              for (t = 0; t < 5; t++)
                u[e + 5 * t] = t + ((2 * e + 3 * t) % 5) * 5;
            for (var o = 1, r = 0; r < 24; r++) {
              for (var s = 0, d = 0, p = 0; p < 7; p++) {
                if (1 & o) {
                  var h = (1 << p) - 1;
                  h < 32 ? (d ^= 1 << h) : (s ^= 1 << (h - 32));
                }
                128 & o ? (o = (o << 1) ^ 113) : (o <<= 1);
              }
              l[r] = a.create(s, d);
            }
          })();
          var d = [];
          !(function () {
            for (var e = 0; e < 25; e++) d[e] = a.create();
          })();
          var p = (s.SHA3 = r.extend({
            cfg: r.cfg.extend({ outputLength: 512 }),
            _doReset: function () {
              for (var e = (this._state = []), t = 0; t < 25; t++)
                e[t] = new a.init();
              this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
            },
            _doProcessBlock: function (e, t) {
              for (
                var n = this._state, i = this.blockSize / 2, o = 0;
                o < i;
                o++
              ) {
                var r = e[t + 2 * o],
                  a = e[t + 2 * o + 1];
                (r =
                  (16711935 & ((r << 8) | (r >>> 24))) |
                  (4278255360 & ((r << 24) | (r >>> 8)))),
                  (a =
                    (16711935 & ((a << 8) | (a >>> 24))) |
                    (4278255360 & ((a << 24) | (a >>> 8)))),
                  ((R = n[o]).high ^= a),
                  (R.low ^= r);
              }
              for (var s = 0; s < 24; s++) {
                for (var p = 0; p < 5; p++) {
                  for (var h = 0, f = 0, g = 0; g < 5; g++)
                    (h ^= (R = n[p + 5 * g]).high), (f ^= R.low);
                  var _ = d[p];
                  (_.high = h), (_.low = f);
                }
                for (p = 0; p < 5; p++) {
                  var v = d[(p + 4) % 5],
                    m = d[(p + 1) % 5],
                    y = m.high,
                    I = m.low;
                  for (
                    h = v.high ^ ((y << 1) | (I >>> 31)),
                      f = v.low ^ ((I << 1) | (y >>> 31)),
                      g = 0;
                    g < 5;
                    g++
                  )
                    ((R = n[p + 5 * g]).high ^= h), (R.low ^= f);
                }
                for (var M = 1; M < 25; M++) {
                  var C = (R = n[M]).high,
                    T = R.low,
                    E = c[M];
                  E < 32
                    ? ((h = (C << E) | (T >>> (32 - E))),
                      (f = (T << E) | (C >>> (32 - E))))
                    : ((h = (T << (E - 32)) | (C >>> (64 - E))),
                      (f = (C << (E - 32)) | (T >>> (64 - E))));
                  var D = d[u[M]];
                  (D.high = h), (D.low = f);
                }
                var S = d[0],
                  k = n[0];
                for (S.high = k.high, S.low = k.low, p = 0; p < 5; p++)
                  for (g = 0; g < 5; g++) {
                    var R = n[(M = p + 5 * g)],
                      L = d[M],
                      A = d[((p + 1) % 5) + 5 * g],
                      O = d[((p + 2) % 5) + 5 * g];
                    (R.high = L.high ^ (~A.high & O.high)),
                      (R.low = L.low ^ (~A.low & O.low));
                  }
                R = n[0];
                var b = l[s];
                (R.high ^= b.high), (R.low ^= b.low);
              }
            },
            _doFinalize: function () {
              var e = this._data,
                n = e.words;
              this._nDataBytes;
              var i = 8 * e.sigBytes,
                r = 32 * this.blockSize;
              (n[i >>> 5] |= 1 << (24 - (i % 32))),
                (n[((t.ceil((i + 1) / r) * r) >>> 5) - 1] |= 128),
                (e.sigBytes = 4 * n.length),
                this._process();
              for (
                var a = this._state,
                  s = this.cfg.outputLength / 8,
                  c = s / 8,
                  u = [],
                  l = 0;
                l < c;
                l++
              ) {
                var d = a[l],
                  p = d.high,
                  h = d.low;
                (p =
                  (16711935 & ((p << 8) | (p >>> 24))) |
                  (4278255360 & ((p << 24) | (p >>> 8)))),
                  (h =
                    (16711935 & ((h << 8) | (h >>> 24))) |
                    (4278255360 & ((h << 24) | (h >>> 8)))),
                  u.push(h),
                  u.push(p);
              }
              return new o.init(u, s);
            },
            clone: function () {
              for (
                var e = r.clone.call(this),
                  t = (e._state = this._state.slice(0)),
                  n = 0;
                n < 25;
                n++
              )
                t[n] = t[n].clone();
              return e;
            },
          }));
          (n.SHA3 = r._createHelper(p)), (n.HmacSHA3 = r._createHmacHelper(p));
        })(Math),
        e.SHA3))),
    Bu.exports
  );
  var e;
}
var ju,
  Ku = { exports: {} };
var Wu,
  zu = { exports: {} };
function $u() {
  return (
    Wu ||
      ((Wu = 1),
      (zu.exports =
        ((e = uu()),
        (n = (t = e).lib.Base),
        (i = t.enc.Utf8),
        void (t.algo.HMAC = n.extend({
          init: function (e, t) {
            (e = this._hasher = new e.init()),
              'string' == typeof t && (t = i.parse(t));
            var n = e.blockSize,
              o = 4 * n;
            t.sigBytes > o && (t = e.finalize(t)), t.clamp();
            for (
              var r = (this._oKey = t.clone()),
                a = (this._iKey = t.clone()),
                s = r.words,
                c = a.words,
                u = 0;
              u < n;
              u++
            )
              (s[u] ^= 1549556828), (c[u] ^= 909522486);
            (r.sigBytes = a.sigBytes = o), this.reset();
          },
          reset: function () {
            var e = this._hasher;
            e.reset(), e.update(this._iKey);
          },
          update: function (e) {
            return this._hasher.update(e), this;
          },
          finalize: function (e) {
            var t = this._hasher,
              n = t.finalize(e);
            return t.reset(), t.finalize(this._oKey.clone().concat(n));
          },
        }))))),
    zu.exports
  );
  var e, t, n, i;
}
var Yu,
  Ju = { exports: {} };
var Xu,
  Zu = { exports: {} };
function Qu() {
  return (
    Xu ||
      ((Xu = 1),
      (Zu.exports =
        ((s = uu()),
        Au(),
        $u(),
        (t = (e = s).lib),
        (n = t.Base),
        (i = t.WordArray),
        (o = e.algo),
        (r = o.MD5),
        (a = o.EvpKDF =
          n.extend({
            cfg: n.extend({ keySize: 4, hasher: r, iterations: 1 }),
            init: function (e) {
              this.cfg = this.cfg.extend(e);
            },
            compute: function (e, t) {
              for (
                var n,
                  o = this.cfg,
                  r = o.hasher.create(),
                  a = i.create(),
                  s = a.words,
                  c = o.keySize,
                  u = o.iterations;
                s.length < c;

              ) {
                n && r.update(n), (n = r.update(e).finalize(t)), r.reset();
                for (var l = 1; l < u; l++) (n = r.finalize(n)), r.reset();
                a.concat(n);
              }
              return (a.sigBytes = 4 * c), a;
            },
          })),
        (e.EvpKDF = function (e, t, n) {
          return a.create(n).compute(e, t);
        }),
        s.EvpKDF))),
    Zu.exports
  );
  var e, t, n, i, o, r, a, s;
}
var el,
  tl = { exports: {} };
function nl() {
  return (
    el ||
      ((el = 1),
      (tl.exports =
        ((e = uu()),
        Qu(),
        void (
          e.lib.Cipher ||
          (function (t) {
            var n = e,
              i = n.lib,
              o = i.Base,
              r = i.WordArray,
              a = i.BufferedBlockAlgorithm,
              s = n.enc;
            s.Utf8;
            var c = s.Base64,
              u = n.algo.EvpKDF,
              l = (i.Cipher = a.extend({
                cfg: o.extend(),
                createEncryptor: function (e, t) {
                  return this.create(this._ENC_XFORM_MODE, e, t);
                },
                createDecryptor: function (e, t) {
                  return this.create(this._DEC_XFORM_MODE, e, t);
                },
                init: function (e, t, n) {
                  (this.cfg = this.cfg.extend(n)),
                    (this._xformMode = e),
                    (this._key = t),
                    this.reset();
                },
                reset: function () {
                  a.reset.call(this), this._doReset();
                },
                process: function (e) {
                  return this._append(e), this._process();
                },
                finalize: function (e) {
                  return e && this._append(e), this._doFinalize();
                },
                keySize: 4,
                ivSize: 4,
                _ENC_XFORM_MODE: 1,
                _DEC_XFORM_MODE: 2,
                _createHelper: (function () {
                  function e(e) {
                    return 'string' == typeof e ? y : v;
                  }
                  return function (t) {
                    return {
                      encrypt: function (n, i, o) {
                        return e(i).encrypt(t, n, i, o);
                      },
                      decrypt: function (n, i, o) {
                        return e(i).decrypt(t, n, i, o);
                      },
                    };
                  };
                })(),
              }));
            i.StreamCipher = l.extend({
              _doFinalize: function () {
                return this._process(!0);
              },
              blockSize: 1,
            });
            var d = (n.mode = {}),
              p = (i.BlockCipherMode = o.extend({
                createEncryptor: function (e, t) {
                  return this.Encryptor.create(e, t);
                },
                createDecryptor: function (e, t) {
                  return this.Decryptor.create(e, t);
                },
                init: function (e, t) {
                  (this._cipher = e), (this._iv = t);
                },
              })),
              h = (d.CBC = (function () {
                var e = p.extend();
                function n(e, n, i) {
                  var o,
                    r = this._iv;
                  r ? ((o = r), (this._iv = t)) : (o = this._prevBlock);
                  for (var a = 0; a < i; a++) e[n + a] ^= o[a];
                }
                return (
                  (e.Encryptor = e.extend({
                    processBlock: function (e, t) {
                      var i = this._cipher,
                        o = i.blockSize;
                      n.call(this, e, t, o),
                        i.encryptBlock(e, t),
                        (this._prevBlock = e.slice(t, t + o));
                    },
                  })),
                  (e.Decryptor = e.extend({
                    processBlock: function (e, t) {
                      var i = this._cipher,
                        o = i.blockSize,
                        r = e.slice(t, t + o);
                      i.decryptBlock(e, t),
                        n.call(this, e, t, o),
                        (this._prevBlock = r);
                    },
                  })),
                  e
                );
              })()),
              f = ((n.pad = {}).Pkcs7 = {
                pad: function (e, t) {
                  for (
                    var n = 4 * t,
                      i = n - (e.sigBytes % n),
                      o = (i << 24) | (i << 16) | (i << 8) | i,
                      a = [],
                      s = 0;
                    s < i;
                    s += 4
                  )
                    a.push(o);
                  var c = r.create(a, i);
                  e.concat(c);
                },
                unpad: function (e) {
                  var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                  e.sigBytes -= t;
                },
              });
            i.BlockCipher = l.extend({
              cfg: l.cfg.extend({ mode: h, padding: f }),
              reset: function () {
                var e;
                l.reset.call(this);
                var t = this.cfg,
                  n = t.iv,
                  i = t.mode;
                this._xformMode == this._ENC_XFORM_MODE
                  ? (e = i.createEncryptor)
                  : ((e = i.createDecryptor), (this._minBufferSize = 1)),
                  this._mode && this._mode.__creator == e
                    ? this._mode.init(this, n && n.words)
                    : ((this._mode = e.call(i, this, n && n.words)),
                      (this._mode.__creator = e));
              },
              _doProcessBlock: function (e, t) {
                this._mode.processBlock(e, t);
              },
              _doFinalize: function () {
                var e,
                  t = this.cfg.padding;
                return (
                  this._xformMode == this._ENC_XFORM_MODE
                    ? (t.pad(this._data, this.blockSize),
                      (e = this._process(!0)))
                    : ((e = this._process(!0)), t.unpad(e)),
                  e
                );
              },
              blockSize: 4,
            });
            var g = (i.CipherParams = o.extend({
                init: function (e) {
                  this.mixIn(e);
                },
                toString: function (e) {
                  return (e || this.formatter).stringify(this);
                },
              })),
              _ = ((n.format = {}).OpenSSL = {
                stringify: function (e) {
                  var t = e.ciphertext,
                    n = e.salt;
                  return (
                    n
                      ? r.create([1398893684, 1701076831]).concat(n).concat(t)
                      : t
                  ).toString(c);
                },
                parse: function (e) {
                  var t,
                    n = c.parse(e),
                    i = n.words;
                  return (
                    1398893684 == i[0] &&
                      1701076831 == i[1] &&
                      ((t = r.create(i.slice(2, 4))),
                      i.splice(0, 4),
                      (n.sigBytes -= 16)),
                    g.create({ ciphertext: n, salt: t })
                  );
                },
              }),
              v = (i.SerializableCipher = o.extend({
                cfg: o.extend({ format: _ }),
                encrypt: function (e, t, n, i) {
                  i = this.cfg.extend(i);
                  var o = e.createEncryptor(n, i),
                    r = o.finalize(t),
                    a = o.cfg;
                  return g.create({
                    ciphertext: r,
                    key: n,
                    iv: a.iv,
                    algorithm: e,
                    mode: a.mode,
                    padding: a.padding,
                    blockSize: e.blockSize,
                    formatter: i.format,
                  });
                },
                decrypt: function (e, t, n, i) {
                  return (
                    (i = this.cfg.extend(i)),
                    (t = this._parse(t, i.format)),
                    e.createDecryptor(n, i).finalize(t.ciphertext)
                  );
                },
                _parse: function (e, t) {
                  return 'string' == typeof e ? t.parse(e, this) : e;
                },
              })),
              m = ((n.kdf = {}).OpenSSL = {
                execute: function (e, t, n, i, o) {
                  if ((i || (i = r.random(8)), o))
                    a = u.create({ keySize: t + n, hasher: o }).compute(e, i);
                  else var a = u.create({ keySize: t + n }).compute(e, i);
                  var s = r.create(a.words.slice(t), 4 * n);
                  return (
                    (a.sigBytes = 4 * t), g.create({ key: a, iv: s, salt: i })
                  );
                },
              }),
              y = (i.PasswordBasedCipher = v.extend({
                cfg: v.cfg.extend({ kdf: m }),
                encrypt: function (e, t, n, i) {
                  var o = (i = this.cfg.extend(i)).kdf.execute(
                    n,
                    e.keySize,
                    e.ivSize,
                    i.salt,
                    i.hasher
                  );
                  i.iv = o.iv;
                  var r = v.encrypt.call(this, e, t, o.key, i);
                  return r.mixIn(o), r;
                },
                decrypt: function (e, t, n, i) {
                  (i = this.cfg.extend(i)), (t = this._parse(t, i.format));
                  var o = i.kdf.execute(
                    n,
                    e.keySize,
                    e.ivSize,
                    t.salt,
                    i.hasher
                  );
                  return (i.iv = o.iv), v.decrypt.call(this, e, t, o.key, i);
                },
              }));
          })()
        )))),
    tl.exports
  );
  var e;
}
var il,
  ol = { exports: {} };
var rl,
  al = { exports: {} };
var sl,
  cl = { exports: {} };
function ul() {
  return (
    sl ||
      ((sl = 1),
      (cl.exports =
        ((e = uu()),
        nl(),
        /** @preserve
         * Counter block mode compatible with  Dr Brian Gladman fileenc.c
         * derived from CryptoJS.mode.CTR
         * Jan Hruby jhruby.web@gmail.com
         */
        (e.mode.CTRGladman = (function () {
          var t = e.lib.BlockCipherMode.extend();
          function n(e) {
            if (255 & ~(e >> 24)) e += 1 << 24;
            else {
              var t = (e >> 16) & 255,
                n = (e >> 8) & 255,
                i = 255 & e;
              255 === t
                ? ((t = 0),
                  255 === n ? ((n = 0), 255 === i ? (i = 0) : ++i) : ++n)
                : ++t,
                (e = 0),
                (e += t << 16),
                (e += n << 8),
                (e += i);
            }
            return e;
          }
          function i(e) {
            return 0 === (e[0] = n(e[0])) && (e[1] = n(e[1])), e;
          }
          var o = (t.Encryptor = t.extend({
            processBlock: function (e, t) {
              var n = this._cipher,
                o = n.blockSize,
                r = this._iv,
                a = this._counter;
              r && ((a = this._counter = r.slice(0)), (this._iv = void 0)),
                i(a);
              var s = a.slice(0);
              n.encryptBlock(s, 0);
              for (var c = 0; c < o; c++) e[t + c] ^= s[c];
            },
          }));
          return (t.Decryptor = o), t;
        })()),
        e.mode.CTRGladman))),
    cl.exports
  );
  var e;
}
var ll,
  dl = { exports: {} };
var pl,
  hl = { exports: {} };
var fl,
  gl = { exports: {} };
var _l,
  vl = { exports: {} };
var ml,
  yl = { exports: {} };
var Il,
  Ml = { exports: {} };
var Cl,
  Tl = { exports: {} };
var El,
  Dl = { exports: {} };
var Sl,
  kl = { exports: {} };
var Rl,
  Ll = { exports: {} };
function Al() {
  return (
    Rl ||
      ((Rl = 1),
      (Ll.exports =
        ((e = uu()),
        Mu(),
        ku(),
        Qu(),
        nl(),
        (function () {
          var t = e,
            n = t.lib,
            i = n.WordArray,
            o = n.BlockCipher,
            r = t.algo,
            a = [
              57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59,
              51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23,
              15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13,
              5, 28, 20, 12, 4,
            ],
            s = [
              14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8,
              16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33,
              48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32,
            ],
            c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
            u = [
              {
                0: 8421888,
                268435456: 32768,
                536870912: 8421378,
                805306368: 2,
                1073741824: 512,
                1342177280: 8421890,
                1610612736: 8389122,
                1879048192: 8388608,
                2147483648: 514,
                2415919104: 8389120,
                2684354560: 33280,
                2952790016: 8421376,
                3221225472: 32770,
                3489660928: 8388610,
                3758096384: 0,
                4026531840: 33282,
                134217728: 0,
                402653184: 8421890,
                671088640: 33282,
                939524096: 32768,
                1207959552: 8421888,
                1476395008: 512,
                1744830464: 8421378,
                2013265920: 2,
                2281701376: 8389120,
                2550136832: 33280,
                2818572288: 8421376,
                3087007744: 8389122,
                3355443200: 8388610,
                3623878656: 32770,
                3892314112: 514,
                4160749568: 8388608,
                1: 32768,
                268435457: 2,
                536870913: 8421888,
                805306369: 8388608,
                1073741825: 8421378,
                1342177281: 33280,
                1610612737: 512,
                1879048193: 8389122,
                2147483649: 8421890,
                2415919105: 8421376,
                2684354561: 8388610,
                2952790017: 33282,
                3221225473: 514,
                3489660929: 8389120,
                3758096385: 32770,
                4026531841: 0,
                134217729: 8421890,
                402653185: 8421376,
                671088641: 8388608,
                939524097: 512,
                1207959553: 32768,
                1476395009: 8388610,
                1744830465: 2,
                2013265921: 33282,
                2281701377: 32770,
                2550136833: 8389122,
                2818572289: 514,
                3087007745: 8421888,
                3355443201: 8389120,
                3623878657: 0,
                3892314113: 33280,
                4160749569: 8421378,
              },
              {
                0: 1074282512,
                16777216: 16384,
                33554432: 524288,
                50331648: 1074266128,
                67108864: 1073741840,
                83886080: 1074282496,
                100663296: 1073758208,
                117440512: 16,
                134217728: 540672,
                150994944: 1073758224,
                167772160: 1073741824,
                184549376: 540688,
                201326592: 524304,
                218103808: 0,
                234881024: 16400,
                251658240: 1074266112,
                8388608: 1073758208,
                25165824: 540688,
                41943040: 16,
                58720256: 1073758224,
                75497472: 1074282512,
                92274688: 1073741824,
                109051904: 524288,
                125829120: 1074266128,
                142606336: 524304,
                159383552: 0,
                176160768: 16384,
                192937984: 1074266112,
                209715200: 1073741840,
                226492416: 540672,
                243269632: 1074282496,
                260046848: 16400,
                268435456: 0,
                285212672: 1074266128,
                301989888: 1073758224,
                318767104: 1074282496,
                335544320: 1074266112,
                352321536: 16,
                369098752: 540688,
                385875968: 16384,
                402653184: 16400,
                419430400: 524288,
                436207616: 524304,
                452984832: 1073741840,
                469762048: 540672,
                486539264: 1073758208,
                503316480: 1073741824,
                520093696: 1074282512,
                276824064: 540688,
                293601280: 524288,
                310378496: 1074266112,
                327155712: 16384,
                343932928: 1073758208,
                360710144: 1074282512,
                377487360: 16,
                394264576: 1073741824,
                411041792: 1074282496,
                427819008: 1073741840,
                444596224: 1073758224,
                461373440: 524304,
                478150656: 0,
                494927872: 16400,
                511705088: 1074266128,
                528482304: 540672,
              },
              {
                0: 260,
                1048576: 0,
                2097152: 67109120,
                3145728: 65796,
                4194304: 65540,
                5242880: 67108868,
                6291456: 67174660,
                7340032: 67174400,
                8388608: 67108864,
                9437184: 67174656,
                10485760: 65792,
                11534336: 67174404,
                12582912: 67109124,
                13631488: 65536,
                14680064: 4,
                15728640: 256,
                524288: 67174656,
                1572864: 67174404,
                2621440: 0,
                3670016: 67109120,
                4718592: 67108868,
                5767168: 65536,
                6815744: 65540,
                7864320: 260,
                8912896: 4,
                9961472: 256,
                11010048: 67174400,
                12058624: 65796,
                13107200: 65792,
                14155776: 67109124,
                15204352: 67174660,
                16252928: 67108864,
                16777216: 67174656,
                17825792: 65540,
                18874368: 65536,
                19922944: 67109120,
                20971520: 256,
                22020096: 67174660,
                23068672: 67108868,
                24117248: 0,
                25165824: 67109124,
                26214400: 67108864,
                27262976: 4,
                28311552: 65792,
                29360128: 67174400,
                30408704: 260,
                31457280: 65796,
                32505856: 67174404,
                17301504: 67108864,
                18350080: 260,
                19398656: 67174656,
                20447232: 0,
                21495808: 65540,
                22544384: 67109120,
                23592960: 256,
                24641536: 67174404,
                25690112: 65536,
                26738688: 67174660,
                27787264: 65796,
                28835840: 67108868,
                29884416: 67109124,
                30932992: 67174400,
                31981568: 4,
                33030144: 65792,
              },
              {
                0: 2151682048,
                65536: 2147487808,
                131072: 4198464,
                196608: 2151677952,
                262144: 0,
                327680: 4198400,
                393216: 2147483712,
                458752: 4194368,
                524288: 2147483648,
                589824: 4194304,
                655360: 64,
                720896: 2147487744,
                786432: 2151678016,
                851968: 4160,
                917504: 4096,
                983040: 2151682112,
                32768: 2147487808,
                98304: 64,
                163840: 2151678016,
                229376: 2147487744,
                294912: 4198400,
                360448: 2151682112,
                425984: 0,
                491520: 2151677952,
                557056: 4096,
                622592: 2151682048,
                688128: 4194304,
                753664: 4160,
                819200: 2147483648,
                884736: 4194368,
                950272: 4198464,
                1015808: 2147483712,
                1048576: 4194368,
                1114112: 4198400,
                1179648: 2147483712,
                1245184: 0,
                1310720: 4160,
                1376256: 2151678016,
                1441792: 2151682048,
                1507328: 2147487808,
                1572864: 2151682112,
                1638400: 2147483648,
                1703936: 2151677952,
                1769472: 4198464,
                1835008: 2147487744,
                1900544: 4194304,
                1966080: 64,
                2031616: 4096,
                1081344: 2151677952,
                1146880: 2151682112,
                1212416: 0,
                1277952: 4198400,
                1343488: 4194368,
                1409024: 2147483648,
                1474560: 2147487808,
                1540096: 64,
                1605632: 2147483712,
                1671168: 4096,
                1736704: 2147487744,
                1802240: 2151678016,
                1867776: 4160,
                1933312: 2151682048,
                1998848: 4194304,
                2064384: 4198464,
              },
              {
                0: 128,
                4096: 17039360,
                8192: 262144,
                12288: 536870912,
                16384: 537133184,
                20480: 16777344,
                24576: 553648256,
                28672: 262272,
                32768: 16777216,
                36864: 537133056,
                40960: 536871040,
                45056: 553910400,
                49152: 553910272,
                53248: 0,
                57344: 17039488,
                61440: 553648128,
                2048: 17039488,
                6144: 553648256,
                10240: 128,
                14336: 17039360,
                18432: 262144,
                22528: 537133184,
                26624: 553910272,
                30720: 536870912,
                34816: 537133056,
                38912: 0,
                43008: 553910400,
                47104: 16777344,
                51200: 536871040,
                55296: 553648128,
                59392: 16777216,
                63488: 262272,
                65536: 262144,
                69632: 128,
                73728: 536870912,
                77824: 553648256,
                81920: 16777344,
                86016: 553910272,
                90112: 537133184,
                94208: 16777216,
                98304: 553910400,
                102400: 553648128,
                106496: 17039360,
                110592: 537133056,
                114688: 262272,
                118784: 536871040,
                122880: 0,
                126976: 17039488,
                67584: 553648256,
                71680: 16777216,
                75776: 17039360,
                79872: 537133184,
                83968: 536870912,
                88064: 17039488,
                92160: 128,
                96256: 553910272,
                100352: 262272,
                104448: 553910400,
                108544: 0,
                112640: 553648128,
                116736: 16777344,
                120832: 262144,
                124928: 537133056,
                129024: 536871040,
              },
              {
                0: 268435464,
                256: 8192,
                512: 270532608,
                768: 270540808,
                1024: 268443648,
                1280: 2097152,
                1536: 2097160,
                1792: 268435456,
                2048: 0,
                2304: 268443656,
                2560: 2105344,
                2816: 8,
                3072: 270532616,
                3328: 2105352,
                3584: 8200,
                3840: 270540800,
                128: 270532608,
                384: 270540808,
                640: 8,
                896: 2097152,
                1152: 2105352,
                1408: 268435464,
                1664: 268443648,
                1920: 8200,
                2176: 2097160,
                2432: 8192,
                2688: 268443656,
                2944: 270532616,
                3200: 0,
                3456: 270540800,
                3712: 2105344,
                3968: 268435456,
                4096: 268443648,
                4352: 270532616,
                4608: 270540808,
                4864: 8200,
                5120: 2097152,
                5376: 268435456,
                5632: 268435464,
                5888: 2105344,
                6144: 2105352,
                6400: 0,
                6656: 8,
                6912: 270532608,
                7168: 8192,
                7424: 268443656,
                7680: 270540800,
                7936: 2097160,
                4224: 8,
                4480: 2105344,
                4736: 2097152,
                4992: 268435464,
                5248: 268443648,
                5504: 8200,
                5760: 270540808,
                6016: 270532608,
                6272: 270540800,
                6528: 270532616,
                6784: 8192,
                7040: 2105352,
                7296: 2097160,
                7552: 0,
                7808: 268435456,
                8064: 268443656,
              },
              {
                0: 1048576,
                16: 33555457,
                32: 1024,
                48: 1049601,
                64: 34604033,
                80: 0,
                96: 1,
                112: 34603009,
                128: 33555456,
                144: 1048577,
                160: 33554433,
                176: 34604032,
                192: 34603008,
                208: 1025,
                224: 1049600,
                240: 33554432,
                8: 34603009,
                24: 0,
                40: 33555457,
                56: 34604032,
                72: 1048576,
                88: 33554433,
                104: 33554432,
                120: 1025,
                136: 1049601,
                152: 33555456,
                168: 34603008,
                184: 1048577,
                200: 1024,
                216: 34604033,
                232: 1,
                248: 1049600,
                256: 33554432,
                272: 1048576,
                288: 33555457,
                304: 34603009,
                320: 1048577,
                336: 33555456,
                352: 34604032,
                368: 1049601,
                384: 1025,
                400: 34604033,
                416: 1049600,
                432: 1,
                448: 0,
                464: 34603008,
                480: 33554433,
                496: 1024,
                264: 1049600,
                280: 33555457,
                296: 34603009,
                312: 1,
                328: 33554432,
                344: 1048576,
                360: 1025,
                376: 34604032,
                392: 33554433,
                408: 34603008,
                424: 0,
                440: 34604033,
                456: 1049601,
                472: 1024,
                488: 33555456,
                504: 1048577,
              },
              {
                0: 134219808,
                1: 131072,
                2: 134217728,
                3: 32,
                4: 131104,
                5: 134350880,
                6: 134350848,
                7: 2048,
                8: 134348800,
                9: 134219776,
                10: 133120,
                11: 134348832,
                12: 2080,
                13: 0,
                14: 134217760,
                15: 133152,
                2147483648: 2048,
                2147483649: 134350880,
                2147483650: 134219808,
                2147483651: 134217728,
                2147483652: 134348800,
                2147483653: 133120,
                2147483654: 133152,
                2147483655: 32,
                2147483656: 134217760,
                2147483657: 2080,
                2147483658: 131104,
                2147483659: 134350848,
                2147483660: 0,
                2147483661: 134348832,
                2147483662: 134219776,
                2147483663: 131072,
                16: 133152,
                17: 134350848,
                18: 32,
                19: 2048,
                20: 134219776,
                21: 134217760,
                22: 134348832,
                23: 131072,
                24: 0,
                25: 131104,
                26: 134348800,
                27: 134219808,
                28: 134350880,
                29: 133120,
                30: 2080,
                31: 134217728,
                2147483664: 131072,
                2147483665: 2048,
                2147483666: 134348832,
                2147483667: 133152,
                2147483668: 32,
                2147483669: 134348800,
                2147483670: 134217728,
                2147483671: 134219808,
                2147483672: 134350880,
                2147483673: 134217760,
                2147483674: 134219776,
                2147483675: 0,
                2147483676: 133120,
                2147483677: 2080,
                2147483678: 131104,
                2147483679: 134350848,
              },
            ],
            l = [
              4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504,
              2147483679,
            ],
            d = (r.DES = o.extend({
              _doReset: function () {
                for (var e = this._key.words, t = [], n = 0; n < 56; n++) {
                  var i = a[n] - 1;
                  t[n] = (e[i >>> 5] >>> (31 - (i % 32))) & 1;
                }
                for (var o = (this._subKeys = []), r = 0; r < 16; r++) {
                  var u = (o[r] = []),
                    l = c[r];
                  for (n = 0; n < 24; n++)
                    (u[(n / 6) | 0] |=
                      t[(s[n] - 1 + l) % 28] << (31 - (n % 6))),
                      (u[4 + ((n / 6) | 0)] |=
                        t[28 + ((s[n + 24] - 1 + l) % 28)] << (31 - (n % 6)));
                  for (u[0] = (u[0] << 1) | (u[0] >>> 31), n = 1; n < 7; n++)
                    u[n] = u[n] >>> (4 * (n - 1) + 3);
                  u[7] = (u[7] << 5) | (u[7] >>> 27);
                }
                var d = (this._invSubKeys = []);
                for (n = 0; n < 16; n++) d[n] = o[15 - n];
              },
              encryptBlock: function (e, t) {
                this._doCryptBlock(e, t, this._subKeys);
              },
              decryptBlock: function (e, t) {
                this._doCryptBlock(e, t, this._invSubKeys);
              },
              _doCryptBlock: function (e, t, n) {
                (this._lBlock = e[t]),
                  (this._rBlock = e[t + 1]),
                  p.call(this, 4, 252645135),
                  p.call(this, 16, 65535),
                  h.call(this, 2, 858993459),
                  h.call(this, 8, 16711935),
                  p.call(this, 1, 1431655765);
                for (var i = 0; i < 16; i++) {
                  for (
                    var o = n[i],
                      r = this._lBlock,
                      a = this._rBlock,
                      s = 0,
                      c = 0;
                    c < 8;
                    c++
                  )
                    s |= u[c][((a ^ o[c]) & l[c]) >>> 0];
                  (this._lBlock = a), (this._rBlock = r ^ s);
                }
                var d = this._lBlock;
                (this._lBlock = this._rBlock),
                  (this._rBlock = d),
                  p.call(this, 1, 1431655765),
                  h.call(this, 8, 16711935),
                  h.call(this, 2, 858993459),
                  p.call(this, 16, 65535),
                  p.call(this, 4, 252645135),
                  (e[t] = this._lBlock),
                  (e[t + 1] = this._rBlock);
              },
              keySize: 2,
              ivSize: 2,
              blockSize: 2,
            }));
          function p(e, t) {
            var n = ((this._lBlock >>> e) ^ this._rBlock) & t;
            (this._rBlock ^= n), (this._lBlock ^= n << e);
          }
          function h(e, t) {
            var n = ((this._rBlock >>> e) ^ this._lBlock) & t;
            (this._lBlock ^= n), (this._rBlock ^= n << e);
          }
          t.DES = o._createHelper(d);
          var f = (r.TripleDES = o.extend({
            _doReset: function () {
              var e = this._key.words;
              if (2 !== e.length && 4 !== e.length && e.length < 6)
                throw new Error(
                  'Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.'
                );
              var t = e.slice(0, 2),
                n = e.length < 4 ? e.slice(0, 2) : e.slice(2, 4),
                o = e.length < 6 ? e.slice(0, 2) : e.slice(4, 6);
              (this._des1 = d.createEncryptor(i.create(t))),
                (this._des2 = d.createEncryptor(i.create(n))),
                (this._des3 = d.createEncryptor(i.create(o)));
            },
            encryptBlock: function (e, t) {
              this._des1.encryptBlock(e, t),
                this._des2.decryptBlock(e, t),
                this._des3.encryptBlock(e, t);
            },
            decryptBlock: function (e, t) {
              this._des3.decryptBlock(e, t),
                this._des2.encryptBlock(e, t),
                this._des1.decryptBlock(e, t);
            },
            keySize: 6,
            ivSize: 2,
            blockSize: 2,
          }));
          t.TripleDES = o._createHelper(f);
        })(),
        e.TripleDES))),
    Ll.exports
  );
  var e;
}
var Ol,
  bl = { exports: {} };
var Nl,
  Pl = { exports: {} };
var wl,
  Ul = { exports: {} };
var Gl,
  xl,
  Fl,
  ql,
  Vl,
  Bl,
  Hl,
  jl = { exports: {} };
function Kl() {
  return (
    Gl ||
      ((Gl = 1),
      (jl.exports =
        ((e = uu()),
        Mu(),
        ku(),
        Qu(),
        nl(),
        (function () {
          var t = e,
            n = t.lib.BlockCipher,
            i = t.algo;
          const o = 16,
            r = [
              608135816, 2242054355, 320440878, 57701188, 2752067618, 698298832,
              137296536, 3964562569, 1160258022, 953160567, 3193202383,
              887688300, 3232508343, 3380367581, 1065670069, 3041331479,
              2450970073, 2306472731,
            ],
            a = [
              [
                3509652390, 2564797868, 805139163, 3491422135, 3101798381,
                1780907670, 3128725573, 4046225305, 614570311, 3012652279,
                134345442, 2240740374, 1667834072, 1901547113, 2757295779,
                4103290238, 227898511, 1921955416, 1904987480, 2182433518,
                2069144605, 3260701109, 2620446009, 720527379, 3318853667,
                677414384, 3393288472, 3101374703, 2390351024, 1614419982,
                1822297739, 2954791486, 3608508353, 3174124327, 2024746970,
                1432378464, 3864339955, 2857741204, 1464375394, 1676153920,
                1439316330, 715854006, 3033291828, 289532110, 2706671279,
                2087905683, 3018724369, 1668267050, 732546397, 1947742710,
                3462151702, 2609353502, 2950085171, 1814351708, 2050118529,
                680887927, 999245976, 1800124847, 3300911131, 1713906067,
                1641548236, 4213287313, 1216130144, 1575780402, 4018429277,
                3917837745, 3693486850, 3949271944, 596196993, 3549867205,
                258830323, 2213823033, 772490370, 2760122372, 1774776394,
                2652871518, 566650946, 4142492826, 1728879713, 2882767088,
                1783734482, 3629395816, 2517608232, 2874225571, 1861159788,
                326777828, 3124490320, 2130389656, 2716951837, 967770486,
                1724537150, 2185432712, 2364442137, 1164943284, 2105845187,
                998989502, 3765401048, 2244026483, 1075463327, 1455516326,
                1322494562, 910128902, 469688178, 1117454909, 936433444,
                3490320968, 3675253459, 1240580251, 122909385, 2157517691,
                634681816, 4142456567, 3825094682, 3061402683, 2540495037,
                79693498, 3249098678, 1084186820, 1583128258, 426386531,
                1761308591, 1047286709, 322548459, 995290223, 1845252383,
                2603652396, 3431023940, 2942221577, 3202600964, 3727903485,
                1712269319, 422464435, 3234572375, 1170764815, 3523960633,
                3117677531, 1434042557, 442511882, 3600875718, 1076654713,
                1738483198, 4213154764, 2393238008, 3677496056, 1014306527,
                4251020053, 793779912, 2902807211, 842905082, 4246964064,
                1395751752, 1040244610, 2656851899, 3396308128, 445077038,
                3742853595, 3577915638, 679411651, 2892444358, 2354009459,
                1767581616, 3150600392, 3791627101, 3102740896, 284835224,
                4246832056, 1258075500, 768725851, 2589189241, 3069724005,
                3532540348, 1274779536, 3789419226, 2764799539, 1660621633,
                3471099624, 4011903706, 913787905, 3497959166, 737222580,
                2514213453, 2928710040, 3937242737, 1804850592, 3499020752,
                2949064160, 2386320175, 2390070455, 2415321851, 4061277028,
                2290661394, 2416832540, 1336762016, 1754252060, 3520065937,
                3014181293, 791618072, 3188594551, 3933548030, 2332172193,
                3852520463, 3043980520, 413987798, 3465142937, 3030929376,
                4245938359, 2093235073, 3534596313, 375366246, 2157278981,
                2479649556, 555357303, 3870105701, 2008414854, 3344188149,
                4221384143, 3956125452, 2067696032, 3594591187, 2921233993,
                2428461, 544322398, 577241275, 1471733935, 610547355,
                4027169054, 1432588573, 1507829418, 2025931657, 3646575487,
                545086370, 48609733, 2200306550, 1653985193, 298326376,
                1316178497, 3007786442, 2064951626, 458293330, 2589141269,
                3591329599, 3164325604, 727753846, 2179363840, 146436021,
                1461446943, 4069977195, 705550613, 3059967265, 3887724982,
                4281599278, 3313849956, 1404054877, 2845806497, 146425753,
                1854211946,
              ],
              [
                1266315497, 3048417604, 3681880366, 3289982499, 290971e4,
                1235738493, 2632868024, 2414719590, 3970600049, 1771706367,
                1449415276, 3266420449, 422970021, 1963543593, 2690192192,
                3826793022, 1062508698, 1531092325, 1804592342, 2583117782,
                2714934279, 4024971509, 1294809318, 4028980673, 1289560198,
                2221992742, 1669523910, 35572830, 157838143, 1052438473,
                1016535060, 1802137761, 1753167236, 1386275462, 3080475397,
                2857371447, 1040679964, 2145300060, 2390574316, 1461121720,
                2956646967, 4031777805, 4028374788, 33600511, 2920084762,
                1018524850, 629373528, 3691585981, 3515945977, 2091462646,
                2486323059, 586499841, 988145025, 935516892, 3367335476,
                2599673255, 2839830854, 265290510, 3972581182, 2759138881,
                3795373465, 1005194799, 847297441, 406762289, 1314163512,
                1332590856, 1866599683, 4127851711, 750260880, 613907577,
                1450815602, 3165620655, 3734664991, 3650291728, 3012275730,
                3704569646, 1427272223, 778793252, 1343938022, 2676280711,
                2052605720, 1946737175, 3164576444, 3914038668, 3967478842,
                3682934266, 1661551462, 3294938066, 4011595847, 840292616,
                3712170807, 616741398, 312560963, 711312465, 1351876610,
                322626781, 1910503582, 271666773, 2175563734, 1594956187,
                70604529, 3617834859, 1007753275, 1495573769, 4069517037,
                2549218298, 2663038764, 504708206, 2263041392, 3941167025,
                2249088522, 1514023603, 1998579484, 1312622330, 694541497,
                2582060303, 2151582166, 1382467621, 776784248, 2618340202,
                3323268794, 2497899128, 2784771155, 503983604, 4076293799,
                907881277, 423175695, 432175456, 1378068232, 4145222326,
                3954048622, 3938656102, 3820766613, 2793130115, 2977904593,
                26017576, 3274890735, 3194772133, 1700274565, 1756076034,
                4006520079, 3677328699, 720338349, 1533947780, 354530856,
                688349552, 3973924725, 1637815568, 332179504, 3949051286,
                53804574, 2852348879, 3044236432, 1282449977, 3583942155,
                3416972820, 4006381244, 1617046695, 2628476075, 3002303598,
                1686838959, 431878346, 2686675385, 1700445008, 1080580658,
                1009431731, 832498133, 3223435511, 2605976345, 2271191193,
                2516031870, 1648197032, 4164389018, 2548247927, 300782431,
                375919233, 238389289, 3353747414, 2531188641, 2019080857,
                1475708069, 455242339, 2609103871, 448939670, 3451063019,
                1395535956, 2413381860, 1841049896, 1491858159, 885456874,
                4264095073, 4001119347, 1565136089, 3898914787, 1108368660,
                540939232, 1173283510, 2745871338, 3681308437, 4207628240,
                3343053890, 4016749493, 1699691293, 1103962373, 3625875870,
                2256883143, 3830138730, 1031889488, 3479347698, 1535977030,
                4236805024, 3251091107, 2132092099, 1774941330, 1199868427,
                1452454533, 157007616, 2904115357, 342012276, 595725824,
                1480756522, 206960106, 497939518, 591360097, 863170706,
                2375253569, 3596610801, 1814182875, 2094937945, 3421402208,
                1082520231, 3463918190, 2785509508, 435703966, 3908032597,
                1641649973, 2842273706, 3305899714, 1510255612, 2148256476,
                2655287854, 3276092548, 4258621189, 236887753, 3681803219,
                274041037, 1734335097, 3815195456, 3317970021, 1899903192,
                1026095262, 4050517792, 356393447, 2410691914, 3873677099,
                3682840055,
              ],
              [
                3913112168, 2491498743, 4132185628, 2489919796, 1091903735,
                1979897079, 3170134830, 3567386728, 3557303409, 857797738,
                1136121015, 1342202287, 507115054, 2535736646, 337727348,
                3213592640, 1301675037, 2528481711, 1895095763, 1721773893,
                3216771564, 62756741, 2142006736, 835421444, 2531993523,
                1442658625, 3659876326, 2882144922, 676362277, 1392781812,
                170690266, 3921047035, 1759253602, 3611846912, 1745797284,
                664899054, 1329594018, 3901205900, 3045908486, 2062866102,
                2865634940, 3543621612, 3464012697, 1080764994, 553557557,
                3656615353, 3996768171, 991055499, 499776247, 1265440854,
                648242737, 3940784050, 980351604, 3713745714, 1749149687,
                3396870395, 4211799374, 3640570775, 1161844396, 3125318951,
                1431517754, 545492359, 4268468663, 3499529547, 1437099964,
                2702547544, 3433638243, 2581715763, 2787789398, 1060185593,
                1593081372, 2418618748, 4260947970, 69676912, 2159744348,
                86519011, 2512459080, 3838209314, 1220612927, 3339683548,
                133810670, 1090789135, 1078426020, 1569222167, 845107691,
                3583754449, 4072456591, 1091646820, 628848692, 1613405280,
                3757631651, 526609435, 236106946, 48312990, 2942717905,
                3402727701, 1797494240, 859738849, 992217954, 4005476642,
                2243076622, 3870952857, 3732016268, 765654824, 3490871365,
                2511836413, 1685915746, 3888969200, 1414112111, 2273134842,
                3281911079, 4080962846, 172450625, 2569994100, 980381355,
                4109958455, 2819808352, 2716589560, 2568741196, 3681446669,
                3329971472, 1835478071, 660984891, 3704678404, 4045999559,
                3422617507, 3040415634, 1762651403, 1719377915, 3470491036,
                2693910283, 3642056355, 3138596744, 1364962596, 2073328063,
                1983633131, 926494387, 3423689081, 2150032023, 4096667949,
                1749200295, 3328846651, 309677260, 2016342300, 1779581495,
                3079819751, 111262694, 1274766160, 443224088, 298511866,
                1025883608, 3806446537, 1145181785, 168956806, 3641502830,
                3584813610, 1689216846, 3666258015, 3200248200, 1692713982,
                2646376535, 4042768518, 1618508792, 1610833997, 3523052358,
                4130873264, 2001055236, 3610705100, 2202168115, 4028541809,
                2961195399, 1006657119, 2006996926, 3186142756, 1430667929,
                3210227297, 1314452623, 4074634658, 4101304120, 2273951170,
                1399257539, 3367210612, 3027628629, 1190975929, 2062231137,
                2333990788, 2221543033, 2438960610, 1181637006, 548689776,
                2362791313, 3372408396, 3104550113, 3145860560, 296247880,
                1970579870, 3078560182, 3769228297, 1714227617, 3291629107,
                3898220290, 166772364, 1251581989, 493813264, 448347421,
                195405023, 2709975567, 677966185, 3703036547, 1463355134,
                2715995803, 1338867538, 1343315457, 2802222074, 2684532164,
                233230375, 2599980071, 2000651841, 3277868038, 1638401717,
                4028070440, 3237316320, 6314154, 819756386, 300326615,
                590932579, 1405279636, 3267499572, 3150704214, 2428286686,
                3959192993, 3461946742, 1862657033, 1266418056, 963775037,
                2089974820, 2263052895, 1917689273, 448879540, 3550394620,
                3981727096, 150775221, 3627908307, 1303187396, 508620638,
                2975983352, 2726630617, 1817252668, 1876281319, 1457606340,
                908771278, 3720792119, 3617206836, 2455994898, 1729034894,
                1080033504,
              ],
              [
                976866871, 3556439503, 2881648439, 1522871579, 1555064734,
                1336096578, 3548522304, 2579274686, 3574697629, 3205460757,
                3593280638, 3338716283, 3079412587, 564236357, 2993598910,
                1781952180, 1464380207, 3163844217, 3332601554, 1699332808,
                1393555694, 1183702653, 3581086237, 1288719814, 691649499,
                2847557200, 2895455976, 3193889540, 2717570544, 1781354906,
                1676643554, 2592534050, 3230253752, 1126444790, 2770207658,
                2633158820, 2210423226, 2615765581, 2414155088, 3127139286,
                673620729, 2805611233, 1269405062, 4015350505, 3341807571,
                4149409754, 1057255273, 2012875353, 2162469141, 2276492801,
                2601117357, 993977747, 3918593370, 2654263191, 753973209,
                36408145, 2530585658, 25011837, 3520020182, 2088578344,
                530523599, 2918365339, 1524020338, 1518925132, 3760827505,
                3759777254, 1202760957, 3985898139, 3906192525, 674977740,
                4174734889, 2031300136, 2019492241, 3983892565, 4153806404,
                3822280332, 352677332, 2297720250, 60907813, 90501309,
                3286998549, 1016092578, 2535922412, 2839152426, 457141659,
                509813237, 4120667899, 652014361, 1966332200, 2975202805,
                55981186, 2327461051, 676427537, 3255491064, 2882294119,
                3433927263, 1307055953, 942726286, 933058658, 2468411793,
                3933900994, 4215176142, 1361170020, 2001714738, 2830558078,
                3274259782, 1222529897, 1679025792, 2729314320, 3714953764,
                1770335741, 151462246, 3013232138, 1682292957, 1483529935,
                471910574, 1539241949, 458788160, 3436315007, 1807016891,
                3718408830, 978976581, 1043663428, 3165965781, 1927990952,
                4200891579, 2372276910, 3208408903, 3533431907, 1412390302,
                2931980059, 4132332400, 1947078029, 3881505623, 4168226417,
                2941484381, 1077988104, 1320477388, 886195818, 18198404,
                3786409e3, 2509781533, 112762804, 3463356488, 1866414978,
                891333506, 18488651, 661792760, 1628790961, 3885187036,
                3141171499, 876946877, 2693282273, 1372485963, 791857591,
                2686433993, 3759982718, 3167212022, 3472953795, 2716379847,
                445679433, 3561995674, 3504004811, 3574258232, 54117162,
                3331405415, 2381918588, 3769707343, 4154350007, 1140177722,
                4074052095, 668550556, 3214352940, 367459370, 261225585,
                2610173221, 4209349473, 3468074219, 3265815641, 314222801,
                3066103646, 3808782860, 282218597, 3406013506, 3773591054,
                379116347, 1285071038, 846784868, 2669647154, 3771962079,
                3550491691, 2305946142, 453669953, 1268987020, 3317592352,
                3279303384, 3744833421, 2610507566, 3859509063, 266596637,
                3847019092, 517658769, 3462560207, 3443424879, 370717030,
                4247526661, 2224018117, 4143653529, 4112773975, 2788324899,
                2477274417, 1456262402, 2901442914, 1517677493, 1846949527,
                2295493580, 3734397586, 2176403920, 1280348187, 1908823572,
                3871786941, 846861322, 1172426758, 3287448474, 3383383037,
                1655181056, 3139813346, 901632758, 1897031941, 2986607138,
                3066810236, 3447102507, 1393639104, 373351379, 950779232,
                625454576, 3124240540, 4148612726, 2007998917, 544563296,
                2244738638, 2330496472, 2058025392, 1291430526, 424198748,
                50039436, 29584100, 3605783033, 2429876329, 2791104160,
                1057563949, 3255363231, 3075367218, 3463963227, 1469046755,
                985887462,
              ],
            ];
          var s = { pbox: [], sbox: [] };
          function c(e, t) {
            let n = (t >> 24) & 255,
              i = (t >> 16) & 255,
              o = (t >> 8) & 255,
              r = 255 & t,
              a = e.sbox[0][n] + e.sbox[1][i];
            return (a ^= e.sbox[2][o]), (a += e.sbox[3][r]), a;
          }
          function u(e, t, n) {
            let i,
              r = t,
              a = n;
            for (let s = 0; s < o; ++s)
              (r ^= e.pbox[s]), (a = c(e, r) ^ a), (i = r), (r = a), (a = i);
            return (
              (i = r),
              (r = a),
              (a = i),
              (a ^= e.pbox[o]),
              (r ^= e.pbox[o + 1]),
              { left: r, right: a }
            );
          }
          function l(e, t, n) {
            let i,
              r = t,
              a = n;
            for (let s = o + 1; s > 1; --s)
              (r ^= e.pbox[s]), (a = c(e, r) ^ a), (i = r), (r = a), (a = i);
            return (
              (i = r),
              (r = a),
              (a = i),
              (a ^= e.pbox[1]),
              (r ^= e.pbox[0]),
              { left: r, right: a }
            );
          }
          function d(e, t, n) {
            for (let o = 0; o < 4; o++) {
              e.sbox[o] = [];
              for (let t = 0; t < 256; t++) e.sbox[o][t] = a[o][t];
            }
            let i = 0;
            for (let a = 0; a < o + 2; a++)
              (e.pbox[a] = r[a] ^ t[i]), i++, i >= n && (i = 0);
            let s = 0,
              c = 0,
              l = 0;
            for (let r = 0; r < o + 2; r += 2)
              (l = u(e, s, c)),
                (s = l.left),
                (c = l.right),
                (e.pbox[r] = s),
                (e.pbox[r + 1] = c);
            for (let o = 0; o < 4; o++)
              for (let t = 0; t < 256; t += 2)
                (l = u(e, s, c)),
                  (s = l.left),
                  (c = l.right),
                  (e.sbox[o][t] = s),
                  (e.sbox[o][t + 1] = c);
            return !0;
          }
          var p = (i.Blowfish = n.extend({
            _doReset: function () {
              if (this._keyPriorReset !== this._key) {
                var e = (this._keyPriorReset = this._key),
                  t = e.words,
                  n = e.sigBytes / 4;
                d(s, t, n);
              }
            },
            encryptBlock: function (e, t) {
              var n = u(s, e[t], e[t + 1]);
              (e[t] = n.left), (e[t + 1] = n.right);
            },
            decryptBlock: function (e, t) {
              var n = l(s, e[t], e[t + 1]);
              (e[t] = n.left), (e[t + 1] = n.right);
            },
            blockSize: 2,
            keySize: 4,
            ivSize: 2,
          }));
          t.Blowfish = n._createHelper(p);
        })(),
        e.Blowfish))),
    jl.exports
  );
  var e;
}
ru.exports = (function (e) {
  return e;
})(
  uu(),
  pu(),
  gu(),
  mu(),
  Mu(),
  Eu(),
  ku(),
  Au(),
  Nu(),
  Pu ||
    ((Pu = 1),
    (wu.exports =
      ((Hl = uu()),
      Nu(),
      (Fl = (xl = Hl).lib.WordArray),
      (ql = xl.algo),
      (Vl = ql.SHA256),
      (Bl = ql.SHA224 =
        Vl.extend({
          _doReset: function () {
            this._hash = new Fl.init([
              3238371032, 914150663, 812702999, 4144912697, 4290775857,
              1750603025, 1694076839, 3204075428,
            ]);
          },
          _doFinalize: function () {
            var e = Vl._doFinalize.call(this);
            return (e.sigBytes -= 4), e;
          },
        })),
      (xl.SHA224 = Vl._createHelper(Bl)),
      (xl.HmacSHA224 = Vl._createHmacHelper(Bl)),
      Hl.SHA224))),
  xu(),
  (function () {
    return Fu
      ? qu.exports
      : ((Fu = 1),
        (qu.exports =
          ((s = uu()),
          pu(),
          xu(),
          (t = (e = s).x64),
          (n = t.Word),
          (i = t.WordArray),
          (o = e.algo),
          (r = o.SHA512),
          (a = o.SHA384 =
            r.extend({
              _doReset: function () {
                this._hash = new i.init([
                  new n.init(3418070365, 3238371032),
                  new n.init(1654270250, 914150663),
                  new n.init(2438529370, 812702999),
                  new n.init(355462360, 4144912697),
                  new n.init(1731405415, 4290775857),
                  new n.init(2394180231, 1750603025),
                  new n.init(3675008525, 1694076839),
                  new n.init(1203062813, 3204075428),
                ]);
              },
              _doFinalize: function () {
                var e = r._doFinalize.call(this);
                return (e.sigBytes -= 16), e;
              },
            })),
          (e.SHA384 = r._createHelper(a)),
          (e.HmacSHA384 = r._createHmacHelper(a)),
          s.SHA384)));
    var e, t, n, i, o, r, a, s;
  })(),
  Hu(),
  (function () {
    return (
      ju ||
        ((ju = 1),
        (Ku.exports =
          ((e = uu()),
          /** @preserve
      			(c) 2012 by Cédric Mesnil. All rights reserved.
      
      			Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
      
      			    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      			    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      
      			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      			*/
          (function (t) {
            var n = e,
              i = n.lib,
              o = i.WordArray,
              r = i.Hasher,
              a = n.algo,
              s = o.create([
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13,
                1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15,
                8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13,
                3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8,
                11, 6, 15, 13,
              ]),
              c = o.create([
                5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3,
                7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14,
                6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5,
                12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13,
                14, 0, 3, 9, 11,
              ]),
              u = o.create([
                11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8,
                13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14,
                9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9,
                8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12,
                13, 14, 11, 8, 5, 6,
              ]),
              l = o.create([
                8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13,
                15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11,
                8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14,
                6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8,
                13, 6, 5, 15, 13, 11, 11,
              ]),
              d = o.create([0, 1518500249, 1859775393, 2400959708, 2840853838]),
              p = o.create([1352829926, 1548603684, 1836072691, 2053994217, 0]),
              h = (a.RIPEMD160 = r.extend({
                _doReset: function () {
                  this._hash = o.create([
                    1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (var n = 0; n < 16; n++) {
                    var i = t + n,
                      o = e[i];
                    e[i] =
                      (16711935 & ((o << 8) | (o >>> 24))) |
                      (4278255360 & ((o << 24) | (o >>> 8)));
                  }
                  var r,
                    a,
                    h,
                    I,
                    M,
                    C,
                    T,
                    E,
                    D,
                    S,
                    k,
                    R = this._hash.words,
                    L = d.words,
                    A = p.words,
                    O = s.words,
                    b = c.words,
                    N = u.words,
                    P = l.words;
                  for (
                    C = r = R[0],
                      T = a = R[1],
                      E = h = R[2],
                      D = I = R[3],
                      S = M = R[4],
                      n = 0;
                    n < 80;
                    n += 1
                  )
                    (k = (r + e[t + O[n]]) | 0),
                      (k +=
                        n < 16
                          ? f(a, h, I) + L[0]
                          : n < 32
                            ? g(a, h, I) + L[1]
                            : n < 48
                              ? _(a, h, I) + L[2]
                              : n < 64
                                ? v(a, h, I) + L[3]
                                : m(a, h, I) + L[4]),
                      (k = ((k = y((k |= 0), N[n])) + M) | 0),
                      (r = M),
                      (M = I),
                      (I = y(h, 10)),
                      (h = a),
                      (a = k),
                      (k = (C + e[t + b[n]]) | 0),
                      (k +=
                        n < 16
                          ? m(T, E, D) + A[0]
                          : n < 32
                            ? v(T, E, D) + A[1]
                            : n < 48
                              ? _(T, E, D) + A[2]
                              : n < 64
                                ? g(T, E, D) + A[3]
                                : f(T, E, D) + A[4]),
                      (k = ((k = y((k |= 0), P[n])) + S) | 0),
                      (C = S),
                      (S = D),
                      (D = y(E, 10)),
                      (E = T),
                      (T = k);
                  (k = (R[1] + h + D) | 0),
                    (R[1] = (R[2] + I + S) | 0),
                    (R[2] = (R[3] + M + C) | 0),
                    (R[3] = (R[4] + r + T) | 0),
                    (R[4] = (R[0] + a + E) | 0),
                    (R[0] = k);
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    n = 8 * this._nDataBytes,
                    i = 8 * e.sigBytes;
                  (t[i >>> 5] |= 128 << (24 - (i % 32))),
                    (t[14 + (((i + 64) >>> 9) << 4)] =
                      (16711935 & ((n << 8) | (n >>> 24))) |
                      (4278255360 & ((n << 24) | (n >>> 8)))),
                    (e.sigBytes = 4 * (t.length + 1)),
                    this._process();
                  for (var o = this._hash, r = o.words, a = 0; a < 5; a++) {
                    var s = r[a];
                    r[a] =
                      (16711935 & ((s << 8) | (s >>> 24))) |
                      (4278255360 & ((s << 24) | (s >>> 8)));
                  }
                  return o;
                },
                clone: function () {
                  var e = r.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              }));
            function f(e, t, n) {
              return e ^ t ^ n;
            }
            function g(e, t, n) {
              return (e & t) | (~e & n);
            }
            function _(e, t, n) {
              return (e | ~t) ^ n;
            }
            function v(e, t, n) {
              return (e & n) | (t & ~n);
            }
            function m(e, t, n) {
              return e ^ (t | ~n);
            }
            function y(e, t) {
              return (e << t) | (e >>> (32 - t));
            }
            (n.RIPEMD160 = r._createHelper(h)),
              (n.HmacRIPEMD160 = r._createHmacHelper(h));
          })(),
          e.RIPEMD160))),
      Ku.exports
    );
    var e;
  })(),
  $u(),
  (function () {
    return (
      Yu ||
        ((Yu = 1),
        (Ju.exports =
          ((c = uu()),
          Nu(),
          $u(),
          (t = (e = c).lib),
          (n = t.Base),
          (i = t.WordArray),
          (o = e.algo),
          (r = o.SHA256),
          (a = o.HMAC),
          (s = o.PBKDF2 =
            n.extend({
              cfg: n.extend({ keySize: 4, hasher: r, iterations: 25e4 }),
              init: function (e) {
                this.cfg = this.cfg.extend(e);
              },
              compute: function (e, t) {
                for (
                  var n = this.cfg,
                    o = a.create(n.hasher, e),
                    r = i.create(),
                    s = i.create([1]),
                    c = r.words,
                    u = s.words,
                    l = n.keySize,
                    d = n.iterations;
                  c.length < l;

                ) {
                  var p = o.update(t).finalize(s);
                  o.reset();
                  for (
                    var h = p.words, f = h.length, g = p, _ = 1;
                    _ < d;
                    _++
                  ) {
                    (g = o.finalize(g)), o.reset();
                    for (var v = g.words, m = 0; m < f; m++) h[m] ^= v[m];
                  }
                  r.concat(p), u[0]++;
                }
                return (r.sigBytes = 4 * l), r;
              },
            })),
          (e.PBKDF2 = function (e, t, n) {
            return s.create(n).compute(e, t);
          }),
          c.PBKDF2))),
      Ju.exports
    );
    var e, t, n, i, o, r, a, s, c;
  })(),
  Qu(),
  nl(),
  (function () {
    return (
      il ||
        ((il = 1),
        (ol.exports =
          ((e = uu()),
          nl(),
          (e.mode.CFB = (function () {
            var t = e.lib.BlockCipherMode.extend();
            function n(e, t, n, i) {
              var o,
                r = this._iv;
              r
                ? ((o = r.slice(0)), (this._iv = void 0))
                : (o = this._prevBlock),
                i.encryptBlock(o, 0);
              for (var a = 0; a < n; a++) e[t + a] ^= o[a];
            }
            return (
              (t.Encryptor = t.extend({
                processBlock: function (e, t) {
                  var i = this._cipher,
                    o = i.blockSize;
                  n.call(this, e, t, o, i),
                    (this._prevBlock = e.slice(t, t + o));
                },
              })),
              (t.Decryptor = t.extend({
                processBlock: function (e, t) {
                  var i = this._cipher,
                    o = i.blockSize,
                    r = e.slice(t, t + o);
                  n.call(this, e, t, o, i), (this._prevBlock = r);
                },
              })),
              t
            );
          })()),
          e.mode.CFB))),
      ol.exports
    );
    var e;
  })(),
  (function () {
    return (
      rl ||
        ((rl = 1),
        (al.exports =
          ((n = uu()),
          nl(),
          (n.mode.CTR =
            ((e = n.lib.BlockCipherMode.extend()),
            (t = e.Encryptor =
              e.extend({
                processBlock: function (e, t) {
                  var n = this._cipher,
                    i = n.blockSize,
                    o = this._iv,
                    r = this._counter;
                  o && ((r = this._counter = o.slice(0)), (this._iv = void 0));
                  var a = r.slice(0);
                  n.encryptBlock(a, 0), (r[i - 1] = (r[i - 1] + 1) | 0);
                  for (var s = 0; s < i; s++) e[t + s] ^= a[s];
                },
              })),
            (e.Decryptor = t),
            e)),
          n.mode.CTR))),
      al.exports
    );
    var e, t, n;
  })(),
  ul(),
  (function () {
    return (
      ll ||
        ((ll = 1),
        (dl.exports =
          ((n = uu()),
          nl(),
          (n.mode.OFB =
            ((e = n.lib.BlockCipherMode.extend()),
            (t = e.Encryptor =
              e.extend({
                processBlock: function (e, t) {
                  var n = this._cipher,
                    i = n.blockSize,
                    o = this._iv,
                    r = this._keystream;
                  o &&
                    ((r = this._keystream = o.slice(0)), (this._iv = void 0)),
                    n.encryptBlock(r, 0);
                  for (var a = 0; a < i; a++) e[t + a] ^= r[a];
                },
              })),
            (e.Decryptor = t),
            e)),
          n.mode.OFB))),
      dl.exports
    );
    var e, t, n;
  })(),
  (function () {
    return pl
      ? hl.exports
      : ((pl = 1),
        (hl.exports =
          ((t = uu()),
          nl(),
          (t.mode.ECB =
            (((e = t.lib.BlockCipherMode.extend()).Encryptor = e.extend({
              processBlock: function (e, t) {
                this._cipher.encryptBlock(e, t);
              },
            })),
            (e.Decryptor = e.extend({
              processBlock: function (e, t) {
                this._cipher.decryptBlock(e, t);
              },
            })),
            e)),
          t.mode.ECB)));
    var e, t;
  })(),
  (function () {
    return fl
      ? gl.exports
      : ((fl = 1),
        (gl.exports =
          ((e = uu()),
          nl(),
          (e.pad.AnsiX923 = {
            pad: function (e, t) {
              var n = e.sigBytes,
                i = 4 * t,
                o = i - (n % i),
                r = n + o - 1;
              e.clamp(),
                (e.words[r >>> 2] |= o << (24 - (r % 4) * 8)),
                (e.sigBytes += o);
            },
            unpad: function (e) {
              var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
              e.sigBytes -= t;
            },
          }),
          e.pad.Ansix923)));
    var e;
  })(),
  (function () {
    return _l
      ? vl.exports
      : ((_l = 1),
        (vl.exports =
          ((e = uu()),
          nl(),
          (e.pad.Iso10126 = {
            pad: function (t, n) {
              var i = 4 * n,
                o = i - (t.sigBytes % i);
              t.concat(e.lib.WordArray.random(o - 1)).concat(
                e.lib.WordArray.create([o << 24], 1)
              );
            },
            unpad: function (e) {
              var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
              e.sigBytes -= t;
            },
          }),
          e.pad.Iso10126)));
    var e;
  })(),
  (function () {
    return ml
      ? yl.exports
      : ((ml = 1),
        (yl.exports =
          ((e = uu()),
          nl(),
          (e.pad.Iso97971 = {
            pad: function (t, n) {
              t.concat(e.lib.WordArray.create([2147483648], 1)),
                e.pad.ZeroPadding.pad(t, n);
            },
            unpad: function (t) {
              e.pad.ZeroPadding.unpad(t), t.sigBytes--;
            },
          }),
          e.pad.Iso97971)));
    var e;
  })(),
  (function () {
    return (
      Il ||
        ((Il = 1),
        (Ml.exports =
          ((e = uu()),
          nl(),
          (e.pad.ZeroPadding = {
            pad: function (e, t) {
              var n = 4 * t;
              e.clamp(), (e.sigBytes += n - (e.sigBytes % n || n));
            },
            unpad: function (e) {
              var t = e.words,
                n = e.sigBytes - 1;
              for (n = e.sigBytes - 1; n >= 0; n--)
                if ((t[n >>> 2] >>> (24 - (n % 4) * 8)) & 255) {
                  e.sigBytes = n + 1;
                  break;
                }
            },
          }),
          e.pad.ZeroPadding))),
      Ml.exports
    );
    var e;
  })(),
  (function () {
    return Cl
      ? Tl.exports
      : ((Cl = 1),
        (Tl.exports =
          ((e = uu()),
          nl(),
          (e.pad.NoPadding = { pad: function () {}, unpad: function () {} }),
          e.pad.NoPadding)));
    var e;
  })(),
  (function () {
    return El
      ? Dl.exports
      : ((El = 1),
        (Dl.exports =
          ((i = uu()),
          nl(),
          (t = (e = i).lib.CipherParams),
          (n = e.enc.Hex),
          (e.format.Hex = {
            stringify: function (e) {
              return e.ciphertext.toString(n);
            },
            parse: function (e) {
              var i = n.parse(e);
              return t.create({ ciphertext: i });
            },
          }),
          i.format.Hex)));
    var e, t, n, i;
  })(),
  (function () {
    return (
      Sl ||
        ((Sl = 1),
        (kl.exports =
          ((e = uu()),
          Mu(),
          ku(),
          Qu(),
          nl(),
          (function () {
            var t = e,
              n = t.lib.BlockCipher,
              i = t.algo,
              o = [],
              r = [],
              a = [],
              s = [],
              c = [],
              u = [],
              l = [],
              d = [],
              p = [],
              h = [];
            !(function () {
              for (var e = [], t = 0; t < 256; t++)
                e[t] = t < 128 ? t << 1 : (t << 1) ^ 283;
              var n = 0,
                i = 0;
              for (t = 0; t < 256; t++) {
                var f = i ^ (i << 1) ^ (i << 2) ^ (i << 3) ^ (i << 4);
                (f = (f >>> 8) ^ (255 & f) ^ 99), (o[n] = f), (r[f] = n);
                var g = e[n],
                  _ = e[g],
                  v = e[_],
                  m = (257 * e[f]) ^ (16843008 * f);
                (a[n] = (m << 24) | (m >>> 8)),
                  (s[n] = (m << 16) | (m >>> 16)),
                  (c[n] = (m << 8) | (m >>> 24)),
                  (u[n] = m),
                  (m =
                    (16843009 * v) ^ (65537 * _) ^ (257 * g) ^ (16843008 * n)),
                  (l[f] = (m << 24) | (m >>> 8)),
                  (d[f] = (m << 16) | (m >>> 16)),
                  (p[f] = (m << 8) | (m >>> 24)),
                  (h[f] = m),
                  n ? ((n = g ^ e[e[e[v ^ g]]]), (i ^= e[e[i]])) : (n = i = 1);
              }
            })();
            var f = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
              g = (i.AES = n.extend({
                _doReset: function () {
                  if (!this._nRounds || this._keyPriorReset !== this._key) {
                    for (
                      var e = (this._keyPriorReset = this._key),
                        t = e.words,
                        n = e.sigBytes / 4,
                        i = 4 * ((this._nRounds = n + 6) + 1),
                        r = (this._keySchedule = []),
                        a = 0;
                      a < i;
                      a++
                    )
                      a < n
                        ? (r[a] = t[a])
                        : ((u = r[a - 1]),
                          a % n
                            ? n > 6 &&
                              a % n == 4 &&
                              (u =
                                (o[u >>> 24] << 24) |
                                (o[(u >>> 16) & 255] << 16) |
                                (o[(u >>> 8) & 255] << 8) |
                                o[255 & u])
                            : ((u =
                                (o[(u = (u << 8) | (u >>> 24)) >>> 24] << 24) |
                                (o[(u >>> 16) & 255] << 16) |
                                (o[(u >>> 8) & 255] << 8) |
                                o[255 & u]),
                              (u ^= f[(a / n) | 0] << 24)),
                          (r[a] = r[a - n] ^ u));
                    for (
                      var s = (this._invKeySchedule = []), c = 0;
                      c < i;
                      c++
                    ) {
                      if (((a = i - c), c % 4)) var u = r[a];
                      else u = r[a - 4];
                      s[c] =
                        c < 4 || a <= 4
                          ? u
                          : l[o[u >>> 24]] ^
                            d[o[(u >>> 16) & 255]] ^
                            p[o[(u >>> 8) & 255]] ^
                            h[o[255 & u]];
                    }
                  }
                },
                encryptBlock: function (e, t) {
                  this._doCryptBlock(e, t, this._keySchedule, a, s, c, u, o);
                },
                decryptBlock: function (e, t) {
                  var n = e[t + 1];
                  (e[t + 1] = e[t + 3]),
                    (e[t + 3] = n),
                    this._doCryptBlock(
                      e,
                      t,
                      this._invKeySchedule,
                      l,
                      d,
                      p,
                      h,
                      r
                    ),
                    (n = e[t + 1]),
                    (e[t + 1] = e[t + 3]),
                    (e[t + 3] = n);
                },
                _doCryptBlock: function (e, t, n, i, o, r, a, s) {
                  for (
                    var c = this._nRounds,
                      u = e[t] ^ n[0],
                      l = e[t + 1] ^ n[1],
                      d = e[t + 2] ^ n[2],
                      p = e[t + 3] ^ n[3],
                      h = 4,
                      f = 1;
                    f < c;
                    f++
                  ) {
                    var g =
                        i[u >>> 24] ^
                        o[(l >>> 16) & 255] ^
                        r[(d >>> 8) & 255] ^
                        a[255 & p] ^
                        n[h++],
                      _ =
                        i[l >>> 24] ^
                        o[(d >>> 16) & 255] ^
                        r[(p >>> 8) & 255] ^
                        a[255 & u] ^
                        n[h++],
                      v =
                        i[d >>> 24] ^
                        o[(p >>> 16) & 255] ^
                        r[(u >>> 8) & 255] ^
                        a[255 & l] ^
                        n[h++],
                      m =
                        i[p >>> 24] ^
                        o[(u >>> 16) & 255] ^
                        r[(l >>> 8) & 255] ^
                        a[255 & d] ^
                        n[h++];
                    (u = g), (l = _), (d = v), (p = m);
                  }
                  (g =
                    ((s[u >>> 24] << 24) |
                      (s[(l >>> 16) & 255] << 16) |
                      (s[(d >>> 8) & 255] << 8) |
                      s[255 & p]) ^
                    n[h++]),
                    (_ =
                      ((s[l >>> 24] << 24) |
                        (s[(d >>> 16) & 255] << 16) |
                        (s[(p >>> 8) & 255] << 8) |
                        s[255 & u]) ^
                      n[h++]),
                    (v =
                      ((s[d >>> 24] << 24) |
                        (s[(p >>> 16) & 255] << 16) |
                        (s[(u >>> 8) & 255] << 8) |
                        s[255 & l]) ^
                      n[h++]),
                    (m =
                      ((s[p >>> 24] << 24) |
                        (s[(u >>> 16) & 255] << 16) |
                        (s[(l >>> 8) & 255] << 8) |
                        s[255 & d]) ^
                      n[h++]),
                    (e[t] = g),
                    (e[t + 1] = _),
                    (e[t + 2] = v),
                    (e[t + 3] = m);
                },
                keySize: 8,
              }));
            t.AES = n._createHelper(g);
          })(),
          e.AES))),
      kl.exports
    );
    var e;
  })(),
  Al(),
  (function () {
    return (
      Ol ||
        ((Ol = 1),
        (bl.exports =
          ((e = uu()),
          Mu(),
          ku(),
          Qu(),
          nl(),
          (function () {
            var t = e,
              n = t.lib.StreamCipher,
              i = t.algo,
              o = (i.RC4 = n.extend({
                _doReset: function () {
                  for (
                    var e = this._key,
                      t = e.words,
                      n = e.sigBytes,
                      i = (this._S = []),
                      o = 0;
                    o < 256;
                    o++
                  )
                    i[o] = o;
                  o = 0;
                  for (var r = 0; o < 256; o++) {
                    var a = o % n,
                      s = (t[a >>> 2] >>> (24 - (a % 4) * 8)) & 255;
                    r = (r + i[o] + s) % 256;
                    var c = i[o];
                    (i[o] = i[r]), (i[r] = c);
                  }
                  this._i = this._j = 0;
                },
                _doProcessBlock: function (e, t) {
                  e[t] ^= r.call(this);
                },
                keySize: 8,
                ivSize: 0,
              }));
            function r() {
              for (
                var e = this._S, t = this._i, n = this._j, i = 0, o = 0;
                o < 4;
                o++
              ) {
                n = (n + e[(t = (t + 1) % 256)]) % 256;
                var r = e[t];
                (e[t] = e[n]),
                  (e[n] = r),
                  (i |= e[(e[t] + e[n]) % 256] << (24 - 8 * o));
              }
              return (this._i = t), (this._j = n), i;
            }
            t.RC4 = n._createHelper(o);
            var a = (i.RC4Drop = o.extend({
              cfg: o.cfg.extend({ drop: 192 }),
              _doReset: function () {
                o._doReset.call(this);
                for (var e = this.cfg.drop; e > 0; e--) r.call(this);
              },
            }));
            t.RC4Drop = n._createHelper(a);
          })(),
          e.RC4))),
      bl.exports
    );
    var e;
  })(),
  (function () {
    return (
      Nl ||
        ((Nl = 1),
        (Pl.exports =
          ((e = uu()),
          Mu(),
          ku(),
          Qu(),
          nl(),
          (function () {
            var t = e,
              n = t.lib.StreamCipher,
              i = t.algo,
              o = [],
              r = [],
              a = [],
              s = (i.Rabbit = n.extend({
                _doReset: function () {
                  for (
                    var e = this._key.words, t = this.cfg.iv, n = 0;
                    n < 4;
                    n++
                  )
                    e[n] =
                      (16711935 & ((e[n] << 8) | (e[n] >>> 24))) |
                      (4278255360 & ((e[n] << 24) | (e[n] >>> 8)));
                  var i = (this._X = [
                      e[0],
                      (e[3] << 16) | (e[2] >>> 16),
                      e[1],
                      (e[0] << 16) | (e[3] >>> 16),
                      e[2],
                      (e[1] << 16) | (e[0] >>> 16),
                      e[3],
                      (e[2] << 16) | (e[1] >>> 16),
                    ]),
                    o = (this._C = [
                      (e[2] << 16) | (e[2] >>> 16),
                      (4294901760 & e[0]) | (65535 & e[1]),
                      (e[3] << 16) | (e[3] >>> 16),
                      (4294901760 & e[1]) | (65535 & e[2]),
                      (e[0] << 16) | (e[0] >>> 16),
                      (4294901760 & e[2]) | (65535 & e[3]),
                      (e[1] << 16) | (e[1] >>> 16),
                      (4294901760 & e[3]) | (65535 & e[0]),
                    ]);
                  for (this._b = 0, n = 0; n < 4; n++) c.call(this);
                  for (n = 0; n < 8; n++) o[n] ^= i[(n + 4) & 7];
                  if (t) {
                    var r = t.words,
                      a = r[0],
                      s = r[1],
                      u =
                        (16711935 & ((a << 8) | (a >>> 24))) |
                        (4278255360 & ((a << 24) | (a >>> 8))),
                      l =
                        (16711935 & ((s << 8) | (s >>> 24))) |
                        (4278255360 & ((s << 24) | (s >>> 8))),
                      d = (u >>> 16) | (4294901760 & l),
                      p = (l << 16) | (65535 & u);
                    for (
                      o[0] ^= u,
                        o[1] ^= d,
                        o[2] ^= l,
                        o[3] ^= p,
                        o[4] ^= u,
                        o[5] ^= d,
                        o[6] ^= l,
                        o[7] ^= p,
                        n = 0;
                      n < 4;
                      n++
                    )
                      c.call(this);
                  }
                },
                _doProcessBlock: function (e, t) {
                  var n = this._X;
                  c.call(this),
                    (o[0] = n[0] ^ (n[5] >>> 16) ^ (n[3] << 16)),
                    (o[1] = n[2] ^ (n[7] >>> 16) ^ (n[5] << 16)),
                    (o[2] = n[4] ^ (n[1] >>> 16) ^ (n[7] << 16)),
                    (o[3] = n[6] ^ (n[3] >>> 16) ^ (n[1] << 16));
                  for (var i = 0; i < 4; i++)
                    (o[i] =
                      (16711935 & ((o[i] << 8) | (o[i] >>> 24))) |
                      (4278255360 & ((o[i] << 24) | (o[i] >>> 8)))),
                      (e[t + i] ^= o[i]);
                },
                blockSize: 4,
                ivSize: 2,
              }));
            function c() {
              for (var e = this._X, t = this._C, n = 0; n < 8; n++) r[n] = t[n];
              for (
                t[0] = (t[0] + 1295307597 + this._b) | 0,
                  t[1] =
                    (t[1] + 3545052371 + (t[0] >>> 0 < r[0] >>> 0 ? 1 : 0)) | 0,
                  t[2] =
                    (t[2] + 886263092 + (t[1] >>> 0 < r[1] >>> 0 ? 1 : 0)) | 0,
                  t[3] =
                    (t[3] + 1295307597 + (t[2] >>> 0 < r[2] >>> 0 ? 1 : 0)) | 0,
                  t[4] =
                    (t[4] + 3545052371 + (t[3] >>> 0 < r[3] >>> 0 ? 1 : 0)) | 0,
                  t[5] =
                    (t[5] + 886263092 + (t[4] >>> 0 < r[4] >>> 0 ? 1 : 0)) | 0,
                  t[6] =
                    (t[6] + 1295307597 + (t[5] >>> 0 < r[5] >>> 0 ? 1 : 0)) | 0,
                  t[7] =
                    (t[7] + 3545052371 + (t[6] >>> 0 < r[6] >>> 0 ? 1 : 0)) | 0,
                  this._b = t[7] >>> 0 < r[7] >>> 0 ? 1 : 0,
                  n = 0;
                n < 8;
                n++
              ) {
                var i = e[n] + t[n],
                  o = 65535 & i,
                  s = i >>> 16,
                  c = ((((o * o) >>> 17) + o * s) >>> 15) + s * s,
                  u = (((4294901760 & i) * i) | 0) + (((65535 & i) * i) | 0);
                a[n] = c ^ u;
              }
              (e[0] =
                (a[0] +
                  ((a[7] << 16) | (a[7] >>> 16)) +
                  ((a[6] << 16) | (a[6] >>> 16))) |
                0),
                (e[1] = (a[1] + ((a[0] << 8) | (a[0] >>> 24)) + a[7]) | 0),
                (e[2] =
                  (a[2] +
                    ((a[1] << 16) | (a[1] >>> 16)) +
                    ((a[0] << 16) | (a[0] >>> 16))) |
                  0),
                (e[3] = (a[3] + ((a[2] << 8) | (a[2] >>> 24)) + a[1]) | 0),
                (e[4] =
                  (a[4] +
                    ((a[3] << 16) | (a[3] >>> 16)) +
                    ((a[2] << 16) | (a[2] >>> 16))) |
                  0),
                (e[5] = (a[5] + ((a[4] << 8) | (a[4] >>> 24)) + a[3]) | 0),
                (e[6] =
                  (a[6] +
                    ((a[5] << 16) | (a[5] >>> 16)) +
                    ((a[4] << 16) | (a[4] >>> 16))) |
                  0),
                (e[7] = (a[7] + ((a[6] << 8) | (a[6] >>> 24)) + a[5]) | 0);
            }
            t.Rabbit = n._createHelper(s);
          })(),
          e.Rabbit))),
      Pl.exports
    );
    var e;
  })(),
  (function () {
    return (
      wl ||
        ((wl = 1),
        (Ul.exports =
          ((e = uu()),
          Mu(),
          ku(),
          Qu(),
          nl(),
          (function () {
            var t = e,
              n = t.lib.StreamCipher,
              i = t.algo,
              o = [],
              r = [],
              a = [],
              s = (i.RabbitLegacy = n.extend({
                _doReset: function () {
                  var e = this._key.words,
                    t = this.cfg.iv,
                    n = (this._X = [
                      e[0],
                      (e[3] << 16) | (e[2] >>> 16),
                      e[1],
                      (e[0] << 16) | (e[3] >>> 16),
                      e[2],
                      (e[1] << 16) | (e[0] >>> 16),
                      e[3],
                      (e[2] << 16) | (e[1] >>> 16),
                    ]),
                    i = (this._C = [
                      (e[2] << 16) | (e[2] >>> 16),
                      (4294901760 & e[0]) | (65535 & e[1]),
                      (e[3] << 16) | (e[3] >>> 16),
                      (4294901760 & e[1]) | (65535 & e[2]),
                      (e[0] << 16) | (e[0] >>> 16),
                      (4294901760 & e[2]) | (65535 & e[3]),
                      (e[1] << 16) | (e[1] >>> 16),
                      (4294901760 & e[3]) | (65535 & e[0]),
                    ]);
                  this._b = 0;
                  for (var o = 0; o < 4; o++) c.call(this);
                  for (o = 0; o < 8; o++) i[o] ^= n[(o + 4) & 7];
                  if (t) {
                    var r = t.words,
                      a = r[0],
                      s = r[1],
                      u =
                        (16711935 & ((a << 8) | (a >>> 24))) |
                        (4278255360 & ((a << 24) | (a >>> 8))),
                      l =
                        (16711935 & ((s << 8) | (s >>> 24))) |
                        (4278255360 & ((s << 24) | (s >>> 8))),
                      d = (u >>> 16) | (4294901760 & l),
                      p = (l << 16) | (65535 & u);
                    for (
                      i[0] ^= u,
                        i[1] ^= d,
                        i[2] ^= l,
                        i[3] ^= p,
                        i[4] ^= u,
                        i[5] ^= d,
                        i[6] ^= l,
                        i[7] ^= p,
                        o = 0;
                      o < 4;
                      o++
                    )
                      c.call(this);
                  }
                },
                _doProcessBlock: function (e, t) {
                  var n = this._X;
                  c.call(this),
                    (o[0] = n[0] ^ (n[5] >>> 16) ^ (n[3] << 16)),
                    (o[1] = n[2] ^ (n[7] >>> 16) ^ (n[5] << 16)),
                    (o[2] = n[4] ^ (n[1] >>> 16) ^ (n[7] << 16)),
                    (o[3] = n[6] ^ (n[3] >>> 16) ^ (n[1] << 16));
                  for (var i = 0; i < 4; i++)
                    (o[i] =
                      (16711935 & ((o[i] << 8) | (o[i] >>> 24))) |
                      (4278255360 & ((o[i] << 24) | (o[i] >>> 8)))),
                      (e[t + i] ^= o[i]);
                },
                blockSize: 4,
                ivSize: 2,
              }));
            function c() {
              for (var e = this._X, t = this._C, n = 0; n < 8; n++) r[n] = t[n];
              for (
                t[0] = (t[0] + 1295307597 + this._b) | 0,
                  t[1] =
                    (t[1] + 3545052371 + (t[0] >>> 0 < r[0] >>> 0 ? 1 : 0)) | 0,
                  t[2] =
                    (t[2] + 886263092 + (t[1] >>> 0 < r[1] >>> 0 ? 1 : 0)) | 0,
                  t[3] =
                    (t[3] + 1295307597 + (t[2] >>> 0 < r[2] >>> 0 ? 1 : 0)) | 0,
                  t[4] =
                    (t[4] + 3545052371 + (t[3] >>> 0 < r[3] >>> 0 ? 1 : 0)) | 0,
                  t[5] =
                    (t[5] + 886263092 + (t[4] >>> 0 < r[4] >>> 0 ? 1 : 0)) | 0,
                  t[6] =
                    (t[6] + 1295307597 + (t[5] >>> 0 < r[5] >>> 0 ? 1 : 0)) | 0,
                  t[7] =
                    (t[7] + 3545052371 + (t[6] >>> 0 < r[6] >>> 0 ? 1 : 0)) | 0,
                  this._b = t[7] >>> 0 < r[7] >>> 0 ? 1 : 0,
                  n = 0;
                n < 8;
                n++
              ) {
                var i = e[n] + t[n],
                  o = 65535 & i,
                  s = i >>> 16,
                  c = ((((o * o) >>> 17) + o * s) >>> 15) + s * s,
                  u = (((4294901760 & i) * i) | 0) + (((65535 & i) * i) | 0);
                a[n] = c ^ u;
              }
              (e[0] =
                (a[0] +
                  ((a[7] << 16) | (a[7] >>> 16)) +
                  ((a[6] << 16) | (a[6] >>> 16))) |
                0),
                (e[1] = (a[1] + ((a[0] << 8) | (a[0] >>> 24)) + a[7]) | 0),
                (e[2] =
                  (a[2] +
                    ((a[1] << 16) | (a[1] >>> 16)) +
                    ((a[0] << 16) | (a[0] >>> 16))) |
                  0),
                (e[3] = (a[3] + ((a[2] << 8) | (a[2] >>> 24)) + a[1]) | 0),
                (e[4] =
                  (a[4] +
                    ((a[3] << 16) | (a[3] >>> 16)) +
                    ((a[2] << 16) | (a[2] >>> 16))) |
                  0),
                (e[5] = (a[5] + ((a[4] << 8) | (a[4] >>> 24)) + a[3]) | 0),
                (e[6] =
                  (a[6] +
                    ((a[5] << 16) | (a[5] >>> 16)) +
                    ((a[4] << 16) | (a[4] >>> 16))) |
                  0),
                (e[7] = (a[7] + ((a[6] << 8) | (a[6] >>> 24)) + a[5]) | 0);
            }
            t.RabbitLegacy = n._createHelper(s);
          })(),
          e.RabbitLegacy))),
      Ul.exports
    );
    var e;
  })(),
  Kl()
);
var Wl = ru.exports;
const zl = {
  pages: [
    {
      name: 'home',
      path: 'pages/home/index',
      style: { navigationBarTitleText: '首页' },
    },
    {
      name: 'mine',
      path: 'pages/mine/index',
      style: { navigationBarTitleText: '我的' },
    },
    {
      name: 'login',
      path: 'pages/login/index',
      style: { navigationBarTitleText: '登录' },
    },
    {
      name: 'settings',
      path: 'pages/settings/index',
      style: { navigationBarTitleText: '设置' },
    },
    {
      name: 'inquiry-info',
      path: 'pages/inquiry-info/index',
      style: { navigationBarTitleText: '问诊信息' },
    },
    {
      name: 'add-drug',
      path: 'pages/add-drug/index',
      style: { navigationBarTitleText: '添加药品' },
    },
    {
      name: 'dispatch-wait',
      path: 'pages/dispatch-wait/index',
      style: { navigationBarTitleText: '派单中' },
    },
    {
      name: 'dispatch-success',
      path: 'pages/dispatch-success/index',
      style: { navigationBarTitleText: '派单成功' },
    },
    {
      name: 'pay-detail',
      path: 'pages/pay-detail/index',
      style: { navigationBarTitleText: '确认支付' },
    },
    {
      name: 'pay-result',
      path: 'pages/pay-result/index',
      style: { navigationBarTitleText: '支付结果' },
    },
    {
      name: 'refund-result',
      path: 'pages/refund-result/index',
      style: { navigationBarTitleText: '退款结果' },
    },
    {
      name: 'chat',
      path: 'pages/chat/index',
      style: { navigationBarTitleText: '问诊室' },
    },
    {
      name: 'web-view',
      path: 'pages/web-view/index',
      style: { navigationBarTitleText: '便民门诊' },
    },
    {
      name: 'TUICallKit',
      path: 'TUICallKit/src/Components/TUICallKit',
      style: { navigationBarTitleText: '视频问诊' },
    },
  ],
  subPackages: [
    {
      root: 'pages-inquiry-order',
      pages: [
        {
          name: 'inquiry-order',
          path: 'inquiry-order/index',
          style: { navigationBarTitleText: '问诊订单' },
        },
        {
          name: 'inquiry-order-detail',
          path: 'inquiry-order-detail/index',
          style: { navigationBarTitleText: '订单详情' },
        },
      ],
    },
    {
      root: 'pages-prescription',
      pages: [
        {
          name: 'prescription',
          path: 'prescription/index',
          style: { navigationBarTitleText: '我的处方' },
        },
        {
          name: 'prescription-detail',
          path: 'prescription-detail/index',
          style: { navigationBarTitleText: '处方详情' },
        },
      ],
    },
    {
      root: 'pages-patient',
      pages: [
        {
          name: 'patient',
          path: 'patient/index',
          style: { navigationBarTitleText: '就诊人' },
        },
        {
          name: 'patient-detail',
          path: 'patient-detail/index',
          style: { navigationBarTitleText: '就诊人信息' },
        },
      ],
    },
    {
      root: 'pages-health-records',
      pages: [
        {
          name: 'health-records',
          path: 'health-records/index',
          style: { navigationBarTitleText: '健康档案' },
        },
        {
          name: 'health-records-detail',
          path: 'health-records-detail/index',
          style: { navigationBarTitleText: '健康档案' },
        },
        {
          name: 'health-records-edit',
          path: 'health-records-edit/index',
          style: { navigationBarTitleText: '健康档案' },
        },
      ],
    },
  ],
  tabBar: {
    color: '#666666',
    selectedColor: '#2787fc',
    backgroundColor: '#ffffff',
    borderStyle: 'black',
    list: [
      {
        pagePath: 'pages/home/index',
        iconPath: './static/home.png',
        selectedIconPath: './static/home_active.png',
        text: '首页',
      },
      {
        pagePath: 'pages/mine/index',
        iconPath: './static/mine.png',
        selectedIconPath: './static/mine_active.png',
        text: '我的',
      },
    ],
  },
  globalStyle: {
    navigationBarTextStyle: 'black',
    navigationBarTitleText: '便民门诊',
    navigationStyle: 'default',
    navigationBarBackgroundColor: '#ffffff',
    backgroundColor: '#F8F8F8',
    rpxCalcMaxDeviceWidth: 3840,
    rpxCalcBaseDeviceWidth: 3840,
    rpxCalcIncludeWidth: 750,
    h5: { navigationStyle: 'custom' },
    'mp-weixin': {},
    'mp-alipay': {},
  },
  easycom: {
    autoscan: !0,
    custom: {
      '^uni-(.*)': '@dcloudio/uni-ui/lib/uni-$1/uni-$1.vue',
      '^nut-(.*)?-(.*)': 'nutui-uniapp/components/$1$2/$1$2.vue',
      '^nut-(.*)': 'nutui-uniapp/components/$1/$1.vue',
    },
  },
};
var $l,
  Yl,
  Jl,
  Xl = { exports: {} };
/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */ (Yl = Zs),
  (Jl = function () {
    var e,
      t,
      n,
      i,
      o,
      r = {},
      a = {},
      s = {
        currentLocale: 'en',
        zeroFormat: null,
        nullFormat: null,
        defaultFormat: '0,0',
        scalePercentBy100: !0,
      },
      c = {
        currentLocale: s.currentLocale,
        zeroFormat: s.zeroFormat,
        nullFormat: s.nullFormat,
        defaultFormat: s.defaultFormat,
        scalePercentBy100: s.scalePercentBy100,
      };
    function u(e, t) {
      (this._input = e), (this._value = t);
    }
    return (
      ((e = function (n) {
        var i, o, a, s;
        if (e.isNumeral(n)) i = n.value();
        else if (0 === n || void 0 === n) i = 0;
        else if (null === n || t.isNaN(n)) i = null;
        else if ('string' == typeof n)
          if (c.zeroFormat && n === c.zeroFormat) i = 0;
          else if (
            (c.nullFormat && n === c.nullFormat) ||
            !n.replace(/[^0-9]+/g, '').length
          )
            i = null;
          else {
            for (o in r)
              if (
                (s =
                  'function' == typeof r[o].regexps.unformat
                    ? r[o].regexps.unformat()
                    : r[o].regexps.unformat) &&
                n.match(s)
              ) {
                a = r[o].unformat;
                break;
              }
            i = (a = a || e._.stringToNumber)(n);
          }
        else i = Number(n) || null;
        return new u(n, i);
      }).version = '2.0.6'),
      (e.isNumeral = function (e) {
        return e instanceof u;
      }),
      (e._ = t =
        {
          numberToFormat: function (t, n, i) {
            var o,
              r,
              s,
              c,
              u,
              l,
              d,
              p,
              h = a[e.options.currentLocale],
              f = !1,
              g = !1,
              _ = '',
              v = 1e12,
              m = 1e9,
              y = 1e6,
              I = '',
              M = !1;
            if (
              ((t = t || 0),
              (s = Math.abs(t)),
              e._.includes(n, '(')
                ? ((f = !0), (n = n.replace(/[\(|\)]/g, '')))
                : (e._.includes(n, '+') || e._.includes(n, '-')) &&
                  ((l = e._.includes(n, '+')
                    ? n.indexOf('+')
                    : t < 0
                      ? n.indexOf('-')
                      : -1),
                  (n = n.replace(/[\+|\-]/g, ''))),
              e._.includes(n, 'a') &&
                ((r = !!(r = n.match(/a(k|m|b|t)?/)) && r[1]),
                e._.includes(n, ' a') && (_ = ' '),
                (n = n.replace(new RegExp(_ + 'a[kmbt]?'), '')),
                (s >= v && !r) || 't' === r
                  ? ((_ += h.abbreviations.trillion), (t /= v))
                  : (s < v && s >= m && !r) || 'b' === r
                    ? ((_ += h.abbreviations.billion), (t /= m))
                    : (s < m && s >= y && !r) || 'm' === r
                      ? ((_ += h.abbreviations.million), (t /= y))
                      : ((s < y && s >= 1e3 && !r) || 'k' === r) &&
                        ((_ += h.abbreviations.thousand), (t /= 1e3))),
              e._.includes(n, '[.]') && ((g = !0), (n = n.replace('[.]', '.'))),
              (c = t.toString().split('.')[0]),
              (u = n.split('.')[1]),
              (d = n.indexOf(',')),
              (o = (n.split('.')[0].split(',')[0].match(/0/g) || []).length),
              u
                ? (e._.includes(u, '[')
                    ? ((u = (u = u.replace(']', '')).split('[')),
                      (I = e._.toFixed(
                        t,
                        u[0].length + u[1].length,
                        i,
                        u[1].length
                      )))
                    : (I = e._.toFixed(t, u.length, i)),
                  (c = I.split('.')[0]),
                  (I = e._.includes(I, '.')
                    ? h.delimiters.decimal + I.split('.')[1]
                    : ''),
                  g && 0 === Number(I.slice(1)) && (I = ''))
                : (c = e._.toFixed(t, 0, i)),
              _ && !r && Number(c) >= 1e3 && _ !== h.abbreviations.trillion)
            )
              switch (((c = String(Number(c) / 1e3)), _)) {
                case h.abbreviations.thousand:
                  _ = h.abbreviations.million;
                  break;
                case h.abbreviations.million:
                  _ = h.abbreviations.billion;
                  break;
                case h.abbreviations.billion:
                  _ = h.abbreviations.trillion;
              }
            if (
              (e._.includes(c, '-') && ((c = c.slice(1)), (M = !0)),
              c.length < o)
            )
              for (var C = o - c.length; C > 0; C--) c = '0' + c;
            return (
              d > -1 &&
                (c = c
                  .toString()
                  .replace(
                    /(\d)(?=(\d{3})+(?!\d))/g,
                    '$1' + h.delimiters.thousands
                  )),
              0 === n.indexOf('.') && (c = ''),
              (p = c + I + (_ || '')),
              f
                ? (p = (f && M ? '(' : '') + p + (f && M ? ')' : ''))
                : l >= 0
                  ? (p = 0 === l ? (M ? '-' : '+') + p : p + (M ? '-' : '+'))
                  : M && (p = '-' + p),
              p
            );
          },
          stringToNumber: function (e) {
            var t,
              n,
              i,
              o = a[c.currentLocale],
              r = e,
              s = { thousand: 3, million: 6, billion: 9, trillion: 12 };
            if (c.zeroFormat && e === c.zeroFormat) n = 0;
            else if (
              (c.nullFormat && e === c.nullFormat) ||
              !e.replace(/[^0-9]+/g, '').length
            )
              n = null;
            else {
              for (t in ((n = 1),
              '.' !== o.delimiters.decimal &&
                (e = e.replace(/\./g, '').replace(o.delimiters.decimal, '.')),
              s))
                if (
                  ((i = new RegExp(
                    '[^a-zA-Z]' +
                      o.abbreviations[t] +
                      '(?:\\)|(\\' +
                      o.currency.symbol +
                      ')?(?:\\))?)?$'
                  )),
                  r.match(i))
                ) {
                  n *= Math.pow(10, s[t]);
                  break;
                }
              (n *=
                (e.split('-').length +
                  Math.min(e.split('(').length - 1, e.split(')').length - 1)) %
                2
                  ? 1
                  : -1),
                (e = e.replace(/[^0-9\.]+/g, '')),
                (n *= Number(e));
            }
            return n;
          },
          isNaN: function (e) {
            return 'number' == typeof e && isNaN(e);
          },
          includes: function (e, t) {
            return -1 !== e.indexOf(t);
          },
          insert: function (e, t, n) {
            return e.slice(0, n) + t + e.slice(n);
          },
          reduce: function (e, t) {
            if (null === this)
              throw new TypeError(
                'Array.prototype.reduce called on null or undefined'
              );
            if ('function' != typeof t)
              throw new TypeError(t + ' is not a function');
            var n,
              i = Object(e),
              o = i.length >>> 0,
              r = 0;
            if (3 === arguments.length) n = arguments[2];
            else {
              for (; r < o && !(r in i); ) r++;
              if (r >= o)
                throw new TypeError(
                  'Reduce of empty array with no initial value'
                );
              n = i[r++];
            }
            for (; r < o; r++) r in i && (n = t(n, i[r], r, i));
            return n;
          },
          multiplier: function (e) {
            var t = e.toString().split('.');
            return t.length < 2 ? 1 : Math.pow(10, t[1].length);
          },
          correctionFactor: function () {
            return Array.prototype.slice.call(arguments).reduce(function (
              e,
              n
            ) {
              var i = t.multiplier(n);
              return e > i ? e : i;
            }, 1);
          },
          toFixed: function (e, t, n, i) {
            var o,
              r,
              a,
              s,
              c = e.toString().split('.'),
              u = t - (i || 0);
            return (
              (o = 2 === c.length ? Math.min(Math.max(c[1].length, u), t) : u),
              (a = Math.pow(10, o)),
              (s = (n(e + 'e+' + o) / a).toFixed(o)),
              i > t - o &&
                ((r = new RegExp('\\.?0{1,' + (i - (t - o)) + '}$')),
                (s = s.replace(r, ''))),
              s
            );
          },
        }),
      (e.options = c),
      (e.formats = r),
      (e.locales = a),
      (e.locale = function (e) {
        return e && (c.currentLocale = e.toLowerCase()), c.currentLocale;
      }),
      (e.localeData = function (e) {
        if (!e) return a[c.currentLocale];
        if (((e = e.toLowerCase()), !a[e]))
          throw new Error('Unknown locale : ' + e);
        return a[e];
      }),
      (e.reset = function () {
        for (var e in s) c[e] = s[e];
      }),
      (e.zeroFormat = function (e) {
        c.zeroFormat = 'string' == typeof e ? e : null;
      }),
      (e.nullFormat = function (e) {
        c.nullFormat = 'string' == typeof e ? e : null;
      }),
      (e.defaultFormat = function (e) {
        c.defaultFormat = 'string' == typeof e ? e : '0.0';
      }),
      (e.register = function (e, t, n) {
        if (((t = t.toLowerCase()), this[e + 's'][t]))
          throw new TypeError(t + ' ' + e + ' already registered.');
        return (this[e + 's'][t] = n), n;
      }),
      (e.validate = function (t, n) {
        var i, o, r, a, s, c, u, l;
        if (
          ('string' != typeof t &&
            ((t += ''),
            console.warn &&
              console.warn(
                'Numeral.js: Value is not string. It has been co-erced to: ',
                t
              )),
          (t = t.trim()).match(/^\d+$/))
        )
          return !0;
        if ('' === t) return !1;
        try {
          u = e.localeData(n);
        } catch (sc) {
          u = e.localeData(e.locale());
        }
        return (
          (r = u.currency.symbol),
          (s = u.abbreviations),
          (i = u.delimiters.decimal),
          (o = '.' === u.delimiters.thousands ? '\\.' : u.delimiters.thousands),
          !(
            (null !== (l = t.match(/^[^\d]+/)) &&
              ((t = t.substr(1)), l[0] !== r)) ||
            (null !== (l = t.match(/[^\d]+$/)) &&
              ((t = t.slice(0, -1)),
              l[0] !== s.thousand &&
                l[0] !== s.million &&
                l[0] !== s.billion &&
                l[0] !== s.trillion)) ||
            ((c = new RegExp(o + '{2}')),
            t.match(/[^\d.,]/g) ||
              (a = t.split(i)).length > 2 ||
              (a.length < 2
                ? !a[0].match(/^\d+.*\d$/) || a[0].match(c)
                : 1 === a[0].length
                  ? !a[0].match(/^\d+$/) ||
                    a[0].match(c) ||
                    !a[1].match(/^\d+$/)
                  : !a[0].match(/^\d+.*\d$/) ||
                    a[0].match(c) ||
                    !a[1].match(/^\d+$/)))
          )
        );
      }),
      (e.fn = u.prototype =
        {
          clone: function () {
            return e(this);
          },
          format: function (t, n) {
            var i,
              o,
              a,
              s = this._value,
              u = t || c.defaultFormat;
            if (((n = n || Math.round), 0 === s && null !== c.zeroFormat))
              o = c.zeroFormat;
            else if (null === s && null !== c.nullFormat) o = c.nullFormat;
            else {
              for (i in r)
                if (u.match(r[i].regexps.format)) {
                  a = r[i].format;
                  break;
                }
              o = (a = a || e._.numberToFormat)(s, u, n);
            }
            return o;
          },
          value: function () {
            return this._value;
          },
          input: function () {
            return this._input;
          },
          set: function (e) {
            return (this._value = Number(e)), this;
          },
          add: function (e) {
            var n = t.correctionFactor.call(null, this._value, e);
            return (
              (this._value =
                t.reduce(
                  [this._value, e],
                  function (e, t, i, o) {
                    return e + Math.round(n * t);
                  },
                  0
                ) / n),
              this
            );
          },
          subtract: function (e) {
            var n = t.correctionFactor.call(null, this._value, e);
            return (
              (this._value =
                t.reduce(
                  [e],
                  function (e, t, i, o) {
                    return e - Math.round(n * t);
                  },
                  Math.round(this._value * n)
                ) / n),
              this
            );
          },
          multiply: function (e) {
            return (
              (this._value = t.reduce(
                [this._value, e],
                function (e, n, i, o) {
                  var r = t.correctionFactor(e, n);
                  return (
                    (Math.round(e * r) * Math.round(n * r)) / Math.round(r * r)
                  );
                },
                1
              )),
              this
            );
          },
          divide: function (e) {
            return (
              (this._value = t.reduce([this._value, e], function (e, n, i, o) {
                var r = t.correctionFactor(e, n);
                return Math.round(e * r) / Math.round(n * r);
              })),
              this
            );
          },
          difference: function (t) {
            return Math.abs(e(this._value).subtract(t).value());
          },
        }),
      e.register('locale', 'en', {
        delimiters: { thousands: ',', decimal: '.' },
        abbreviations: {
          thousand: 'k',
          million: 'm',
          billion: 'b',
          trillion: 't',
        },
        ordinal: function (e) {
          var t = e % 10;
          return 1 == ~~((e % 100) / 10)
            ? 'th'
            : 1 === t
              ? 'st'
              : 2 === t
                ? 'nd'
                : 3 === t
                  ? 'rd'
                  : 'th';
        },
        currency: { symbol: '$' },
      }),
      e.register('format', 'bps', {
        regexps: { format: /(BPS)/, unformat: /(BPS)/ },
        format: function (t, n, i) {
          var o,
            r = e._.includes(n, ' BPS') ? ' ' : '';
          return (
            (t *= 1e4),
            (n = n.replace(/\s?BPS/, '')),
            (o = e._.numberToFormat(t, n, i)),
            e._.includes(o, ')')
              ? ((o = o.split('')).splice(-1, 0, r + 'BPS'), (o = o.join('')))
              : (o = o + r + 'BPS'),
            o
          );
        },
        unformat: function (t) {
          return +(1e-4 * e._.stringToNumber(t)).toFixed(15);
        },
      }),
      (i = {
        base: 1024,
        suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],
      }),
      (o =
        '(' +
        (o = (n = {
          base: 1e3,
          suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
        }).suffixes
          .concat(
            i.suffixes.filter(function (e) {
              return n.suffixes.indexOf(e) < 0;
            })
          )
          .join('|')).replace('B', 'B(?!PS)') +
        ')'),
      e.register('format', 'bytes', {
        regexps: { format: /([0\s]i?b)/, unformat: new RegExp(o) },
        format: function (t, o, r) {
          var a,
            s,
            c,
            u = e._.includes(o, 'ib') ? i : n,
            l = e._.includes(o, ' b') || e._.includes(o, ' ib') ? ' ' : '';
          for (o = o.replace(/\s?i?b/, ''), a = 0; a <= u.suffixes.length; a++)
            if (
              ((s = Math.pow(u.base, a)),
              (c = Math.pow(u.base, a + 1)),
              null === t || 0 === t || (t >= s && t < c))
            ) {
              (l += u.suffixes[a]), s > 0 && (t /= s);
              break;
            }
          return e._.numberToFormat(t, o, r) + l;
        },
        unformat: function (t) {
          var o,
            r,
            a = e._.stringToNumber(t);
          if (a) {
            for (o = n.suffixes.length - 1; o >= 0; o--) {
              if (e._.includes(t, n.suffixes[o])) {
                r = Math.pow(n.base, o);
                break;
              }
              if (e._.includes(t, i.suffixes[o])) {
                r = Math.pow(i.base, o);
                break;
              }
            }
            a *= r || 1;
          }
          return a;
        },
      }),
      e.register('format', 'currency', {
        regexps: { format: /(\$)/ },
        format: function (t, n, i) {
          var o,
            r,
            a = e.locales[e.options.currentLocale],
            s = {
              before: n.match(/^([\+|\-|\(|\s|\$]*)/)[0],
              after: n.match(/([\+|\-|\)|\s|\$]*)$/)[0],
            };
          for (
            n = n.replace(/\s?\$\s?/, ''),
              o = e._.numberToFormat(t, n, i),
              t >= 0
                ? ((s.before = s.before.replace(/[\-\(]/, '')),
                  (s.after = s.after.replace(/[\-\)]/, '')))
                : t < 0 &&
                  !e._.includes(s.before, '-') &&
                  !e._.includes(s.before, '(') &&
                  (s.before = '-' + s.before),
              r = 0;
            r < s.before.length;
            r++
          )
            switch (s.before[r]) {
              case '$':
                o = e._.insert(o, a.currency.symbol, r);
                break;
              case ' ':
                o = e._.insert(o, ' ', r + a.currency.symbol.length - 1);
            }
          for (r = s.after.length - 1; r >= 0; r--)
            switch (s.after[r]) {
              case '$':
                o =
                  r === s.after.length - 1
                    ? o + a.currency.symbol
                    : e._.insert(
                        o,
                        a.currency.symbol,
                        -(s.after.length - (1 + r))
                      );
                break;
              case ' ':
                o =
                  r === s.after.length - 1
                    ? o + ' '
                    : e._.insert(
                        o,
                        ' ',
                        -(
                          s.after.length -
                          (1 + r) +
                          a.currency.symbol.length -
                          1
                        )
                      );
            }
          return o;
        },
      }),
      e.register('format', 'exponential', {
        regexps: { format: /(e\+|e-)/, unformat: /(e\+|e-)/ },
        format: function (t, n, i) {
          var o = (
            'number' != typeof t || e._.isNaN(t) ? '0e+0' : t.toExponential()
          ).split('e');
          return (
            (n = n.replace(/e[\+|\-]{1}0/, '')),
            e._.numberToFormat(Number(o[0]), n, i) + 'e' + o[1]
          );
        },
        unformat: function (t) {
          var n = e._.includes(t, 'e+') ? t.split('e+') : t.split('e-'),
            i = Number(n[0]),
            o = Number(n[1]);
          return (
            (o = e._.includes(t, 'e-') ? (o *= -1) : o),
            e._.reduce(
              [i, Math.pow(10, o)],
              function (t, n, i, o) {
                var r = e._.correctionFactor(t, n);
                return (t * r * (n * r)) / (r * r);
              },
              1
            )
          );
        },
      }),
      e.register('format', 'ordinal', {
        regexps: { format: /(o)/ },
        format: function (t, n, i) {
          var o = e.locales[e.options.currentLocale],
            r = e._.includes(n, ' o') ? ' ' : '';
          return (
            (n = n.replace(/\s?o/, '')),
            (r += o.ordinal(t)),
            e._.numberToFormat(t, n, i) + r
          );
        },
      }),
      e.register('format', 'percentage', {
        regexps: { format: /(%)/, unformat: /(%)/ },
        format: function (t, n, i) {
          var o,
            r = e._.includes(n, ' %') ? ' ' : '';
          return (
            e.options.scalePercentBy100 && (t *= 100),
            (n = n.replace(/\s?\%/, '')),
            (o = e._.numberToFormat(t, n, i)),
            e._.includes(o, ')')
              ? ((o = o.split('')).splice(-1, 0, r + '%'), (o = o.join('')))
              : (o = o + r + '%'),
            o
          );
        },
        unformat: function (t) {
          var n = e._.stringToNumber(t);
          return e.options.scalePercentBy100 ? 0.01 * n : n;
        },
      }),
      e.register('format', 'time', {
        regexps: { format: /(:)/, unformat: /(:)/ },
        format: function (e, t, n) {
          var i = Math.floor(e / 60 / 60),
            o = Math.floor((e - 60 * i * 60) / 60),
            r = Math.round(e - 60 * i * 60 - 60 * o);
          return (
            i + ':' + (o < 10 ? '0' + o : o) + ':' + (r < 10 ? '0' + r : r)
          );
        },
        unformat: function (e) {
          var t = e.split(':'),
            n = 0;
          return (
            3 === t.length
              ? ((n += 60 * Number(t[0]) * 60),
                (n += 60 * Number(t[1])),
                (n += Number(t[2])))
              : 2 === t.length &&
                ((n += 60 * Number(t[0])), (n += Number(t[1]))),
            Number(n)
          );
        },
      }),
      e
    );
  }),
  ($l = Xl).exports ? ($l.exports = Jl()) : (Yl.numeral = Jl());
const Zl = Qs(Xl.exports);
var Ql = ((e) => ((e.NO_AUTH = '1'), (e.NEED_AUTH = '0'), e))(Ql || {}),
  ed = ((e) => ((e[(e.NO = 0)] = 'NO'), (e[(e.YES = 1)] = 'YES'), e))(ed || {}),
  td = ((e) => ((e.MINI_PROGRAM = '1'), (e.SCAN_CODE = '2'), e))(td || {}),
  nd = ((e) => (
    (e.UserInfo = 'userInfo'),
    (e.Prescription = 'prescription'),
    (e.Payment = 'payment'),
    e
  ))(nd || {}),
  id = ((e) => ((e.Text = 'text'), (e.TextAndVideo = 'textAndVideo'), e))(
    id || {}
  ),
  od = ((e) => (
    (e.NoMore = 'noMore'), (e.Loading = 'loading'), (e.More = 'more'), e
  ))(od || {}),
  rd = ((e) => (
    (e[(e.ToProcess = 0)] = 'ToProcess'),
    (e[(e.Success = 1)] = 'Success'),
    (e[(e.Fail = 2)] = 'Fail'),
    (e[(e.Processing = 3)] = 'Processing'),
    (e[(e.Revoke = 4)] = 'Revoke'),
    (e[(e.Used = 5)] = 'Used'),
    e
  ))(rd || {}),
  ad = ((e) => (
    (e.NoNeed = 'not_need'),
    (e.WaitPay = 'wait_pay'),
    (e.PaySuccess = 'pay_success'),
    (e.RefundSuccess = 'refund_success'),
    (e.Finish = 'finish'),
    (e.OverTime = 'over_time'),
    (e.WaitRefund = 'wait_refund'),
    e
  ))(ad || {}),
  sd = ((e) => (
    (e.DealingWaitDispatch = 'dealing_wait_dispatch'),
    (e.DealingWaitAccept = 'dealing_wait_accept'),
    (e.DealingAccept = 'dealing_accept'),
    (e.EndFinish = 'end_finish'),
    (e.EndDoctorCancel = 'end_doctor_cancel'),
    (e.EndDoctorRefund = 'end_doctor_refund'),
    (e.EndPatientCancel = 'end_patient_cancel'),
    (e.EndOverTimeCancel = 'end_over_time_cancel'),
    (e.SystemEnd = 'system_end'),
    e
  ))(sd || {}),
  cd = ((e) => (
    (e.Finish = 'finish'),
    (e.CancelInquiryHint = 'cancelInquiryHint'),
    (e.FinishHint = 'finishHint'),
    (e.ProficientRefundInquiry = 'proficientRefundInquiry'),
    (e.AcceptOverTimeHint = 'acceptOverTimeHint'),
    (e.AutoFinishHint = 'autoFinishHint'),
    (e.AcceptInquiryOrderHint = 'acceptInquiryOrderHint'),
    (e.RpOrderStart = 'rp_order_start'),
    (e.ExtentTimeHint = 'extentTimeHint'),
    e
  ))(cd || {}),
  ud = ((e) => ((e[(e.male = 1)] = 'male'), (e[(e.female = 2)] = 'female'), e))(
    ud || {}
  ),
  ld = ((e) => ((e.Increase = 'Increase'), (e.Decrease = 'Decrease'), e))(
    ld || {}
  ),
  dd = ((e) => (
    (e[(e.ClassA = 1)] = 'ClassA'),
    (e[(e.ClassB = 2)] = 'ClassB'),
    (e[(e.ClassC = 3)] = 'ClassC'),
    e
  ))(dd || {}),
  pd = ((e) => (
    (e[(e.Pending = 0)] = 'Pending'),
    (e[(e.Success = 1)] = 'Success'),
    (e[(e.Failed = 2)] = 'Failed'),
    (e[(e.InProgress = 3)] = 'InProgress'),
    e
  ))(pd || {}),
  hd = ((e) => (
    (e.Wechat = 'Wechat'),
    (e.Alipay = 'Alipay'),
    (e.Pc = 'PC'),
    (e.PeachFairy = 'PeachFairy'),
    e
  ))(hd || {}),
  fd = ((e) => (
    (e.Wechatpay = 'wechatpay'),
    (e.Alipay = 'alipay'),
    (e.Insurance = 'insurance'),
    e
  ))(fd || {}),
  gd = ((e) => (
    (e.AddPatient = 'addPatient'),
    (e.CreateOrder = 'createOrder'),
    (e.Prescription = 'Prescription'),
    (e.Payment = 'payment'),
    (e.Refund = 'refund'),
    e
  ))(gd || {});
const _d = { [id.Text]: '图文问诊', [id.TextAndVideo]: '视频问诊' },
  vd = {
    [rd.ToProcess]: '待流转',
    [rd.Success]: '流转成功',
    [rd.Fail]: '流转失败',
    [rd.Processing]: '流转中',
    [rd.Revoke]: '已撤回',
    [rd.Used]: '流转成功',
  },
  md = {
    [sd.DealingWaitDispatch]: '派单中',
    [sd.DealingWaitAccept]: '待接诊',
    [sd.DealingAccept]: '问诊中',
    [sd.EndFinish]: '已完成',
    [sd.SystemEnd]: '已完成',
    [sd.EndDoctorCancel]: '已取消',
    [sd.EndDoctorRefund]: '已取消',
    [sd.EndPatientCancel]: '已取消',
    [sd.EndOverTimeCancel]: '已取消',
  },
  yd = {
    [sd.DealingWaitDispatch]: '系统正在派单，请耐心等待',
    [sd.DealingWaitAccept]: '已通知医生接诊，请耐心等待',
    [sd.DealingAccept]: '问诊正在进行，请进入线上诊室同医生沟通',
    [sd.EndFinish]: '问诊已完成，可进入聊天室查看记录',
    [sd.SystemEnd]: '问诊已完成，可进入聊天室查看记录',
    [sd.EndDoctorCancel]: '医生已退诊，可申请退款',
    [sd.EndDoctorRefund]: '医生已退诊，如有付款请到医保账户查询退款结果',
    [sd.EndPatientCancel]: '患者已取消订单',
    [sd.EndOverTimeCancel]: '订单超时已取消',
  },
  Id = {
    [sd.DealingWaitDispatch]: '#2787fc',
    [sd.DealingWaitAccept]: '#2787fc',
    [sd.DealingAccept]: '#2787fc',
    [sd.EndFinish]: '#08d295',
    [sd.SystemEnd]: '#08d295',
    [sd.EndDoctorCancel]: '#cccccc',
    [sd.EndDoctorRefund]: '#cccccc',
    [sd.EndPatientCancel]: '#cccccc',
    [sd.EndOverTimeCancel]: '#cccccc',
  },
  Md = { [ud.male]: '男', [ud.female]: '女' },
  Cd = {
    [dd.ClassA]: '医保甲类',
    [dd.ClassB]: '医保乙类',
    [dd.ClassC]: '医保丙类',
  };
nc.extend(Ec);
const Td = (e, t) =>
    0 === e ? `${t}个月` : e < 14 && 0 !== t ? `${e}岁${t}个月` : `${e}岁`,
  Ed = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
  Dd =
    /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,
  Sd = (e) => {
    if (((e = String(e).replace(/[\t\n\f\r ]+/g, '')), !Dd.test(e)))
      throw new TypeError(
        "Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded."
      );
    e += '=='.slice(2 - (3 & e.length));
    let t,
      n,
      i,
      o = '',
      r = 0;
    for (; r < e.length; )
      (t =
        (Ed.indexOf(e.charAt(r++)) << 18) |
        (Ed.indexOf(e.charAt(r++)) << 12) |
        ((n = Ed.indexOf(e.charAt(r++))) << 6) |
        (i = Ed.indexOf(e.charAt(r++)))),
        (o +=
          64 === n
            ? String.fromCharCode((t >> 16) & 255)
            : 64 === i
              ? String.fromCharCode((t >> 16) & 255, (t >> 8) & 255)
              : String.fromCharCode((t >> 16) & 255, (t >> 8) & 255, 255 & t));
    return o;
  },
  kd = (e) => {
    let t = e.replace(/-/g, '+').replace(/_/g, '/');
    switch (t.length % 4) {
      case 0:
        break;
      case 2:
        t += '==';
        break;
      case 3:
        t += '=';
        break;
      default:
        throw 'Illegal base64url string!';
    }
    try {
      return ((e) =>
        decodeURIComponent(
          Sd(e).replace(/(.)/g, (e) => {
            let t = e.charCodeAt(0).toString(16).toUpperCase();
            return t.length < 2 && (t = '0' + t), '%' + t;
          })
        ))(t);
    } catch (n) {
      return Sd(t);
    }
  },
  Rd = async (e) => {
    const t = Qc();
    Yn.navigateToMiniProgram({
      appId: 'wxe183cd55df4b4369',
      path: t.CONFIG.MEDICAL_INSURANCE_PRESCRIPTION_AUTH,
      envVersion: t.CONFIG.MEDICAL_INSURANCE_AUTH_ENV_WECHAT_MINI,
      success: () => {
        Yn.setStorageSync('medicalAuthType', nd.Prescription);
      },
      ...e,
    });
  },
  Ld = async (e) => {
    const t = Qc();
    Yn.navigateToMiniProgram({
      appId: 'wxe183cd55df4b4369',
      path: t.CONFIG.MEDICAL_INSURANCE_PAYMENT_AUTH,
      envVersion: t.CONFIG.MEDICAL_INSURANCE_AUTH_ENV_WECHAT_MINI,
      success: () => {
        Yn.setStorageSync('medicalAuthType', nd.Payment);
      },
      ...e,
    });
  };
(e = new WeakMap()),
  (t = new WeakSet()),
  (n = function (e = {}, t = {}) {
    const { addQuestionMark: n = !0 } = t,
      i = Object.keys(e)
        .map((t) => `${t}=${e[t]}`)
        .join('&');
    return i ? (n ? `?${i}` : i) : '';
  }),
  (i = new WeakSet()),
  (o = function (e) {
    return e.startsWith('/') ? e : `/${e}`;
  });
const Ad = new (class {
    constructor(n) {
      p(this, t),
        p(this, i),
        p(this, e, 'url'),
        (this.pagesMap = {}),
        n.pages.forEach((e) => {
          this.pagesMap[e.name] = e.path;
        }),
        n.subPackages &&
          n.subPackages.forEach((e) => {
            e.pages.forEach((t) => {
              this.pagesMap[t.name] = `${e.root}/${t.path}`;
            });
          });
    }
    async navigateTo(e, r = {}) {
      const { query: a, ...s } = r;
      return Yn.navigateTo({
        url: `${f(this, i, o).call(this, e)}${f(this, t, n).call(this, a)}`,
        ...s,
      });
    }
    async redirectTo(e, r = {}) {
      const { query: a } = r;
      return Yn.redirectTo({
        url: `${f(this, i, o).call(this, e)}${f(this, t, n).call(this, a)}`,
      });
    }
    async navigateBack(e = 1) {
      return Yn.navigateBack({ delta: e });
    }
    async switchTab(e, r = {}) {
      const { query: a } = r;
      return Yn.switchTab({
        url: `${f(this, i, o).call(this, e)}${f(this, t, n).call(this, a)}`,
      });
    }
    async reLaunch(e, r = {}) {
      const { query: a } = r;
      return Yn.reLaunch({
        url: `${f(this, i, o).call(this, e)}${f(this, t, n).call(this, a)}`,
      });
    }
    async toWebView(i) {
      const { url: o, query: r } = i;
      if (!('webView' in this.pagesMap))
        throw new Error('请先在 page.ts 文件中设置 web view 页配置！');
      const a = `${o}${f(this, t, n).call(this, r)}`;
      return this.navigateTo(this.pagesMap.webView, {
        query: { [d(this, e)]: encodeURIComponent(a) },
      });
    }
    async toLogin(e = {}) {
      const { redirectToHome: t = !1, redirectUrl: n, query: i } = e;
      if (!('login' in this.pagesMap))
        throw new Error('请先在 page.ts 文件中设置登录页配置！');
      if (!('home' in this.pagesMap))
        throw new Error('请现在 page.ts 文件中设置首页配置！');
      const o = iu();
      return this.navigateTo(this.pagesMap.login, {
        query: { redirectUrl: t ? this.pagesMap.home : n || o.fullPath, ...i },
      });
    }
  })(zl),
  Od = (e, t, n, i) => {
    if (!new RegExp(`^(?:[0-9]{${t}})$`).test(e)) return !1;
    let o = 0;
    for (let s = 0; s < n; s++) {
      const t = e[s];
      if (void 0 === t) return !1;
      o += parseInt(t) * i(s);
    }
    const r = 10 - (o % 10),
      a = e[n];
    return void 0 !== a && (10 === r ? 0 === parseInt(a) : parseInt(a) === r);
  },
  bd = () => ({
    autoUpdate: () => {
      const e = Yn.getUpdateManager();
      e.onCheckForUpdate((t) => {
        t.hasUpdate &&
          Yn.showModal({
            title: '更新提示',
            content: '检测到新版本，是否下载新版本并重启小程序？',
            showCancel: !1,
            success: (t) => {
              t.confirm &&
                ((e) => {
                  Yn.showLoading({ title: '下载中…', mask: !0 }),
                    e.onUpdateReady(() => {
                      Yn.hideLoading(), e.applyUpdate();
                    }),
                    e.onUpdateFailed(() => {
                      Yn.hideLoading(),
                        Yn.showModal({
                          title: '已经有新版本了哟~',
                          content:
                            '新版本已经上线啦~，请您删除当前小程序，重新搜索打开哟~',
                        });
                    });
                })(e);
            },
          });
      });
    },
  });
!(function (e, t) {
  var n, i, o, r, a, s, c, u, l, d, p, h, f, g, _, v, m, y, I, M, C, T;
  if (e)
    return e.jWeixin
      ? e.jWeixin
      : ((n = {
          config: 'preVerifyJSAPI',
          onMenuShareTimeline: 'menu:share:timeline',
          onMenuShareAppMessage: 'menu:share:appmessage',
          onMenuShareQQ: 'menu:share:qq',
          onMenuShareWeibo: 'menu:share:weiboApp',
          onMenuShareQZone: 'menu:share:QZone',
          previewImage: 'imagePreview',
          getLocation: 'geoLocation',
          openProductSpecificView: 'openProductViewWithPid',
          addCard: 'batchAddCard',
          openCard: 'batchViewCard',
          chooseWXPay: 'getBrandWCPayRequest',
          openEnterpriseRedPacket: 'getRecevieBizHongBaoRequest',
          startSearchBeacons: 'startMonitoringBeacons',
          stopSearchBeacons: 'stopMonitoringBeacons',
          onSearchBeacons: 'onBeaconsInRange',
          consumeAndShareCard: 'consumedShareCard',
          openAddress: 'editAddress',
        }),
        (i = (function () {
          var e,
            t = {};
          for (e in n) t[n[e]] = e;
          return t;
        })()),
        (o = e.document),
        (r = o.title),
        (a = navigator.userAgent.toLowerCase()),
        (h = navigator.platform.toLowerCase()),
        (s = !(!h.match('mac') && !h.match('win'))),
        (c = -1 != a.indexOf('wxdebugger')),
        (u = -1 != a.indexOf('micromessenger')),
        (l = -1 != a.indexOf('android')),
        (d = -1 != a.indexOf('iphone') || -1 != a.indexOf('ipad')),
        (p = (h =
          a.match(/micromessenger\/(\d+\.\d+\.\d+)/) ||
          a.match(/micromessenger\/(\d+\.\d+)/))
          ? h[1]
          : ''),
        (f = {
          initStartTime: b(),
          initEndTime: 0,
          preVerifyStartTime: 0,
          preVerifyEndTime: 0,
        }),
        (g = {
          version: 1,
          appId: '',
          initTime: 0,
          preVerifyTime: 0,
          networkType: '',
          isPreVerifyOk: 1,
          systemType: d ? 1 : l ? 2 : -1,
          clientVersion: p,
          url: encodeURIComponent(location.href),
        }),
        (_ = {}),
        (v = { _completes: [] }),
        (m = { state: 0, data: {} }),
        N(function () {
          f.initEndTime = b();
        }),
        (y = !1),
        (I = []),
        (M = {
          config: function (t) {
            A('config', (_ = t));
            var i = !1 !== _.check;
            N(function () {
              if (i)
                E(
                  n.config,
                  {
                    verifyJsApiList: L(_.jsApiList),
                    verifyOpenTagList: L(_.openTagList),
                  },
                  ((v._complete = function (e) {
                    (f.preVerifyEndTime = b()), (m.state = 1), (m.data = e);
                  }),
                  (v.success = function (e) {
                    g.isPreVerifyOk = 0;
                  }),
                  (v.fail = function (e) {
                    v._fail ? v._fail(e) : (m.state = -1);
                  }),
                  (r = v._completes).push(function () {
                    O();
                  }),
                  (v.complete = function (e) {
                    for (var t = 0, n = r.length; t < n; ++t) r[t]();
                    v._completes = [];
                  }),
                  v)
                ),
                  (f.preVerifyStartTime = b());
              else {
                m.state = 1;
                for (var e = v._completes, t = 0, o = e.length; t < o; ++t)
                  e[t]();
                v._completes = [];
              }
              var r;
            }),
              M.invoke ||
                ((M.invoke = function (t, n, i) {
                  e.WeixinJSBridge && WeixinJSBridge.invoke(t, S(n), i);
                }),
                (M.on = function (t, n) {
                  e.WeixinJSBridge && WeixinJSBridge.on(t, n);
                }));
          },
          ready: function (e) {
            (0 != m.state || (v._completes.push(e), !u && _.debug)) && e();
          },
          error: function (e) {
            p < '6.0.2' || (-1 == m.state ? e(m.data) : (v._fail = e));
          },
          checkJsApi: function (e) {
            E(
              'checkJsApi',
              { jsApiList: L(e.jsApiList) },
              ((e._complete = function (e) {
                l && (n = e.checkResult) && (e.checkResult = JSON.parse(n));
                var t,
                  n = e,
                  o = n.checkResult;
                for (t in o) {
                  var r = i[t];
                  r && ((o[r] = o[t]), delete o[t]);
                }
              }),
              e)
            );
          },
          onMenuShareTimeline: function (e) {
            D(
              n.onMenuShareTimeline,
              {
                complete: function () {
                  E(
                    'shareTimeline',
                    {
                      title: e.title || r,
                      desc: e.title || r,
                      img_url: e.imgUrl || '',
                      link: e.link || location.href,
                      type: e.type || 'link',
                      data_url: e.dataUrl || '',
                    },
                    e
                  );
                },
              },
              e
            );
          },
          onMenuShareAppMessage: function (e) {
            D(
              n.onMenuShareAppMessage,
              {
                complete: function (t) {
                  'favorite' === t.scene
                    ? E('sendAppMessage', {
                        title: e.title || r,
                        desc: e.desc || '',
                        link: e.link || location.href,
                        img_url: e.imgUrl || '',
                        type: e.type || 'link',
                        data_url: e.dataUrl || '',
                      })
                    : E(
                        'sendAppMessage',
                        {
                          title: e.title || r,
                          desc: e.desc || '',
                          link: e.link || location.href,
                          img_url: e.imgUrl || '',
                          type: e.type || 'link',
                          data_url: e.dataUrl || '',
                        },
                        e
                      );
                },
              },
              e
            );
          },
          onMenuShareQQ: function (e) {
            D(
              n.onMenuShareQQ,
              {
                complete: function () {
                  E(
                    'shareQQ',
                    {
                      title: e.title || r,
                      desc: e.desc || '',
                      img_url: e.imgUrl || '',
                      link: e.link || location.href,
                    },
                    e
                  );
                },
              },
              e
            );
          },
          onMenuShareWeibo: function (e) {
            D(
              n.onMenuShareWeibo,
              {
                complete: function () {
                  E(
                    'shareWeiboApp',
                    {
                      title: e.title || r,
                      desc: e.desc || '',
                      img_url: e.imgUrl || '',
                      link: e.link || location.href,
                    },
                    e
                  );
                },
              },
              e
            );
          },
          onMenuShareQZone: function (e) {
            D(
              n.onMenuShareQZone,
              {
                complete: function () {
                  E(
                    'shareQZone',
                    {
                      title: e.title || r,
                      desc: e.desc || '',
                      img_url: e.imgUrl || '',
                      link: e.link || location.href,
                    },
                    e
                  );
                },
              },
              e
            );
          },
          updateTimelineShareData: function (e) {
            E(
              'updateTimelineShareData',
              { title: e.title, link: e.link, imgUrl: e.imgUrl },
              e
            );
          },
          updateAppMessageShareData: function (e) {
            E(
              'updateAppMessageShareData',
              { title: e.title, desc: e.desc, link: e.link, imgUrl: e.imgUrl },
              e
            );
          },
          startRecord: function (e) {
            E('startRecord', {}, e);
          },
          stopRecord: function (e) {
            E('stopRecord', {}, e);
          },
          onVoiceRecordEnd: function (e) {
            D('onVoiceRecordEnd', e);
          },
          playVoice: function (e) {
            E('playVoice', { localId: e.localId }, e);
          },
          pauseVoice: function (e) {
            E('pauseVoice', { localId: e.localId }, e);
          },
          stopVoice: function (e) {
            E('stopVoice', { localId: e.localId }, e);
          },
          onVoicePlayEnd: function (e) {
            D('onVoicePlayEnd', e);
          },
          uploadVoice: function (e) {
            E(
              'uploadVoice',
              {
                localId: e.localId,
                isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1,
              },
              e
            );
          },
          downloadVoice: function (e) {
            E(
              'downloadVoice',
              {
                serverId: e.serverId,
                isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1,
              },
              e
            );
          },
          translateVoice: function (e) {
            E(
              'translateVoice',
              {
                localId: e.localId,
                isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1,
              },
              e
            );
          },
          chooseImage: function (e) {
            E(
              'chooseImage',
              {
                scene: '1|2',
                count: e.count || 9,
                sizeType: e.sizeType || ['original', 'compressed'],
                sourceType: e.sourceType || ['album', 'camera'],
              },
              ((e._complete = function (e) {
                if (l) {
                  var t = e.localIds;
                  try {
                    t && (e.localIds = JSON.parse(t));
                  } catch (n) {}
                }
              }),
              e)
            );
          },
          getLocation: function (e) {
            (e = e || {}),
              E(
                n.getLocation,
                { type: e.type || 'wgs84' },
                ((e._complete = function (e) {
                  delete e.type;
                }),
                e)
              );
          },
          previewImage: function (e) {
            E(n.previewImage, { current: e.current, urls: e.urls }, e);
          },
          uploadImage: function (e) {
            E(
              'uploadImage',
              {
                localId: e.localId,
                isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1,
              },
              e
            );
          },
          downloadImage: function (e) {
            E(
              'downloadImage',
              {
                serverId: e.serverId,
                isShowProgressTips: 0 == e.isShowProgressTips ? 0 : 1,
              },
              e
            );
          },
          getLocalImgData: function (e) {
            !1 === y
              ? ((y = !0),
                E(
                  'getLocalImgData',
                  { localId: e.localId },
                  ((e._complete = function (e) {
                    var t;
                    (y = !1),
                      0 < I.length && ((t = I.shift()), $n.getLocalImgData(t));
                  }),
                  e)
                ))
              : I.push(e);
          },
          getNetworkType: function (e) {
            E(
              'getNetworkType',
              {},
              ((e._complete = function (e) {
                var t = e,
                  n =
                    ((e = t.errMsg),
                    (t.errMsg = 'getNetworkType:ok'),
                    t.subtype);
                if ((delete t.subtype, n)) t.networkType = n;
                else {
                  n = e.indexOf(':');
                  var i = e.substring(n + 1);
                  switch (i) {
                    case 'wifi':
                    case 'edge':
                    case 'wwan':
                      t.networkType = i;
                      break;
                    default:
                      t.errMsg = 'getNetworkType:fail';
                  }
                }
              }),
              e)
            );
          },
          openLocation: function (e) {
            E(
              'openLocation',
              {
                latitude: e.latitude,
                longitude: e.longitude,
                name: e.name || '',
                address: e.address || '',
                scale: e.scale || 28,
                infoUrl: e.infoUrl || '',
              },
              e
            );
          },
          hideOptionMenu: function (e) {
            E('hideOptionMenu', {}, e);
          },
          showOptionMenu: function (e) {
            E('showOptionMenu', {}, e);
          },
          closeWindow: function (e) {
            E('closeWindow', {}, (e = e || {}));
          },
          hideMenuItems: function (e) {
            E('hideMenuItems', { menuList: e.menuList }, e);
          },
          showMenuItems: function (e) {
            E('showMenuItems', { menuList: e.menuList }, e);
          },
          hideAllNonBaseMenuItem: function (e) {
            E('hideAllNonBaseMenuItem', {}, e);
          },
          showAllNonBaseMenuItem: function (e) {
            E('showAllNonBaseMenuItem', {}, e);
          },
          scanQRCode: function (e) {
            E(
              'scanQRCode',
              {
                needResult: (e = e || {}).needResult || 0,
                scanType: e.scanType || ['qrCode', 'barCode'],
              },
              ((e._complete = function (e) {
                var t;
                d &&
                  (t = e.resultStr) &&
                  ((t = JSON.parse(t)),
                  (e.resultStr = t && t.scan_code && t.scan_code.scan_result));
              }),
              e)
            );
          },
          openAddress: function (e) {
            E(
              n.openAddress,
              {},
              ((e._complete = function (e) {
                (e.postalCode = e.addressPostalCode),
                  delete e.addressPostalCode,
                  (e.provinceName = e.proviceFirstStageName),
                  delete e.proviceFirstStageName,
                  (e.cityName = e.addressCitySecondStageName),
                  delete e.addressCitySecondStageName,
                  (e.countryName = e.addressCountiesThirdStageName),
                  delete e.addressCountiesThirdStageName,
                  (e.detailInfo = e.addressDetailInfo),
                  delete e.addressDetailInfo;
              }),
              e)
            );
          },
          openProductSpecificView: function (e) {
            E(
              n.openProductSpecificView,
              {
                pid: e.productId,
                view_type: e.viewType || 0,
                ext_info: e.extInfo,
              },
              e
            );
          },
          addCard: function (e) {
            for (var t = e.cardList, i = [], o = 0, r = t.length; o < r; ++o) {
              var a = { card_id: (a = t[o]).cardId, card_ext: a.cardExt };
              i.push(a);
            }
            E(
              n.addCard,
              { card_list: i },
              ((e._complete = function (e) {
                if ((t = e.card_list)) {
                  for (
                    var t, n = 0, i = (t = JSON.parse(t)).length;
                    n < i;
                    ++n
                  ) {
                    var o = t[n];
                    (o.cardId = o.card_id),
                      (o.cardExt = o.card_ext),
                      (o.isSuccess = !!o.is_succ),
                      delete o.card_id,
                      delete o.card_ext,
                      delete o.is_succ;
                  }
                  (e.cardList = t), delete e.card_list;
                }
              }),
              e)
            );
          },
          chooseCard: function (e) {
            E(
              'chooseCard',
              {
                app_id: _.appId,
                location_id: e.shopId || '',
                sign_type: e.signType || 'SHA1',
                card_id: e.cardId || '',
                card_type: e.cardType || '',
                card_sign: e.cardSign,
                time_stamp: e.timestamp + '',
                nonce_str: e.nonceStr,
              },
              ((e._complete = function (e) {
                (e.cardList = e.choose_card_info), delete e.choose_card_info;
              }),
              e)
            );
          },
          openCard: function (e) {
            for (var t = e.cardList, i = [], o = 0, r = t.length; o < r; ++o) {
              var a = { card_id: (a = t[o]).cardId, code: a.code };
              i.push(a);
            }
            E(n.openCard, { card_list: i }, e);
          },
          consumeAndShareCard: function (e) {
            E(
              n.consumeAndShareCard,
              { consumedCardId: e.cardId, consumedCode: e.code },
              e
            );
          },
          chooseWXPay: function (e) {
            E(n.chooseWXPay, k(e), e), O({ jsApiName: 'chooseWXPay' });
          },
          openEnterpriseRedPacket: function (e) {
            E(n.openEnterpriseRedPacket, k(e), e);
          },
          startSearchBeacons: function (e) {
            E(n.startSearchBeacons, { ticket: e.ticket }, e);
          },
          stopSearchBeacons: function (e) {
            E(n.stopSearchBeacons, {}, e);
          },
          onSearchBeacons: function (e) {
            D(n.onSearchBeacons, e);
          },
          openEnterpriseChat: function (e) {
            E(
              'openEnterpriseChat',
              { useridlist: e.userIds, chatname: e.groupName },
              e
            );
          },
          launchMiniProgram: function (e) {
            E(
              'launchMiniProgram',
              {
                targetAppId: e.targetAppId,
                path: (function (e) {
                  var t;
                  if ('string' == typeof e && 0 < e.length)
                    return (
                      (t = e.split('?')[0]),
                      (t += '.html'),
                      void 0 !== (e = e.split('?')[1]) ? t + '?' + e : t
                    );
                })(e.path),
                envVersion: e.envVersion,
              },
              e
            );
          },
          openBusinessView: function (e) {
            E(
              'openBusinessView',
              {
                businessType: e.businessType,
                queryString: e.queryString || '',
                envVersion: e.envVersion,
              },
              ((e._complete = function (e) {
                if (l) {
                  var t = e.extraData;
                  if (t)
                    try {
                      e.extraData = JSON.parse(t);
                    } catch (n) {
                      e.extraData = {};
                    }
                }
              }),
              e)
            );
          },
          miniProgram: {
            navigateBack: function (e) {
              (e = e || {}),
                N(function () {
                  E(
                    'invokeMiniProgramAPI',
                    { name: 'navigateBack', arg: { delta: e.delta || 1 } },
                    e
                  );
                });
            },
            navigateTo: function (e) {
              N(function () {
                E(
                  'invokeMiniProgramAPI',
                  { name: 'navigateTo', arg: { url: e.url } },
                  e
                );
              });
            },
            redirectTo: function (e) {
              N(function () {
                E(
                  'invokeMiniProgramAPI',
                  { name: 'redirectTo', arg: { url: e.url } },
                  e
                );
              });
            },
            switchTab: function (e) {
              N(function () {
                E(
                  'invokeMiniProgramAPI',
                  { name: 'switchTab', arg: { url: e.url } },
                  e
                );
              });
            },
            reLaunch: function (e) {
              N(function () {
                E(
                  'invokeMiniProgramAPI',
                  { name: 'reLaunch', arg: { url: e.url } },
                  e
                );
              });
            },
            postMessage: function (e) {
              N(function () {
                E(
                  'invokeMiniProgramAPI',
                  { name: 'postMessage', arg: e.data || {} },
                  e
                );
              });
            },
            getEnv: function (t) {
              N(function () {
                t({ miniprogram: 'miniprogram' === e.__wxjs_environment });
              });
            },
          },
        }),
        (C = 1),
        (T = {}),
        o.addEventListener(
          'error',
          function (e) {
            var t, n, i;
            l ||
              ((i = (t = e.target).tagName),
              (n = t.src),
              'IMG' != i && 'VIDEO' != i && 'AUDIO' != i && 'SOURCE' != i) ||
              (-1 != n.indexOf('wxlocalresource://') &&
                (e.preventDefault(),
                e.stopPropagation(),
                (i = t['wx-id']) || ((i = C++), (t['wx-id'] = i)),
                T[i] ||
                  ((T[i] = !0),
                  $n.ready(function () {
                    $n.getLocalImgData({
                      localId: n,
                      success: function (e) {
                        t.src = e.localData;
                      },
                    });
                  }))));
          },
          !0
        ),
        o.addEventListener(
          'load',
          function (e) {
            var t;
            l ||
              ((t = (e = e.target).tagName),
              e.src,
              'IMG' != t && 'VIDEO' != t && 'AUDIO' != t && 'SOURCE' != t) ||
              ((t = e['wx-id']) && (T[t] = !1));
          },
          !0
        ),
        t && (e.wx = e.jWeixin = M),
        M);
  function E(t, n, i) {
    e.WeixinJSBridge
      ? WeixinJSBridge.invoke(t, S(n), function (e) {
          R(t, e, i);
        })
      : A(t, i);
  }
  function D(t, n, i) {
    e.WeixinJSBridge
      ? WeixinJSBridge.on(t, function (e) {
          i && i.trigger && i.trigger(e), R(t, e, n);
        })
      : A(t, i || n);
  }
  function S(e) {
    return (
      ((e = e || {}).appId = _.appId),
      (e.verifyAppId = _.appId),
      (e.verifySignType = 'sha1'),
      (e.verifyTimestamp = _.timestamp + ''),
      (e.verifyNonceStr = _.nonceStr),
      (e.verifySignature = _.signature),
      e
    );
  }
  function k(e) {
    return {
      timeStamp: e.timestamp + '',
      nonceStr: e.nonceStr,
      package: e.package,
      paySign: e.paySign,
      signType: e.signType || 'SHA1',
    };
  }
  function R(e, t, n) {
    ('openEnterpriseChat' != e && 'openBusinessView' !== e) ||
      (t.errCode = t.err_code),
      delete t.err_code,
      delete t.err_desc,
      delete t.err_detail;
    var o,
      r,
      a,
      s,
      c = t.errMsg;
    switch (
      (c ||
        ((c = t.err_msg),
        delete t.err_msg,
        (r = c),
        (s = i[(o = e)]) && (o = s),
        (s = 'ok'),
        r &&
          ((a = r.indexOf(':')),
          ('access denied' !=
            (s = (s = (s =
              -1 !=
              (s =
                -1 !=
                (s =
                  'failed' ==
                  (s = 'confirm' == (s = r.substring(a + 1)) ? 'ok' : s)
                    ? 'fail'
                    : s).indexOf('failed_')
                  ? s.substring(7)
                  : s).indexOf('fail_')
                ? s.substring(5)
                : s).replace(/_/g, ' ')).toLowerCase()) &&
            'no permission to execute' != s) ||
            (s = 'permission denied'),
          '' == (s = 'config' == o && 'function not exist' == s ? 'ok' : s)) &&
          (s = 'fail'),
        (c = o + ':' + s),
        (t.errMsg = c)),
      (n = n || {})._complete && (n._complete(t), delete n._complete),
      (c = t.errMsg || ''),
      _.debug && !n.isInnerInvoke && alert(JSON.stringify(t)),
      (e = c.indexOf(':')),
      c.substring(e + 1))
    ) {
      case 'ok':
        n.success && n.success(t);
        break;
      case 'cancel':
        n.cancel && n.cancel(t);
        break;
      default:
        n.fail && n.fail(t);
    }
    n.complete && n.complete(t);
  }
  function L(e) {
    if (e) {
      for (var t = 0, i = e.length; t < i; ++t) {
        var o = e[t];
        (o = n[o]) && (e[t] = o);
      }
      return e;
    }
  }
  function A(e, t) {
    var n;
    !_.debug ||
      (t && t.isInnerInvoke) ||
      ((n = i[e]) && (e = n),
      t && t._complete && delete t._complete,
      console.log('"' + e + '",', t || ''));
  }
  function O(e) {
    var t;
    s ||
      c ||
      _.debug ||
      p < '6.0.2' ||
      g.systemType < 0 ||
      ((t = new Image()),
      (g.appId = _.appId),
      (g.initTime = f.initEndTime - f.initStartTime),
      (g.preVerifyTime = f.preVerifyEndTime - f.preVerifyStartTime),
      M.getNetworkType({
        isInnerInvoke: !0,
        success: function (n) {
          (g.networkType = n.networkType),
            (n =
              'https://open.weixin.qq.com/sdk/report?v=' +
              g.version +
              '&o=' +
              g.isPreVerifyOk +
              '&s=' +
              g.systemType +
              '&c=' +
              g.clientVersion +
              '&a=' +
              g.appId +
              '&n=' +
              g.networkType +
              '&i=' +
              g.initTime +
              '&p=' +
              g.preVerifyTime +
              '&u=' +
              g.url +
              '&jsapi_name=' +
              (e ? e.jsApiName : '')),
            (t.src = n);
        },
      }));
  }
  function b() {
    return new Date().getTime();
  }
  function N(t) {
    u &&
      (e.WeixinJSBridge
        ? t()
        : o.addEventListener &&
          o.addEventListener('WeixinJSBridgeReady', t, !1));
  }
  console.warn("can't use weixin-js-sdk in server side");
})('object' == typeof window && window);
(r = new WeakMap()),
  (a = new WeakMap()),
  (s = new WeakMap()),
  (c = new WeakSet()),
  (u = function (e) {
    const { url: t, header: n, ...i } = e;
    if ((null != e.toast || (e.toast = !0), !d(this, r)))
      throw new Error('请先设置 baseUrl');
    if (!t.startsWith('/'))
      throw new Error(`url 输入有误，请以 '/' 开头: ${t}`);
    const o = Yn.getStorageSync('token');
    return new Promise((c, u) => {
      Yn.request({
        url: `${d(this, r)}/api${t}`,
        header: {
          ...n,
          Authorization: o ? `Bearer ${o}` : void 0,
          orgCode: d(this, a),
        },
        ...i,
        success: async (t) => {
          const { code: n, success: i, message: o } = t.data,
            r = 401 === t.statusCode || '401' === n || '2098' === n;
          r && (await d(this, s).call(this)),
            r ||
              i ||
              !e.toast ||
              setTimeout(() => {
                Yn.showToast({ title: o, icon: 'none' });
              }, 100),
            c(t.data);
        },
        fail(e) {
          -1 != e.errMsg.indexOf('request:fail') &&
            Yn.showToast({ title: '网络异常，请您稍后重试', icon: 'none' }),
            u(e);
        },
      });
    });
  });
const Nd = new (class {
    constructor() {
      p(this, c),
        p(this, r, ''),
        p(this, a, ''),
        p(this, s, async () => {
          Yn.showToast({
            title: '登录过期，请重新登录',
            icon: 'none',
            mask: !0,
          }),
            Yn.setStorageSync('token', '');
          const e = iu();
          return new Promise((t) => {
            setTimeout(async () => {
              e.path !== Ad.pagesMap.login &&
                (await (null == Ad
                  ? void 0
                  : Ad.navigateTo(Ad.pagesMap.login))),
                t();
            }, 1500);
          });
        });
    }
    setBaseInfo(e) {
      const { baseUrl: t, orgCode: n } = e;
      h(this, a, n), h(this, r, t);
    }
    get(e) {
      return f(this, c, u).call(this, { ...e, method: 'GET' });
    }
    post(e) {
      return f(this, c, u).call(this, { ...e, method: 'POST' });
    }
  })(),
  Pd = async (e) => {
    const t = Qc(),
      n = Yn.getStorageSync('token');
    return new Promise((i, o) => {
      Yn.uploadFile({
        url: t.CONFIG.BASE_URL + '/api/file/sysFile/upload',
        filePath: e,
        name: 'fileList',
        fileType: 'image',
        header: { Authorization: n ? `Bearer ${n}` : void 0 },
        formData: {
          systemCode: 'peach-web',
          belongCode: 'IMG',
          belongID: '111',
        },
        success: (e) => {
          try {
            const t = JSON.parse(e.data);
            if (t.success) {
              const e = t.data,
                { remoteAddress: n } = e[0];
              i(n);
            } else o(new Error(t.message));
          } catch (t) {
            o(new Error('解析数据失败'));
          }
        },
        fail: (e) => {
          o(e);
        },
      });
    });
  },
  wd = (e) =>
    Nd.get({
      url: '/healthcenter/doctorWorkbench/getInquiryOrderDetail',
      data: e,
    }),
  Ud = (e) => Nd.post({ url: '/wechat/mipuserquery/userQuery', data: e }),
  Gd = (e) => Nd.post({ url: '/wechat/mipuserquery/userQuery/pay', data: e }),
  xd =
    (e) =>
    (t, n = sa()) => {
      !ha && mr(e, t, n);
    },
  Fd = xd(ce),
  qd = xd(ue),
  Vd = xd(le),
  Bd = xd(ge),
  Hd = xd(ve),
  Kd = xd(Ce),
  Wd = xd(Ee),
  zd = Fd;
var $d = { exports: {} };
$d.exports = (function () {
  function e(e, t) {
    var n,
      i = Object.keys(e);
    return (
      Object.getOwnPropertySymbols &&
        ((n = Object.getOwnPropertySymbols(e)),
        t &&
          (n = n.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })),
        i.push.apply(i, n)),
      i
    );
  }
  function t(t) {
    for (var n = 1; n < arguments.length; n++) {
      var i = null != arguments[n] ? arguments[n] : {};
      n % 2
        ? e(Object(i), !0).forEach(function (e) {
            a(t, e, i[e]);
          })
        : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i))
          : e(Object(i)).forEach(function (e) {
              Object.defineProperty(
                t,
                e,
                Object.getOwnPropertyDescriptor(i, e)
              );
            });
    }
    return t;
  }
  function n(e) {
    return (n =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (e) {
            return typeof e;
          }
        : function (e) {
            return e &&
              'function' == typeof Symbol &&
              e.constructor === Symbol &&
              e !== Symbol.prototype
              ? 'symbol'
              : typeof e;
          })(e);
  }
  function i(e, t) {
    if (!(e instanceof t))
      throw new TypeError('Cannot call a class as a function');
  }
  function o(e, t) {
    for (var n = 0; n < t.length; n++) {
      var i = t[n];
      (i.enumerable = i.enumerable || !1),
        (i.configurable = !0),
        'value' in i && (i.writable = !0),
        Object.defineProperty(e, i.key, i);
    }
  }
  function r(e, t, n) {
    return (
      t && o(e.prototype, t),
      n && o(e, n),
      Object.defineProperty(e, 'prototype', { writable: !1 }),
      e
    );
  }
  function a(e, t, n) {
    return (
      t in e
        ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0,
          })
        : (e[t] = n),
      e
    );
  }
  function s(e, t) {
    if ('function' != typeof t && null !== t)
      throw new TypeError('Super expression must either be null or a function');
    (e.prototype = Object.create(t && t.prototype, {
      constructor: { value: e, writable: !0, configurable: !0 },
    })),
      Object.defineProperty(e, 'prototype', { writable: !1 }),
      t && u(e, t);
  }
  function c(e) {
    return (c = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (e) {
          return e.__proto__ || Object.getPrototypeOf(e);
        })(e);
  }
  function u(e, t) {
    return (u =
      Object.setPrototypeOf ||
      function (e, t) {
        return (e.__proto__ = t), e;
      })(e, t);
  }
  function l() {
    if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
    if (Reflect.construct.sham) return !1;
    if ('function' == typeof Proxy) return !0;
    try {
      return (
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        ),
        !0
      );
    } catch (e) {
      return !1;
    }
  }
  function d(e, t, n) {
    return (d = l()
      ? Reflect.construct
      : function (e, t, n) {
          var i = [null];
          return (
            i.push.apply(i, t),
            (t = new (Function.bind.apply(e, i))()),
            n && u(t, n.prototype),
            t
          );
        }).apply(null, arguments);
  }
  function p(e) {
    var t = 'function' == typeof Map ? new Map() : void 0;
    return (function (e) {
      if (
        null === e ||
        -1 === Function.toString.call(e).indexOf('[native code]')
      )
        return e;
      if ('function' != typeof e)
        throw new TypeError(
          'Super expression must either be null or a function'
        );
      if (void 0 !== t) {
        if (t.has(e)) return t.get(e);
        t.set(e, n);
      }
      function n() {
        return d(e, arguments, c(this).constructor);
      }
      return (
        (n.prototype = Object.create(e.prototype, {
          constructor: {
            value: n,
            enumerable: !1,
            writable: !0,
            configurable: !0,
          },
        })),
        u(n, e)
      );
    })(e);
  }
  function h(e, t) {
    if (null == e) return {};
    var n,
      i = (function (e, t) {
        if (null == e) return {};
        for (var n, i = {}, o = Object.keys(e), r = 0; r < o.length; r++)
          (n = o[r]), 0 <= t.indexOf(n) || (i[n] = e[n]);
        return i;
      })(e, t);
    if (Object.getOwnPropertySymbols)
      for (var o = Object.getOwnPropertySymbols(e), r = 0; r < o.length; r++)
        (n = o[r]),
          0 <= t.indexOf(n) ||
            (Object.prototype.propertyIsEnumerable.call(e, n) && (i[n] = e[n]));
    return i;
  }
  function f(e) {
    if (void 0 === e)
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    return e;
  }
  function g(e) {
    var t = l();
    return function () {
      var n,
        i = c(e);
      if (
        ((n = t
          ? ((n = c(this).constructor), Reflect.construct(i, arguments, n))
          : i.apply(this, arguments)),
        (i = this),
        n && ('object' == typeof n || 'function' == typeof n))
      )
        return n;
      if (void 0 !== n)
        throw new TypeError(
          'Derived constructors may only return object or undefined'
        );
      return f(i);
    };
  }
  function _(e, t) {
    return (
      m(e) ||
      (function (e, t) {
        var n =
          null == e
            ? null
            : ('undefined' != typeof Symbol && e[Symbol.iterator]) ||
              e['@@iterator'];
        if (null != n) {
          var i,
            o,
            r = [],
            a = !0,
            s = !1;
          try {
            for (
              n = n.call(e);
              !(a = (i = n.next()).done) &&
              (r.push(i.value), !t || r.length !== t);
              a = !0
            );
          } catch (c) {
            (s = !0), (o = c);
          } finally {
            try {
              a || null == n.return || n.return();
            } finally {
              if (s) throw o;
            }
          }
          return r;
        }
      })(e, t) ||
      I(e, t) ||
      C()
    );
  }
  function v(e) {
    return (
      (function (e) {
        if (Array.isArray(e)) return M(e);
      })(e) ||
      y(e) ||
      I(e) ||
      (function () {
        throw new TypeError(
          'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
        );
      })()
    );
  }
  function m(e) {
    if (Array.isArray(e)) return e;
  }
  function y(e) {
    if (
      ('undefined' != typeof Symbol && null != e[Symbol.iterator]) ||
      null != e['@@iterator']
    )
      return Array.from(e);
  }
  function I(e, t) {
    if (e) {
      if ('string' == typeof e) return M(e, t);
      var n = Object.prototype.toString.call(e).slice(8, -1);
      return 'Map' ===
        (n = 'Object' === n && e.constructor ? e.constructor.name : n) ||
        'Set' === n
        ? Array.from(e)
        : 'Arguments' === n ||
            /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
          ? M(e, t)
          : void 0;
    }
  }
  function M(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
    return i;
  }
  function C() {
    throw new TypeError(
      'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    );
  }
  function T(e, t) {
    var n,
      i =
        ('undefined' != typeof Symbol && e[Symbol.iterator]) || e['@@iterator'];
    if (!i) {
      if (
        Array.isArray(e) ||
        (i = I(e)) ||
        (t && e && 'number' == typeof e.length)
      )
        return (
          i && (e = i),
          (n = 0),
          {
            s: (t = function () {}),
            n: function () {
              return n >= e.length ? { done: !0 } : { done: !1, value: e[n++] };
            },
            e: function (e) {
              throw e;
            },
            f: t,
          }
        );
      throw new TypeError(
        'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
      );
    }
    var o,
      r = !0,
      a = !1;
    return {
      s: function () {
        i = i.call(e);
      },
      n: function () {
        var e = i.next();
        return (r = e.done), e;
      },
      e: function (e) {
        (a = !0), (o = e);
      },
      f: function () {
        try {
          r || null == i.return || i.return();
        } finally {
          if (a) throw o;
        }
      },
    };
  }
  var E = {
      SDK_READY: 'sdkStateReady',
      SDK_NOT_READY: 'sdkStateNotReady',
      SDK_DESTROY: 'sdkDestroy',
      MESSAGE_RECEIVED: 'onMessageReceived',
      ROOM_CUSTOM_DATA_RECEIVED: 'onRoomCustomDataReceived',
      MESSAGE_MODIFIED: 'onMessageModified',
      MESSAGE_REVOKED: 'onMessageRevoked',
      MESSAGE_READ_BY_PEER: 'onMessageReadByPeer',
      MESSAGE_READ_RECEIPT_RECEIVED: 'onMessageReadReceiptReceived',
      MESSAGE_EXTENSIONS_UPDATED: 'onMessageExtensionsUpdated',
      MESSAGE_EXTENSIONS_DELETED: 'onMessageExtensionsDeleted',
      MESSAGE_REACTIONS_UPDATED: 'onMessageReactionsUpdated',
      CONVERSATION_LIST_UPDATED: 'onConversationListUpdated',
      TOTAL_UNREAD_MESSAGE_COUNT_UPDATED: 'onTotalUnreadMessageCountUpdated',
      CONVERSATION_GROUP_LIST_UPDATED: 'onConversationGroupListUpdated',
      CONVERSATION_IN_GROUP_UPDATED: 'onConversationInGroupUpdated',
      GROUP_LIST_UPDATED: 'onGroupListUpdated',
      GROUP_ATTRIBUTES_UPDATED: 'groupAttributesUpdated',
      GROUP_COUNTER_UPDATED: 'onGroupCounterUpdated',
      TOPIC_CREATED: 'onTopicCreated',
      TOPIC_DELETED: 'onTopicDeleted',
      TOPIC_UPDATED: 'onTopicUpdated',
      PROFILE_UPDATED: 'onProfileUpdated',
      USER_STATUS_UPDATED: 'onUserStatusUpdated',
      BLACKLIST_UPDATED: 'blacklistUpdated',
      FRIEND_LIST_UPDATED: 'onFriendListUpdated',
      FRIEND_GROUP_LIST_UPDATED: 'onFriendGroupListUpdated',
      FRIEND_APPLICATION_LIST_UPDATED: 'onFriendApplicationListUpdated',
      MY_FOLLOWERS_LIST_UPDATED: 'onMyFollowersListUpdated',
      MY_FOLLOWING_LIST_UPDATED: 'onMyFollowingListUpdated',
      MUTUAL_FOLLOWERS_LIST_UPDATED: 'onMutualFollowersListUpdated',
      KICKED_OUT: 'kickedOut',
      ERROR: 'error',
      NET_STATE_CHANGE: 'netStateChange',
      ALL_RECEIVE_MESSAGE_OPT_UPDATED: 'onAllReceiveMessageOptUpdated',
    },
    D = {
      MSG_TEXT: 'TIMTextElem',
      MSG_IMAGE: 'TIMImageElem',
      MSG_SOUND: 'TIMSoundElem',
      MSG_AUDIO: 'TIMSoundElem',
      MSG_FILE: 'TIMFileElem',
      MSG_FACE: 'TIMFaceElem',
      MSG_VIDEO: 'TIMVideoFileElem',
      MSG_GEO: 'TIMLocationElem',
      MSG_LOCATION: 'TIMLocationElem',
      MSG_GRP_TIP: 'TIMGroupTipElem',
      MSG_GRP_SYS_NOTICE: 'TIMGroupSystemNoticeElem',
      MSG_CUSTOM: 'TIMCustomElem',
      MSG_MERGER: 'TIMRelayElem',
      MSG_PRIORITY_HIGH: 'High',
      MSG_PRIORITY_NORMAL: 'Normal',
      MSG_PRIORITY_LOW: 'Low',
      MSG_PRIORITY_LOWEST: 'Lowest',
      CONV_C2C: 'C2C',
      CONV_GROUP: 'GROUP',
      CONV_TOPIC: 'TOPIC',
      CONV_SYSTEM: '@TIM#SYSTEM',
      CONV_AT_ME: 1,
      CONV_AT_ALL: 2,
      CONV_AT_ALL_AT_ME: 3,
      CONV_MARK_TYPE_STAR: 1,
      CONV_MARK_TYPE_UNREAD: 2,
      CONV_MARK_TYPE_FOLD: 4,
      CONV_MARK_TYPE_HIDE: 8,
      GRP_PRIVATE: 'Private',
      GRP_WORK: 'Private',
      GRP_PUBLIC: 'Public',
      GRP_CHATROOM: 'ChatRoom',
      GRP_MEETING: 'ChatRoom',
      GRP_AVCHATROOM: 'AVChatRoom',
      GRP_COMMUNITY: 'Community',
      GRP_ROOM: 'Room',
      GRP_LIVE: 'Live',
      GRP_MBR_ROLE_OWNER: 'Owner',
      GRP_MBR_ROLE_ADMIN: 'Admin',
      GRP_MBR_ROLE_MEMBER: 'Member',
      GRP_MBR_ROLE_CUSTOM: 'Custom',
      GRP_TIP_MBR_JOIN: 1,
      GRP_TIP_MBR_QUIT: 2,
      GRP_TIP_MBR_KICKED_OUT: 3,
      GRP_TIP_MBR_SET_ADMIN: 4,
      GRP_TIP_MBR_CANCELED_ADMIN: 5,
      GRP_TIP_GRP_PROFILE_UPDATED: 6,
      GRP_TIP_MBR_PROFILE_UPDATED: 7,
      GRP_TIP_BAN_AVCHATROOM_MEMBER: 10,
      GRP_TIP_UNBAN_AVCHATROOM_MEMBER: 11,
      MSG_REMIND_ACPT_AND_NOTE: 'AcceptAndNotify',
      MSG_REMIND_ACPT_NOT_NOTE: 'AcceptNotNotify',
      MSG_REMIND_DISCARD: 'Discard',
      RECEIVE_WITH_OFFLINE_PUSH_EXCEPT_AT: 'AcceptNotNotifyExceptAt',
      NOT_RECEIVE_OFFLINE_PUSH_EXCEPT_AT: 'AcceptNotNotifyExceptAt',
      NOT_RECEIVE_MSG_EXCEPT_AT: 'NotReceiveMsgExceptAt',
      GENDER_UNKNOWN: 'Gender_Type_Unknown',
      GENDER_FEMALE: 'Gender_Type_Female',
      GENDER_MALE: 'Gender_Type_Male',
      KICKED_OUT_MULT_ACCOUNT: 'multipleAccount',
      KICKED_OUT_MULT_DEVICE: 'multipleDevice',
      KICKED_OUT_USERSIG_EXPIRED: 'userSigExpired',
      KICKED_OUT_REST_API: 'REST_API_Kick',
      ALLOW_TYPE_ALLOW_ANY: 'AllowType_Type_AllowAny',
      ALLOW_TYPE_NEED_CONFIRM: 'AllowType_Type_NeedConfirm',
      ALLOW_TYPE_DENY_ANY: 'AllowType_Type_DenyAny',
      FORBID_TYPE_NONE: 'AdminForbid_Type_None',
      FORBID_TYPE_SEND_OUT: 'AdminForbid_Type_SendOut',
      JOIN_OPTIONS_FREE_ACCESS: 'FreeAccess',
      JOIN_OPTIONS_NEED_PERMISSION: 'NeedPermission',
      JOIN_OPTIONS_DISABLE_APPLY: 'DisableApply',
      JOIN_STATUS_SUCCESS: 'JoinedSuccess',
      JOIN_STATUS_ALREADY_IN_GROUP: 'AlreadyInGroup',
      JOIN_STATUS_WAIT_APPROVAL: 'WaitAdminApproval',
      INVITE_OPTIONS_DISABLE_INVITE: 'DisableInvite',
      INVITE_OPTIONS_NEED_PERMISSION: 'NeedPermission',
      INVITE_OPTIONS_FREE_ACCESS: 'FreeAccess',
      GRP_PROFILE_OWNER_ID: 'ownerID',
      GRP_PROFILE_CREATE_TIME: 'createTime',
      GRP_PROFILE_LAST_INFO_TIME: 'lastInfoTime',
      GRP_PROFILE_MEMBER_NUM: 'memberNum',
      GRP_PROFILE_MAX_MEMBER_NUM: 'maxMemberNum',
      GRP_PROFILE_JOIN_OPTION: 'joinOption',
      GRP_PROFILE_INVITE_OPTION: 'inviteOption',
      GRP_PROFILE_INTRODUCTION: 'introduction',
      GRP_PROFILE_NOTIFICATION: 'notification',
      GRP_PROFILE_MUTE_ALL_MBRS: 'muteAllMembers',
      SNS_ADD_TYPE_SINGLE: 'Add_Type_Single',
      SNS_ADD_TYPE_BOTH: 'Add_Type_Both',
      SNS_DELETE_TYPE_SINGLE: 'Delete_Type_Single',
      SNS_DELETE_TYPE_BOTH: 'Delete_Type_Both',
      SNS_APPLICATION_TYPE_BOTH: 'Pendency_Type_Both',
      SNS_APPLICATION_SENT_TO_ME: 'Pendency_Type_ComeIn',
      SNS_APPLICATION_SENT_BY_ME: 'Pendency_Type_SendOut',
      SNS_APPLICATION_AGREE: 'Response_Action_Agree',
      SNS_APPLICATION_AGREE_AND_ADD: 'Response_Action_AgreeAndAdd',
      SNS_CHECK_TYPE_BOTH: 'CheckResult_Type_Both',
      SNS_CHECK_TYPE_SINGLE: 'CheckResult_Type_Single',
      SNS_TYPE_NO_RELATION: 'CheckResult_Type_NoRelation',
      SNS_TYPE_A_WITH_B: 'CheckResult_Type_AWithB',
      SNS_TYPE_B_WITH_A: 'CheckResult_Type_BWithA',
      SNS_TYPE_BOTH_WAY: 'CheckResult_Type_BothWay',
      NET_STATE_CONNECTED: 'connected',
      NET_STATE_CONNECTING: 'connecting',
      NET_STATE_DISCONNECTED: 'disconnected',
      MSG_AT_ALL: '__kImSDK_MesssageAtALL__',
      READ_ALL_C2C_MSG: 'readAllC2CMessage',
      READ_ALL_GROUP_MSG: 'readAllGroupMessage',
      READ_ALL_MSG: 'readAllMessage',
      USER_STATUS_UNKNOWN: 0,
      USER_STATUS_ONLINE: 1,
      USER_STATUS_OFFLINE: 2,
      USER_STATUS_UNLOGINED: 3,
      IOS_OFFLINE_PUSH_NO_SOUND: 'push.no_sound',
      IOS_OFFLINE_PUSH_DEFAULT_SOUND: 'default',
    },
    S = {
      NEW_INVITATION_RECEIVED: 'newInvitationReceived',
      INVITEE_ACCEPTED: 'ts_invitee_accepted',
      INVITEE_REJECTED: 'ts_invitee_rejected',
      INVITATION_CANCELLED: 'ts_invitation_cancelled',
      INVITATION_TIMEOUT: 'ts_invitation_timeout',
      INVITATION_MODIFIED: 'ts_invitation_modified',
      ACTION_TYPE_UNKNOWN: 0,
      ACTION_TYPE_INVITE: 1,
      ACTION_TYPE_CANCEL_INVITE: 2,
      ACTION_TYPE_ACCEPT_INVITE: 3,
      ACTION_TYPE_REJECT_INVITE: 4,
      ACTION_TYPE_INVITE_TIMEOUT: 5,
    },
    k =
      (r(q, [
        {
          key: 'use',
          value: function (e) {
            if ('function' != typeof e) throw 'middleware must be a function';
            return this.cache.push(e), this;
          },
        },
        {
          key: 'next',
          value: function (e) {
            if (this.middlewares && 0 < this.middlewares.length)
              return this.middlewares
                .shift()
                .call(this, this.options, this.next.bind(this));
          },
        },
        {
          key: 'run',
          value: function (e) {
            return (
              (this.middlewares = this.cache.map(function (e) {
                return e;
              })),
              (this.options = e),
              this.next()
            );
          },
        },
      ]),
      q),
    R =
      (r(F, [
        {
          key: 'equal',
          value: function (e) {
            return null !== e && this.low === e.low && this.high === e.high;
          },
        },
        {
          key: 'toString',
          value: function () {
            var e = Number(this.high).toString(16),
              t = Number(this.low).toString(16);
            if (t.length < 8)
              for (var n = 8 - t.length; n; ) (t = '0' + t), n--;
            return e + t;
          },
        },
      ]),
      F),
    L = {
      TEST: {
        CHINA: { DEFAULT: 'wss://wss-dev.tim.qq.com' },
        OVERSEA: { DEFAULT: 'wss://wss-dev.tim.qq.com' },
        SINGAPORE: { DEFAULT: 'wss://wsssgp-dev.im.qcloud.com' },
        KOREA: { DEFAULT: 'wss://wsskr-dev.im.qcloud.com' },
        GERMANY: { DEFAULT: 'wss://wssger-dev.im.qcloud.com' },
        IND: { DEFAULT: 'wss://wssind-dev.im.qcloud.com' },
        JPN: { DEFAULT: 'wss://wssjpn-dev.im.qcloud.com' },
        USA: { DEFAULT: 'wss://wssusa-dev.im.qcloud.com' },
        INDONESIA: { DEFAULT: 'wss://wssidn-dev.im.qcloud.com' },
      },
      PRODUCTION: {
        CHINA: {
          DEFAULT: 'wss://wss.im.qcloud.com',
          BACKUP: 'wss://wss.tim.qq.com',
          STAT: 'https://events.im.qcloud.com',
          ANYCAST: 'wss://162.14.13.203',
        },
        OVERSEA: {
          DEFAULT: 'wss://wss.im.qcloud.com',
          BACKUP: 'wss://wss.my-imcloud.com',
          STAT: 'https://api.my-imcloud.com',
        },
        SINGAPORE: {
          DEFAULT: 'wss://wsssgp.im.qcloud.com',
          BACKUP: 'wss://wsssgp.my-imcloud.com',
          STAT: 'https://apisgp.my-imcloud.com',
          ANYCAST: 'wss://162.14.19.159',
        },
        KOREA: {
          DEFAULT: 'wss://wsskr.im.qcloud.com',
          BACKUP: 'wss://wsskr.my-imcloud.com',
          STAT: 'https://apikr.my-imcloud.com',
          ANYCAST: 'wss://162.14.13.104',
        },
        GERMANY: {
          DEFAULT: 'wss://wssger.im.qcloud.com',
          BACKUP: 'wss://wssger.my-imcloud.com',
          STAT: 'https://apiger.my-imcloud.com',
          ANYCAST: 'wss://162.14.3.17',
        },
        IND: {
          DEFAULT: 'wss://wssind.my-imcloud.com',
          BACKUP: 'wss://wssind.im.qcloud.com',
          STAT: 'https://apiind.my-imcloud.com',
          ANYCAST: 'wss://162.14.18.188',
        },
        JPN: {
          DEFAULT: 'wss://wssjpn.im.qcloud.com',
          BACKUP: 'wss://wssjpn.my-imcloud.com',
          STAT: 'https://apijpn.my-imcloud.com',
        },
        USA: {
          DEFAULT: 'wss://wssusa.im.qcloud.com',
          BACKUP: 'wss://wssusa.my-imcloud.com',
          STAT: 'https://apiusa.my-imcloud.com',
          ANYCAST: 'wss://162.14.10.42',
        },
        INDONESIA: {
          DEFAULT: 'wss://wssidn.im.qcloud.com',
          BACKUP: 'wss://wssidn.my-imcloud.com',
          STAT: 'https://apiidn.my-imcloud.com',
          ANYCAST: 'wss://43.129.34.169',
        },
      },
    },
    A = {
      ANDROID: 2,
      IOS: 3,
      MAC: 4,
      WEB: 7,
      WX_MP: 8,
      QQ_MP: 9,
      TT_MP: 10,
      BAIDU_MP: 11,
      ALI_MP: 12,
      IPAD: 13,
      UNI_NATIVE_APP: 15,
      DONUT_NATIVE_APP: 19,
      NS_NATIVE_APP: 20,
    },
    O = '1.7.3',
    b = 537048168,
    N = 'CHINA',
    P = {
      HOST: {
        CURRENT: {
          DEFAULT: 'wss://wss.im.qcloud.com',
          STAT: 'https://events.im.qcloud.com',
        },
        setCurrent: function () {
          this.CURRENT =
            L.PRODUCTION[
              0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : N
            ];
        },
      },
      NAME: {
        OPEN_IM: 'openim',
        OPEN_IM_MSG_EXT: 'openim_msg_ext_http_svc',
        GRP: 'group_open_http_svc',
        GRP_AV: 'group_open_avchatroom_http_svc',
        GRP_COMMUNITY: 'million_group_open_http_svc',
        GRP_ATTR: 'group_open_attr_http_svc',
        FD: 'sns',
        PROFILE: 'profile',
        RECENT_CONTACT: 'recentcontact',
        PIC: 'openpic',
        BIG_GRP_NO_AUTH: 'group_open_http_noauth_svc',
        BIG_GRP_POLLING: 'group_open_long_polling_http_svc',
        BIG_GRP_POLLING_NO_AUTH: 'group_open_long_polling_http_noauth_svc',
        IM_OPEN_STAT: 'imopenstat',
        WEB_IM: 'webim',
        IM_COS_SIGN: 'im_cos_sign_svr',
        CUSTOM_UPLOAD: 'im_cos_msg',
        HEARTBEAT: 'heartbeat',
        IM_OPEN_PUSH: 'im_open_push',
        IM_OPEN_STATUS: 'im_open_status',
        IM_LONG_MSG: 'im_long_msg',
        IM_CONFIG_MANAGER: 'im_sdk_config_mgr',
        STAT_SERVICE: 'StatSvc',
        OVERLOAD_PUSH: 'OverLoadPush',
        IM_MSG_AUDIT_MGR: 'im_msg_audit_mgr',
        TUIROOM_SVR: 'tui_room_svr',
        IM_OPEN_TRANSLATE: 'im_open_translate',
        IM_OPEN_SPEECH: 'im_open_speech',
        MSG_SEARCH: 'message_search',
        FOLLOW: 'follow',
        OFFLINE_PUSH_REPORT: 'offline_push_report',
        IM_MSG_LOGIC: 'im_msg_db_logic',
      },
    },
    w = {
      SEARCH_GRP_SNS: new R(0, Math.pow(2, 1)).toString(),
      AV_HISTORY_MSG: new R(0, Math.pow(2, 2)).toString(),
      GRP_COMMUNITY: new R(0, Math.pow(2, 3)).toString(),
      MSG_TO_SPECIFIED_GRP_MBR: new R(0, Math.pow(2, 4)).toString(),
      AV_MBR_LIST: new R(0, Math.pow(2, 6)).toString(),
      USER_STATUS: new R(0, Math.pow(2, 7)).toString(),
      CONV_MARK: new R(0, Math.pow(2, 9)).toString(),
      CONV_GROUP: new R(0, Math.pow(2, 10)).toString(),
      AV_BAN_MBR: new R(0, Math.pow(2, 11)).toString(),
      MSG_EXT: new R(0, Math.pow(2, 13)).toString(),
      GRP_COUNTER: new R(0, Math.pow(2, 15)).toString(),
      PLUGIN_TRANSLATE: new R(Math.pow(2, 6)).toString(),
      PLUGIN_VOICE_TO_TEXT: new R(Math.pow(2, 7)).toString(),
      PLUGIN_CS: new R(Math.pow(2, 8)).toString(),
      PLUGIN_PUSH: new R(Math.pow(2, 9)).toString(),
      PLUGIN_BOT: new R(Math.pow(2, 10)).toString(),
      MSG_REACTION: new R(Math.pow(2, 16)).toString(),
      FOLLOW: new R(Math.pow(2, 20)).toString(),
    },
    U = 'group_profile',
    G = [
      'Type',
      'Name',
      'Introduction',
      'Notification',
      'FaceUrl',
      'Owner_Account',
      'CreateTime',
      'InfoSeq',
      'LastInfoTime',
      'LastMsgTime',
      'MemberNum',
      'MaxMemberNum',
      'ApplyJoinOption',
      'NextMsgSeq',
      'ShutUpAllMember',
      'InviteJoinOption',
    ],
    x = ['Role', 'JoinTime', 'MsgSeq', 'MsgFlag'];
  function F() {
    var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0,
      t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0;
    i(this, F), (this.high = e), (this.low = t);
  }
  function q() {
    i(this, q), (this.cache = []), (this.options = null);
  }
  P.HOST.setCurrent(N);
  for (
    var V,
      B =
        void 0 !== $n &&
        'function' == typeof $n.getSystemInfoSync &&
        Boolean($n.getSystemInfoSync().fontSizeSetting),
      H = B && 'function' == typeof $n.createGamePortal,
      j =
        'undefined' != typeof qq &&
        'function' == typeof qq.getSystemInfoSync &&
        Boolean(qq.getSystemInfoSync().fontSizeSetting),
      K =
        'undefined' != typeof tt &&
        'function' == typeof tt.getSystemInfoSync &&
        Boolean(tt.getSystemInfoSync().fontSizeSetting),
      W =
        'undefined' != typeof swan &&
        'function' == typeof swan.getSystemInfoSync &&
        Boolean(swan.getSystemInfoSync().fontSizeSetting),
      z =
        'undefined' != typeof my &&
        'function' == typeof my.getSystemInfoSync &&
        Boolean(my.getSystemInfoSync().fontSizeSetting),
      $ = 'undefined' != typeof jd && 'function' == typeof jd.getSystemInfoSync,
      Y =
        void 0 !== Yn &&
        'undefined' == typeof window &&
        'function' == typeof Yn.requireNativePlugin,
      J = B && 'object' === n($n.miniapp),
      X = void 0 !== Yn,
      Z = B || j || K || W || z || Y || $,
      Q =
        'undefined' == typeof window &&
        !Z &&
        void 0 !== Zs &&
        void 0 !== Zs.NativeScriptGlobals,
      ee = (void 0 !== Yn || 'undefined' != typeof window) && !Z,
      te = j ? qq : K ? tt : W ? swan : z ? my : B ? $n : Y ? Yn : $ ? jd : {},
      ne =
        (ee && window && window.navigator && window.navigator.userAgent) || '',
      ie =
        (($ = 'WEB'),
        /(micromessenger|webbrowser)/i.test(ne)
          ? ($ = 'WEB')
          : j
            ? ($ = 'QQ_MP')
            : K
              ? ($ = 'TT_MP')
              : W
                ? ($ = 'BAIDU_MP')
                : z
                  ? ($ = 'ALI_MP')
                  : B
                    ? ($ = J ? 'DONUT_NATIVE_APP' : 'WX_MP')
                    : Y
                      ? ($ = 'UNI_NATIVE_APP')
                      : Q && ($ = 'NS_NATIVE_APP'),
        A[$]),
      oe =
        ((J = /iPad/i.test(ne)),
        (Q = /iPhone/i.test(ne) && !J),
        ($ = /iPod/i.test(ne)),
        Q || J || $),
      re = (Q = ne.match(/OS (\d+)_/i)) && Q[1] ? Q[1] : null,
      ae = /Android/i.test(ne),
      se = (function () {
        var e = ne.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
        if (!e) return null;
        var t = e[1] && parseFloat(e[1]),
          n = e[2] && parseFloat(e[2]);
        return t && n ? parseFloat(e[1] + '.' + e[2]) : t || null;
      })(),
      ce =
        (($ = !(J = /Edge/i.test(ne)) && /Chrome/i.test(ne)),
        /MSIE/.test(ne) ||
          (-1 < ne.indexOf('Trident') && -1 < ne.indexOf('rv:11.0'))),
      ue = (Q =
        !(Q = (Q = /MSIE\s(\d+)\.\d/.exec(ne)) && parseFloat(Q[1])) &&
        /Trident\/7.0/i.test(ne) &&
        /rv:11.0/.test(ne)
          ? 11
          : Q),
      le = /Safari/i.test(ne) && !$ && !ae && !J,
      de = /Windows/i.test(ne),
      pe = /MAC OS X/i.test(ne),
      he = ee && 'undefined' != typeof Worker && !ce,
      fe = ae || oe,
      ge = ee && void 0 !== window.tencent_cloud_im_csig_flutter_for_web_25F_cy,
      _e = (function () {
        if ('undefined' == typeof window || void 0 === window.navigator)
          return !1;
        var e = window.navigator.standalone;
        return !(!oe || e || le);
      })(),
      ve =
        'undefined' != typeof console
          ? console
          : void 0 !== Zs && Zs.console
            ? Zs.console
            : 'undefined' != typeof window && window.console
              ? window.console
              : {},
      me = function () {},
      ye = [
        'assert',
        'clear',
        'count',
        'debug',
        'dir',
        'dirxml',
        'error',
        'group',
        'groupCollapsed',
        'groupEnd',
        'info',
        'log',
        'profile',
        'profileEnd',
        'table',
        'time',
        'timeEnd',
        'timeStamp',
        'trace',
        'warn',
      ],
      Ie = ye.length;
    Ie--;

  )
    (V = ye[Ie]), console[V] || (ve[V] = me);
  function Me() {
    var e = new Date();
    return e.setTime(Se()), e;
  }
  function Ce() {
    De = 0;
  }
  function Te() {
    return Math.floor(Se() / 1e3);
  }
  var Ee = ve,
    De = 0,
    Se = function () {
      return new Date().getTime() + De;
    },
    ke = 0;
  function Re() {
    return Vt() ? '%c Chat %c' : 'Chat';
  }
  function Le() {
    var e = Me();
    return (
      e.toLocaleTimeString('en-US', { hour12: !1 }) +
      '.' +
      (function (e) {
        var t;
        switch (e.toString().length) {
          case 1:
            t = '00' + e;
            break;
          case 2:
            t = '0' + e;
            break;
          default:
            t = e;
        }
        return t;
      })(e.getMilliseconds())
    );
  }
  var Ae = {
      arguments2String: function (e) {
        var t = '';
        if (1 === e.length) t = e[0];
        else
          for (var n = 0, i = e.length; n < i; n++)
            lt(e[n])
              ? dt(e[n])
                ? (t += ht(e[n]))
                : (t += JSON.stringify(e[n]))
              : (t += e[n]),
              (t += ' ');
        return t;
      },
      _exec: function (e, t) {
        Vt()
          ? Ee[e](
              Re(),
              'background:#0abf5b; padding:1px; border-radius:3px; color: #fff',
              'background:transparent',
              Le(),
              t
            )
          : Ee[e](''.concat(Re(), ' ').concat(Le(), ' ').concat(t));
      },
      d: function () {
        var e;
        ke <= -1 &&
          ((e = this.arguments2String(arguments)), this._exec('debug', e));
      },
      l: function () {
        var e;
        ke <= 0 &&
          ((e = this.arguments2String(arguments)), this._exec('log', e));
      },
      log: function () {
        var e;
        ke <= 0 &&
          ((e = this.arguments2String(arguments)), this._exec('log', e));
      },
      i: function () {
        var e;
        ke <= 1 &&
          ((e = this.arguments2String(arguments)), this._exec('info', e));
      },
      w: function () {
        var e;
        ke <= 2 &&
          ((e = this.arguments2String(arguments)), this._exec('warn', e));
      },
      e: function () {
        var e;
        ke <= 3 &&
          ((e = this.arguments2String(arguments)), this._exec('error', e));
      },
      setLevel: function (e) {
        e < 4 && this._exec('log', 'set level from ' + ke + ' to ' + e),
          (ke = e);
      },
      getLevel: function () {
        return ke;
      },
    },
    Oe = { JPG: 1, JPEG: 1, GIF: 2, PNG: 3, BMP: 4, UNKNOWN: 255 },
    be = {
      NICK: ''.concat((Q = 'Tag_Profile_IM_'), 'Nick'),
      GENDER: ''.concat(Q, 'Gender'),
      BIRTHDAY: ''.concat(Q, 'BirthDay'),
      LOCATION: ''.concat(Q, 'Location'),
      SELFSIGNATURE: ''.concat(Q, 'SelfSignature'),
      ALLOWTYPE: ''.concat(Q, 'AllowType'),
      LANGUAGE: ''.concat(Q, 'Language'),
      AVATAR: ''.concat(Q, 'Image'),
      MESSAGESETTINGS: ''.concat(Q, 'MsgSettings'),
      ADMINFORBIDTYPE: ''.concat(Q, 'AdminForbidType'),
      LEVEL: ''.concat(Q, 'Level'),
      ROLE: ''.concat(Q, 'Role'),
    },
    Ne = {
      GROUP: ''.concat('Tag_SNS_IM_', 'Group'),
      REMARK: ''.concat('Tag_SNS_IM_', 'Remark'),
      ADDSOURCE: ''.concat('Tag_SNS_IM_', 'AddSource'),
      ADDWORDING: ''.concat('Tag_SNS_IM_', 'Wording'),
      ADDTIME: ''.concat('Tag_SNS_IM_', 'AddTime'),
    },
    Pe = {
      UNKNOWN: ''.concat(($ = 'Gender_Type_'), 'Unknown'),
      FEMALE: ''.concat($, 'Female'),
      MALE: ''.concat($, 'Male'),
    },
    we = {
      NONE: ''.concat('AdminForbid_Type_', 'None'),
      SEND_OUT: ''.concat('AdminForbid_Type_', 'SendOut'),
    },
    Ue = {
      NEED_CONFIRM: ''.concat('AllowType_Type_', 'NeedConfirm'),
      ALLOW_ANY: ''.concat('AllowType_Type_', 'AllowAny'),
      DENY_ANY: ''.concat('AllowType_Type_', 'DenyAny'),
    },
    Ge = 'JoinedSuccess',
    xe = 'WaitAdminApproval',
    Fe = '@TOPIC#_',
    qe = Object.prototype.hasOwnProperty;
  function Ve(e) {
    if (null == e) return !0;
    if ('boolean' == typeof e) return !1;
    if ('number' == typeof e) return 0 === e;
    if ('string' == typeof e) return 0 === e.length;
    if ('function' == typeof e) return 0 === e.length;
    if (Array.isArray(e)) return 0 === e.length;
    if (e instanceof Error) return '' === e.message;
    if (ze(e)) {
      for (var t in e) if (qe.call(e, t)) return !1;
      return !0;
    }
    return !!(Be(e) || He(e) || je(e)) && 0 === e.size;
  }
  function Be(e) {
    return 'map' === pt(e);
  }
  function He(e) {
    return 'set' === pt(e);
  }
  function je(e) {
    return 'file' === pt(e);
  }
  function Ke(e) {
    return (
      null !== e &&
      (('number' == typeof e && !isNaN(+e)) ||
        ('object' === n(e) && e.constructor === Number))
    );
  }
  function We(e) {
    return null !== e && 'object' === n(e);
  }
  function ze(e) {
    if ('object' === n(e) && null !== e) {
      if (null === (e = Object.getPrototypeOf(e))) return 1;
      for (var t = e; null !== Object.getPrototypeOf(t); )
        t = Object.getPrototypeOf(t);
      return e === t;
    }
  }
  function $e(e) {
    return 'function' == typeof Array.isArray
      ? Array.isArray(e)
      : 'array' === pt(e);
  }
  function Ye(e) {
    return 'function' == typeof e;
  }
  function Je(e) {
    return 'filelist' === pt(e);
  }
  function Xe(e) {
    return 'string' == typeof e && ((e = e[0]), !/[^a-zA-Z0-9]/.test(e));
  }
  function Ze(e, t, n, i) {
    if (!lt(e) || !lt(t)) return 0;
    for (var o, r = 0, a = Object.keys(t), s = 0, c = a.length; s < c; s++)
      if (((o = a[s]), !(ut(t[o]) || (n && n.includes(o)))))
        if (lt(e[o]) && lt(t[o])) r += Ze(e[o], t[o], n, i);
        else {
          if (i && i.includes(t[o])) continue;
          e[o] !== t[o] && ((e[o] = t[o]), (r += 1));
        }
    return r;
  }
  function Qe(e, t) {
    var n,
      i = new Map(),
      o = T(e.entries());
    try {
      for (o.s(); !(n = o.n()).done; ) {
        var r = _(n.value, 2),
          a = r[0],
          s = r[1];
        i.set(a, t ? JSON.stringify(s) : JSON.parse(JSON.stringify(s)));
      }
    } catch (c) {
      o.e(c);
    } finally {
      o.f();
    }
    return i;
  }
  function et(e) {
    if (0 === e.length) return 0;
    for (
      var t = 0,
        n = 0,
        i =
          'undefined' != typeof document && void 0 !== document.characterSet
            ? document.characterSet
            : 'UTF-8';
      void 0 !== e[t];

    )
      n += e[t++].charCodeAt[t] <= 255 ? 1 : !1 === i ? 3 : 2;
    return n;
  }
  function nt(e) {
    return (e = e || 99999999), Math.round(Math.random() * e);
  }
  function it() {
    for (var e = '', t = 32; 0 < t; --t)
      e += ft[Math.floor(Math.random() * gt)];
    return e;
  }
  function ot(e, t) {
    for (var n in e) if (e[n] === t) return 1;
  }
  function rt(e) {
    return -1 === e.indexOf('http://') || -1 === e.indexOf('https://')
      ? 'https://' + e
      : e.replace(/https|http/, 'https');
  }
  function at(e) {
    if (0 === Object.getOwnPropertyNames(e).length) return Object.create(null);
    var t,
      i,
      o = Array.isArray(e) ? [] : Object.create(null);
    for (i in e)
      null !== e[i]
        ? void 0 !== e[i]
          ? ((t = n(e[i])),
            0 <= ['string', 'number', 'function', 'boolean'].indexOf(t)
              ? (o[i] = e[i])
              : (o[i] = at(e[i])))
          : (o[i] = void 0)
        : (o[i] = null);
    return o;
  }
  var st = ['url'],
    ct = function (e) {
      return 'string' == typeof e;
    },
    ut = function (e) {
      return void 0 === e;
    },
    lt = function (e) {
      return $e(e) || We(e);
    },
    dt = function (e) {
      return e instanceof Error;
    },
    pt = function (e) {
      return Object.prototype.toString
        .call(e)
        .match(/^\[object (.*)\]$/)[1]
        .toLowerCase();
    },
    ht =
      (Date.now ||
        (Date.now = function () {
          return new Date().getTime();
        }),
      function (e) {
        return JSON.stringify(e, ['message', 'code']);
      }),
    ft = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
    gt = ft.length,
    _t = {};
  function vt(e, t) {
    if (!$e(e) || !$e(t)) return !1;
    var n = !1;
    return (
      t.forEach(function (t) {
        var i = t.key,
          o =
            ((t = t.value),
            e.find(function (e) {
              return e.key === i;
            }));
        o
          ? o.value !== t && ((o.value = t), (n = !0))
          : (e.push({ key: i, value: t }), (n = !0));
      }),
      n
    );
  }
  function mt(e) {
    return Ve(e)
      ? []
      : e.filter(function (e) {
          return !0 === e.isModified;
        });
  }
  function yt(e) {
    return Ve(e)
      ? []
      : e.filter(function (e) {
          return !1 === e.isModified;
        });
  }
  function It(e) {
    return e === D.GRP_AVCHATROOM;
  }
  function Mt(e) {
    var t = e.type;
    return (
      (e = e.groupID),
      t === D.GRP_COMMUNITY ||
        (''.concat(e).startsWith('@TGS#_') && !''.concat(e).includes(Fe))
    );
  }
  function Ct(e) {
    return ''.concat(e).startsWith('@TGS#_') && ''.concat(e).includes(Fe);
  }
  function Tt(e) {
    return ct(e) && e.slice(0, 3) === D.CONV_C2C;
  }
  function Et(e) {
    return ct(e) && e.slice(0, 5) === D.CONV_GROUP;
  }
  function Dt(e) {
    return ct(e) && e === D.CONV_SYSTEM;
  }
  function St(e, t) {
    var n = {};
    return (
      Object.keys(e).forEach(function (i) {
        n[i] = t(e[i], i);
      }),
      n
    );
  }
  function kt(e) {
    return Z
      ? new Promise(function (t, n) {
          te.getImageInfo({
            src: e,
            success: function (e) {
              t({ width: e.width, height: e.height });
            },
            fail: function () {
              t({ width: 0, height: 0 });
            },
          });
        })
      : ce && 9 === ue
        ? Promise.resolve({ width: 0, height: 0 })
        : new Promise(function (t, n) {
            var i = new Image();
            (i.onload = function () {
              t({ width: this.width, height: this.height }), (i = null);
            }),
              (i.onerror = function () {
                t({ width: 0, height: 0 }), (i = null);
              }),
              (i.src = e);
          });
  }
  function Rt() {
    function e() {
      return ((65536 * (1 + Math.random())) | 0).toString(16).substring(1);
    }
    return ''
      .concat(e() + e())
      .concat(e())
      .concat(e())
      .concat(e())
      .concat(e())
      .concat(e())
      .concat(e());
  }
  function Lt() {
    var e = ae
      ? 'android'
      : oe
        ? 'ios'
        : de
          ? 'windows'
          : pe
            ? 'mac'
            : 'unknown';
    if (Z)
      try {
        var t = te.getSystemInfoSync().platform;
        void 0 !== t && (e = t);
      } catch (n) {}
    return e;
  }
  function At(e, t) {
    (e = e.split('.')), (t = t.split('.'));
    for (var n = Math.max(e.length, t.length); e.length < n; ) e.push('0');
    for (; t.length < n; ) t.push('0');
    for (var i = 0; i < n; i++) {
      var o = parseInt(e[i]),
        r = parseInt(t[i]);
      if (r < o) return 1;
      if (o < r) return -1;
    }
    return 0;
  }
  function Ot(e) {
    var t = void 0 === (t = e.originUrl) ? void 0 : t,
      n = e.originWidth,
      i = e.originHeight,
      o =
        ((e = void 0 === (e = e.min) ? 198 : e),
        { url: void 0, width: 0, height: 0 });
    return (
      ((n = parseInt(n)) <= (i = parseInt(i)) ? n : i) <= e
        ? ((o.url = t), (o.width = n), (o.height = i))
        : (i <= n
            ? ((o.width = Math.ceil((n * e) / i)), (o.height = e))
            : ((o.width = e), (o.height = Math.ceil((i * e) / n))),
          (i =
            t && -1 < t.indexOf('?') ? ''.concat(t, '&') : ''.concat(t, '?')),
          (o.url = ''.concat(
            i,
            198 === e ? 'imageView2/3/w/198/h/198' : 'imageView2/3/w/720/h/720'
          ))),
      ut(t) ? (o.url, h(o, st)) : o
    );
  }
  function bt(e) {
    var t = e[2];
    (e[2] = e[1]), (e[1] = t);
    for (var n = 0; n < e.length; n++) e[n].setType(n);
  }
  function Nt(e) {
    return (e = e.servcmd).slice(e.indexOf('.') + 1);
  }
  function Pt(e, t) {
    return Math.round(Number(e) * Math.pow(10, t)) / Math.pow(10, t);
  }
  function wt(e, t) {
    return e.includes(t);
  }
  function Ut(e, t) {
    return e.includes(t);
  }
  function Gt(e) {
    return e.split(Fe)[0];
  }
  var xt = function (e, t, n) {
    if (ut(t)) return '';
    switch (e) {
      case D.MSG_TEXT:
        return t.text;
      case D.MSG_IMAGE:
        return n ? '[Image]' : '[图片]';
      case D.MSG_LOCATION:
        return n ? '[Location]' : '[位置]';
      case D.MSG_AUDIO:
        return n ? '[Voice]' : '[语音]';
      case D.MSG_VIDEO:
        return n ? '[Video]' : '[视频]';
      case D.MSG_FILE:
        return n ? '[File]' : '[文件]';
      case D.MSG_CUSTOM:
        return n ? '[Custom Messages]' : '[自定义消息]';
      case D.MSG_GRP_TIP:
        return n ? '[Group Notification]' : '[群提示消息]';
      case D.MSG_GRP_SYS_NOTICE:
        return n ? '[Group System Message]' : '[群系统通知]';
      case D.MSG_FACE:
        return n ? '[Animated Sticker]' : '[动画表情]';
      case D.MSG_MERGER:
        return n ? '[Chat Record]' : '[聊天记录]';
      default:
        return '';
    }
  };
  function Ft(e) {
    return (
      e === D.MSG_TEXT ||
      e === D.MSG_CUSTOM ||
      e === D.MSG_LOCATION ||
      e === D.MSG_FACE
    );
  }
  function qt(e) {
    var t = [];
    if (!ct(e)) return t;
    var n = e.length;
    if (0 === n) return t;
    for (var i = n - 1; 0 <= i; i--)
      '1' === e[i] && t.push(Math.pow(2, n - i - 1));
    return t;
  }
  function Vt() {
    return !ce && !Z;
  }
  function Bt(e) {
    return 'the length of userIDList cannot exceed '.concat(e);
  }
  function Ht(e) {
    var t;
    if ($e(e) && 0 !== e.length)
      return (
        (t = 0),
        e.forEach(function (e) {
          t += e;
        }),
        t.toFixed(0)
      );
  }
  function jt(e) {
    var t;
    if ($e(e) && 0 !== e.length)
      return (
        (t = 0),
        e.forEach(function (e) {
          t += e;
        }),
        (t / e.length).toFixed(0)
      );
  }
  function Kt(e, t, n) {
    (t = !(1 < arguments.length && void 0 !== t) || t),
      (n = !(2 < arguments.length && void 0 !== n) || n);
    var i = Date.now();
    return t
      ? n
        ? ''.concat(i - e, ' ms')
        : ''.concat(Math.round((i - e) / 1e3), ' s')
      : n
        ? i - e
        : Math.round((i - e) / 1e3);
  }
  function Wt(e) {
    return !!(e && 1 < e);
  }
  function zt(e, t, n, i) {
    if (void 0 === t) return 1;
    var o,
      r,
      a = !0;
    return (
      t.required &&
        Ve(e) &&
        (Ae.e('['.concat(n, '] Missing required params: "').concat(i, '".')),
        (a = !1)),
      Ve(e) ||
        ((o = pt(e)) !== (r = t.type.toLowerCase()) &&
          (('asyncfunction' === o && 'function' === r) ||
            (Ae.e(
              '['
                .concat(n, '] Invalid params: type check failed for "')
                .concat(i, '". Expected ')
                .concat(t.type, '.')
            ),
            (a = !1)))),
      t.validator &&
        !t.validator(e, n, i) &&
        (Ae.e(
          '['
            .concat(n, '] Invalid params: custom validator check failed for "')
            .concat(i, '".')
        ),
        (a = !1)),
      a
    );
  }
  function $t(e) {
    return !(
      !e ||
      (!(Tt(e) || Et(e) || Dt(e)) &&
        ((e = On('InvalidConversationID', e)) && Ae.w(e), 1))
    );
  }
  function Yt(e) {
    '' !== e.desc &&
      '' !== On('API_REFER') &&
      Ae.w(
        '['
          .concat(e.api, '] | ')
          .concat(e.paramName, ' | ')
          .concat(e.desc, ', ')
          .concat(On('API_REFER'))
          .concat(e.api)
      );
  }
  function Jt() {
    return On('StringRequiredLog');
  }
  function Xt(e) {
    return On('NonEmptyStringRequiredLog', e);
  }
  function Zt() {
    return On('NumberRequiredLog');
  }
  function Qt() {
    return On('UndefinedNotAllowedLog');
  }
  function en() {
    return On('FileRequiredLog');
  }
  function tn() {
    return On('FunctionRequiredLog');
  }
  function nn() {
    return On('ArrayRequiredLog');
  }
  function on() {
    return On('NonEmptyArrayLog');
  }
  function rn() {
    return On('CallbackMissingLog');
  }
  function an() {
    return On('PositiveIntegerRequiredLog');
  }
  function sn(e, t) {
    return On('StringNotLongerThanLog', e, t);
  }
  function cn(e, t) {
    return On('NumberGreaterOrEqualLog', e, t);
  }
  function un(e) {
    return On('KeyValueStringRequiredLog', e);
  }
  function ln() {
    return On('PlainObjectRequiredLog');
  }
  function dn() {
    return On('NonEmptyContentRequiredLog');
  }
  function pn() {
    return On('FileNotSelectedLog');
  }
  function hn() {
    return On('MessageInstanceRequiredLog');
  }
  function fn() {
    return On('NonAnonymousFunctionLog');
  }
  function gn() {
    return On('MessageExtensionNotAvailableLog');
  }
  function _n() {
    return On('MessageReactionRequiredLog');
  }
  function vn(e, t) {
    return On('MaximumArrayLengthLog', e, t);
  }
  function mn(e) {
    return { code: 0, data: e || {} };
  }
  function yn(e) {
    return Promise.resolve(mn(e));
  }
  function In(e) {
    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
    if (e instanceof Pn)
      return t && null !== Un && Un.emit(E.ERROR, e), Promise.reject(e);
    if (e instanceof Error)
      return (
        (n = new Pn({ code: wn.UNCAUGHT_ERROR })),
        t && null !== Un && Un.emit(E.ERROR, n),
        Promise.reject(n)
      );
    if (ut(e) || ut(e.code))
      return Promise.reject(new Pn({ code: wn.UNCAUGHT_ERROR }));
    var n = new Pn(e);
    return t && null !== Un && Un.emit(E.ERROR, n), Promise.reject(n);
  }
  var Mn,
    Cn = 'unSend',
    Tn = 'success',
    En = 'fail',
    Dn = 'notStart',
    Sn = 'pending',
    kn = 'resolved',
    Rn = 'rejected',
    Ln = { type: 'Boolean', required: !0 },
    An = { type: 'number', required: !0 },
    On = null,
    bn = {
      hookGetAPITips: function (e) {
        On = e;
      },
      login: { userID: (J = { type: 'String', required: !0 }), userSig: J },
      addToBlacklist: { userIDList: (Q = { type: 'Array', required: !0 }) },
      removeFromBlacklist: { userIDList: Q },
      on: [
        {
          name: 'eventName',
          type: 'String',
          validator: function (e, t, n) {
            return (
              ('string' == typeof e && 0 !== e.length) ||
              (Yt({ api: t, paramName: n, desc: Xt(n) }), !1)
            );
          },
        },
        {
          name: 'handler',
          type: 'Function',
          validator: function (e, t, n) {
            return 'function' != typeof e
              ? (Yt({ api: t, paramName: n, desc: tn() }), !1)
              : ('' === e.name && Yt({ api: t, paramName: n, desc: fn() }), !0);
          },
        },
      ],
      once: [
        {
          name: 'eventName',
          type: 'String',
          validator: function (e, t, n) {
            return (
              ('string' == typeof e && 0 !== e.length) ||
              (Yt({ api: t, paramName: n, desc: Xt(n) }), !1)
            );
          },
        },
        {
          name: 'handler',
          type: 'Function',
          validator: function (e, t, n) {
            return 'function' != typeof e
              ? (Yt({ api: t, paramName: n, desc: tn() }), !1)
              : ('' === e.name && Yt({ api: t, paramName: n, desc: fn() }), !0);
          },
        },
      ],
      off: [
        {
          name: 'eventName',
          type: 'String',
          validator: function (e, t, n) {
            return (
              ('string' == typeof e && 0 !== e.length) ||
              (Yt({ api: t, paramName: n, desc: Xt(n) }), !1)
            );
          },
        },
        {
          name: 'handler',
          type: 'Function',
          validator: function (e, t, n) {
            return 'function' != typeof e
              ? (Yt({ api: t, paramName: n, desc: tn() }), !1)
              : ('' === e.name && Yt({ api: t, paramName: n, desc: fn() }), !0);
          },
        },
      ],
      sendMessage: [
        t({ name: 'message' }, ($ = { type: 'Object', required: !0 })),
      ],
      setMessageExtensions: [
        t(
          t({ name: 'message' }, $),
          {},
          {
            validator: function (e, t, n) {
              return (
                (e.status === Tn && !0 === e.isSupportExtension) ||
                (Yt({ api: t, paramName: n, desc: gn() }), !1)
              );
            },
          }
        ),
        t({ name: 'extensions' }, Q),
      ],
      getMessageExtensions: [
        t(
          t({ name: 'message' }, $),
          {},
          {
            validator: function (e, t, n) {
              return (
                (e.status === Tn && !0 === e.isSupportExtension) ||
                (Yt({ api: t, paramName: n, desc: gn() }), !1)
              );
            },
          }
        ),
      ],
      deleteMessageExtensions: [
        t(
          t({ name: 'message' }, $),
          {},
          {
            validator: function (e, t, n) {
              return (
                (e.status === Tn && !0 === e.isSupportExtension) ||
                (Yt({ api: t, paramName: n, desc: gn() }), !1)
              );
            },
          }
        ),
      ],
      addMessageReaction: [
        t(
          t({ name: 'message' }, $),
          {},
          {
            validator: function (e, t, n) {
              return (
                e.status === Tn ||
                (Yt({ api: t, paramName: n, desc: _n() }), !1)
              );
            },
          }
        ),
        t({ name: 'reactionID' }, J),
      ],
      removeMessageReaction: [
        t(
          t({ name: 'message' }, $),
          {},
          {
            validator: function (e, t, n) {
              return (
                e.status === Tn ||
                (Yt({ api: t, paramName: n, desc: _n() }), !1)
              );
            },
          }
        ),
        t({ name: 'reactionID' }, J),
      ],
      getMessageReactions: { messageList: t({}, Q) },
      getAllUserListOfMessageReaction: {
        message: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return (
                e.status === Tn ||
                (Yt({ api: t, paramName: n, desc: _n() }), !1)
              );
            },
          }
        ),
        reactionID: t({}, J),
        nextSeq: { type: 'Number' },
        count: { type: 'Number' },
      },
      getMessageList: {
        conversationID: t(t({}, J), {}, { validator: $t }),
        nextReqMessageID: { type: 'String' },
        count: {
          type: 'Number',
          validator: function (e, t, n) {
            return !(
              !ut(e) &&
              !/^[1-9][0-9]*$/.test(e) &&
              (Yt({ api: t, paramName: n, desc: an() }), 1)
            );
          },
        },
      },
      getMessageListHopping: {
        conversationID: t(t({}, J), {}, { validator: $t }),
        sequence: { type: 'Number' },
        time: { type: 'Number' },
        direction: {
          type: 'Number',
          validator: function (e, t, n) {
            return !(
              !ut(e) &&
              0 !== e &&
              1 !== e &&
              (Yt({ api: t, paramName: n, desc: On('0Or1RequiredLog') }), 1)
            );
          },
        },
        count: {
          type: 'Number',
          validator: function (e, t, n) {
            return !(
              !ut(e) &&
              !/^[1-9][0-9]*$/.test(e) &&
              (Yt({ api: t, paramName: n, desc: an }), 1)
            );
          },
        },
      },
      setMessageRead: { conversationID: t(t({}, J), {}, { validator: $t }) },
      setAllMessageRead: {
        scope: {
          type: 'String',
          required: !1,
          validator: function (e, t, n) {
            return (
              !e ||
              -1 !==
                [
                  D.READ_ALL_C2C_MSG,
                  D.READ_ALL_GROUP_MSG,
                  D.READ_ALL_MSG,
                ].indexOf(e) ||
              (Yt({ api: t, paramName: n, desc: On('ValidScopeRequired') }), !1)
            );
          },
        },
      },
      getConversationProfile: [
        t(t({ name: 'conversationID' }, J), {}, { validator: $t }),
      ],
      clearHistoryMessage: [
        t(t({ name: 'conversationID' }, J), {}, { validator: $t }),
      ],
      pinConversation: {
        conversationID: t(t({}, J), {}, { validator: $t }),
        isPinned: t({}, Ln),
      },
      setConversationDraft: {
        conversationID: t(t({}, J), {}, { validator: $t }),
        draftText: {
          type: 'String',
          validator: function (e, t, n) {
            return !!ct(e) || (Yt({ api: t, paramName: n, desc: Jt() }), !1);
          },
        },
      },
      setConversationCustomData: {
        conversationIDList: t({}, Q),
        customData: {
          type: 'String',
          validator: function (e, t, n) {
            return ct(e)
              ? !(
                  256 < e.length &&
                  (Yt({ api: t, paramName: n, desc: sn(n, 256) }), 1)
                )
              : (Yt({ api: t, paramName: n, desc: Jt() }), !1);
          },
        },
      },
      markConversation: {
        conversationIDList: t({}, Q),
        markType: {
          type: 'number',
          validator: function (e, t, n) {
            return Ke(e)
              ? e <= 0
                ? (Yt({
                    api: t,
                    paramName: n,
                    desc: On('NumberGreaterThanLog', n, 0),
                  }),
                  !1)
                : !(
                    e >= Math.pow(2, 64) &&
                    (Yt({
                      api: t,
                      paramName: n,
                      desc: On('NumberLessThanLog', n, 'Math.pow(2,64)'),
                    }),
                    1)
                  )
              : (Yt({ api: t, paramName: n, desc: Zt() }), !1);
          },
        },
        enableMark: t({}, Ln),
      },
      createConversationGroup: {
        conversationIDList: t({}, Q),
        groupName: t(
          t({}, J),
          {},
          {
            validator: function (e, t, n) {
              return !(
                !e ||
                (32 < e.length &&
                  (Yt({ api: t, paramName: n, desc: sn(n, 32) }), 1))
              );
            },
          }
        ),
      },
      deleteConversationGroup: [t({ name: 'groupName' }, J)],
      renameConversationGroup: {
        oldName: t({}, J),
        newName: t(
          t({}, J),
          {},
          {
            validator: function (e, t, n) {
              return !(
                !e ||
                (32 < e.length &&
                  (Yt({ api: t, paramName: n, desc: sn(n, 32) }), 1))
              );
            },
          }
        ),
      },
      addConversationsToGroup: {
        conversationIDList: t({}, Q),
        groupName: t({}, J),
      },
      deleteConversationsFromGroup: {
        conversationIDList: t({}, Q),
        groupName: t({}, J),
      },
      getGroupList: { groupProfileFilter: { type: 'Array' } },
      getGroupProfile: {
        groupID: J,
        groupCustomFieldFilter: { type: 'Array' },
        memberCustomFieldFilter: { type: 'Array' },
      },
      getGroupProfileAdvance: { groupIDList: Q },
      createGroup: { name: J },
      joinGroup: {
        groupID: J,
        type: { type: 'String' },
        applyMessage: { type: 'String' },
      },
      quitGroup: [t({ name: 'groupID' }, J)],
      handleApplication: {
        message: $,
        handleAction: J,
        handleMessage: { type: 'String' },
      },
      changeGroupOwner: { groupID: J, newOwnerID: J },
      updateGroupProfile: { groupID: J, muteAllMembers: { type: 'Boolean' } },
      dismissGroup: [t({ name: 'groupID' }, J)],
      searchGroupByID: [t({ name: 'groupID' }, J)],
      getGroupOnlineMemberCount: [t({ name: 'groupID' }, J)],
      initGroupAttributes: {
        groupID: J,
        groupAttributes: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              var i = !0;
              return (
                Object.keys(e).forEach(function (o) {
                  if (!ct(e[o]))
                    return (
                      Yt({ api: t, paramName: n, desc: un('value') }), (i = !1)
                    );
                }),
                i
              );
            },
          }
        ),
      },
      setGroupAttributes: {
        groupID: J,
        groupAttributes: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              var i = !0;
              return (
                Object.keys(e).forEach(function (o) {
                  if (!ct(e[o]))
                    return (
                      Yt({ api: t, paramName: n, desc: un('value') }), (i = !1)
                    );
                }),
                i
              );
            },
          }
        ),
      },
      deleteGroupAttributes: {
        groupID: J,
        keyList: {
          type: 'Array',
          validator: function (e, t, n) {
            return ut(e) || !$e(e)
              ? (Yt({ api: t, paramName: n, desc: nn() }), !1)
              : !!Ve(e) ||
                  ((i = !0),
                  e.forEach(function (e) {
                    if (!ct(e))
                      return (
                        Yt({
                          api: t,
                          paramName: n,
                          desc: On('StringArrayRequiredLog'),
                        }),
                        (i = !1)
                      );
                  }),
                  i);
            var i;
          },
        },
      },
      getGroupAttributes: {
        groupID: J,
        keyList: {
          type: 'Array',
          validator: function (e, t, n) {
            return ut(e) || !$e(e)
              ? (Yt({ api: t, paramName: n, desc: nn() }), !1)
              : !!Ve(e) ||
                  ((i = !0),
                  e.forEach(function (e) {
                    if (!ct(e))
                      return (
                        Yt({ api: t, paramName: n, desc: un('key') }), (i = !1)
                      );
                  }),
                  i);
            var i;
          },
        },
      },
      setGroupCounters: { groupID: J, counters: $ },
      increaseGroupCounter: { groupID: J, key: J, value: An },
      decreaseGroupCounter: { groupID: J, key: J, value: An },
      getGroupCounters: { groupID: J },
      getGroupMemberList: { groupID: J, count: { type: 'Number' } },
      getGroupMemberProfile: {
        groupID: J,
        userIDList: Q,
        memberCustomFieldFilter: { type: 'Array' },
      },
      addGroupMember: { groupID: J, userIDList: Q },
      setGroupMemberRole: { groupID: J, userID: J, role: J },
      setGroupMemberMuteTime: {
        groupID: J,
        userID: J,
        muteTime: {
          type: 'Number',
          validator: function (e) {
            return 0 <= e;
          },
        },
      },
      setGroupMemberNameCard: {
        groupID: J,
        userID: { type: 'String' },
        nameCard: {
          type: 'String',
          validator: function (e, t, n) {
            return ct(e)
              ? (e.length, !0)
              : (Yt({ api: t, paramName: n, desc: Jt() }), !1);
          },
        },
      },
      setGroupMemberCustomField: {
        groupID: J,
        userID: { type: 'String' },
        memberCustomField: Q,
      },
      deleteGroupMember: { groupID: J },
      markGroupMemberList: {
        groupID: J,
        markType: {
          type: 'number',
          validator: function (e, t, n) {
            return Ke(e)
              ? !(
                  e < 1e3 && (Yt({ api: t, paramName: n, desc: cn(n, 1e3) }), 1)
                )
              : (Yt({ api: t, paramName: n, desc: Zt() }), !1);
          },
        },
        userIDList: t({}, Q),
        enableMark: t({}, Ln),
      },
      createTextMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return ze(e)
                ? ct(e.text)
                  ? 0 !== e.text.length ||
                    (Yt({ api: t, paramName: 'payload.text', desc: dn() }), !1)
                  : (Yt({ api: t, paramName: 'payload.text', desc: Jt() }), !1)
                : (Yt({ api: t, paramName: n, desc: ln() }), !1);
            },
          }
        ),
      },
      createTextAtMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return ze(e)
                ? ct(e.text)
                  ? 0 === e.text.length
                    ? (Yt({ api: t, paramName: 'payload.text', desc: dn() }),
                      !1)
                    : !(
                        e.atUserList &&
                        !$e(e.atUserList) &&
                        (Yt({
                          api: t,
                          paramName: 'payload.atUserList',
                          desc: nn(),
                        }),
                        1)
                      )
                  : (Yt({ api: t, paramName: 'payload.text', desc: Jt() }), !1)
                : (Yt({ api: t, paramName: n, desc: ln() }), !1);
            },
          }
        ),
      },
      createCustomMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return ze(e)
                ? e.data && !ct(e.data)
                  ? (Yt({ api: t, paramName: 'payload.data', desc: Jt() }), !1)
                  : e.description && !ct(e.description)
                    ? (Yt({
                        api: t,
                        paramName: 'payload.description',
                        desc: Jt(),
                      }),
                      !1)
                    : !(
                        e.extension &&
                        !ct(e.extension) &&
                        (Yt({
                          api: t,
                          paramName: 'payload.extension',
                          desc: Jt(),
                        }),
                        1)
                      )
                : (Yt({ api: t, paramName: 'payload', desc: ln() }), !1);
            },
          }
        ),
      },
      createImageMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              if (!ze(e)) return Yt({ api: t, paramName: n, desc: ln() }), !1;
              if (ut(e.file))
                return (
                  Yt({ api: t, paramName: 'payload.file', desc: Qt() }), !1
                );
              if (ee) {
                if (!(e.file instanceof HTMLInputElement || je(e.file)))
                  return ze(e.file) && void 0 !== Yn
                    ? (0 !== e.file.tempFilePaths.length &&
                        0 !== e.file.tempFiles.length) ||
                        (Yt({ api: t, paramName: 'payload.file', desc: pn() }),
                        !1)
                    : (Yt({ api: t, paramName: 'payload.file', desc: en() }),
                      !1);
                if (
                  e.file instanceof HTMLInputElement &&
                  0 === e.file.files.length
                )
                  return (
                    Yt({ api: t, paramName: 'payload.file', desc: pn() }), !1
                  );
              }
              return !0;
            },
            onProgress: {
              type: 'Function',
              required: !1,
              validator: function (e, t, n) {
                return ut(e) && Yt({ api: t, paramName: n, desc: rn() }), !0;
              },
            },
          }
        ),
      },
      createAudioMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return !!ze(e) || (Yt({ api: t, paramName: n, desc: ln() }), !1);
            },
          }
        ),
        onProgress: {
          type: 'Function',
          required: !1,
          validator: function (e, t, n) {
            return ut(e) && Yt({ api: t, paramName: n, desc: rn() }), !0;
          },
        },
      },
      createVideoMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              if (!ze(e)) return Yt({ api: t, paramName: n, desc: ln() }), !1;
              if (ut(e.file))
                return (
                  Yt({ api: t, paramName: 'payload.file', desc: Qt() }), !1
                );
              if (ee) {
                if (!(e.file instanceof HTMLInputElement || je(e.file)))
                  return ze(e.file) && void 0 !== Yn
                    ? !!je(e.file.tempFile) ||
                        (Yt({ api: t, paramName: 'payload.file', desc: pn() }),
                        !1)
                    : (Yt({ api: t, paramName: 'payload.file', desc: en() }),
                      !1);
                if (
                  e.file instanceof HTMLInputElement &&
                  0 === e.file.files.length
                )
                  return (
                    Yt({ api: t, paramName: 'payload.file', desc: pn() }), !1
                  );
              }
              return !0;
            },
          }
        ),
        onProgress: {
          type: 'Function',
          required: !1,
          validator: function (e, t, n) {
            return ut(e) && Yt({ api: t, paramName: n, desc: rn() }), !0;
          },
        },
      },
      createFaceMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return ze(e)
                ? Ke(e.index)
                  ? !!ct(e.data) ||
                    (Yt({ api: t, paramName: 'payload.data', desc: Jt() }), !1)
                  : (Yt({ api: t, paramName: 'payload.index', desc: Zt() }), !1)
                : (Yt({ api: t, paramName: n, desc: ln() }), !1);
            },
          }
        ),
      },
      createFileMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              if (!ze(e)) return Yt({ api: t, paramName: n, desc: ln() }), !1;
              if (ut(e.file))
                return (
                  Yt({ api: t, paramName: 'payload.file', desc: Qt() }), !1
                );
              if (ee) {
                if (!(e.file instanceof HTMLInputElement || je(e.file)))
                  return ze(e.file) && void 0 !== Yn
                    ? (0 !== e.file.tempFilePaths.length &&
                        0 !== e.file.tempFiles.length) ||
                        (Yt({ api: t, paramName: 'payload.file', desc: pn() }),
                        !1)
                    : (Yt({ api: t, paramName: 'payload.file', desc: en() }),
                      !1);
                if (
                  e.file instanceof HTMLInputElement &&
                  0 === e.file.files.length
                )
                  return (
                    Yt({ api: t, paramName: 'payload.file', desc: pn() }), !1
                  );
              }
              return !0;
            },
          }
        ),
        onProgress: {
          type: 'Function',
          required: !1,
          validator: function (e, t, n) {
            return ut(e) && Yt({ api: t, paramName: n, desc: rn() }), !0;
          },
        },
      },
      createLocationMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return ze(e)
                ? ct(e.description)
                  ? Ke(e.longitude)
                    ? !!Ke(e.latitude) ||
                      (Yt({
                        api: t,
                        paramName: 'payload.latitude',
                        desc: Zt(),
                      }),
                      !1)
                    : (Yt({
                        api: t,
                        paramName: 'payload.longitude',
                        desc: Zt(),
                      }),
                      !1)
                  : (Yt({
                      api: t,
                      paramName: 'payload.description',
                      desc: Jt(),
                    }),
                    !1)
                : (Yt({ api: t, paramName: n, desc: ln() }), !1);
            },
          }
        ),
      },
      createMergerMessage: {
        to: J,
        conversationType: J,
        payload: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              if (Ve(e.messageList))
                return (
                  Yt({ api: t, paramName: 'payload.messageList', desc: on() }),
                  !1
                );
              if (Ve(e.compatibleText))
                return (
                  Yt({
                    api: t,
                    paramName: 'payload.compatibleText',
                    desc: Xt('compatibleText'),
                  }),
                  !1
                );
              var i = !1;
              return (
                e.messageList.forEach(function (e) {
                  e.status === En && (i = !0);
                }),
                !i ||
                  (Yt({
                    api: t,
                    paramName: 'payload.messageList',
                    desc: On('MergeFailedMessageLog'),
                  }),
                  !1)
              );
            },
          }
        ),
      },
      revokeMessage: [
        t(
          t({ name: 'message' }, $),
          {},
          {
            validator: function (e, t, n) {
              return Ve(e)
                ? (Yt({ api: t, paramName: n, desc: hn() }), !1)
                : e.conversationType === D.CONV_SYSTEM
                  ? (Yt({
                      api: t,
                      paramName: n,
                      desc: On('MessageCanBeRevokedDesc'),
                    }),
                    !1)
                  : !0 !== e.isRevoked ||
                    (Yt({
                      api: t,
                      paramName: n,
                      desc: On('MessageRevokedLog'),
                    }),
                    !1);
            },
          }
        ),
      ],
      deleteMessage: [
        t(
          t({ name: 'messageList' }, Q),
          {},
          {
            validator: function (e, t, n) {
              return !Ve(e) || (Yt({ api: t, paramName: n, desc: on() }), !1);
            },
          }
        ),
      ],
      translateText: {
        sourceTextList: Q,
        sourceLanguage: J,
        targetLanguage: J,
      },
      convertVoiceToText: {
        message: t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return Ve(e)
                ? (Yt({ api: t, paramName: n, desc: hn() }), !1)
                : (e.type === D.MSG_AUDIO && e.status === Tn) ||
                    (Yt({
                      api: t,
                      paramName: n,
                      desc: On('AudioMessageRequiredLog'),
                    }),
                    !1);
            },
          }
        ),
      },
      modifyMessage: [
        t(
          t({ name: 'message' }, $),
          {},
          {
            validator: function (e, t, n) {
              return Ve(e)
                ? (Yt({ api: t, paramName: n, desc: hn() }), !1)
                : e.conversationType === D.CONV_SYSTEM
                  ? (Yt({
                      api: t,
                      paramName: n,
                      desc: On('MessageCanBeModifiedLog'),
                    }),
                    !1)
                  : !0 !== e._onlineOnlyFlag ||
                    (Yt({
                      api: t,
                      paramName: n,
                      desc: On('OnlineMessageNotSupportLog'),
                    }),
                    !1);
            },
          }
        ),
      ],
      searchCloudMessages: {
        keywordList: {
          type: 'Array',
          required: !1,
          validator: function (e, t, n) {
            return !(
              e &&
              ($e(e)
                ? 0 === e.length
                  ? (Yt({ api: t, paramName: n, desc: on() }), 1)
                  : 5 < e.length &&
                    (Yt({ api: t, paramName: n, desc: vn(n, 5) }), 1)
                : (Yt({ api: t, paramName: n, desc: nn() }), 1))
            );
          },
        },
        keywordListMatchType: {
          type: 'String',
          required: !1,
          validator: function (e, t, n) {
            return (
              !e ||
              'or' === e ||
              'and' === e ||
              Yt({
                api: t,
                paramName: n,
                desc: ''.concat(e, ' is invalid match type'),
              })
            );
          },
        },
        senderUserIDList: {
          type: 'Array',
          required: !1,
          validator: function (e, t, n) {
            return !(
              e &&
              ($e(e)
                ? (0 === e.length && Yt({ api: t, paramName: n, desc: on() }),
                  5 < e.length &&
                    (Yt({ api: t, paramName: n, desc: vn(n, 5) }), 1))
                : (Yt({ api: t, paramName: n, desc: nn() }), 1))
            );
          },
        },
        messageTypeList: {
          type: 'Array',
          required: !1,
          validator: function (e, t, n) {
            if (!e) return !0;
            if (!$e(e)) return Yt({ api: t, paramName: n, desc: nn() }), !1;
            0 === e.length && Yt({ api: t, paramName: n, desc: on() });
            var i = [
              D.MSG_TEXT,
              D.MSG_IMAGE,
              D.MSG_AUDIO,
              D.MSG_FILE,
              D.MSG_VIDEO,
              D.MSG_LOCATION,
              D.MSG_CUSTOM,
              D.MSG_MERGER,
            ];
            return !(
              0 <
                e.filter(function (e) {
                  return -1 === i.indexOf(e);
                }).length &&
              (Yt({
                api: t,
                paramName: n,
                desc: On('ContainsUnsupportedMessageTypeLog', n),
              }),
              1)
            );
          },
        },
        conversationID: {
          type: 'String',
          required: !1,
          validator: function (e) {
            return !e || $t(e);
          },
        },
        timePosition: {
          type: 'number',
          required: !1,
          validator: function (e, t, n) {
            return !(
              e &&
              e < 0 &&
              (Yt({ api: t, paramName: n, desc: cn(n, 0) }), 1)
            );
          },
        },
        timePeriod: {
          type: 'number',
          required: !1,
          validator: function (e, t, n) {
            return !(
              e &&
              e < 0 &&
              (Yt({ api: t, paramName: n, desc: cn(n, 0) }), 1)
            );
          },
        },
        cursor: { type: 'String', required: !1 },
      },
      getUserProfile: {
        userIDList: {
          type: 'Array',
          validator: function (e, t, n) {
            return $e(e)
              ? (0 === e.length && Yt({ api: t, paramName: n, desc: on() }), !0)
              : (Yt({ api: t, paramName: n, desc: nn() }), !1);
          },
        },
      },
      updateMyProfile: {
        profileCustomField: {
          type: 'Array',
          validator: function (e, t, n) {
            return (
              !!ut(e) ||
              !!$e(e) ||
              (Yt({ api: t, paramName: n, desc: nn() }), !1)
            );
          },
        },
      },
      setSelfStatus: {
        customStatus: {
          type: 'String',
          validator: function (e, t, n) {
            return !!ct(e) || (Yt({ api: t, paramName: n, desc: Jt() }), !1);
          },
        },
      },
      getUserStatus: {
        userIDList: {
          type: 'Array',
          validator: function (e, t, n) {
            return $e(e)
              ? 0 !== e.length || (Yt({ api: t, paramName: n, desc: on() }), !1)
              : (Yt({ api: t, paramName: n, desc: nn() }), !1);
          },
        },
      },
      subscribeUserStatus: {
        userIDList: {
          type: 'Array',
          validator: function (e, t, n) {
            return $e(e)
              ? 0 !== e.length || (Yt({ api: t, paramName: n, desc: on() }), !1)
              : (Yt({ api: t, paramName: n, desc: nn() }), !1);
          },
        },
      },
      unsubscribeUserStatus: {
        userIDList: {
          type: 'Array',
          validator: function (e, t, n) {
            return (
              !e || !!$e(e) || (Yt({ api: t, paramName: n, desc: nn() }), !1)
            );
          },
        },
      },
      addFriend: {
        to: J,
        source: {
          type: 'String',
          required: !0,
          validator: function (e, t, n) {
            return !(
              !e ||
              (e.startsWith('AddSource_Type_')
                ? 8 < e.replace('AddSource_Type_', '').length &&
                  (Yt({ api: t, paramName: n, desc: sn('keyword', 8) }), 1)
                : (Yt({ api: t, paramName: n, desc: On('SourcePrefixLog') }),
                  1))
            );
          },
        },
        remark: {
          type: 'String',
          required: !1,
          validator: function (e, t, n) {
            return !(
              ct(e) &&
              96 < e.length &&
              (Yt({ api: t, paramName: n, desc: sn(n, 96) }), 1)
            );
          },
        },
      },
      deleteFriend: { userIDList: Q },
      checkFriend: { userIDList: Q },
      getFriendProfile: { userIDList: Q },
      updateFriend: {
        userID: J,
        remark: {
          type: 'String',
          required: !1,
          validator: function (e, t, n) {
            return !(
              ct(e) &&
              96 < e.length &&
              (Yt({ api: t, paramName: n, desc: sn(n, 96) }), 1)
            );
          },
        },
        friendCustomField: {
          type: 'Array',
          required: !1,
          validator: function (e, t, n) {
            if (e) {
              if (!$e(e)) return Yt({ api: t, paramName: n, desc: nn() }), !1;
              var i = !0;
              return (
                e.forEach(function (e) {
                  return ct(e.key) && -1 !== e.key.indexOf('Tag_SNS_Custom')
                    ? ct(e.value)
                      ? 8 < e.key.replace('Tag_SNS_Custom_', '').length
                        ? (Yt({ api: t, paramName: n, desc: sn('keyword', 8) }),
                          (i = !1))
                        : void 0
                      : (Yt({ api: t, paramName: n, desc: un('value') }),
                        (i = !1))
                    : (Yt({
                        api: t,
                        paramName: n,
                        desc: On('FriendCustomFieldPrefixLog'),
                      }),
                      (i = !1));
                }),
                i
              );
            }
            return !0;
          },
        },
      },
      acceptFriendApplication: { userID: J },
      refuseFriendApplication: { userID: J },
      deleteFriendApplication: { userID: J },
      createFriendGroup: { name: J },
      deleteFriendGroup: { name: J },
      addToFriendGroup: { name: J, userIDList: Q },
      removeFromFriendGroup: { name: J, userIDList: Q },
      renameFriendGroup: { oldName: J, newName: J },
      sendMessageReadReceipt: [
        {
          name: 'messageList',
          type: 'Array',
          validator: function (e, t, n) {
            return $e(e)
              ? 0 !== e.length || (Yt({ api: t, paramName: n, desc: on() }), !1)
              : (Yt({ api: t, paramName: n, desc: nn() }), !1);
          },
        },
      ],
      getMessageReadReceiptList: [
        {
          name: 'messageList',
          type: 'Array',
          validator: function (e, t, n) {
            return $e(e)
              ? 0 !== e.length || (Yt({ api: t, paramName: n, desc: on() }), !1)
              : (Yt({ api: t, paramName: n, desc: nn() }), !1);
          },
        },
      ],
      createTopicInCommunity: { groupID: J, topicName: J },
      deleteTopicFromCommunity: {
        groupID: J,
        topicIDList: {
          type: 'Array',
          validator: function (e, t, n) {
            return (
              !e || !!$e(e) || (Yt({ api: t, paramName: n, desc: nn() }), !1)
            );
          },
        },
      },
      updateTopicProfile: { groupID: J, topicID: J },
      getTopicList: {
        groupID: J,
        topicIDList: {
          type: 'Array',
          validator: function (e, t, n) {
            return (
              !e || !!$e(e) || (Yt({ api: t, paramName: n, desc: nn() }), !1)
            );
          },
        },
      },
      followUser: [t({ name: 'userIDList' }, Q)],
      unfollowUser: [t({ name: 'userIDList' }, Q)],
      getMyFollowingList: [
        t(t({ name: 'startIndex' }, J), {}, { required: !1 }),
      ],
      getMyFollowersList: [
        t(t({ name: 'startIndex' }, J), {}, { required: !1 }),
      ],
      getMutualFollowersList: [
        t(t({ name: 'startIndex' }, J), {}, { required: !1 }),
      ],
      getUserFollowInfo: [
        t(t({ name: 'userIDList' }, Q), {}, { required: !1 }),
      ],
      checkFollowType: [t({ name: 'userIDList' }, Q)],
      addSignalingListener: [
        {
          name: 'eventName',
          type: 'String',
          validator: function (e, t, n) {
            return (
              ('string' == typeof e && 0 !== e.length) ||
              (Yt({ api: t, paramName: n, desc: Xt(n) }), !1)
            );
          },
        },
        {
          name: 'handler',
          type: 'Function',
          validator: function (e, t, n) {
            return 'function' != typeof e
              ? (Yt({ api: t, paramName: n, desc: tn() }), !1)
              : ('' === e.name && Yt({ api: t, paramName: n, desc: fn() }), !0);
          },
        },
      ],
      removeSignalingListener: [
        {
          name: 'eventName',
          type: 'String',
          validator: function (e, t, n) {
            return (
              ('string' == typeof e && 0 !== e.length) ||
              (Yt({ api: t, paramName: n, desc: Xt(n) }), !1)
            );
          },
        },
        {
          name: 'handler',
          type: 'Function',
          validator: function (e, t, n) {
            return 'function' != typeof e
              ? (Yt({ api: t, paramName: n, desc: tn() }), !1)
              : ('' === e.name && Yt({ api: t, paramName: n, desc: fn() }), !0);
          },
        },
      ],
      invite: { userID: J },
      inviteSync: [
        t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return ze(e)
                ? !!ct(e.userID) ||
                    (Yt({ api: t, paramName: 'options.userID', desc: Jt() }),
                    !1)
                : (Yt({ api: t, paramName: 'options', desc: ln() }), !1);
            },
          }
        ),
        {
          name: 'successCb',
          type: 'Function',
          required: !1,
          validator: function (e, t, n) {
            return ut(e) && Yt({ api: t, paramName: n, desc: tn() }), !0;
          },
        },
        {
          name: 'errorCb',
          type: 'Function',
          required: !1,
          validator: function (e, t, n) {
            return ut(e) && Yt({ api: t, paramName: n, desc: tn() }), !0;
          },
        },
      ],
      inviteInGroup: { groupID: J, inviteeList: Q },
      inviteInGroupSync: [
        t(
          t({}, $),
          {},
          {
            validator: function (e, t, n) {
              return ze(e)
                ? ct(e.groupID)
                  ? !!$e(e.inviteeList) ||
                    (Yt({
                      api: t,
                      paramName: 'options.inviteeList',
                      desc: nn(),
                    }),
                    !1)
                  : (Yt({ api: t, paramName: 'options.groupID', desc: Jt() }),
                    !1)
                : (Yt({ api: t, paramName: 'options', desc: ln() }), !1);
            },
          }
        ),
        {
          name: 'successCb',
          type: 'Function',
          required: !1,
          validator: function (e, t, n) {
            return ut(e) && Yt({ api: t, paramName: n, desc: tn() }), !0;
          },
        },
        {
          name: 'errorCb',
          type: 'Function',
          required: !1,
          validator: function (e, t, n) {
            return ut(e) && Yt({ api: t, paramName: n, desc: tn() }), !0;
          },
        },
      ],
      accept: { inviteID: J },
      reject: { inviteID: J },
      getSignalingInfo: [
        t(
          t({ name: 'message' }, $),
          {},
          {
            validator: function (e, t, n) {
              return !Ve(e) || (Yt({ api: t, paramName: n, desc: hn() }), !1);
            },
          }
        ),
      ],
      modifyInvitation: { inviteID: J, data: J },
    },
    Nn = {
      login: 1,
      logout: 1,
      getLoginUser: 1,
      on: 1,
      once: 1,
      off: 1,
      setLogLevel: 1,
      registerPlugin: 1,
      destroy: 1,
      isReady: 1,
      createTextMessage: 1,
      createTextAtMessage: 1,
      createImageMessage: 1,
      createAudioMessage: 1,
      createVideoMessage: 1,
      createCustomMessage: 1,
      createFaceMessage: 1,
      createFileMessage: 1,
      createLocationMessage: 1,
      createMergerMessage: 1,
      downloadMergerMessage: 1,
      createForwardMessage: 1,
      sendMessage: 1,
      resendMessage: 1,
      revokeMessage: 1,
      deleteMessage: 1,
      translateText: 1,
      convertVoiceToText: 1,
      modifyMessage: 1,
      searchCloudMessages: 1,
      sendMessageReadReceipt: 1,
      getGroupMessageReadMemberList: 1,
      getMessageReadReceiptList: 1,
      setMessageExtensions: 1,
      getMessageExtensions: 1,
      deleteMessageExtensions: 1,
      addMessageReaction: 1,
      removeMessageReaction: 1,
      getMessageReactions: 1,
      getAllUserListOfMessageReaction: 1,
      getMessageList: 1,
      findMessage: 1,
      getMessageListHopping: 1,
      setMessageRead: 1,
      setAllMessageRead: 1,
      getConversationList: 1,
      getConversationProfile: 1,
      deleteConversation: 1,
      setConversationDraft: 1,
      pinConversation: 1,
      getTotalUnreadMessageCount: 1,
      setConversationCustomData: 1,
      markConversation: 1,
      createConversationGroup: 1,
      getConversationGroupList: 1,
      deleteConversationGroup: 1,
      renameConversationGroup: 1,
      addConversationsToGroup: 1,
      deleteConversationsFromGroup: 1,
      clearHistoryMessage: 1,
      setMessageRemindType: 1,
      setAllReceiveMessageOpt: 1,
      getAllReceiveMessageOpt: 1,
      getGroupList: 1,
      getGroupProfile: 1,
      createGroup: 1,
      joinGroup: 1,
      updateGroupProfile: 1,
      quitGroup: 1,
      dismissGroup: 1,
      changeGroupOwner: 1,
      searchGroupByID: 1,
      getGroupApplicationList: 1,
      handleGroupApplication: 1,
      initGroupAttributes: 1,
      setGroupAttributes: 1,
      deleteGroupAttributes: 1,
      getGroupAttributes: 1,
      setGroupCounters: 1,
      increaseGroupCounter: 1,
      decreaseGroupCounter: 1,
      getGroupCounters: 1,
      getJoinedCommunityList: 1,
      createTopicInCommunity: 1,
      deleteTopicFromCommunity: 1,
      updateTopicProfile: 1,
      getTopicList: 1,
      getGroupMemberProfile: 1,
      getGroupMemberList: 1,
      addGroupMember: 1,
      deleteGroupMember: 1,
      setGroupMemberNameCard: 1,
      setGroupMemberMuteTime: 1,
      setGroupMemberRole: 1,
      setGroupMemberCustomField: 1,
      getGroupOnlineMemberCount: 1,
      markGroupMemberList: 1,
      getMyProfile: 1,
      getUserProfile: 1,
      updateMyProfile: 1,
      setSelfStatus: 1,
      getUserStatus: 1,
      subscribeUserStatus: 1,
      unsubscribeUserStatus: 1,
      getBlacklist: 1,
      addToBlacklist: 1,
      removeFromBlacklist: 1,
      getFriendList: 1,
      addFriend: 1,
      deleteFriend: 1,
      checkFriend: 1,
      updateFriend: 1,
      getFriendProfile: 1,
      getFriendApplicationList: 1,
      refuseFriendApplication: 1,
      deleteFriendApplication: 1,
      acceptFriendApplication: 1,
      setFriendApplicationRead: 1,
      getFriendGroupList: 1,
      createFriendGroup: 1,
      renameFriendGroup: 1,
      deleteFriendGroup: 1,
      addToFriendGroup: 1,
      removeFromFriendGroup: 1,
      followUser: 1,
      unfollowUser: 1,
      getMyFollowingList: 1,
      getMyFollowersList: 1,
      getMutualFollowersList: 1,
      getUserFollowInfo: 1,
      checkFollowType: 1,
      callExperimentalAPI: 1,
      addSignalingListener: 1,
      removeSignalingListener: 1,
      invite: 1,
      inviteSync: 1,
      inviteInGroup: 1,
      inviteInGroupSync: 1,
      cancel: 1,
      accept: 1,
      reject: 1,
      getSignalingInfo: 1,
      modifyInvitation: 1,
    },
    Pn = (s(ri, p(Error)), (Mn = g(ri)), r(ri)),
    wn = {
      NO_SDKAPPID: 2e3,
      NO_ACCOUNT_TYPE: 2001,
      NO_IDENTIFIER: 2002,
      NO_USERSIG: 2003,
      NO_TINYID: 2022,
      NO_A2KEY: 2023,
      USER_NOT_LOGGED_IN: 2024,
      REPEAT_LOGIN: 2025,
      COS_UNDETECTED: 2040,
      COS_GET_SIG_FAIL: 2041,
      MSG_SEND_FAIL: 2100,
      MSG_SEND_FAIL_NOT_IN_AV: 2101,
      MSG_INSTANCE_REQUIRED: 2105,
      MSG_INVALID_CONV_TYPE: 2106,
      MSG_F_IS_EMPTY: 2108,
      MSG_ONPROGRESS_ERR: 2109,
      MSG_REVOKE_FAIL: 2110,
      MSG_DELETE_FAIL: 2111,
      MSG_UNREAD_ALL_FAIL: 2112,
      READ_RECEIPT_MSG_LIST_EMPTY: 2114,
      MSG_SEND_GRP_WITH_TOPIC_FAIL: 2115,
      CANNOT_DELETE_GRP_SYSTEM_NOTICE: 2116,
      TRANSLATE_TEXT_FAIL: 2117,
      VOICE_TO_TEXT_FAIL: 2118,
      UNSUPPORTED_VOICE_FORMAT: 2119,
      MSG_I_SELECT_F_FIRST: 2251,
      MSG_I_TYPES_LIMIT: 2252,
      MSG_I_SIZE_LIMIT: 2253,
      MSG_A_UPLOAD_FAIL: 2300,
      MSG_A_SIZE_LIMIT: 2301,
      MSG_V_UPLOAD_FAIL: 2350,
      MSG_V_SIZE_LIMIT: 2351,
      MSG_V_TYPES_LIMIT: 2352,
      MSG_F_UPLOAD_FAIL: 2400,
      MSG_F_SELECT_F_FIRST: 2401,
      MSG_F_SIZE_LIMIT: 2402,
      MSG_F_URL_IS_EMPTY: 2403,
      MSG_MERGER_TYPE_INVALID: 2450,
      MSG_MERGER_KEY_INVALID: 2451,
      MSG_MERGER_DOWNLOAD_FAIL: 2452,
      MSG_FORWARD_TYPE_INVALID: 2453,
      MSG_FORWARD_INVALID_ELEMENTS: 2454,
      MSG_MODIFY_CONFLICT: 2480,
      MSG_MODIFY_DISABLED_IN_AV: 2481,
      CONV_NOT_FOUND: 2500,
      USER_OR_GRP_NOT_FOUND: 2501,
      CONV_UN_RECORDED_TYPE: 2502,
      INVALID_CONV_ID: 2503,
      ILLEGAL_GRP_TYPE: 2600,
      CANNOT_JOIN_WORK: 2601,
      ILLEGAL_GRP_ID: 2602,
      CANNOT_FIND_GRP: 2603,
      CANNOT_CHANGE_OWNER_IN_AV: 2620,
      CANNOT_CHANGE_OWNER_TO_SELF: 2621,
      CANNOT_DISMISS_WORK: 2622,
      MEMBER_NOT_IN_GRP: 2623,
      JOIN_GRP_FAIL: 2660,
      CANNOT_ADD_MEMBER_IN_AV: 2661,
      CANNOT_JOIN_NON_AV_WITHOUT_LOGIN: 2662,
      NOT_OWNER: 2681,
      CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AV: 2682,
      INVALID_MEMBER_ROLE: 2683,
      CANNOT_SET_SELF_MEMBER_ROLE: 2684,
      CANNOT_MUTE_SELF: 2685,
      BAN_DURATION_INVALID: 2686,
      OPERATION_NOT_SUPPORTED_IN_AV: 2687,
      NOT_MY_FRIEND: 2700,
      ALREADY_MY_FRIEND: 2701,
      FRIEND_GRP_EXISTED: 2710,
      FRIEND_GRP_NOT_EXIST: 2711,
      FRIEND_APPLICATION_NOT_EXIST: 2716,
      UPDATE_PROFILE_INVALID_PARAM: 2721,
      UPDATE_PROFILE_NO_KEY: 2722,
      CANNOT_ADD_SELF_TO_BLACKLIST: 2742,
      NETWORK_ERROR: 2800,
      NETWORK_TIMEOUT: 2801,
      NO_NETWORK: 2805,
      UNCAUGHT_ERROR: 2903,
      INVALID_OPERATION: 2905,
      INVALID_TRTC_CMD: 2995,
      OVER_FREQUENCY_LIMIT: 2996,
      NO_PROTOCOL: 2997,
      NO_MODULE: 2998,
      SDK_IS_NOT_READY: 2999,
      LOGGING_IN: 3e3,
      LOGIN_FAILED: 3001,
      KICKED_OUT_MULT_DEVICE: 3002,
      KICKED_OUT_MULT_ACCOUNT: 3003,
      KICKED_OUT_USERSIG_EXPIRED: 3004,
      LOGGED_OUT: 3005,
      KICKED_OUT_REST_API: 3006,
      ILLEGAL_TOPIC_ID: 3021,
      NO_USE: 3122,
      PROFANITY_FOUND: 3123,
      OPTIONS_IS_EMPTY: 3153,
      MSG_A2KEY_EXPIRED: 20002,
      ACCOUNT_A2KEY_EXPIRED: 70001,
      HELLO_ANSWER_KICKED_OUT: 1002,
      OPEN_SERVICE_OVERLOAD_ERROR: 60022,
      SIGNALING_INVALID_INVITE_ID: 8010,
      SIGNALING_NO_PERMISSION: 8011,
      SIGNALING_ALREADY_EXISTS: 8012,
      INVALID_CANCEL_MESSAGE: 8020,
      MSG_SEARCH_CURSOR_INVALID: 27002,
      MSG_SEARCH_CURSOR_EXPIRED: 27003,
    },
    Un = null,
    Gn =
      (r(oi, [
        {
          key: 'isLoggedIn',
          value: function () {
            return this._m.get(12).isLoggedIn();
          },
        },
        {
          key: 'isOversea',
          value: function () {
            return this._m.get(12).isOversea();
          },
        },
        {
          key: 'isPrivateNetWork',
          value: function () {
            var e = this._m.get(12);
            return e.isPrivateNetWork() && !e.getFileDownloadProxy();
          },
        },
        {
          key: 'getFileDownloadProxy',
          value: function () {
            return this._m.get(12).getFileDownloadProxy();
          },
        },
        {
          key: 'getDowloadFileAuthKey',
          value: function () {
            return this._m.get(12).getDowloadFileAuthKey();
          },
        },
        {
          key: 'getMyUserID',
          value: function () {
            return this._m.get(12).getUserID();
          },
        },
        {
          key: 'getMyTinyID',
          value: function () {
            return this._m.get(12).getTinyID();
          },
        },
        {
          key: 'getSDKAppID',
          value: function () {
            return this._m.get(12).getSDKAppID();
          },
        },
        {
          key: 'isIntl',
          value: function () {
            return this._m.get(12).isIntl();
          },
        },
        {
          key: 'isUsingChatCore',
          value: function () {
            return this._m.get(12).isUsingChatCore();
          },
        },
        {
          key: 'isDevMode',
          value: function () {
            return this._m.get(12).isDevMode();
          },
        },
        {
          key: 'get',
          value: function (e) {
            return this._m.get(e);
          },
        },
        {
          key: 'getPlatform',
          value: function () {
            return ie;
          },
        },
        {
          key: 'getCloudConfig',
          value: function (e) {
            return this._m.get(23).getCloudConfig(e);
          },
        },
        {
          key: 'emitOEvt',
          value: function (e, t) {
            this._m.getOEmitInst().emit(e, t);
          },
        },
        {
          key: 'emitIEvt',
          value: function (e, t) {
            this._m.getIEmitInst().emit(e, t);
          },
        },
        {
          key: 'getIEmitInst',
          value: function () {
            return this._m.getIEmitInst();
          },
        },
        {
          key: 'generateTjgID',
          value: function (e) {
            return this._m.get(12).getTinyID() + '-' + e.random;
          },
        },
        {
          key: 'req',
          value: function (e) {
            return this._m.get(20).req(e);
          },
        },
        {
          key: 'canIUse',
          value: function (e) {
            return this._m.get(27).canIUse(e);
          },
        },
        {
          key: 'getErrMsg',
          value: function (e, t, n) {
            return this._m.getErrMsg(e, t, n);
          },
        },
        {
          key: 'warn',
          value: function (e, t, n) {
            (e = this.getErrMsg(e, t, n)) && Ae.w(e);
          },
        },
        {
          key: 'noUse',
          value: function (e) {
            var t = wn.NO_USE;
            return In({ code: t, message: this.getErrMsg(t, e) });
          },
        },
      ]),
      (An = oi),
      {
        LOGIN: 'wslogin',
        LOGOUT: 'wslogout',
        HELLO: 'wshello',
        KICK_OTHER: 'KickOther',
        SYNC_UNREAD_MSG: 'getmsg',
        SEND_C2C_MSG: 'sendmsg',
        SEND_GRP_MSG: 'send_group_msg',
        GET_USER_PROFILE: 'portrait_get_all',
        UPDATE_MY_PROFILE: 'portrait_set',
        GET_BL: 'black_list_get',
        ADD_TO_BL: 'black_list_add',
        RM_FROM_BL: 'black_list_delete',
        GET_FD_LIST: 'friend_get',
        GET_FD_PROFILE: 'friend_get_specified',
        CHECK_FD: 'friend_check',
        DEL_FD: 'friend_delete',
        ADD_FD: 'friend_add',
        UPDATE_FD: 'friend_update',
        RESPOND_FD_APPLICATION: 'friend_response',
        GET_FD_APPLICATION_LIST: 'pendency_get',
        DEL_FD_APPLICATION: 'pendency_delete',
        REFUSE_FD_APPLICATION: 'pendency_refuse',
        REPORT_FD_APPLICATION: 'pendency_report',
        GET_FD_GRP_LIST: 'group_get',
        CREATE_FD_GRP: 'group_add',
        DEL_FD_GRP: 'group_delete',
        UPDATE_FD_GRP: 'group_update',
        REVOKE_C2C_MSG: 'msgwithdraw',
        SET_C2C_MSG_READ: 'msgreaded',
        SET_C2C_PEER_MUTE_NOTIFICATIONS: 'set_c2c_peer_mute_notifications',
        GET_C2C_PEER_MUTE_NOTIFICATIONS: 'get_c2c_peer_mute_notifications',
        GET_C2C_ROAMING_MSG: 'getroammsg',
        GET_C2C_PEER_READ_TIME: 'get_peer_read_time',
        DEL_C2C_MSG: 'delete_c2c_msg_ramble',
        MODIFY_C2C_MSG: 'modify_c2c_msg',
        MODIFY_C2C_MSG_EXT: 'set_key_values',
        GET_C2C_MSG_EXT: 'get_key_values',
        ADD_C2C_MSG_REACTION: 'reaction_add',
        RM_C2C_MSG_REACTION: 'reaction_del',
        GET_C2C_MSG_REACTIONS: 'reaction_multi_stat',
        GET_C2C_MSG_REACTION_USER_LIST: 'reaction_iterate',
        PAGING_GET_CONV_LIST: 'page_get',
        DEL_CONV: 'batch_delete',
        CLEAR_HISTORY_MSG: 'clear_msg',
        PIN_CONV: 'top',
        DEL_GROUP_AT_TIPS: 'deletemsg',
        SET_CONV_CUSTOM_DATA: 'set_conv_custom_data',
        MARK_CONV: 'mark_contact',
        CREATE_CONV_GRP: 'create_contact_group',
        DEL_CONV_GRP: 'del_contact_group',
        RENAME_CONV_GRP: 'update_contact_group',
        ADD_CONV_TO_GRP: 'add_conv_to_group',
        DEL_CONV_FROM_GRP: 'del_conv_from_group',
        GET_CONV_GRP_LIST: 'get_contact_group',
        SEARCH_CONV_GRP_MARK: 'search_contact_group',
        GET_GRP_LIST: 'get_joined_group_list',
        GET_GRP_PROFILE: 'get_group_self_member_info',
        CREATE_GRP: 'create_group',
        DISMISS_GRP: 'destroy_group',
        UPDATE_GRP_PROFILE: 'modify_group_base_info',
        APPLY_JOIN_GRP: 'apply_join_group',
        APPLY_JOIN_GRP_NOAUTH: 'apply_join_group_noauth',
        QUIT_GRP: 'quit_group',
        SEARCH_GRP: 'get_group_public_info',
        CHANGE_GRP_OWNER: 'change_group_owner',
        HANDLE_GRP_APPLICATION: 'handle_apply_join_group',
        HANDLE_INVITE_JOIN_GRP: 'handle_invite_join_permission_group',
        HANDLE_GRP_INVITATION: 'handle_invite_join_group',
        REVOKE_GRP_MSG: 'group_msg_recall',
        SET_GRP_MSG_READ: 'msg_read_report',
        SET_ALL_MSG_READ: 'read_all_unread_msg',
        GET_GRP_ROAMING_MSG: 'group_msg_get',
        GET_READ_RECEIPT: 'get_group_msg_receipt',
        SEND_READ_RECEIPT: 'group_msg_receipt',
        SEND_C2C_READ_RECEIPT: 'c2c_msg_read_receipt',
        GET_READ_RECEIPT_DETAIL: 'get_group_msg_receipt_detail',
        GET_GRP_PENDENCY: 'get_pendency',
        DEL_GRP_SYSTEM_NOTICE: 'deletemsg',
        AV_POLLING: 'get_msg',
        AV_NOAUTH_POLLING: 'get_msg_noauth',
        GET_ONLINE_MBR_NUM: 'get_online_member_num',
        DEL_GRP_MSG: 'delete_group_ramble_msg_by_seq',
        MODIFY_GRP_MSG: 'modify_group_msg',
        SET_GRP_ATTR: 'set_group_attr',
        MODIFY_GRP_ATTR: 'modify_group_attr',
        DEL_GRP_ATTR: 'delete_group_attr',
        CLEAR_GRP_ATTR: 'clear_group_attr',
        GET_GRP_ATTR: 'get_group_attr',
        MODIFY_GRP_MSG_EXT: 'group_set_key_values',
        GET_GRP_MSG_EXT: 'group_get_key_values',
        GET_GRP_NOTIFY: 'batch_get_group_notify',
        UPDATE_GRP_COUNTER: 'update_group_counter',
        GET_GRP_COUNTER: 'get_group_counter',
        ADD_GRP_MSG_REACTION: 'group_reaction_add',
        RM_GRP_MSG_REACTION: 'group_reaction_del',
        GET_GRP_MSG_REACTIONS: 'group_reaction_multi_stat',
        GET_GRP_MSG_REACTION_USER_LIST: 'group_reaction_iterate',
        GET_GRP_MBR_LIST: 'get_group_member_info',
        GET_AV_MBR_LIST: 'get_members',
        GET_GRP_MBR_PROFILE: 'get_specified_group_member_info',
        ADD_GRP_MBR: 'add_group_member',
        DEL_GRP_MBR: 'delete_group_member',
        BAN_AV_MBR: 'ban_group_member',
        MODIFY_GRP_MBR_INFO: 'modify_group_member_info',
        MARK_AV_MBR_INFO: 'modify_user_info',
        COS_SIGN: 'cos',
        COS_PRE_SIG: 'pre_sig',
        SIMPLE_COS_PRE_SIG: 'simple_sig',
        GET_IMAGE_INFO: 'get_imageinfo',
        GET_IP: 'get_final_ip',
        VIDEO_COVER: 'video_cover',
        SSO_STAT: 'tim_web_report_v2',
        PING: 'alive',
        MSG_PUSH: 'msg_push',
        MSG_CLOUD_SEARCH: 'query',
        MULTI_MSG_PUSH: 'multi_msg_push_ws',
        MSG_PUSH_ACK: 'ws_msg_push_ack',
        STATUS_FORCE_OFFLINE: 'stat_forceoffline',
        UPLOAD_MERGER_MSG: 'save_relay_json_msg',
        DOWNLOAD_MERGER_MSG: 'get_relay_json_msg',
        FETCH_CLOUD_CTRL_CONFIG: 'fetch_config',
        PUSHED_CLOUD_CTRL_CONFIG: 'push_configv2',
        FETCH_COMMERCIAL_CONFIG: 'fetch_imsdk_purchase_bitsv2',
        PUSHED_COMMERCIAL_CONFIG: 'push_imsdk_purchase_bitsv2',
        OVERLOAD_NOTIFY: 'notify2',
        CREATE_TOPIC: 'create_topic',
        DEL_TOPIC: 'destroy_topic',
        UPDATE_TOPIC_PROFILE: 'modify_topic',
        GET_TOPIC_LIST: 'get_topic',
        SET_SELF_STATUS: 'ws_set_custom_status',
        GET_USER_STATUS: 'ws_get_user_status',
        SUB_USER_STATUS: 'ws_status_subscribe',
        UNSUB_USER_STATUS: 'ws_status_unsubscribe',
        STAT_BACKGROUND: 'ws_stat_background',
        STAT_FOREGROUND: 'ws_stat_foreground',
        SET_TOKEN: 'ws_stat_settoken',
        PUSH_REPORT: 'uniapp_sdk_report',
        GET_PROFANITY_LIST: 'get_local_words',
        TRANSLATE_TEXT: 'ws_batch_trans_text',
        VOICE_TO_TEXT: 'ws_sentence_recognition',
        FOLLOW: 'follow_add',
        UNFOLLOW: 'follow_delete',
        GET_FOLLOW: 'follow_get',
        GET_FOLLOW_INFO: 'follow_get_info',
        CHECK_FOLLOW_TYPE: 'follow_check',
        SET_ALL_RECEIVE_MSG_OPT: 'ws_set_do_not_disturb',
        GET_ALL_RECEIVE_MSG_OPT: 'ws_get_do_not_disturb',
      }),
    xn = 'networkRTT',
    Fn = 'messageE2EDelay',
    qn = 'sendMessageC2C',
    Vn = 'sendMessageGroup',
    Bn = 'sendMessageGroupAV',
    Hn = 'sendMessageRichMedia',
    jn = 'cosUpload',
    Kn = 'messageReceivedGroup',
    Wn = 'messageReceivedGroupAVPush',
    zn = 'messageReceivedGroupAVPull',
    Jn =
      (a((Ln = {}), xn, 2),
      a(Ln, Fn, 3),
      a(Ln, qn, 4),
      a(Ln, Vn, 5),
      a(Ln, Bn, 6),
      a(Ln, Hn, 7),
      a(Ln, Kn, 8),
      a(Ln, Wn, 9),
      a(Ln, zn, 10),
      a(Ln, jn, 11),
      Ln),
    Xn = { info: 4, warning: 5, error: 6 },
    Zn = {
      wifi: 1,
      '2g': 2,
      '3g': 3,
      '4g': 4,
      '5g': 5,
      unknown: 6,
      none: 7,
      online: 8,
    },
    Qn = {
      login: 4,
      plugin_search: 16,
      plugin_translate: 16,
      plugin_voice_to_text: 16,
      plugin_cs: 16,
      plugin_push: 16,
      plugin_bot: 16,
      plugin_emoji_reaction: 16,
    },
    ei =
      (r(
        ii,
        [
          {
            key: 'updateTimeStamp',
            value: function () {
              this.timestamp = Se();
            },
          },
          {
            key: 'start',
            value: function (e) {
              return (this._startts = e), this;
            },
          },
          {
            key: 'end',
            value: function () {
              var e,
                t = this,
                n =
                  0 < arguments.length &&
                  void 0 !== arguments[0] &&
                  arguments[0];
              this._sentFlag ||
                (this._netMonitorModule &&
                  ((e = this._netMonitorModule.getNetworkType()),
                  this.setNetworkType(e)),
                (e = Se()),
                0 === this.costTime && (this.costTime = e - this._startts),
                this.setMoreMessage(
                  'startts:'.concat(this._startts, ' endts:').concat(e)
                ),
                n
                  ? ((this._sentFlag = !0),
                    this._eventStatModule && this._eventStatModule.pushIn(this))
                  : setTimeout(function () {
                      (t._sentFlag = !0),
                        t._eventStatModule && t._eventStatModule.pushIn(t);
                    }, 0));
            },
          },
          {
            key: 'setError',
            value: function (e) {
              if (!(e instanceof Error))
                return (
                  Ae.w(
                    ''.concat(
                      this._n,
                      '.setError value not instanceof Error, please check!'
                    )
                  ),
                  this
                );
              if (this._sentFlag) return this;
              var t = !0;
              return (
                (t = this._netMonitorModule
                  ? this._netMonitorModule.isOnline()
                  : t)
                  ? (e.code && this.setCode(e.code),
                    e.message && this.setMoreMessage(e.message))
                  : this.setCode(wn.NO_NETWORK),
                this.setLevel('error'),
                this
              );
            },
          },
          {
            key: 'setCode',
            value: function (e) {
              return (
                ut(e) ||
                  this._sentFlag ||
                  ('ECONNABORTED' === e && (this.code = 103),
                  Ke(e)
                    ? (this.code = e)
                    : Ae.w(
                        ''.concat(
                          this._n,
                          '.setCode value not a number, please check!'
                        ),
                        e,
                        n(e)
                      )),
                this
              );
            },
          },
          {
            key: 'setMessage',
            value: function (e) {
              return (
                ut(e) ||
                  this._sentFlag ||
                  (Ke(e) && (this.message = e.toString()),
                  ct(e) && (this.message = e)),
                this
              );
            },
          },
          {
            key: 'setCostTime',
            value: function (e) {
              return (this.costTime = e), this;
            },
          },
          {
            key: 'setLevel',
            value: function (e) {
              return ut(e) || this._sentFlag || (this.level = Xn[e]), this;
            },
          },
          {
            key: 'setMoreMessage',
            value: function (e) {
              return (
                Ve(this.moreMessage)
                  ? (this.moreMessage = ''.concat(e))
                  : (this.moreMessage += ' '.concat(e)),
                this
              );
            },
          },
          {
            key: 'setNetworkType',
            value: function (e) {
              return (
                ut(e)
                  ? Ae.w(
                      ''.concat(
                        this._n,
                        '.setNetworkType value is undefined, please check!'
                      )
                    )
                  : ((e = Zn[e.toLowerCase()]),
                    ut(e) || (this.networkType = e)),
                this
              );
            },
          },
          {
            key: 'getStartTs',
            value: function () {
              return this._startts;
            },
          },
          {
            key: 'setUIPlatform',
            value: function (e) {
              return (this.uiPlatform = e), this;
            },
          },
          {
            key: 'setExtension',
            value: function (e) {
              return (this.extension = e), this;
            },
          },
          {
            key: 'setEventType',
            value: function (e) {
              return (this.eventType = e), this;
            },
          },
        ],
        [
          {
            key: 'bindEventStatModule',
            value: function (e) {
              ii.prototype._eventStatModule = e;
            },
          },
          {
            key: 'bindNetMonitorModule',
            value: function (e) {
              ii.prototype._netMonitorModule = e;
            },
          },
        ]
      ),
      ii),
    ti =
      (r(ni, [
        {
          key: 'setText',
          value: function (e) {
            this.content.text = e;
          },
        },
        {
          key: 'sendable',
          value: function () {
            return 0 !== this.content.text.length;
          },
        },
      ]),
      ni);
  function ni(e) {
    i(this, ni),
      (this.type = D.MSG_TEXT),
      (this.content = { text: e.text || '' });
  }
  function ii(e) {
    i(this, ii),
      (this._n = 'SSOLogData'),
      (this.eventType = Qn[e] || 0),
      (this.timestamp = 0),
      (this.networkType = 8),
      (this.code = 0),
      (this.message = ''),
      (this.moreMessage = ''),
      (this.extension = e),
      (this.costTime = 0),
      (this.duplicate = !1),
      (this.level = 4),
      (this.uiPlatform = void 0),
      (this._sentFlag = !1),
      (this._startts = Se());
  }
  function oi(e) {
    i(this, oi), (this._m = e), (this._n = '');
  }
  function ri(e) {
    i(this, ri), (t = Mn.call(this));
    var t,
      n = e.code,
      o = e.message;
    return (
      (e = e.data),
      (t.code = n),
      o ? (t.message = o) : t._getErrMsg && (t.message = t._getErrMsg(t.code)),
      (t.data = e || {}),
      t
    );
  }
  function ai(e, t, n, i) {
    var o;
    if (((i = 3 < arguments.length && void 0 !== i ? i : []), e))
      return (
        (o = e),
        t &&
          (e.startsWith('http://')
            ? (o = e.replace(/^http:\/\/[^/]+/, t))
            : e.startsWith('https://') &&
              (o = e.replace(/^https:\/\/[^/]+/, t))),
        n && -1 === e.indexOf('authKey=') && ui(e, i)
          ? (-1 < e.indexOf('?')
              ? ''.concat(e, '&authKey=')
              : ''.concat(e, '?authKey=')
            ).concat(n)
          : o
      );
  }
  function si(e, t, n) {
    return (
      (n = 2 < arguments.length && void 0 !== n ? n : []),
      e === D.MSG_VIDEO
        ? ui((t[0].content || t[0].payload).snapshotUrl, n) &&
          (t[0].content
            ? ((t[0].content.snapshotUrl = ci(t[0].content.snapshotUrl)),
              (t[0].content.thumbUrl = ci(t[0].content.thumbUrl)))
            : ((t[0].payload.snapshotUrl = ci(t[0].payload.snapshotUrl)),
              (t[0].payload.thumbUrl = ci(t[0].payload.thumbUrl))))
        : e === D.MSG_FILE
          ? ui((t[0].content || t[0].payload).fileUrl, n) &&
            (t[0].content
              ? (t[0].content.fileUrl = ci(t[0].content.fileUrl))
              : (t[0].payload.fileUrl = ci(t[0].payload.fileUrl)))
          : e === D.MSG_MERGER &&
            ((e = (n = t[0].content || t[0].payload).downloadKey),
            (n = void 0 === (n = n.messageList) ? [] : n),
            Ve(void 0 === e ? '' : e) &&
              n.forEach(function (e) {
                si(e.messageBody[0].type, e.messageBody);
              })),
      t
    );
  }
  function ci(e) {
    if (!e) return e;
    if (-1 === e.indexOf('authKey=')) return e;
    for (
      var t = (e = e.split('?'))[1].split('&'), n = 0, i = 0;
      i < t.length;
      i++
    )
      if (-1 < t[i].indexOf('authKey=')) {
        n = i;
        break;
      }
    return (
      t.splice(n, 1),
      0 < t.length ? ''.concat(e[0], '?').concat(t.join('&')) : e[0]
    );
  }
  function ui(e, t) {
    if (e)
      return (
        (e =
          ((e = e.match(/:\/\/([0-9]?\.)?(.[^/:]+)/)) && e[2]) || '').includes(
          'rich-dev'
        ) || t.includes(e)
      );
  }
  r(Ui, [
    {
      key: '_initImageInfoModel',
      value: function () {
        var e = this;
        (this._ImageInfoModel = function (t) {
          (this.instanceID = nt(9999999)),
            (this.sizeType = t.type || 0),
            (this.type = 0),
            (this.size = t.size || 0),
            (this.width = t.width || 0),
            (this.height = t.height || 0),
            (this.imageUrl = t.imageUrl || t.url || ''),
            (this.url = ai(
              t.url || e._imageMemoryURL,
              e._fileDownloadProxy,
              e._authKey,
              e._fileDNList
            ));
        }),
          (this._ImageInfoModel.prototype = {
            setSizeType: function (e) {
              this.sizeType = e;
            },
            setType: function (e) {
              this.type = e;
            },
            setImageUrl: function (e) {
              e && (this.imageUrl = e);
            },
            getImageUrl: function () {
              return this.imageUrl;
            },
          });
      },
    },
    {
      key: 'initImageInfoArray',
      value: function (e) {
        for (var t, n = 0, i = null; n <= 2; )
          (t =
            ut(e) || ut(e[n])
              ? { type: 0, size: 0, width: 0, height: 0, url: '' }
              : e[n]),
            (i = new this._ImageInfoModel(t)).setSizeType(n + 1),
            i.setType(n),
            this.addImageInfo(i),
            n++;
        this.updateAccessSideImageInfoArray();
      },
    },
    {
      key: 'updateImageInfoArray',
      value: function (e) {
        for (var t, n = this.content.imageInfoArray.length, i = 0; i < n; i++)
          (t = this.content.imageInfoArray[i]),
            e[i].size && (t.size = e[i].size),
            e[i].url && t.setImageUrl(e[i].url),
            e[i].width && (t.width = e[i].width),
            e[i].height && (t.height = e[i].height);
      },
    },
    {
      key: '_autoFixUrl',
      value: function () {
        for (
          var e = this.content.imageInfoArray.length,
            t = '',
            n = '',
            i = ['http', 'https'],
            o = null,
            r = 0;
          r < e;
          r++
        )
          this.content.imageInfoArray[r].url &&
            '' !== (o = this.content.imageInfoArray[r]).imageUrl &&
            ((n = o.imageUrl.slice(0, o.imageUrl.indexOf('://') + 1)),
            (t = o.imageUrl.slice(o.imageUrl.indexOf('://') + 1)),
            i.indexOf(n) < 0 && (n = 'https:'),
            this.content.imageInfoArray[r].setImageUrl([n, t].join('')));
      },
    },
    {
      key: 'updatePercent',
      value: function (e) {
        (this._percent = e), 1 < this._percent && (this._percent = 1);
      },
    },
    {
      key: 'updateImageFormat',
      value: function (e) {
        this.content.imageFormat = Oe[e.toUpperCase()] || Oe.UNKNOWN;
      },
    },
    {
      key: 'createImageDataASURLInWeb',
      value: function (e) {
        void 0 !== e &&
          0 < e.files.length &&
          (this._imageMemoryURL = window.URL.createObjectURL(e.files[0]));
      },
    },
    {
      key: 'createImageDataASURLInWXMiniApp',
      value: function (e) {
        e && e.url && (this._imageMemoryURL = e.url);
      },
    },
    {
      key: 'replaceImageInfo',
      value: function (e, t) {
        this.content.imageInfoArray[t] instanceof this._ImageInfoModel ||
          (this.content.imageInfoArray[t] = e);
      },
    },
    {
      key: 'addImageInfo',
      value: function (e) {
        3 <= this.content.imageInfoArray.length ||
          this.content.imageInfoArray.push(e);
      },
    },
    {
      key: 'updateAccessSideImageInfoArray',
      value: function () {
        var e = this.content.imageInfoArray,
          t = void 0 === (t = (n = e[0]).width) ? 0 : t,
          n = void 0 === (n = n.height) ? 0 : n;
        0 !== t &&
          0 !== n &&
          (bt(e),
          Object.assign(
            e[2],
            Ot({ originWidth: t, originHeight: n, min: 720 })
          ));
      },
    },
    {
      key: 'sendable',
      value: function () {
        return (
          0 !== this.content.imageInfoArray.length &&
          '' !== this.content.imageInfoArray[0].imageUrl &&
          0 !== this.content.imageInfoArray[0].size
        );
      },
    },
  ]);
  var li = Ui,
    di =
      (r(wi, [
        {
          key: 'sendable',
          value: function () {
            return null !== this.content;
          },
        },
      ]),
      wi),
    pi =
      (r(Pi, [
        {
          key: 'updatePercent',
          value: function (e) {
            (this._percent = e), 1 < this._percent && (this._percent = 1);
          },
        },
        {
          key: 'updateAudioUrl',
          value: function (e) {
            this.content.remoteAudioUrl = e;
          },
        },
        {
          key: 'sendable',
          value: function () {
            return '' !== this.content.remoteAudioUrl;
          },
        },
      ]),
      Pi),
    hi = { from: !0, groupID: !0, groupName: !0, to: !0 },
    fi =
      (r(Ni, [
        {
          key: '_initContent',
          value: function (e) {
            var t = this;
            Object.keys(e).forEach(function (n) {
              switch (n) {
                case 'remarkInfo':
                case 'memberExtraInfo':
                case 'onlineMemberInfo':
                  break;
                case 'groupProfile':
                  (t.content.groupProfile = {}), t._initGroupProfile(e[n]);
                  break;
                case 'operatorInfo':
                  (t.content.operatorInfo = {}), t._initOperatorInfo(e[n]);
                  break;
                case 'memberInfoList':
                case 'msgMemberInfo':
                  t._updateMemberList(e[n]);
                  break;
                case 'memberNum':
                  (t.content[n] = e[n]), (t.content.memberCount = e[n]);
                  break;
                case 'newGroupProfile':
                  (t.content.newGroupProfile = {}),
                    t._initNewGroupProfile(e[n]);
                  break;
                default:
                  t.content[n] = e[n];
              }
            }),
              this.content.userIDList ||
                (this.content.userIDList = [this.content.operatorID]);
          },
        },
        {
          key: '_initGroupProfile',
          value: function (e) {
            for (var t = Object.keys(e), n = 0; n < t.length; n++) {
              var i = t[n];
              hi[i] && (this.content.groupProfile[i] = e[i]);
            }
          },
        },
        {
          key: '_initOperatorInfo',
          value: function (e) {
            for (var t = Object.keys(e), n = 0; n < t.length; n++) {
              var i = t[n];
              this.content.operatorInfo[i] = e[i];
            }
          },
        },
        {
          key: '_updateMemberList',
          value: function (e) {
            Ve(this.content.memberList)
              ? (this.content.memberList = e)
              : this.content.memberList.forEach(function (t) {
                  e.forEach(function (e) {
                    t.userID === e.userID && Object.assign(t, e);
                  });
                });
          },
        },
        {
          key: '_initNewGroupProfile',
          value: function (e) {
            for (var t = Object.keys(e), n = 0; n < t.length; n++) {
              var i = t[n];
              this.content.newGroupProfile[i] =
                'muteAllMembers' !== i ? e[i] : 1 === e[i];
            }
          },
        },
      ]),
      Ni),
    gi = { from: !0, groupID: !0, groupName: !0, to: !0, groupType: !0 },
    _i =
      (r(bi, [
        {
          key: '_initContent',
          value: function (e) {
            var t = this;
            Object.keys(e).forEach(function (n) {
              switch (n) {
                case 'memberInfoList':
                  break;
                case 'remarkInfo':
                  t.content.handleMessage = e[n];
                  break;
                case 'groupProfile':
                  (t.content.groupProfile = {}), t._initGroupProfile(e[n]);
                  break;
                default:
                  t.content[n] = e[n];
              }
            });
          },
        },
        {
          key: '_initGroupProfile',
          value: function (e) {
            for (var t = Object.keys(e), n = 0; n < t.length; n++) {
              var i = t[n];
              gi[i] &&
                ('groupName' === i
                  ? (this.content.groupProfile.name = e[i])
                  : (this.content.groupProfile[i] = e[i]));
            }
          },
        },
      ]),
      bi),
    vi =
      (r(Oi, [
        {
          key: '_getFileInfo',
          value: function (e) {
            return ut(e.fileName) || ut(e.fileSize)
              ? ((e = e.file.files[0]),
                Y &&
                  (e.path &&
                    -1 !== e.path.indexOf('.') &&
                    ((t = e.path
                      .slice(e.path.lastIndexOf('.') + 1)
                      .toLowerCase()),
                    (e.type = t),
                    e.name || (e.name = ''.concat(nt(999999), '.').concat(t))),
                  e.name ||
                    ((e.type = ''),
                    (e.name = e.path
                      .slice(e.path.lastIndexOf('/') + 1)
                      .toLowerCase())),
                  e.suffix && (e.type = e.suffix),
                  e.url || (e.url = e.path)),
                { size: e.size, name: e.name })
              : { size: e.fileSize, name: e.fileName };
            var t;
          },
        },
        {
          key: 'updatePercent',
          value: function (e) {
            (this._percent = e), 1 < this._percent && (this._percent = 1);
          },
        },
        {
          key: 'updateFileUrl',
          value: function (e) {
            this.content.fileUrl = e;
          },
        },
        {
          key: 'sendable',
          value: function () {
            return (
              '' !== this.content.fileUrl &&
              '' !== this.content.fileName &&
              0 !== this.content.fileSize
            );
          },
        },
      ]),
      Oi),
    mi =
      (r(Ai, [
        {
          key: 'setData',
          value: function (e) {
            return (this.content.data = e), this;
          },
        },
        {
          key: 'setDescription',
          value: function (e) {
            return (this.content.description = e), this;
          },
        },
        {
          key: 'setExtension',
          value: function (e) {
            return (this.content.extension = e), this;
          },
        },
        {
          key: 'sendable',
          value: function () {
            return (
              0 !== this.content.data.length ||
              0 !== this.content.description.length ||
              0 !== this.content.extension.length
            );
          },
        },
      ]),
      Ai),
    yi =
      (r(Li, [
        {
          key: 'updatePercent',
          value: function (e) {
            (this._percent = e), 1 < this._percent && (this._percent = 1);
          },
        },
        {
          key: 'updateVideoUrl',
          value: function (e) {
            e && (this.content.remoteVideoUrl = e);
          },
        },
        {
          key: 'updateSnapshotInfo',
          value: function (e) {
            var t = e.snapshotUrl,
              n = e.snapshotWidth;
            (e = e.snapshotHeight),
              Ve(t) || (this.content.thumbUrl = this.content.snapshotUrl = t),
              Ve(n) ||
                (this.content.thumbWidth = this.content.snapshotWidth =
                  Number(n)),
              Ve(e) ||
                (this.content.thumbHeight = this.content.snapshotHeight =
                  Number(e));
          },
        },
        {
          key: 'sendable',
          value: function () {
            return '' !== this.content.remoteVideoUrl;
          },
        },
      ]),
      Li),
    Ii =
      (r(Ri, [
        {
          key: 'sendable',
          value: function () {
            return !0;
          },
        },
      ]),
      Ri),
    Mi =
      (r(ki, [
        {
          key: '_patchRichMediaPayload',
          value: function (e, t) {
            e === D.MSG_IMAGE
              ? t.imageInfoArray.forEach(function (e) {
                  !e.imageUrl &&
                    e.url &&
                    ((e.imageUrl = e.url),
                    (e.sizeType = e.type),
                    1 === e.type ? (e.type = 0) : 3 === e.type && (e.type = 1));
                })
              : e === D.MSG_VIDEO
                ? !t.remoteVideoUrl &&
                  t.videoUrl &&
                  (t.remoteVideoUrl = t.videoUrl)
                : e === D.MSG_AUDIO
                  ? !t.remoteAudioUrl && t.url && (t.remoteAudioUrl = t.url)
                  : e === D.MSG_FILE &&
                    !t.fileUrl &&
                    t.url &&
                    ((t.fileUrl = t.url), (t.url = void 0));
          },
        },
        {
          key: '_updateRichMediaDownloadUrl',
          value: function (e, t, n, i, o) {
            (n || i) &&
              (e === D.MSG_IMAGE
                ? t.imageInfoArray.forEach(function (e) {
                    e.url = ai(e.url, n, i, o);
                  })
                : e === D.MSG_VIDEO
                  ? ((t.videoUrl = ai(t.videoUrl, n, i, o)),
                    (t.snapshotUrl = ai(t.thumbUrl, n, i, o)),
                    (t.snapshotHeight = t.thumbHeight),
                    (t.snapshotWidth = t.thumbWidth))
                  : e === D.MSG_AUDIO
                    ? (t.url = ai(t.url, n, i, o))
                    : e === D.MSG_FILE && (t.fileUrl = ai(t.fileUrl, n, i, o)));
          },
        },
      ]),
      ki),
    Ci =
      (r(Si, [
        {
          key: 'sendable',
          value: function () {
            return (
              !Ve(this.content.messageList) || !Ve(this.content.downloadKey)
            );
          },
        },
      ]),
      Si),
    Ti = {
      1: D.MSG_PRIORITY_HIGH,
      2: D.MSG_PRIORITY_NORMAL,
      3: D.MSG_PRIORITY_LOW,
      4: D.MSG_PRIORITY_LOWEST,
    },
    Ei =
      (r(Di, [
        {
          key: 'elements',
          get: function () {
            return this._elements;
          },
        },
        {
          key: 'getElements',
          value: function () {
            return this._elements;
          },
        },
        {
          key: 'extractGroupInfo',
          value: function (e) {
            null !== e &&
              (ct(e.nick) && (this.nick = e.nick),
              ct(e.avatar) && (this.avatar = e.avatar),
              ze((e = e.messageFromAccountExtraInformation)) &&
                ct(e.nameCard) &&
                (this.nameCard = e.nameCard));
          },
        },
        {
          key: 'handleGroupAtInfo',
          value: function (e) {
            var t = this;
            e.payload &&
              e.payload.atUserList &&
              e.payload.atUserList.forEach(function (e) {
                e !== D.MSG_AT_ALL
                  ? (t._groupAtInfoList.push({
                      groupAtAllFlag: 0,
                      groupAtUserID: e,
                    }),
                    t.atUserList.push(e))
                  : (t._groupAtInfoList.push({ groupAtAllFlag: 1 }),
                    t.atUserList.push(D.MSG_AT_ALL));
              }),
              $e(e.groupAtInfo) &&
                e.groupAtInfo.forEach(function (e) {
                  0 === e.groupAtAllFlag
                    ? t.atUserList.push(e.groupAtUserID)
                    : 1 === e.groupAtAllFlag && t.atUserList.push(D.MSG_AT_ALL);
                });
          },
        },
        {
          key: 'getGroupAtInfoList',
          value: function () {
            return this._groupAtInfoList;
          },
        },
        {
          key: '_initProxy',
          value: function () {
            this._elements[0] &&
              ((this.payload = this._elements[0].content),
              (this.type = this._elements[0].type));
          },
        },
        {
          key: 'reInitialize',
          value: function (e) {
            e &&
              ((this.status = this.from ? Tn : Cn),
              this.from || (this.from = e)),
              this._initFlow(e),
              this._initSequence(e),
              this._concatConversationID(e),
              this.generateMessageID();
          },
        },
        {
          key: 'isSendable',
          value: function () {
            return (
              0 !== this._elements.length &&
              (!0 === this._relayFlag ||
                ('function' == typeof this._elements[0].sendable &&
                  this._elements[0].sendable()))
            );
          },
        },
        {
          key: '_initTo',
          value: function (e) {
            this.conversationType === D.CONV_GROUP && (this.to = e.groupID);
          },
        },
        {
          key: '_initSequence',
          value: function (e) {
            var t, n, i;
            0 === this.clientSequence &&
              e &&
              (this.clientSequence =
                !!e &&
                (void 0 === _t[e] &&
                  ((t = '3'.concat((i = new Date()).getHours()).slice(-2)),
                  (n = '0'.concat(i.getMinutes()).slice(-2)),
                  (i = '0'.concat(i.getSeconds()).slice(-2)),
                  (_t[e] = parseInt([t, n, i, '0001'].join(''))),
                  (i = n = t = null),
                  Ae.l('autoIncrementIndex start index:'.concat(_t[e]))),
                _t[e]++)),
              0 === this.sequence &&
                this.conversationType === D.CONV_C2C &&
                (this.sequence = this.clientSequence);
          },
        },
        {
          key: 'generateMessageID',
          value: function () {
            this.from === D.CONV_SYSTEM &&
              (this.senderTinyID = '144115198244471703'),
              (this.ID = ''
                .concat(this.senderTinyID, '-')
                .concat(this.clientTime, '-')
                .concat(this.random));
          },
        },
        {
          key: '_initFlow',
          value: function (e) {
            '' !== e &&
              (e === this.from
                ? ((this.flow = 'out'), (this.isRead = !0))
                : (this.flow = 'in'));
          },
        },
        {
          key: '_concatConversationID',
          value: function (e) {
            var t = this.to,
              n = this.conversationType;
            n !== D.CONV_SYSTEM
              ? ((e =
                  n === D.CONV_C2C
                    ? e === this.from
                      ? t
                      : this.from
                    : this.to),
                (this.conversationID = e ? ''.concat(n).concat(e) : null))
              : (this.conversationID = D.CONV_SYSTEM);
          },
        },
        {
          key: 'isElement',
          value: function (e) {
            return (
              e instanceof ti ||
              e instanceof li ||
              e instanceof di ||
              e instanceof pi ||
              e instanceof vi ||
              e instanceof yi ||
              e instanceof fi ||
              e instanceof _i ||
              e instanceof mi ||
              e instanceof Ii ||
              e instanceof Ci
            );
          },
        },
        {
          key: 'setElement',
          value: function (e, t, n, i) {
            var o = this;
            if (this.isElement(e))
              return (this._elements = [e]), void this._initProxy();
            function r(e) {
              if (e.type && e.content)
                switch (e.type) {
                  case D.MSG_TEXT:
                    o.setTextElement(e.content);
                    break;
                  case D.MSG_IMAGE:
                    o.setImageElement(e.content, t, n, i);
                    break;
                  case D.MSG_AUDIO:
                    o.setAudioElement(e.content, t, n, i);
                    break;
                  case D.MSG_FILE:
                    o.setFileElement(e.content, t, n, i);
                    break;
                  case D.MSG_VIDEO:
                    o.setVideoElement(e.content, t, n, i);
                    break;
                  case D.MSG_CUSTOM:
                    o.setCustomElement(e.content);
                    break;
                  case D.MSG_LOCATION:
                    o.setLocationElement(e.content);
                    break;
                  case D.MSG_GRP_TIP:
                    o.setGroupTipElement(e.content);
                    break;
                  case D.MSG_GRP_SYS_NOTICE:
                    o.setGroupSystemNoticeElement(e.content);
                    break;
                  case D.MSG_FACE:
                    o.setFaceElement(e.content);
                    break;
                  case D.MSG_MERGER:
                    o.setMergerElement(e.content, t, n, i);
                }
            }
            if ($e(e)) for (var a = 0; a < e.length; a++) r(e[a]);
            else r(e);
            this._initProxy();
          },
        },
        {
          key: 'clearElement',
          value: function () {
            this._elements.length = 0;
          },
        },
        {
          key: 'setTextElement',
          value: function (e) {
            (e = 'string' == typeof e ? e : e.text),
              (e = new ti({ text: e })),
              this._elements.push(e);
          },
        },
        {
          key: 'setImageElement',
          value: function (e, t, n, i) {
            (e = new li(e, t, n, i)), this._elements.push(e);
          },
        },
        {
          key: 'setAudioElement',
          value: function (e, t, n, i) {
            (e = new pi(e, t, n, i)), this._elements.push(e);
          },
        },
        {
          key: 'setFileElement',
          value: function (e, t, n, i) {
            (e = new vi(e, t, n, i)), this._elements.push(e);
          },
        },
        {
          key: 'setVideoElement',
          value: function (e, t, n, i) {
            (e = new yi(e, t, n, i)), this._elements.push(e);
          },
        },
        {
          key: 'setLocationElement',
          value: function (e) {
            (e = new Ii(e)), this._elements.push(e);
          },
        },
        {
          key: 'setCustomElement',
          value: function (e) {
            (e = new mi(e)), this._elements.push(e);
          },
        },
        {
          key: 'setGroupTipElement',
          value: function (e) {
            var t,
              n = {},
              i = e.operationType;
            Ve(e.memberInfoList)
              ? e.operatorInfo && (n = e.operatorInfo)
              : (i !== D.GRP_TIP_MBR_JOIN &&
                  i !== D.GRP_TIP_MBR_KICKED_OUT &&
                  i !== D.GRP_TIP_MBR_SET_ADMIN &&
                  i !== D.GRP_TIP_MBR_CANCELED_ADMIN) ||
                (n = e.memberInfoList[0]),
              Ve(e.memberExtraInfo) ||
                ((t = e.memberExtraInfo.reason),
                e.msgMemberInfo.forEach(function (e) {
                  e.reason = t;
                })),
              (i = n.nick),
              (n = n.avatar),
              ct(i) && (this.nick = i),
              ct(n) && (this.avatar = n),
              (i = new fi(e)),
              this._elements.push(i);
          },
        },
        {
          key: 'setGroupSystemNoticeElement',
          value: function (e) {
            (e = new _i(e)), this._elements.push(e);
          },
        },
        {
          key: 'setFaceElement',
          value: function (e) {
            (e = new di(e)), this._elements.push(e);
          },
        },
        {
          key: 'setMergerElement',
          value: function (e, t, n, i) {
            (e = new Ci(e, t, n, i)), this._elements.push(e);
          },
        },
        {
          key: 'setIsRead',
          value: function (e) {
            this.isRead = e;
          },
        },
        {
          key: 'setRelayFlag',
          value: function (e) {
            this._relayFlag = e;
          },
        },
        {
          key: '_computePriority',
          value: function (e) {
            return ut(e)
              ? D.MSG_PRIORITY_NORMAL
              : ct(e) && -1 !== Object.values(Ti).indexOf(e)
                ? e
                : Ke(e) && ((e = '' + e), -1 !== Object.keys(Ti).indexOf(e))
                  ? Ti[e]
                  : D.MSG_PRIORITY_NORMAL;
          },
        },
        {
          key: 'setNickAndAvatar',
          value: function (e) {
            var t = e.nick;
            (e = e.avatar),
              ct(t) && (this.nick = t),
              ct(e) && (this.avatar = e);
          },
        },
        {
          key: 'setNameCard',
          value: function (e) {
            ct(e) && (this.nameCard = e);
          },
        },
        {
          key: 'initC2CReadReceiptInfo',
          value: function (e) {
            var t = e.readReceiptSentByPeer;
            (e = void 0 === (e = e.timestamp) ? 0 : e),
              this.conversationType === D.CONV_C2C &&
                !0 === this.needReadReceipt &&
                ((this.readReceiptInfo.isPeerRead =
                  1 === (void 0 === t ? void 0 : t)),
                (this.readReceiptInfo.timestamp = e));
          },
        },
      ]),
      Di);
  function Di(e) {
    i(this, Di),
      (this.ID = ''),
      (this.conversationID = e.conversationID || null),
      (this.conversationType = e.conversationType || D.CONV_C2C),
      (this.conversationSubType = e.conversationSubType),
      (this.time = e.time || Math.ceil(Date.now() / 1e3)),
      (this.sequence = e.sequence || 0),
      (this.clientSequence = e.clientSequence || e.sequence || 0),
      (this.random = e.random || 0 === e.random ? e.random : nt()),
      (this.priority = this._computePriority(e.priority)),
      (this.nick = e.nick || ''),
      (this.avatar = e.avatar || ''),
      (this.isPeerRead = !1),
      (this.nameCard = ''),
      (this.hasRiskContent = Wt(e.checkResult)),
      (this._elements = []),
      (this.isPlaceMessage = e.isPlaceMessage || 0),
      (this.isRevoked = 2 === e.isPlaceMessage || 8 === e.msgFlagBits),
      (this.from = e.from || null),
      (this.to = e.to || null),
      (this.flow = ''),
      (this.isSystemMessage = e.isSystemMessage || !1),
      (this.protocol = e.protocol || 'JSON'),
      (this.isResend = !1),
      (this.isRead = !1),
      (this.status = e.status || Tn),
      (this._onlineOnlyFlag = !1),
      (this._groupAtInfoList = []),
      (this._relayFlag = !1),
      (this.atUserList = []),
      (this.cloudCustomData = e.cloudCustomData || ''),
      (this.isDeleted = !1),
      (this.isModified = !!e.messageVersion),
      (this._isExcludedFromUnreadCount = !(
        !e.messageControlInfo ||
        1 !== e.messageControlInfo.excludedFromUnreadCount
      )),
      (this._isExcludedFromLastMessage = !(
        !e.messageControlInfo ||
        1 !== e.messageControlInfo.excludedFromLastMessage
      )),
      (this.clientTime = e.clientTime || Te() || 0),
      (this.senderTinyID = e.senderTinyID || e.tinyID || ''),
      (this.readReceiptInfo = e.readReceiptInfo || {
        readCount: void 0,
        unreadCount: void 0,
        isPeerRead: void 0,
        timestamp: 0,
      }),
      (this.needReadReceipt =
        !0 === e.needReadReceipt || 1 === e.needReadReceipt),
      (this.version = e.messageVersion || 0),
      (this.isBroadcastMessage = e.isBroadcastMessage || !1),
      (this._receiverList = e.receiverList || void 0),
      (this.isSupportExtension =
        !0 === e.isSupportExtension || 1 === e.isSupportExtension),
      (this._cmConfigID = e.customModerationConfigurationID),
      (this.revoker = (e.revokerInfo && e.revokerInfo.revoker) || ''),
      (this.revokerInfo = e.revokerInfo || {
        userID: '',
        nick: '',
        avatar: '',
      }),
      (this.revokeReason = e.revokeReason || ''),
      this.reInitialize(e.currentUser),
      this.extractGroupInfo(e.groupProfile || null),
      this.handleGroupAtInfo(e),
      this.initC2CReadReceiptInfo(e);
  }
  function Si(e, t, n, o) {
    var r, a, s, c, u, l, d;
    i(this, Si),
      (this.type = D.MSG_MERGER),
      (this.content = {
        downloadKey: '',
        pbDownloadKey: '',
        messageList: [],
        title: '',
        abstractList: [],
        compatibleText: '',
        version: 0,
        layersOverLimit: !1,
      }),
      e.downloadKey
        ? ((a = e.downloadKey),
          (s = e.pbDownloadKey),
          (c = e.title),
          (u = e.abstractList),
          (l = e.compatibleText),
          (r = e.version),
          (this.content.downloadKey = a),
          (this.content.pbDownloadKey = s),
          (this.content.title = c),
          (this.content.abstractList = u),
          (this.content.compatibleText = l),
          (this.content.version = r || 0))
        : Ve(e.messageList)
          ? 1 === e.layersOverLimit && (this.content.layersOverLimit = !0)
          : ((a = e.messageList),
            (s = e.title),
            (c = e.abstractList),
            (u = e.compatibleText),
            (l = e.version),
            (d = []),
            a.forEach(function (e) {
              Ve(e) || ((e = new Mi(e, t, n, o)), d.push(e));
            }),
            (this.content.messageList = d),
            (this.content.title = s),
            (this.content.abstractList = c),
            (this.content.compatibleText = u),
            (this.content.version = l || 0));
  }
  function ki(e, t, n, o) {
    var r, a;
    i(this, ki),
      (this.from = e.from),
      (this.messageSender = e.from),
      (this.time = e.time),
      (this.messageSequence = e.sequence),
      (this.clientSequence = e.clientSequence || e.sequence),
      (this.messageRandom = e.random),
      (this.cloudCustomData = e.cloudCustomData || ''),
      (this.clientTime = e.clientTime || void 0),
      e.ID
        ? ((this.ID = e.ID || ''),
          (this.nick = e.nick || ''),
          (this.avatar = e.avatar || ''),
          e.messageBody
            ? (this.messageBody = JSON.parse(JSON.stringify(e.messageBody)))
            : (this.messageBody = [{ type: e.type, payload: e.payload }]),
          e.conversationType
            ? e.conversationType.startsWith(D.CONV_C2C)
              ? (this.receiverUserID = e.to)
              : e.conversationType.startsWith(D.CONV_GROUP) &&
                (this.receiverGroupID = e.to)
            : e.receiverGroupID
              ? (this.receiverGroupID = e.receiverGroupID)
              : e.receiverUserID && (this.receiverUserID = e.receiverUserID),
          (this.messageReceiver = e.to || e.messageReceiver))
        : ((this.nick = e.nick || ''),
          (this.avatar = e.avatar || ''),
          (this.messageBody = []),
          (r = e.elements[0].type),
          (a = e.elements[0].content),
          this._patchRichMediaPayload(r, a),
          this._updateRichMediaDownloadUrl(r, a, t, n, o),
          r === D.MSG_MERGER
            ? this.messageBody.push({
                type: r,
                payload: new Ci(a, t, n, o).content,
              })
            : this.messageBody.push({ type: r, payload: a }),
          e.groupID &&
            ((this.receiverGroupID = e.groupID),
            (this.messageReceiver = e.groupID)),
          e.to && ((this.receiverUserID = e.to), (this.messageReceiver = e.to)),
          (this.ID = ''
            .concat(e.tinyID, '-')
            .concat(e.clientTime, '-')
            .concat(e.random)));
  }
  function Ri(e) {
    i(this, Ri), (this.type = D.MSG_LOCATION);
    var t = e.description,
      n = e.longitude;
    (e = e.latitude),
      (this.content = { description: t, longitude: n, latitude: e });
  }
  function Li(e, t, n, o) {
    i(this, Li),
      (this.type = D.MSG_VIDEO),
      (this._percent = 0),
      (this.content = {
        remoteVideoUrl: e.remoteVideoUrl || e.videoUrl || '',
        videoFormat: e.videoFormat,
        videoSecond: parseInt(e.videoSecond, 10),
        videoSize: e.videoSize,
        videoUrl: ai(e.videoUrl, t, n, o),
        videoDownloadFlag: 2,
        videoUUID: e.videoUUID,
        thumbUUID: e.thumbUUID,
        thumbFormat: e.thumbFormat,
        thumbWidth: e.thumbWidth,
        snapshotWidth: e.thumbWidth,
        thumbHeight: e.thumbHeight,
        snapshotHeight: e.thumbHeight,
        thumbSize: e.thumbSize,
        snapshotSize: e.thumbSize,
        thumbDownloadFlag: 2,
        thumbUrl: ai(e.thumbUrl, t, n, o),
        snapshotUrl: ai(e.thumbUrl, t, n, o),
      });
  }
  function Ai(e) {
    i(this, Ai),
      (this.type = D.MSG_CUSTOM),
      (this.content = {
        data: e.data || '',
        description: e.description || '',
        extension: e.extension || '',
      });
  }
  function Oi(e, t, n, o) {
    i(this, Oi), (this.type = D.MSG_FILE), (this._percent = 0);
    var r = this._getFileInfo(e);
    this.content = {
      downloadFlag: 2,
      fileUrl: ai(e.url || e.fileUrl, t, n, o) || '',
      uuid: e.uuid,
      fileName: r.name || '',
      fileSize: r.size || 0,
    };
  }
  function bi(e) {
    i(this, bi),
      (this.type = D.MSG_GRP_SYS_NOTICE),
      (this.content = {}),
      this._initContent(e);
  }
  function Ni(e) {
    i(this, Ni),
      (this.type = D.MSG_GRP_TIP),
      (this.content = {}),
      this._initContent(e);
  }
  function Pi(e, t, n, o) {
    i(this, Pi),
      (this.type = D.MSG_AUDIO),
      (this._percent = 0),
      (this.content = {
        downloadFlag: 2,
        second: e.second,
        size: e.size,
        url: ai(e.url, t, n, o),
        remoteAudioUrl: e.url || '',
        uuid: e.uuid,
      });
  }
  function wi(e) {
    i(this, wi), (this.type = D.MSG_FACE), (this.content = e || null);
  }
  function Ui(e, t, n, o) {
    i(this, Ui),
      (this._imageMemoryURL = ''),
      (this._fileDownloadProxy = t),
      (this._authKey = n),
      (this._fileDNList = o),
      Z
        ? this.createImageDataASURLInWXMiniApp(e.file)
        : this.createImageDataASURLInWeb(e.file),
      this._initImageInfoModel(),
      (this.type = D.MSG_IMAGE),
      (this._percent = 0),
      (this.content = {
        imageFormat: e.imageFormat || Oe.UNKNOWN,
        uuid: e.uuid,
        imageInfoArray: [],
      }),
      this.initImageInfoArray(e.imageInfoArray),
      this._autoFixUrl();
  }
  function Gi(e) {
    if (ze(e))
      return {
        pushFlag: !0 === e.disablePush ? 1 : 0,
        title: e.title || '',
        desc: e.description || '',
        ext: e.extension || '',
        apnsInfo:
          ((i = void 0 === (i = (n = e).apnsInfo) ? {} : i),
          (o = n.ignoreIOSBadge),
          (n = n.disableVoipPush),
          (o = !0 === i.ignoreIOSBadge || !0 === (void 0 !== o && o) ? 1 : 0),
          (r = void 0),
          ut(n) || (r = !1 === n ? 1 : 0),
          ut(i.disableVoipPush) || (r = !1 === i.disableVoipPush ? 1 : 0),
          t(t({}, i), {}, { badgeMode: o, isVoipPush: r })),
        androidInfo:
          ((i = void 0 === (i = (n = e).androidInfo) ? {} : i),
          (n = n.androidOPPOChannelID),
          (n = i.OPPOChannelID || (void 0 === n ? '' : n)),
          t(
            t({}, i),
            {},
            {
              Sound:
                -1 === (r = (o = i.sound || '').lastIndexOf('.'))
                  ? o
                  : o.slice(0, r),
              OPPOChannelID: n,
              GoogleChannelID: i.FCMChannelID || '',
            }
          )),
      };
    var n, i, o, r;
  }
  s(Hi, An),
    (xi = g(Hi)),
    r(Hi, [
      {
        key: 'onNewMessage',
        value: function (e) {
          var t = e.dataList,
            n = e.isInstantMessage,
            i = e.C2CRemainingUnreadList,
            o = e.C2CPairUnreadList,
            r =
              ((e = e.isSyncingEnded),
              (i = (n ||
                Ae.l(
                  ''.concat(this._n, '.onNewMessage C2CPairUnreadList:'),
                  o,
                  'C2CRemainingUnreadList:',
                  i
                ),
              (t = this._assembly({
                dataList: t,
                C2CRemainingUnreadList: i,
                C2CPairUnreadList: o,
                isInstantMessage: n,
              }))).conversationOptionsList),
              (o = t.messageList),
              (t = t.isUnreadC2CMessage),
              0 < (r = mt(o)).length && this.emitOEvt(E.MESSAGE_MODIFIED, r),
              this.get(11).onNewMessage({
                conversationOptionsList: i,
                isInstantMessage: n,
                isUnreadC2CMessage: t,
                isSyncingEnded: e,
              }),
              yt(o));
          n && 0 < r.length && this.emitOEvt(E.MESSAGE_RECEIVED, r),
            (o.length = 0);
        },
      },
      {
        key: '_assembly',
        value: function (e) {
          for (
            var t = e.dataList,
              n = e.C2CRemainingUnreadList,
              i = e.C2CPairUnreadList,
              o = e.isInstantMessage,
              r = null,
              a = [],
              s = [],
              c = {},
              u = this.get(26),
              l = !1,
              d = this.get(11),
              p = this.get(4),
              h = ((e = this.get(17)), this.getFileDownloadProxy()),
              f = this.getDowloadFileAuthKey(),
              g = e.getFileDNList(),
              _ = 0,
              v = t.length;
            _ < v;
            _++
          )
            if (this._isC2CNotice(t[_]))
              this._noticeFromUnreadDBList.push(
                t[_].eventArray[0].c2CNotifyMsgArray[0]
              );
            else {
              var m = t[_],
                y =
                  ((m.currentUser = this.getMyUserID()),
                  (m.conversationType = D.CONV_C2C),
                  (m.isSystemMessage = !!m.isSystemMessage),
                  (ut(m.nick) || ut(m.avatar)) && (l = !0),
                  (r = new Ei(m)).setElement(m.elements, h, f, g),
                  r.setNickAndAvatar({ nick: m.nick, avatar: m.avatar }),
                  r.conversationID);
              if (o) {
                if (this._msgFromUnreadDBMap.get(r.ID)) continue;
                var I,
                  M,
                  C = !1,
                  T =
                    (r.from !== this.getMyUserID()
                      ? (M = d.getLatestMessageSentByPeer(y)) &&
                        ((I = M.nick),
                        (M = M.avatar),
                        l
                          ? r.setNickAndAvatar({ nick: I, avatar: M })
                          : (I === r.nick && M === r.avatar) || (C = !0))
                      : (I = d.getLatestMessageSentByMe(y)) &&
                        ((M = I.nick),
                        (T = I.avatar),
                        (M === r.nick && T === r.avatar) ||
                          (d.modifyMessageSentByMe({
                            conversationID: y,
                            latestNick: r.nick,
                            latestAvatar: r.avatar,
                          }),
                          p.mockOnNickAvatarModified(r.nick, r.avatar))),
                    1 === t[_].isModified);
                if (
                  (d.isMessageSentByCurrentInstance(r)
                    ? (r.isModified = T)
                    : (T = !1),
                  0 === m.msgLifeTime)
                )
                  (r._onlineOnlyFlag = !0),
                    d.isMessageSentByCurrentInstance(r) || s.push(r);
                else {
                  if (!d.pushIntoMessageList(s, r, T)) continue;
                  C &&
                    (d.modifyMessageSentByPeer({
                      conversationID: y,
                      latestNick: r.nick,
                      latestAvatar: r.avatar,
                    }),
                    d.updateUserProfileSpecifiedKey({
                      conversationID: y,
                      nick: r.nick,
                      avatar: r.avatar,
                    }));
                }
                o && 0 < r.clientTime && u.addMessageDelay(r.clientTime);
              } else this._msgFromUnreadDBMap.set(r.ID, r);
              if (0 !== m.msgLifeTime) {
                if (!1 === r._onlineOnlyFlag) {
                  if (Ke((C = d.getLastMessageTime(y))) && r.time < C) continue;
                  ut(c[y])
                    ? ((m = 0),
                      'in' === r.flow &&
                        (r._isExcludedFromUnreadCount || (m = 1)),
                      (c[y] =
                        a.push({
                          conversationID: y,
                          unreadCount: m,
                          type: r.conversationType,
                          subType: r.conversationSubType,
                          lastMessage: r._isExcludedFromLastMessage ? '' : r,
                        }) - 1))
                    : ((m = c[y]),
                      (a[m].type = r.conversationType),
                      (a[m].subType = r.conversationSubType),
                      (a[m].lastMessage = r._isExcludedFromLastMessage
                        ? ''
                        : r),
                      'in' === r.flow &&
                        (r._isExcludedFromUnreadCount || a[m].unreadCount++));
                }
              } else r._onlineOnlyFlag = !0;
            }
          this._handleNoticeFromUnreadDB();
          var E = !1;
          if ($e(i) && 0 < i.length)
            for (var S = 0, k = i.length; S < k; S++)
              !(function (e) {
                if (i[e].from !== D.CONV_SYSTEM) {
                  E = !0;
                  var t = a.find(function (t) {
                    return (
                      t.conversationID ===
                      ''.concat(D.CONV_C2C).concat(i[e].from)
                    );
                  });
                  t
                    ? (t.unreadCount = i[e].unreadCount)
                    : a.push({
                        conversationID: ''.concat(D.CONV_C2C).concat(i[e].from),
                        unreadCount: i[e].unreadCount,
                        type: D.CONV_C2C,
                      });
                }
              })(S);
          if ($e(n))
            for (var R = 0, L = n.length; R < L; R++)
              !(function (e) {
                a.find(function (t) {
                  return (
                    t.conversationID === ''.concat(D.CONV_C2C).concat(n[e].from)
                  );
                }) ||
                  a.push({
                    conversationID: ''.concat(D.CONV_C2C).concat(n[e].from),
                    type: D.CONV_C2C,
                    lastMsgTime: n[e].lastMsgTime,
                  });
              })(R);
          return {
            conversationOptionsList: a,
            messageList: s,
            isUnreadC2CMessage: E,
          };
        },
      },
      {
        key: 'getMessageListFromUnreadDB',
        value: function () {
          return v(this._msgFromUnreadDBMap.values());
        },
      },
      {
        key: '_isC2CNotice',
        value: function (e) {
          return !(!$e((e = e.eventArray)) || 10 !== e[0].event);
        },
      },
      {
        key: '_handleNoticeFromUnreadDB',
        value: function () {
          var e,
            t = this._noticeFromUnreadDBList.length;
          0 !== t &&
            (Ae.l(
              ''.concat(this._n, '._handleNoticeFromUnreadDB count:').concat(t)
            ),
            (e = []),
            this._noticeFromUnreadDBList.forEach(function (t) {
              t.hasOwnProperty('c2cMessageRevokedNotify') && e.push(t);
            }),
            this.onMsgRevoked({ dataList: e }),
            (this._noticeFromUnreadDBList.length = 0),
            (e.length = 0));
        },
      },
      {
        key: 'onMsgRevoked',
        value: function (e) {
          var t,
            n = this,
            i = this.get(11),
            o = [];
          e.dataList.forEach(function (e) {
            e.c2cMessageRevokedNotify &&
              ((e = e.c2cMessageRevokedNotify.revokedInfos),
              ut(e) ||
                e.forEach(function (e) {
                  var r =
                    n.getMyUserID() === e.from
                      ? ''.concat(D.CONV_C2C).concat(e.to)
                      : ''.concat(D.CONV_C2C).concat(e.from);
                  t = i.revoke(r, e.sequence, e.random);
                  var a,
                    s = e.revokerInfo && e.revokerInfo.revoker,
                    c = (e.revokerInfo && e.revokerInfo.reason) || '';
                  t
                    ? (a = t)
                    : ((a = { conversationID: r, sequence: e.sequence }),
                      e.tinyID &&
                        e.clientTime &&
                        e.random &&
                        (a.ID = ''
                          .concat(e.tinyID, '-')
                          .concat(e.clientTime, '-')
                          .concat(e.random)),
                      e.time && (a.time = e.time)),
                    a &&
                      ((a.revoker = s),
                      (a.revokeReason = c),
                      (a.revokerInfo = { userID: s, nick: '', avatar: '' }),
                      o.push(a));
                }));
          }),
            0 !== o.length &&
              (i.onMessageRevoked(o),
              Ae.l(''.concat(this._n, '.onMsgRevoked count:').concat(o.length)),
              i.updateRevokerInfo(o).then(function (e) {
                n.emitOEvt(E.MESSAGE_REVOKED, e);
              }));
        },
      },
      {
        key: 'onMsgReadReceipt',
        value: function (e) {
          var t = this;
          e.dataList.forEach(function (e) {
            var n;
            Ve(e.c2cMessageReadReceipt) ||
              ((n = e.c2cMessageReadReceipt.to),
              e.c2cMessageReadReceipt.uinPairReadArray.forEach(function (e) {
                e = e.peerReadTime;
                var i =
                    (Ae.l(
                      ''
                        .concat(t._n, '.onMsgReadReceipt to:')
                        .concat(n, ' peerReadTime:')
                        .concat(e)
                    ),
                    ''.concat(D.CONV_C2C).concat(n)),
                  o = t.get(11);
                o.recordPeerReadTime(i, e), o.updateMsgIsPeerReadProp(i, e);
              }));
          });
        },
      },
      {
        key: 'onMsgReadNotice',
        value: function (e) {
          var t = this;
          e.dataList.forEach(function (e) {
            var n;
            Ve(e.c2cMessageReadNotice) ||
              ((n = t.get(11)),
              e.c2cMessageReadNotice.uinPairReadArray.forEach(function (e) {
                var i = e.from;
                (e = e.peerReadTime),
                  Ae.l(
                    ''
                      .concat(t._n, '.onMsgReadNotice from:')
                      .concat(i, ' lastReadTime:')
                      .concat(e)
                  ),
                  (i = ''.concat(D.CONV_C2C).concat(i)),
                  n.updateIsReadAfterReadReport({
                    conversationID: i,
                    lastMessageTime: e,
                  }),
                  n.updateUnreadCount(i);
              }));
          });
        },
      },
      {
        key: 'onMsgModified',
        value: function (e) {
          Ae.l(''.concat(this._n, '.onMsgModified options:'), e);
          var n = this.get(11);
          e.dataList.forEach(function (e) {
            n.onMessageModified(
              t(t({}, e), {}, { conversationType: D.CONV_C2C })
            );
          });
        },
      },
      {
        key: 'onReadReceiptList',
        value: function (e) {
          Ae.l(''.concat(this._n, '.onReadReceiptList options:'), e),
            this.get(11).updateReadReceiptInfo(e.dataList);
        },
      },
      {
        key: 'sendMessage',
        value: function (e, t) {
          return (e = this._createC2CMessagePack(e, t)), this.req(e);
        },
      },
      {
        key: '_createC2CMessagePack',
        value: function (e, t) {
          var n = null,
            i =
              (t &&
                (t.offlinePushInfo && (n = t.offlinePushInfo),
                !0 === t.onlineUserOnly &&
                  (n ? (n.disablePush = !0) : (n = { disablePush: !0 }))),
              ''),
            o =
              (ct(e.cloudCustomData) &&
                0 < e.cloudCustomData.length &&
                (i = e.cloudCustomData),
              []),
            r =
              (ze(t) &&
                ze(t.messageControlInfo) &&
                ((r = (s = t.messageControlInfo).excludedFromUnreadCount),
                (a = s.excludedFromLastMessage),
                (s = s.excludedFromContentModeration),
                !0 === r && o.push('NoUnread'),
                !0 === a && o.push('NoLastMsg'),
                !0 === s && o.push('NoMsgCheck')),
              this.isOnlineMessage(e, t) ? 0 : void 0),
            a = JSON.parse(JSON.stringify(e.getElements())),
            s = this.get(17).getFileDNList();
          return {
            P: Gn.SEND_C2C_MSG,
            tjgID: this.generateTjgID(e),
            data: {
              fromAccount: this.getMyUserID(),
              toAccount: e.to,
              msgBody: si(e.type, a, s),
              cloudCustomData: i,
              msgSeq: e.sequence,
              msgRandom: e.random,
              msgLifeTime: r,
              nick: e.nick,
              avatar: e.avatar,
              offlinePushInfo: Gi(n),
              messageControlInfo: 0 !== r ? o : void 0,
              clientTime: e.clientTime,
              needReadReceipt: !0 === e.needReadReceipt ? 1 : 0,
              isSupportExtension: !0 === e.isSupportExtension ? 1 : 0,
              isRelayMessage: !0 === e._relayFlag ? 1 : 0,
              cmConfigID: e._cmConfigID,
            },
          };
        },
      },
      {
        key: 'isOnlineMessage',
        value: function (e, t) {
          return !(!t || !0 !== t.onlineUserOnly);
        },
      },
      {
        key: 'revokeMessage',
        value: function (e) {
          return this.req({
            P: Gn.REVOKE_C2C_MSG,
            data: {
              msgInfo: {
                fromAccount: e.from,
                toAccount: e.to,
                msgSeq: e.sequence,
                msgRandom: e.random,
                msgTimeStamp: e.time,
              },
            },
          });
        },
      },
      {
        key: 'deleteMessage',
        value: function (e) {
          var t = e.to;
          return (
            (e = e.keyList),
            Ae.l(
              ''
                .concat(this._n, '.deleteMessage toAccount:')
                .concat(t, ' count:')
                .concat(e.length)
            ),
            this.req({
              P: Gn.DEL_C2C_MSG,
              data: { fromAccount: this.getMyUserID(), to: t, keyList: e },
            })
          );
        },
      },
      {
        key: 'modifyRemoteMessage',
        value: function (e) {
          var t = e.from,
            n = e.to,
            i = void 0 === (i = e.version) ? 0 : i,
            o = e.sequence,
            r = e.random,
            a = e.time,
            s = e.payload,
            c = e.type,
            u = void (e = e.cloudCustomData);
          return (
            Ft(c) && (u = []).push({ type: c, content: s }),
            this.req({
              P: Gn.MODIFY_C2C_MSG,
              data: {
                from: t,
                to: n,
                version: i,
                sequence: o,
                random: r,
                time: a,
                elements: u,
                cloudCustomData: e,
              },
            })
          );
        },
      },
      {
        key: 'setMessageRead',
        value: function (e) {
          var t = this,
            n = e.conversationID,
            i = e.lastMessageTime,
            o = ''.concat(this._n, '.').concat('setMessageRead'),
            r =
              ((e = 'convID:'.concat(n, ' lastMessageTime:').concat(i)),
              Ae.l(''.concat(o, ' ').concat(e)),
              Ke(i) || this.warn('DoNotModifyLastTime'),
              new ei('setMessageRead'));
          return (
            r.setMessage(e),
            this.req({
              P: Gn.SET_C2C_MSG_READ,
              data: {
                C2CMsgReaded: {
                  cookie: '',
                  C2CMsgReadedItem: [
                    {
                      toAccount: n.replace('C2C', ''),
                      lastMessageTime: i,
                      receipt: 1,
                    },
                  ],
                },
              },
            })
              .then(function () {
                r.end(), Ae.l(''.concat(o, ' ok'));
                var e = t.get(11);
                return (
                  e.updateIsReadAfterReadReport({
                    conversationID: n,
                    lastMessageTime: i,
                  }),
                  e.updateUnreadCount(n),
                  mn()
                );
              })
              .catch(function (e) {
                return (
                  r.setError(e).end(),
                  Ae.l(''.concat(o, ' failed. error:'), e),
                  In(e)
                );
              })
          );
        },
      },
      {
        key: 'getRoamingMessage',
        value: function (e) {
          var t = this,
            n = ''.concat(this._n, '.').concat('getRoamingMessage'),
            i = e.peerAccount,
            o = e.conversationID,
            r = e.count,
            a = e.lastMessageTime,
            s =
              ((e = e.messageKey),
              'peerAccount:'
                .concat(i, ' count:')
                .concat(r || 15, ' lastMessageTime:')
                .concat(a || 0, ' messageKey:')
                .concat(e)),
            c =
              (Ae.l(''.concat(n, ' ').concat(s)), new ei('getRoamingMessage'));
          return this.req({
            P: Gn.GET_C2C_ROAMING_MSG,
            data: {
              peerAccount: i,
              count: r || 15,
              lastMessageTime: a || 0,
              messageKey: e,
            },
          })
            .then(function (e) {
              var i = (e = e.data).complete,
                r = e.messageList,
                a = e.messageKey,
                u =
                  ((e = e.lastMessageTime),
                  ut(r)
                    ? Ae.l(
                        ''
                          .concat(n, ' ok. complete:')
                          .concat(i, ' but messageList is undefined!')
                      )
                    : Ae.l(
                        ''
                          .concat(n, ' ok. complete:')
                          .concat(i, ' count:')
                          .concat(r.length)
                      ),
                  c
                    .setMessage(
                      ''
                        .concat(s, ' complete:')
                        .concat(i, ' length:')
                        .concat(r.length)
                    )
                    .end(),
                  t.get(11));
              return (
                1 === i && u.setCompleted(o),
                (i = u.onRoamingMessage(r, o)),
                u.modifyMessageList(o),
                u.updateIsRead(o),
                u.updateRoamingMsgKeyAndTime(o, a, e),
                (r = u.getPeerReadTime(o)),
                Ae.l(
                  ''
                    .concat(n, ' update isPeerRead property. convID:')
                    .concat(o, ' peerReadTime:')
                    .concat(r)
                ),
                r
                  ? u.updateMsgIsPeerReadProp(o, r)
                  : ((a = o.replace(D.CONV_C2C, '')),
                    t.getRemotePeerReadTime([a]).then(function () {
                      u.updateMsgIsPeerReadProp(o, u.getPeerReadTime(o));
                    })),
                (e = ''),
                0 < i.length
                  ? (e = i[0].ID)
                  : (r = u.getLocalOldestMessage(o)) && (e = r.ID),
                Ae.l(
                  ''
                    .concat(n, ' nextReqID:')
                    .concat(e, ' storedMsgCount:')
                    .concat(i.length)
                ),
                { nextReqID: e, storedMessageList: i }
              );
            })
            .catch(function (e) {
              return (
                c.setMessage(s).setError(e).end(),
                Ae.w(''.concat(n, ' failed. error:'), e),
                In(e)
              );
            });
        },
      },
      {
        key: 'getRoamingMessagesHopping',
        value: function (e) {
          var t = this,
            n = ''.concat(this._n, '.').concat('getRoamingMessagesHopping'),
            i = e.peerAccount,
            o = void 0 === (o = e.time) ? 0 : o,
            r = e.count,
            a = e.direction,
            s = ''.concat(D.CONV_C2C).concat(i),
            c = 'peerAccount:'
              .concat(i, ' count:')
              .concat(r, ' time:')
              .concat(o, ' direction:')
              .concat(a),
            u =
              (Ae.l(''.concat(n, ' ').concat(c)),
              new ei('getRoamingMessagesHopping'));
          return this.req({
            P: Gn.GET_C2C_ROAMING_MSG,
            data: {
              peerAccount: i,
              count: r + 1,
              lastMessageTime: o,
              direction: a,
            },
          })
            .then(function (e) {
              var i = (e = e.data).complete,
                o = void 0 === (o = e.messageList) ? [] : o,
                r =
                  ((e = e.lastMessageTime),
                  'complete:'.concat(i, ' count:').concat(o.length)),
                l =
                  (Ae.l(''.concat(n, ' ok. ').concat(r)),
                  u.setMessage(''.concat(c, ' ').concat(r)).end(),
                  1 !== i && (1 === a ? o.pop() : o.shift()),
                  t.get(11));
              return (
                (r = l.onRoamingMessage(o, s, !1)),
                t._modifyMessageList(s, r),
                (o = t._computeResult({
                  complete: i,
                  lastMessageTime: e,
                  resultList: r,
                })),
                l.storeHoppingMessageList(o.messageList),
                (i = l.getPeerReadTime(s)),
                Ae.l(
                  ''
                    .concat(n, ' update isPeerRead property. convID:')
                    .concat(s, ' peerReadTime:')
                    .concat(i)
                ),
                i
                  ? l.updateMsgIsPeerReadProp(s, i)
                  : ((e = s.replace(D.CONV_C2C, '')),
                    t.getRemotePeerReadTime([e]).then(function () {
                      l.updateMsgIsPeerReadProp(s, l.getPeerReadTime(s));
                    })),
                mn(o)
              );
            })
            .catch(function (e) {
              return (
                u.setMessage(c).setError(e).end(),
                Ae.w(''.concat(n, ' failed. error:'), e),
                In(e)
              );
            });
        },
      },
      {
        key: '_computeResult',
        value: function (e) {
          var t = void 0 === (t = e.complete) ? 0 : t,
            n = e.lastMessageTime;
          return (
            (e = {
              messageList: v(void 0 === (e = e.resultList) ? [] : e),
              isCompleted: !1,
              nextMessageTime: '',
            }),
            1 === t ? (e.isCompleted = !0) : (e.nextMessageTime = n),
            e
          );
        },
      },
      {
        key: '_modifyMessageList',
        value: function (e, t) {
          if ((e = this.get(11).getLocalConversation(e)))
            for (
              var n = e.userProfile.nick,
                i = e.userProfile.avatar,
                o = (e = this.get(4).getNickAndAvatarByUserID(
                  this.getMyUserID()
                )).nick,
                r = e.avatar,
                a = t.length - 1;
              0 <= a;
              a--
            ) {
              var s = t[a];
              'in' === s.flow &&
                (s.nick !== n && s.setNickAndAvatar({ nick: n }),
                s.avatar !== i && s.setNickAndAvatar({ avatar: i })),
                'out' === s.flow &&
                  (s.nick !== o && s.setNickAndAvatar({ nick: o }),
                  s.avatar !== r && s.setNickAndAvatar({ avatar: r }));
            }
        },
      },
      {
        key: 'getRemotePeerReadTime',
        value: function (e) {
          var t = this,
            n = ''.concat(this._n, '.').concat('getRemotePeerReadTime');
          if (Ve(e)) return Promise.resolve();
          var i = new ei('getRemotePeerReadTime');
          return (
            Ae.l(''.concat(n, ' userIDList:').concat(e)),
            this.req({ P: Gn.GET_C2C_PEER_READ_TIME, data: { userIDList: e } })
              .then(function (o) {
                var r = o.data.peerReadTimeList;
                Ae.l(''.concat(n, ' ok. peerReadTimeList:').concat(r));
                for (var a = '', s = t.get(11), c = 0; c < e.length; c++)
                  (a += ''.concat(e[c], '-').concat(r[c], ' ')),
                    0 < r[c] &&
                      s.recordPeerReadTime(
                        ''.concat(D.CONV_C2C).concat(e[c]),
                        r[c]
                      );
                i.setMessage(a).end();
              })
              .catch(function (e) {
                i.setError(e).end(), Ae.w(''.concat(n, ' failed. error:'), e);
              })
          );
        },
      },
      {
        key: 'sendReadReceipt',
        value: function (e) {
          var t = e[0].conversationID.replace(D.CONV_C2C, ''),
            n = new ei('sendReadReceipt'),
            i = (n.setMessage('peerAccount:'.concat(t)), this.getMyUserID());
          if (
            0 ===
            (e = e
              .filter(function (e) {
                return e.from !== i && !0 === e.needReadReceipt;
              })
              .map(function (e) {
                return {
                  fromAccount: e.from,
                  toAccount: e.to,
                  sequence: e.sequence,
                  random: e.random,
                  time: e.time,
                  clientTime: e.clientTime,
                };
              })).length
          )
            return In({ code: wn.READ_RECEIPT_MSG_LIST_EMPTY });
          var o = ''.concat(this._n, '.').concat('sendReadReceipt');
          return (
            Ae.l(
              ''
                .concat(o, '. peerAccount:')
                .concat(t, ' length:')
                .concat(e.length)
            ),
            this.req({
              P: Gn.SEND_C2C_READ_RECEIPT,
              data: { peerAccount: t, messageInfoList: e },
            })
              .then(function (e) {
                return n.end(), Ae.l(''.concat(o, ' ok')), mn();
              })
              .catch(function (e) {
                return (
                  n.setError(e).end(),
                  Ae.w(''.concat(o, ' failed. error:'), e),
                  In(e)
                );
              })
          );
        },
      },
      {
        key: 'getReadReceiptList',
        value: function (e) {
          var t = e[0].conversationID.replace(D.CONV_C2C, '');
          return (
            Ae.l(
              ''
                .concat(this._n, '.getReadReceiptList peerAccount:')
                .concat(t, ' msgCount:')
                .concat(e.length)
            ),
            yn({ messageList: e })
          );
        },
      },
      {
        key: 'getMessageExtensions',
        value: function (e, t) {
          return (
            Ae.l(
              ''
                .concat(this._n, '.getMessageExtensions startSequence:')
                .concat(t)
            ),
            this.req({
              P: Gn.GET_C2C_MSG_EXT,
              data: {
                from: e.from,
                to: e.to,
                messageKey: this.getMessageKey(e),
                startSequence: t,
              },
            })
          );
        },
      },
      {
        key: 'modifyMsgExts',
        value: function (e, t) {
          var n =
            2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 1;
          return (
            Ae.l(''.concat(this._n, '.modifyMsgExts operateType:').concat(n)),
            this.req({
              P: Gn.MODIFY_C2C_MSG_EXT,
              data: {
                from: e.from,
                to: e.to,
                messageKey: this.getMessageKey(e),
                extensionList: t,
                operateType: n,
              },
            })
          );
        },
      },
      {
        key: 'getMessageKey',
        value: function (e) {
          var t = e.clientSequence,
            n = e.random;
          return (e = e.time), ''.concat(t, '_').concat(n, '_').concat(e);
        },
      },
      {
        key: 'reset',
        value: function () {
          Ae.l(''.concat(this._n, '.reset')),
            this._msgFromUnreadDBMap.clear(),
            (this._noticeFromUnreadDBList.length = 0);
        },
      },
    ]);
  var xi,
    Fi = Hi,
    qi = {
      A2KEY_AND_TINYID_UPDATED: '_inner'.concat(1),
      CLOUD_CONFIG: '_inner'.concat(2),
      PROFILE_UPDATED: '_inner'.concat(3),
      CONV_SYNC_COMPLETED: '_inner'.concat(4),
      C2C_UNREAD_HANDLE_COMPLETED: '_inner'.concat(5),
    },
    Vi =
      (r(Bi, [
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this._convM.getCloudConfig('topic_msg_limit');
            ut(e) || (this.TOPIC_MSG_LIMIT = Number(e)),
              Ae.l(
                ''
                  .concat(this._n, '._onCloudConfig topicMsgLimit:')
                  .concat(this.TOPIC_MSG_LIMIT)
              );
          },
        },
        {
          key: 'onCheckTimer',
          value: function (e) {
            if (e % 20 == 0 && 0 < this._map.size) {
              var t,
                n = T(this._map);
              try {
                for (n.s(); !(t = n.n()).done; ) {
                  var i = _(t.value, 2),
                    o = i[0],
                    r = i[1];
                  o.includes(Fe) &&
                    r.size >= this.TOPIC_MSG_LIMIT &&
                    this._convM.clearMemMsg(o, !0);
                }
              } catch (a) {
                n.e(a);
              } finally {
                n.f();
              }
            }
          },
        },
        {
          key: 'pushIn',
          value: function (e) {
            var t =
                1 < arguments.length && void 0 !== arguments[1] && arguments[1],
              n = e.conversationID,
              i = !0,
              o =
                (this._map.has(n) || this._map.set(n, new Map()),
                this._getUniqueIDOfMsg(e));
            if (this._map.get(n).has(o)) {
              var r = this._map.get(n).get(o);
              if (!t || !0 === r.isModified) return !1;
            }
            return (
              this._map.get(n).set(o, e),
              this._setLatestMsgSentByPeer(n, e),
              this._setLatestMsgSentByMe(n, e),
              i
            );
          },
        },
        {
          key: 'unshift',
          value: function (e, t) {
            var n;
            if (
              ($e(e)
                ? 0 < e.length &&
                  ((n = e[0].conversationID), this._unshiftMultipleMsgs(e, t))
                : ((n = e.conversationID), this._unshiftSingleMsg(e, t)),
              n)
            ) {
              var i = Array.from(this._map.get(n).values());
              if (0 !== (e = i.length)) {
                for (var o = e - 1; 0 <= o; o--)
                  if ('out' === i[o].flow) {
                    this._setLatestMsgSentByMe(n, i[o]);
                    break;
                  }
                if (n.startsWith(D.CONV_C2C))
                  for (var r = e - 1; 0 <= r; r--)
                    if ('in' === i[r].flow) {
                      this._setLatestMsgSentByPeer(n, i[r]);
                      break;
                    }
              }
            }
          },
        },
        {
          key: '_unshiftSingleMsg',
          value: function (e, t) {
            var n = e.conversationID,
              i = this._getUniqueIDOfMsg(e);
            if (!this._map.has(n))
              return (
                this._map.set(n, new Map()),
                this._map.get(n).set(i, e),
                void t.push(e)
              );
            var o = this._map.get(n),
              r = Array.from(o);
            o.has(i) ||
              (r.unshift([i, e]), this._map.set(n, new Map(r)), t.push(e));
          },
        },
        {
          key: '_unshiftMultipleMsgs',
          value: function (e, t) {
            for (
              var n = e.length,
                i = [],
                o = e[0].conversationID,
                r = this._map.get(o),
                a = this._map.has(o) ? Array.from(r) : [],
                s = 0;
              s < n;
              s++
            ) {
              var c = this._getUniqueIDOfMsg(e[s]);
              (r && r.has(c)) || (i.push([c, e[s]]), t.push(e[s]));
            }
            this._map.set(o, new Map(i.concat(a)));
          },
        },
        {
          key: 'remove',
          value: function (e) {
            var t = e.conversationID;
            (e = this._getUniqueIDOfMsg(e)),
              this._map.has(t) && this._map.get(t).delete(e);
          },
        },
        {
          key: 'revoke',
          value: function (e, t, n) {
            var i;
            return this._map.has(e)
              ? ((i = this._map.get(e)), this._updateMsgIsRevoked(i, t, n))
              : this._hoppingMsgMap.has(e)
                ? ((i = this._hoppingMsgMap.get(e)),
                  this._updateMsgIsRevoked(i, t, n))
                : null;
          },
        },
        {
          key: '_updateMsgIsRevoked',
          value: function (e, t, n) {
            var i,
              o = T(e);
            try {
              for (o.s(); !(i = o.n()).done; ) {
                var r = _(i.value, 2)[1];
                if (r.sequence === t && (ut(n) || r.random === n))
                  return r.isRevoked || (r.isRevoked = !0), r;
              }
            } catch (a) {
              o.e(a);
            } finally {
              o.f();
            }
          },
        },
        {
          key: 'removeByConvID',
          value: function (e) {
            var t = this._map.has(e);
            Ae.l(
              ''
                .concat(this._n, '.removeByConvID convID:')
                .concat(e, ' has:')
                .concat(t)
            ),
              t &&
                (this._map.delete(e),
                this._latestMsgSentByPeerMap.delete(e),
                this._latestMsgSentByMeMap.delete(e));
          },
        },
        {
          key: 'findMessage',
          value: function (e) {
            var t = null;
            return (t = this._findMsg(e, this._map))
              ? t
              : this._findMsg(e, this._hoppingMsgMap);
          },
        },
        {
          key: '_findMsg',
          value: function (e, t) {
            var n,
              i = null,
              o = T(t);
            try {
              for (o.s(); !(n = o.n()).done; )
                for (
                  var r = v(_(n.value, 2)[1].values()), a = r.length, s = 0;
                  s < a;
                  s++
                )
                  if (r[s].ID === e) {
                    i = r[s];
                    break;
                  }
            } catch (c) {
              o.e(c);
            } finally {
              o.f();
            }
            return i;
          },
        },
        {
          key: 'updateMsgIsPeerReadProp',
          value: function (e, t) {
            var n,
              i = [];
            return (
              this._map.has(e)
                ? ((n = this._map.get(e)),
                  (i = this._updateMsgIsPeerReadProp(n, t)))
                : this._hoppingMsgMap.has(e) &&
                  ((n = this._hoppingMsgMap.get(e)),
                  (i = this._updateMsgIsPeerReadProp(n, t))),
              Ae.l(
                ''
                  .concat(this._n, '.updateMsgIsPeerReadProp convID:')
                  .concat(e, ' peerReadTime:')
                  .concat(t, ' count:')
                  .concat(i.length)
              ),
              i
            );
          },
        },
        {
          key: '_updateMsgIsPeerReadProp',
          value: function (e, t) {
            var n,
              i = [],
              o = T(e);
            try {
              for (o.s(); !(n = o.n()).done; ) {
                var r = _(n.value, 2)[1];
                r.time <= t &&
                  !r.isPeerRead &&
                  'out' === r.flow &&
                  ((r.isPeerRead = !0), i.push(r));
              }
            } catch (a) {
              o.e(a);
            } finally {
              o.f();
            }
            return i;
          },
        },
        {
          key: 'updateMsgIsModifiedProp',
          value: function (e) {
            var t = e.conversationID;
            this._map.has(t) &&
              ((e = this._getUniqueIDOfMsg(e)),
              (t = this._map.get(t).get(e)) && (t.isModified = !0));
          },
        },
        {
          key: 'hasLocalMsgList',
          value: function (e) {
            return this._map.has(e);
          },
        },
        {
          key: 'getLocalMsgList',
          value: function (e) {
            return this.hasLocalMsgList(e) ? v(this._map.get(e).values()) : [];
          },
        },
        {
          key: 'getLocalMaxSeq',
          value: function (e) {
            return this.hasLocalMsgList(e)
              ? ((e = v(this._map.get(e).values()).map(function (e) {
                  return e.sequence;
                })),
                Math.max.apply(Math, v(e)))
              : 0;
          },
        },
        {
          key: 'getLocalMaxTime',
          value: function (e) {
            return this.hasLocalMsgList(e)
              ? ((e = v(this._map.get(e).values()).map(function (e) {
                  return e.time;
                })),
                Math.max.apply(Math, v(e)))
              : 0;
          },
        },
        {
          key: 'hasLocalMsg',
          value: function (e, t) {
            for (
              var n = !1, i = this.getLocalMsgList(e), o = i.length, r = 0;
              r < o;
              r++
            )
              i[r].ID === t && (n = !0);
            return n;
          },
        },
        {
          key: 'getLocalMsg',
          value: function (e, t) {
            for (
              var n = null, i = this.getLocalMsgList(e), o = i.length, r = 0;
              r < o;
              r++
            )
              if (i[r].ID === t) {
                n = i[r];
                break;
              }
            return n;
          },
        },
        {
          key: 'getLocalLastMsg',
          value: function (e) {
            return (e = this.getLocalMsgList(e))[e.length - 1];
          },
        },
        {
          key: 'getLocalSecondLastMsg',
          value: function (e) {
            return (e = this.getLocalMsgList(e))[e.length - 2];
          },
        },
        {
          key: 'getLocalOldestMsg',
          value: function (e) {
            return this.getLocalMsgList(e)[0];
          },
        },
        {
          key: '_setLatestMsgSentByPeer',
          value: function (e, t) {
            e.startsWith(D.CONV_C2C) &&
              'in' === t.flow &&
              this._latestMsgSentByPeerMap.set(e, t);
          },
        },
        {
          key: '_setLatestMsgSentByMe',
          value: function (e, t) {
            'out' === t.flow && this._latestMsgSentByMeMap.set(e, t);
          },
        },
        {
          key: 'getLatestMsgSentByPeer',
          value: function (e) {
            return this._latestMsgSentByPeerMap.get(e);
          },
        },
        {
          key: 'getLatestMsgSentByMe',
          value: function (e) {
            return this._latestMsgSentByMeMap.get(e);
          },
        },
        {
          key: 'modifyMsgSentByPeer',
          value: function (e) {
            var t = e.conversationID,
              n = e.latestNick,
              i = e.latestAvatar;
            if (!Ve((e = this._map.get(t)))) {
              var o = Array.from(e.values());
              if (0 !== (e = o.length)) {
                for (var r = null, a = 0, s = !1, c = e - 1; 0 <= c; c--)
                  'in' === o[c].flow &&
                    ((r = o[c]).nick !== n &&
                      (r.setNickAndAvatar({ nick: n }), (s = !0)),
                    r.avatar !== i &&
                      (r.setNickAndAvatar({ avatar: i }), (s = !0)),
                    s && (a += 1));
                Ae.l(
                  ''
                    .concat(this._n, '.modifyMsgSentByPeer convID:')
                    .concat(t, ' count:')
                    .concat(a)
                );
              }
            }
          },
        },
        {
          key: 'modifyMsgSentByMe',
          value: function (e) {
            var t = e.conversationID,
              n = e.latestNick,
              i = e.latestAvatar;
            if (!Ve((e = this._map.get(t)))) {
              var o = Array.from(e.values());
              if (0 !== (e = o.length)) {
                for (var r = null, a = 0, s = !1, c = e - 1; 0 <= c; c--)
                  'out' === o[c].flow &&
                    ((r = o[c]).nick !== n &&
                      (r.setNickAndAvatar({ nick: n }), (s = !0)),
                    r.avatar !== i &&
                      (r.setNickAndAvatar({ avatar: i }), (s = !0)),
                    s && (a += 1));
                Ae.l(
                  ''
                    .concat(this._n, '.modifyMsgSentByMe convID:')
                    .concat(t, ' count:')
                    .concat(a)
                );
              }
            }
          },
        },
        {
          key: 'getTopicConvIDList',
          value: function (e) {
            return v(this._map.keys()).filter(function (t) {
              return t.startsWith(''.concat(D.CONV_GROUP).concat(e));
            });
          },
        },
        {
          key: 'onMsgModified',
          value: function (e, t) {
            if (!this._map.has(e) && !this._hoppingMsgMap.has(e))
              return { isUpdated: !1, message: null };
            var n = ''.concat(this._n, '.onMsgModified'),
              i = this._getUniqueIDOfMsg(t),
              o = this._getTargetMsg(e, i),
              r = !!o;
            return (
              Ae.l(
                ''
                  .concat(n, ' convID:')
                  .concat(e, ' uniqueID:')
                  .concat(i, ' has:')
                  .concat(r)
              ),
              r
                ? ((e = t.messageVersion),
                  (i = t.elements),
                  (r = t.cloudCustomData),
                  (t = t.checkResult),
                  Ae.l(
                    ''
                      .concat(n, ' localVersion:')
                      .concat(o.version, ' remoteVersion:')
                      .concat(e)
                  ),
                  o.version < e
                    ? ((o.version = e),
                      (o._elements = JSON.parse(JSON.stringify(i))),
                      (o.payload = JSON.parse(JSON.stringify(i[0].content))),
                      (o.type = i[0].type),
                      (o.cloudCustomData = r),
                      (o.isModified = !0),
                      (o.hasRiskContent = Wt(t)),
                      { isUpdated: !0, message: o })
                    : { isUpdated: !1, message: o })
                : { isUpdated: !1, message: null }
            );
          },
        },
        {
          key: '_getUniqueIDOfMsg',
          value: function (e) {
            var t = e.from,
              n = e.to,
              i = e.random,
              o = e.sequence;
            return (
              (e = e.time),
              ''
                .concat(t, '-')
                .concat(n, '-')
                .concat(i, '-')
                .concat(o, '-')
                .concat(e)
            );
          },
        },
        {
          key: '_getTargetMsg',
          value: function (e, t) {
            if (this._map.has(e)) return this._map.get(e).get(t);
            var n = void 0;
            if (this._hoppingMsgMap.has(e))
              for (
                var i = v(this._hoppingMsgMap.get(e).values()), o = 0;
                o < i.length;
                o++
              )
                if (this._getUniqueIDOfMsg(i[o]) === t) {
                  n = i[o];
                  break;
                }
            return n;
          },
        },
        {
          key: 'storeHoppingMsgList',
          value: function (e) {
            if (0 !== e.length) {
              var t = e[0].conversationID,
                n = e.length;
              this._hoppingMsgMap.has(t) ||
                this._hoppingMsgMap.set(t, new Map());
              for (var i = this._hoppingMsgMap.get(t), o = 0; o < n; o++) {
                var r = e[o];
                i.has(r.ID) || i.set(r.ID, r);
              }
            }
          },
        },
        {
          key: 'getHoppingMsg',
          value: function (e, t) {
            if (this._hoppingMsgMap.has(e))
              return this._hoppingMsgMap.get(e).get(t);
          },
        },
        {
          key: 'reset',
          value: function () {
            this._map.clear(),
              this._latestMsgSentByPeerMap.clear(),
              this._latestMsgSentByMeMap.clear(),
              this._hoppingMsgMap.clear();
          },
        },
      ]),
      Bi);
  function Bi(e) {
    i(this, Bi),
      (this._convM = e),
      (this._map = new Map()),
      (this._n = 'MsgListHandler'),
      (this._latestMsgSentByPeerMap = new Map()),
      (this._latestMsgSentByMeMap = new Map()),
      (this._hoppingMsgMap = new Map()),
      (this.TOPIC_MSG_LIMIT = 1e3),
      this._convM.getIEmitInst().on(qi.CLOUD_CONFIG, this._onCloudConfig, this);
  }
  function Hi(e) {
    return (
      i(this, Hi),
      ((e = xi.call(this, e))._n = 'C2CModule'),
      (e._msgFromUnreadDBMap = new Map()),
      (e._noticeFromUnreadDBList = []),
      e
    );
  }
  function ji(e) {
    this.mixin(e);
  }
  function Ki(e, n, i) {
    return ut(e)
      ? {
          lastTime: 0,
          lastSequence: 0,
          fromAccount: '',
          messageForShow: '',
          payload: null,
          type: '',
          isRevoked: !1,
          cloudCustomData: '',
          onlineOnlyFlag: !1,
          nick: '',
          nameCard: '',
          version: 0,
          isPeerRead: !1,
          revoker: null,
        }
      : (i && e.ID) || e instanceof Ei
        ? {
            lastTime: e.time || 0,
            lastSequence: e.sequence || 0,
            fromAccount: e.from || '',
            messageForShow: xt(e.type, e.payload, n),
            payload: e.payload || null,
            type: e.type || null,
            isRevoked: e.isRevoked || !1,
            cloudCustomData: e.cloudCustomData || '',
            onlineOnlyFlag: e._onlineOnlyFlag || !1,
            nick: e.nick || '',
            nameCard: e.nameCard || '',
            version: e.version || 0,
            isPeerRead: e.isPeerRead || !1,
            revoker: e.revoker || null,
          }
        : t(t({}, e), {}, { messageForShow: xt(e.type, e.payload, n) });
  }
  function Wi(e, t) {
    return Ve(e)
      ? {
          lastTime: 0,
          lastSequence: 0,
          fromAccount: '',
          payload: null,
          type: '',
          messageForShow: '',
          nick: '',
          avatar: '',
          version: 0,
          cloudCustomData: '',
          isRevoked: !1,
          revoker: null,
        }
      : {
          lastTime: e.time || 0,
          lastSequence: e.sequence || 0,
          fromAccount: e.from || '',
          payload: e.payload || null,
          type: e.type || '',
          messageForShow: xt(e.type, e.payload, t),
          nick: e.nick || '',
          avatar: e.avatar || '',
          version: e.version || 0,
          cloudCustomData: e.cloudCustomData || '',
          isRevoked: e.isRevoked || !1,
          revoker: e.revoker || null,
        };
  }
  function zi(e) {
    var t = String(e).replace(/[=]+$/, ''),
      n = '';
    if (t.length % 4 == 1) return '';
    for (
      var i, o, r = 0, a = 0;
      (o = t.charAt(a++));
      ~o &&
      ((i = r % 4 ? 64 * i + o : o), r++ % 4) &&
      (n += String.fromCharCode(255 & (i >> ((-2 * r) & 6))))
    )
      o =
        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.indexOf(
          o
        );
    try {
      return decodeURIComponent(escape(n));
    } catch (s) {
      return '';
    }
  }
  ji.mixin = function (e) {
    ((e = e.prototype || e)._isReady = !1),
      (e.ready = function (e) {
        if (e)
          return this._isReady
            ? void (1 < arguments.length &&
              void 0 !== arguments[1] &&
              arguments[1]
                ? e.call(this)
                : setTimeout(e, 1))
            : ((this._readyQueue = this._readyQueue || []),
              void this._readyQueue.push(e));
      }),
      (e.triggerReady = function () {
        var e = this;
        (this._isReady = !0),
          setTimeout(function () {
            var t = e._readyQueue;
            (e._readyQueue = []),
              t &&
                0 < t.length &&
                t.forEach(function (e) {
                  e.call(this);
                }, e);
          }, 1);
      }),
      (e.resetReady = function () {
        (this._isReady = !1), (this._readyQueue = []);
      }),
      (e.isReady = function () {
        return this._isReady;
      });
  };
  var $i,
    Yi,
    Ji,
    Xi,
    Zi,
    Qi = ['jpg', 'jpeg', 'gif', 'png', 'bmp', 'image', 'webp'],
    eo = ['mp4', 'quicktime', 'mov'],
    to =
      (r(rr, [
        {
          key: 'validate',
          value: function (e) {
            var t,
              n = !0,
              i = '';
            if (Ve(e)) return { valid: !1, tips: 'empty options' };
            if (e.profileCustomField)
              for (
                var o = e.profileCustomField.length, r = null, a = 0;
                a < o;
                a++
              ) {
                if (
                  ((r = e.profileCustomField[a]),
                  !ct(r.key) || -1 === r.key.indexOf('Tag_Profile_Custom'))
                )
                  return {
                    valid: !1,
                    tips: 'The prefix of keys of the custom profile key-value pairs (which is profileCustomField) must be Tag_Profile_Custom',
                  };
                if (!ct(r.value))
                  return {
                    valid: !1,
                    tips: 'The type of values of the custom profile key-value pairs (which is profileCustomField) must be String',
                  };
              }
            for (t in e)
              if (Object.prototype.hasOwnProperty.call(e, t)) {
                if ('profileCustomField' === t) continue;
                if (Ve(e[t]) && !ct(e[t]) && !Ke(e[t])) {
                  (i = 'key:' + t + ', invalid value:' + e[t]), (n = !1);
                  continue;
                }
                switch (t) {
                  case 'nick':
                    ct(e[t]) || (n = !(i = 'nick must be a string')),
                      500 < et(e[t]) &&
                        ((i = 'nick name limited: must less than or equal to '
                          .concat(500, ' bytes, current size: ')
                          .concat(et(e[t]), ' bytes')),
                        (n = !1));
                    break;
                  case 'gender':
                    ot(Pe, e.gender) ||
                      ((i = 'key:gender, invalid value:' + e.gender), (n = !1));
                    break;
                  case 'birthday':
                    Ke(e.birthday) || (n = !(i = 'birthday must be a number'));
                    break;
                  case 'location':
                    ct(e.location) || (n = !(i = 'location must be a string'));
                    break;
                  case 'selfSignature':
                    ct(e.selfSignature) ||
                      (n = !(i = 'selfSignature must be a string'));
                    break;
                  case 'allowType':
                    ot(Ue, e.allowType) ||
                      ((i = 'key:allowType, invalid value:' + e.allowType),
                      (n = !1));
                    break;
                  case 'language':
                    Ke(e.language) || (n = !(i = 'language must be a number'));
                    break;
                  case 'avatar':
                    ct(e.avatar) || (n = !(i = 'avatar must be a string'));
                    break;
                  case 'messageSettings':
                    0 !== e.messageSettings &&
                      1 !== e.messageSettings &&
                      (n = !(i = 'messageSettings must be 0 or 1'));
                    break;
                  case 'adminForbidType':
                    ot(we, e.adminForbidType) ||
                      ((i =
                        'key:adminForbidType, invalid value:' +
                        e.adminForbidType),
                      (n = !1));
                    break;
                  case 'level':
                    Ke(e.level) || (n = !(i = 'level must be a number'));
                    break;
                  case 'role':
                    Ke(e.role) || (n = !(i = 'role must be a number'));
                    break;
                  default:
                    (i = 'unknown key:' + t + '  ' + e[t]), (n = !1);
                }
              }
            return { valid: n, tips: i };
          },
        },
      ]),
      rr),
    no =
      (r(or, [
        {
          key: 'set',
          value: function (e) {
            var t;
            this.map.size >= this.MAX_LENGTH &&
              ((t = this.map.entries().next().value[0]), this.map.delete(t)),
              this.map.set(e, 1);
          },
        },
        {
          key: 'has',
          value: function (e) {
            return this.map.has(e);
          },
        },
        {
          key: 'delete',
          value: function (e) {
            this.has(e) && this.map.delete(e);
          },
        },
        {
          key: 'reset',
          value: function () {
            this.map.clear();
          },
        },
      ]),
      or),
    io = [
      'groupID',
      'name',
      'avatar',
      'type',
      'introduction',
      'notification',
      'ownerID',
      'selfInfo',
      'createTime',
      'infoSequence',
      'lastInfoTime',
      'lastMessage',
      'nextMessageSeq',
      'memberNum',
      'maxMemberNum',
      'memberList',
      'joinOption',
      'groupCustomField',
      'muteAllMembers',
      'isSupportTopic',
      'inviteOption',
      '_lastRevokedTime',
    ],
    oo =
      (r(ir, [
        {
          key: 'memberNum',
          get: function () {
            return this.memberCount;
          },
          set: function (e) {},
        },
        {
          key: 'maxMemberNum',
          get: function () {
            return this.maxMemberCount;
          },
          set: function (e) {},
        },
        {
          key: '_initGroup',
          value: function (e) {
            for (var t in e)
              io.indexOf(t) < 0 ||
                ('selfInfo' !== t
                  ? ('memberNum' === t && (this.memberCount = e[t]),
                    'maxMemberNum' === t && (this.maxMemberCount = e[t]),
                    'isSupportTopic' !== t
                      ? (this[t] = e[t])
                      : (this.isSupportTopic = 1 === e[t]))
                  : this.updateSelfInfo(e[t]));
          },
        },
        {
          key: 'updateGroup',
          value: function (e) {
            var t = this;
            ((e.appid = void 0),
            (e.grossTopicNextMsgSeq = void 0),
            e.selfInfo && (e.selfInfo.grossTopicReadSeq = void 0),
            (e = JSON.parse(JSON.stringify(e)))).lastMsgTime &&
              (this.lastMessage.lastTime = e.lastMsgTime),
              ut(e.muteAllMembers) ||
                ('On' === e.muteAllMembers
                  ? (e.muteAllMembers = !0)
                  : (e.muteAllMembers = !1)),
              e.groupCustomField &&
                vt(this.groupCustomField, e.groupCustomField),
              ut(e.memberNum) || (this.memberCount = e.memberNum),
              ut(e.maxMemberNum) || (this.maxMemberCount = e.maxMemberNum),
              ut(e.isSupportTopic) ||
                (this.isSupportTopic = Ke(e.isSupportTopic)
                  ? 1 === e.isSupportTopic
                  : e.isSupportTopic),
              Ze(this, e, [
                'members',
                'errorCode',
                'lastMsgTime',
                'groupCustomField',
                'memberNum',
                'maxMemberNum',
                'isSupportTopic',
              ]),
              $e(e.members) &&
                0 < e.members.length &&
                e.members.forEach(function (e) {
                  e.userID === t.selfInfo.userID &&
                    Ze(t.selfInfo, e, ['sequence']);
                });
          },
        },
        {
          key: 'updateSelfInfo',
          value: function (e) {
            (e = {
              nameCard: e.nameCard,
              joinTime: e.joinTime,
              role: e.role,
              messageRemindType: e.messageRemindType,
              readedSequence: e.readedSequence,
              excludedUnreadSequenceList: e.excludedUnreadSequenceList,
            }),
              Ze(this.selfInfo, t({}, e), [], ['', null, void 0, 0, NaN]);
          },
        },
        {
          key: 'setSelfNameCard',
          value: function (e) {
            this.selfInfo.nameCard = e;
          },
        },
      ]),
      ir),
    ro =
      (r(nr, [
        {
          key: 'toAccount',
          get: function () {
            return this.conversationID.startsWith(D.CONV_C2C)
              ? this.conversationID.replace(D.CONV_C2C, '')
              : this.conversationID.startsWith(D.CONV_GROUP)
                ? this.conversationID.replace(D.CONV_GROUP, '')
                : '';
          },
        },
        {
          key: '_initProfile',
          value: function (e) {
            var t = this;
            Object.keys(e).forEach(function (n) {
              switch (n) {
                case 'userProfile':
                  t.userProfile = e.userProfile;
                  break;
                case 'groupProfile':
                  t.groupProfile = e.groupProfile;
              }
            }),
              ut(this.userProfile) && this.type === D.CONV_C2C
                ? (this.userProfile = new to({
                    userID: e.conversationID.replace('C2C', ''),
                  }))
                : ut(this.groupProfile) &&
                  this.type === D.CONV_GROUP &&
                  (this.groupProfile = new oo({
                    groupID: e.conversationID.replace('GROUP', ''),
                  }));
          },
        },
        {
          key: 'updateUnreadCount',
          value: function (e) {
            var t = e.nextUnreadCount,
              n = e.isFromGetConversations;
            (e = e.isUnreadC2CMessage),
              ut(t) ||
                (It(this.subType)
                  ? (this.unreadCount = 0)
                  : (n && this.type === D.CONV_GROUP) ||
                      (n && this.type === D.CONV_TOPIC) ||
                      (e && this.type === D.CONV_C2C)
                    ? (this.unreadCount = t)
                    : (this.unreadCount = this.unreadCount + t));
          },
        },
        {
          key: 'updateLastMessage',
          value: function (e) {
            this.lastMessage = Ki(e);
          },
        },
        {
          key: 'updateGroupAtInfoList',
          value: function (e) {
            var t;
            this._isNeedMergeGroupAtInfo(e) ||
              (-1 !==
                (t = (m((t = e.groupAtType)) || y(t) || I(t) || C()).slice(
                  0
                )).indexOf(D.CONV_AT_ME) &&
                -1 !== t.indexOf(D.CONV_AT_ALL) &&
                (t = [D.CONV_AT_ALL_AT_ME]),
              (t = {
                from: e.from,
                groupID: e.groupID,
                topicID: e.topicID,
                messageSequence: e.sequence,
                atTypeArray: t,
                __random: e.__random,
                __sequence: e.__sequence,
              }),
              this.groupAtInfoList.push(t));
          },
        },
        {
          key: '_isNeedMergeGroupAtInfo',
          value: function (e) {
            var t = e.groupID,
              n = e.sequence;
            if (!Mt({ groupID: t })) return !1;
            var i = !1;
            return (
              this.groupAtInfoList.forEach(function (t) {
                t.messageSequence === n &&
                  (-1 < t.atTypeArray.indexOf(D.CONV_AT_ME) &&
                    -1 < e.groupAtType.indexOf(D.CONV_AT_ALL) &&
                    (t.atTypeArray = [D.CONV_AT_ALL_AT_ME]),
                  -1 < t.atTypeArray.indexOf(D.CONV_AT_ALL) &&
                    -1 < e.groupAtType.indexOf(D.CONV_AT_ME) &&
                    ((t.atTypeArray = [D.CONV_AT_ALL_AT_ME]),
                    (t.__random = e.__random),
                    (t.__sequence = e.__sequence)),
                  (i = !0));
              }),
              i
            );
          },
        },
        {
          key: 'clearGroupAtInfoList',
          value: function () {
            this.groupAtInfoList.length = 0;
          },
        },
        {
          key: 'reduceUnreadCount',
          value: function () {
            return 1 <= this.unreadCount && (--this.unreadCount, !0);
          },
        },
        {
          key: 'isLastMessageRevoked',
          value: function (e) {
            var t = e.sequence;
            return (
              (e = e.time),
              (this.type === D.CONV_C2C &&
                t === this.lastMessage.lastSequence &&
                e === this.lastMessage.lastTime) ||
                (this.type === D.CONV_GROUP &&
                  t === this.lastMessage.lastSequence)
            );
          },
        },
        {
          key: 'setLastMessageRevoked',
          value: function (e) {
            this.lastMessage.isRevoked = e;
          },
        },
        {
          key: 'setLastMessageRevoker',
          value: function (e) {
            this.lastMessage.revoker = e;
          },
        },
        {
          key: 'setDraftText',
          value: function (e) {
            this.draftText = e;
          },
        },
      ]),
      nr),
    ao =
      (a((Q = {}), D.MSG_REMIND_ACPT_AND_NOTE, 0),
      a(Q, D.MSG_REMIND_DISCARD, 1),
      a(Q, D.MSG_REMIND_ACPT_NOT_NOTE, 2),
      Q),
    so =
      (r(tr, [
        {
          key: 'onAllRcvMsgOptNotify',
          value: function (e) {
            (e = this._handleResult(e)),
              this._convM.emitOEvt(E.ALL_RECEIVE_MESSAGE_OPT_UPDATED, e);
          },
        },
        {
          key: 'getC2CMsgRemindType',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.getC2CMsgRemindType');
            return this._convM
              .req({
                P: Gn.GET_C2C_PEER_MUTE_NOTIFICATIONS,
                data: { toAccount: this._convM.getMyUserID(), userIDList: e },
              })
              .then(function (i) {
                Ae.l(''.concat(n, ' ok. userIDList:').concat(e)),
                  (i = i.data.muteFlagList),
                  t._convM.onC2CMsgRemindTypeFetched(i);
              })
              .catch(function (e) {
                Ae.e(''.concat(n, ' failed. error:'), e);
              });
          },
        },
        {
          key: 'set',
          value: function (e) {
            return e.groupID
              ? this._setGroupMsgRemindType(e)
              : $e(e.userIDList)
                ? this._setC2CMsgRemindType(e)
                : void 0;
          },
        },
        {
          key: '_setGroupMsgRemindType',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('_setGroupMsgRemindType'),
              i = e.groupID,
              o = e.messageRemindType,
              r = 'groupID:'.concat(i, ' messageRemindType:').concat(o),
              a = new ei('_setGroupMsgRemindType'),
              s = (a.setMessage(r), this._get(7));
            return s
              ? s
                  .modifyGroupMemberInfo({
                    groupID: i,
                    messageRemindType: o,
                    userID: this._convM.getMyUserID(),
                  })
                  .then(function () {
                    a.end(), Ae.l(''.concat(n, ' ok. ').concat(r));
                    var i = t.onGroupMsgRemindTypeUpdated(e);
                    return t._convM.onTotalUnreadCountUpdate(), mn(i);
                  })
                  .catch(function (e) {
                    return (
                      a.setError(e).end(),
                      Ae.e(''.concat(n, ' failed. error:'), e),
                      In(e)
                    );
                  })
              : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'onGroupMsgRemindTypeUpdated',
          value: function (e) {
            var t,
              n,
              i = e.groupID,
              o =
                ((e = e.messageRemindType),
                Ae.l(
                  ''
                    .concat(this._n, '.onGroupMsgRemindTypeUpdated groupID:')
                    .concat(i, ' messageRemindType:')
                    .concat(e)
                ),
                this._get(7).getLocalGroupProfile(i));
            return (
              o && (o.selfInfo.messageRemindType = e),
              Ct(i)
                ? ((t = Gt((n = i))),
                  (n = this._get(10).getLocalTopic(t, n)) &&
                    n.updateSelfInfo({ messageRemindType: e }) &&
                    this._convM.emitOEvt(E.TOPIC_UPDATED, {
                      groupID: t,
                      topic: n,
                    }),
                  { topic: n })
                : (this._convM.patchMsgRemindType({
                    ID: i,
                    isC2CConversation: !1,
                    messageRemindType: e,
                  }) && this._emitConvUpdate(),
                  { group: o })
            );
          },
        },
        {
          key: '_setC2CMsgRemindType',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('_setC2CMsgRemindType'),
              i = e.userIDList,
              o = e.messageRemindType,
              r = i.slice(0, 30),
              a =
                ((e = ao[o] || 0),
                'userIDList:'.concat(r, ' messageRemindType:').concat(o)),
              s = new ei('_setC2CMsgRemindType');
            return (
              s.setMessage(a),
              this._convM
                .req({
                  P: Gn.SET_C2C_PEER_MUTE_NOTIFICATIONS,
                  data: { userIDList: r, muteFlag: e },
                })
                .then(function (e) {
                  s.end(), (e = e.data.errorList);
                  var i = [],
                    c = [],
                    u =
                      ($e(e) &&
                        e.forEach(function (e) {
                          i.push(e.userID),
                            c.push({ userID: e.userID, code: e.errorCode });
                        }),
                      (e = r.filter(function (e) {
                        return -1 === i.indexOf(e);
                      })),
                      Ae.l(
                        ''
                          .concat(n, ' ok. ')
                          .concat(a, ' successUserIDList:')
                          .concat(e, ' failureUserIDList:')
                          .concat(JSON.stringify(c))
                      ),
                      0);
                  return (
                    e.forEach(function (e) {
                      t._convM.patchMsgRemindType({
                        ID: e,
                        isC2CConversation: !0,
                        messageRemindType: o,
                      }) && (u += 1);
                    }),
                    1 <= u && t._emitConvUpdate(),
                    (r.length = i.length = 0),
                    t._convM.onTotalUnreadCountUpdate(),
                    yn({
                      successUserIDList: e.map(function (e) {
                        return { userID: e };
                      }),
                      failureUserIDList: c,
                    })
                  );
                })
                .catch(function (e) {
                  return (
                    s.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_get',
          value: function (e) {
            return this._convM.get(e);
          },
        },
        {
          key: '_emitConvUpdate',
          value: function () {
            this._convM.emitConvUpdate(!0, !1);
          },
        },
        {
          key: 'setAllRcvMsgOpt',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('setAllRcvMsgOpt'),
              n =
                void 0 === (n = e.messageRemindType)
                  ? D.MSG_REMIND_ACPT_NOT_NOTE
                  : n,
              i = void 0 === (i = e.isRepeated) || i,
              o =
                void 0 === (o = (r = this._calcStartAndEndTime(e)).startTime)
                  ? 0
                  : o,
              r = void 0 === (r = r.endTime) ? 0 : r,
              a = ((e = JSON.stringify(e)), new ei('setAllRcvMsgOpt'));
            return (
              a.setMessage(e),
              Ae.l(''.concat(t, ' options:').concat(e)),
              this._convM
                .req({
                  P: Gn.SET_ALL_RECEIVE_MSG_OPT,
                  data: {
                    messageRemindType: ao[n],
                    startTime: o,
                    endTime: r,
                    isRepeated: i ? 1 : 0,
                  },
                })
                .then(function (e) {
                  return a.end(), Ae.l(''.concat(t, ' ok.')), mn(e);
                })
                .catch(function (e) {
                  return (
                    a.setError(e).end(),
                    Ae.e(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_calcStartAndEndTime',
          value: function (e) {
            var t = void 0 === (t = e.startHour) ? 0 : t,
              n = void 0 === (n = e.startMinute) ? 0 : n,
              i = void 0 === (i = e.startSecond) ? 0 : i,
              o = void 0 === (o = e.duration) ? 0 : o,
              r =
                ((e = void 0 === (e = e.isRepeated) || e),
                (s = new Date()).getFullYear()),
              a = s.getMonth(),
              s = s.getDate();
            return {
              startTime: (r = Math.round(
                new Date(r, a, s, t, n, i).getTime() / 1e3
              )),
              endTime: e && 86400 <= o ? r + 86400 : r + o,
            };
          },
        },
        {
          key: 'getAllRcvMsgOpt',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('getAllRcvMsgOpt'),
              n = new ei('getAllRcvMsgOpt');
            return this._convM
              .req({
                P: Gn.GET_ALL_RECEIVE_MSG_OPT,
                data: { toAccount: this._convM.getMyUserID() },
              })
              .then(function (i) {
                return (
                  (i = i.data),
                  n.setMessage(JSON.stringify(i)).end(),
                  Ae.l(''.concat(t, ' ok. data:').concat(JSON.stringify(i))),
                  mn((i = e._handleResult(i)))
                );
              })
              .catch(function (e) {
                return (
                  n.setError(e).end(),
                  Ae.e(''.concat(t, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: '_handleResult',
          value: function (e) {
            var t = e.messageRemindType,
              n = e.startTime,
              i = e.endTime,
              o = ((e = e.isRepeated), D.MSG_REMIND_ACPT_AND_NOTE);
            return (
              1 === t && (o = D.MSG_REMIND_DISCARD),
              {
                messageRemindType: (o =
                  2 === t ? D.MSG_REMIND_ACPT_NOT_NOTE : o),
                startTime: n,
                endTime: i,
                isRepeated: 1 === e,
              }
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset'));
          },
        },
      ]),
      tr),
    co =
      (r(er, [
        {
          key: 'setConvCustomData',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('setConvCustomData'),
              i = e.conversationIDList,
              o = e.customData,
              r =
                (Ae.l(''.concat(n, ' options:'), e),
                new ei('setConvCustomData')),
              a =
                (r.setMessage(JSON.stringify(e)),
                { fromAccount: this._getMyUserID(), itemList: [] }),
              s = [],
              c = [];
            return (
              i.forEach(function (e) {
                if (!t._hasLocalConv(e)) return t._onConvNotFound(c, e), !0;
                if (!Tt(e) && !Et(e)) return t._onConvIDInvalid(c, e), !0;
                var n = {
                  operationType: 2,
                  contactItem: void 0,
                  customMark: o,
                };
                Tt(e)
                  ? (n.contactItem = {
                      type: 1,
                      toAccount: e.replace(D.CONV_C2C, ''),
                    })
                  : Et(e) &&
                    (n.contactItem = {
                      type: 2,
                      groupID: e.replace(D.CONV_GROUP, ''),
                    }),
                  a.itemList.push(n);
              }),
              c.length === i.length
                ? yn({
                    successConversationIDList: s,
                    failureConversationIDList: c,
                  })
                : this._convM
                    .req({ P: Gn.SET_CONV_CUSTOM_DATA, data: a })
                    .then(function (e) {
                      var i, a, u;
                      return (
                        r.end(),
                        Ae.l(''.concat(n, ' ok')),
                        $e((e = e.data.resultItem)) &&
                          ((u = !1),
                          e.forEach(function (e) {
                            (i = t._concatConvID(e.contactItem)),
                              0 === e.resultCode
                                ? (s.push(i),
                                  (a = t._getLocalConv(i)) &&
                                    a.customData !== o &&
                                    ((a.customData = o), (u = !0)))
                                : c.push({
                                    conversationID: i,
                                    code: e.resultCode,
                                    message: e.resultInfo,
                                  });
                          }),
                          !0 === u && t._emitConvUpdate()),
                        mn({
                          successConversationIDList: s,
                          failureConversationIDList: c,
                        })
                      );
                    })
                    .catch(function (e) {
                      return (
                        r.setError(e).end(),
                        Ae.e(''.concat(n, ' failed. error:'), e),
                        In(e)
                      );
                    })
            );
          },
        },
        {
          key: 'markConv',
          value: function (e) {
            var t = this;
            if (!this._convM.canIUse(w.CONV_MARK))
              return this._convM.noUse('markConv');
            var n = ''.concat(this._n, '.').concat('markConv'),
              i = e.conversationIDList,
              o = e.markType,
              r = e.enableMark,
              a = (Ae.l(''.concat(n, ' options:'), e), new ei('markConv')),
              s = void a.setMessage(JSON.stringify(e)),
              c = void 0,
              u =
                ((e = this._getFlagBit(o)),
                !0 === r ? (c = [e]) : (s = [e]),
                { fromAccount: this._getMyUserID(), itemList: [] }),
              l = [],
              d = [];
            return (
              i.forEach(function (e) {
                if (!t._hasLocalConv(e)) return t._onConvNotFound(d, e), !0;
                if (!Tt(e) && !Et(e)) return t._onConvIDInvalid(d, e), !0;
                var n = {
                  operationType: 1,
                  contactItem: void 0,
                  clearMark: s,
                  setMark: c,
                };
                Tt(e)
                  ? (n.contactItem = {
                      type: 1,
                      toAccount: e.replace(D.CONV_C2C, ''),
                    })
                  : Et(e) &&
                    (n.contactItem = {
                      type: 2,
                      groupID: e.replace(D.CONV_GROUP, ''),
                    }),
                  u.itemList.push(n);
              }),
              d.length === i.length
                ? yn({
                    successConversationIDList: l,
                    failureConversationIDList: d,
                  })
                : this._convM
                    .req({ P: Gn.MARK_CONV, data: u })
                    .then(function (e) {
                      var i, s, c;
                      return (
                        a.end(),
                        Ae.l(''.concat(n, ' ok')),
                        $e((e = e.data.resultItem)) &&
                          ((c = !1),
                          e.forEach(function (e) {
                            var n;
                            (i = t._concatConvID(e.contactItem)),
                              0 === e.resultCode
                                ? (l.push(i),
                                  (s = t._getLocalConv(i)) &&
                                    ((n = s.markList.indexOf(o)),
                                    !0 === r
                                      ? -1 === n &&
                                        (s.markList.push(o), (c = !0))
                                      : -1 !== n &&
                                        (s.markList.splice(n, 1), (c = !0))))
                                : d.push({
                                    conversationID: i,
                                    code: e.resultCode,
                                    message: e.resultInfo,
                                  });
                          }),
                          !0 === c && t._emitConvUpdate()),
                        mn({
                          successConversationIDList: l,
                          failureConversationIDList: d,
                        })
                      );
                    })
                    .catch(function (e) {
                      return (
                        a.setError(e).end(),
                        Ae.e(''.concat(n, ' failed. error:'), e),
                        In(e)
                      );
                    })
            );
          },
        },
        {
          key: 'getLocalConvGroupList',
          value: function () {
            var e = this;
            return (
              Ae.l(
                ''
                  .concat(this._n, '.getLocalConvGroupList pagingStatus:')
                  .concat(this._pagingStatus)
              ),
              this._pagingStatus === Rn
                ? this.getRemoteConvGroupList().then(function () {
                    return mn(v(e._convGroupMap.values()));
                  })
                : yn(v(this._convGroupMap.values()))
            );
          },
        },
        {
          key: 'searchConvGroupAndMark',
          value: function (e, t) {
            var n = this,
              i = ''.concat(this._n, '.searchConvGroupAndMark'),
              o = [];
            return (
              e.forEach(function (e) {
                1 === t
                  ? o.push({ type: 1, toAccount: e })
                  : 2 === t && o.push({ type: 2, groupID: e });
              }),
              Ae.l(''.concat(i, ' type:').concat(t, ' list:'), e),
              this._convM
                .req({
                  P: Gn.SEARCH_CONV_GRP_MARK,
                  data: { fromAccount: this._getMyUserID(), contactItem: o },
                })
                .then(function (e) {
                  var t = (e = e.data).contactItem;
                  (e = e.groupItem),
                    Ae.l(''.concat(i, ' ok. contactItem:'), t, 'groupItem:', e),
                    n._fillConvGroupMap(e),
                    n._handleContactItem(t),
                    n._emitConvUpdate();
                })
                .catch(function (e) {
                  Ae.w(''.concat(i, ' failed. error:'), e);
                })
            );
          },
        },
        {
          key: '_fillConvGroupMap',
          value: function (e) {
            var t = this;
            $e(e) &&
              e.forEach(function (e) {
                var n = e.convGroupID;
                (e = e.groupName), t._convGroupMap.set(n, e);
              });
          },
        },
        {
          key: '_handleContactItem',
          value: function (e) {
            var t,
              n = this;
            $e(e) &&
              e.forEach(function (e) {
                var i = [],
                  o = e.standardMark,
                  r = e.customData,
                  a = e.convGroupIDList;
                $e(a) &&
                  a.forEach(function (e) {
                    n._convGroupMap.has(e) && i.push(n._convGroupMap.get(e));
                  }),
                  (t = n._concatConvID(e)),
                  (t = n._getLocalConv(t)) &&
                    ((t.markList = qt(o)),
                    (t.customData = r || ''),
                    (t.conversationGroupList = [].concat(i)));
              });
          },
        },
        {
          key: 'getRemoteConvGroupList',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.getRemoteConvGroupList');
            return (
              (this._pagingStatus = Sn),
              this._convM
                .req({
                  P: Gn.GET_CONV_GRP_LIST,
                  data: {
                    fromAccount: this._getMyUserID(),
                    startIndex: this._startIndex,
                  },
                })
                .then(function (n) {
                  var i = (n = n.data).completeFlag,
                    o = n.contactItem,
                    r = void 0 === (r = n.nextStartIndex) ? 0 : r;
                  if (
                    ((n = n.groupItem),
                    (e._startIndex = r),
                    Ae.l(
                      ''
                        .concat(t, ' completeFlag:')
                        .concat(i, ' nextStartIndex:')
                        .concat(r, ', groupItem:'),
                      n,
                      'contactItem:',
                      o
                    ),
                    e._fillConvGroupMap(n),
                    e._handleContactItem(o),
                    0 === i)
                  )
                    return e.getRemoteConvGroupList();
                  1 === i &&
                    ((e._pagingStatus = kn),
                    e._emitConvUpdate(),
                    e._emitConvGroupListUpdate());
                })
                .catch(function (n) {
                  (e._pagingStatus = Rn),
                    Ae.w(''.concat(t, ' failed. error:'), n);
                })
            );
          },
        },
        {
          key: 'createConvGroup',
          value: function (e) {
            var t = this;
            if (!this._convM.canIUse(w.CONV_GROUP))
              return this._convM.noUse('createConvGroup');
            var n = ''.concat(this._n, '.').concat('createConvGroup'),
              i =
                (Ae.l(''.concat(n, ' options:'), e), new ei('createConvGroup')),
              o = (i.setMessage(JSON.stringify(e)), e.groupName),
              r =
                ((e = e.conversationIDList),
                {
                  fromAccount: this._getMyUserID(),
                  itemList: [{ groupName: o, contactItem: [] }],
                }),
              a = [],
              s = [];
            return (
              e.forEach(function (e) {
                return t._hasLocalConv(e)
                  ? Tt(e) || Et(e)
                    ? void (Tt(e)
                        ? r.itemList[0].contactItem.push({
                            type: 1,
                            toAccount: e.replace(D.CONV_C2C, ''),
                          })
                        : Et(e) &&
                          r.itemList[0].contactItem.push({
                            type: 2,
                            groupID: e.replace(D.CONV_GROUP, ''),
                          }))
                    : (t._onConvIDInvalid(s, e), !0)
                  : (t._onConvNotFound(s, e), !0);
              }),
              s.length === e.length
                ? yn({
                    successConversationIDList: a,
                    failureConversationIDList: s,
                  })
                : this._convM
                    .req({ P: Gn.CREATE_CONV_GRP, data: r })
                    .then(function (e) {
                      i.end(), Ae.l(''.concat(n, ' ok'));
                      var r,
                        c,
                        u,
                        l = (e = e.data.groupResultItem[0]).groupItem;
                      return (
                        (e = e.resultItem),
                        ze(l) &&
                          (t._convGroupMap.set(l.convGroupID, l.groupName),
                          t._emitConvGroupListUpdate()),
                        $e(e) &&
                          ((u = !1),
                          e.forEach(function (e) {
                            (r = t._concatConvID(e.contactItem)),
                              0 === e.resultCode
                                ? (a.push(r),
                                  (c = t._getLocalConv(r)) &&
                                    -1 === c.conversationGroupList.indexOf(o) &&
                                    (c.conversationGroupList.push(o), (u = !0)))
                                : s.push({
                                    conversationID: r,
                                    code: e.resultCode,
                                    message: e.resultInfo,
                                  });
                          }),
                          !0 === u &&
                            (t._emitConvUpdate(),
                            t._emitConvGroupListUpdate())),
                        mn({
                          successConversationIDList: a,
                          failureConversationIDList: s,
                        })
                      );
                    })
                    .catch(function (e) {
                      return (
                        i.setError(e).end(),
                        Ae.e(''.concat(n, ' failed. error:'), e),
                        In(e)
                      );
                    })
            );
          },
        },
        {
          key: 'deleteConvGroup',
          value: function (e) {
            var t = this;
            if (!this._convM.canIUse(w.CONV_GROUP))
              return this._convM.noUse('deleteConvGroup');
            var n = ''.concat(this._n, '.').concat('deleteConvGroup'),
              i =
                (Ae.l(''.concat(n, ' groupName:').concat(e)),
                new ei('deleteConvGroup'));
            return (
              i.setMessage(e),
              this._convM
                .req({
                  P: Gn.DEL_CONV_GRP,
                  data: { fromAccount: this._getMyUserID(), groupName: [e] },
                })
                .then(function (o) {
                  var r;
                  i.end(),
                    Ae.l(''.concat(n, ' ok')),
                    $e((o = o.data.groupItem)) &&
                      ((r = !1),
                      o.forEach(function (e) {
                        t._convGroupMap.has(e.convGroupID) &&
                          (t._convGroupMap.delete(e.convGroupID), (r = !0));
                      }),
                      !0 === r && t._emitConvGroupListUpdate()),
                    t._eraseFromConversationGroupList([e]);
                })
                .catch(function (e) {
                  return (
                    i.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'renameConvGroup',
          value: function (e) {
            var t = this;
            if (!this._convM.canIUse(w.CONV_GROUP))
              return this._convM.noUse('renameConvGroup');
            var n = ''.concat(this._n, '.').concat('renameConvGroup'),
              i =
                (Ae.l(''.concat(n, ' options:'), e), new ei('renameConvGroup')),
              o = (i.setMessage(JSON.stringify(e)), e.oldName),
              r = e.newName;
            return this._convM
              .req({
                P: Gn.RENAME_CONV_GRP,
                data: {
                  fromAccount: this._getMyUserID(),
                  updateType: 1,
                  updateGroup: { updateGroupType: 1, oldName: o, newName: r },
                },
              })
              .then(function (e) {
                i.end(),
                  Ae.l(''.concat(n, ' ok')),
                  (e = e.data.updateGroupResult.convGroupID),
                  t._convGroupMap.set(e, r),
                  t._emitConvGroupListUpdate(),
                  (e = t._convM.getLocalConvList());
                var a,
                  s,
                  c = !1;
                e.forEach(function (e) {
                  (a = e.conversationGroupList),
                    -1 !== (s = a.indexOf(o)) && (a.splice(s, 1, r), (c = !0));
                }),
                  !0 === c && t._emitConvUpdate();
              })
              .catch(function (e) {
                return (
                  i.setError(e).end(),
                  Ae.e(''.concat(n, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: 'addConvsToGroup',
          value: function (e) {
            var t = this;
            if (!this._convM.canIUse(w.CONV_GROUP))
              return this._convM.noUse('addConvsToGroup');
            var n = ''.concat(this._n, '.').concat('addConvsToGroup'),
              i =
                (Ae.l(''.concat(n, ' options:'), e), new ei('addConvsToGroup')),
              o = (i.setMessage(JSON.stringify(e)), e.conversationIDList),
              r = e.groupName,
              a = {
                fromAccount: this._getMyUserID(),
                updateType: 1,
                updateGroup: {
                  updateGroupType: 2,
                  groupName: r,
                  updateItem: [],
                },
              },
              s = [],
              c = [];
            return (
              o.forEach(function (e) {
                return t._hasLocalConv(e)
                  ? Tt(e) || Et(e)
                    ? void (Tt(e)
                        ? a.updateGroup.updateItem.push({
                            operationType: 1,
                            contactItem: {
                              type: 1,
                              toAccount: e.replace(D.CONV_C2C, ''),
                            },
                          })
                        : Et(e) &&
                          a.updateGroup.updateItem.push({
                            operationType: 1,
                            contactItem: {
                              type: 2,
                              groupID: e.replace(D.CONV_GROUP, ''),
                            },
                          }))
                    : (t._onConvIDInvalid(c, e), !0)
                  : (t._onConvNotFound(c, e), !0);
              }),
              c.length === o.length
                ? yn({
                    successConversationIDList: s,
                    failureConversationIDList: c,
                  })
                : this._convM
                    .req({ P: Gn.ADD_CONV_TO_GRP, data: a })
                    .then(function (e) {
                      var o, a, u;
                      return (
                        i.end(),
                        Ae.l(''.concat(n, ' ok')),
                        $e((e = e.data.updateGroupResult.contactResultItem)) &&
                          ((u = !1),
                          e.forEach(function (e) {
                            (o = t._concatConvID(e.contactItem)),
                              0 === e.resultCode
                                ? (a = t._getLocalConv(o)) &&
                                  -1 === a.conversationGroupList.indexOf(r) &&
                                  (a.conversationGroupList.push(r),
                                  s.push(o),
                                  (u = !0))
                                : c.push({
                                    conversationID: o,
                                    code: e.resultCode,
                                    message: e.resultInfo,
                                  });
                          }),
                          !0 === u &&
                            (t._emitConvUpdate(), t._emitConvInGroupUpdate(r))),
                        mn({
                          successConversationIDList: s,
                          failureConversationIDList: c,
                        })
                      );
                    })
                    .catch(function (e) {
                      return (
                        i.setError(e).end(),
                        Ae.e(''.concat(n, ' failed. error:'), e),
                        In(e)
                      );
                    })
            );
          },
        },
        {
          key: 'deleteConvsFromGroup',
          value: function (e) {
            var t = this,
              n = 'deleteConvsFromGroup';
            if (!this._convM.canIUse(w.CONV_GROUP)) return this._convM.noUse(n);
            var i = ''.concat(this._n, '.').concat(n),
              o = (Ae.l(''.concat(i, ' options:'), e), new ei(n)),
              r =
                (o.setMessage(JSON.stringify(e)),
                (n = e.conversationIDList),
                e.groupName),
              a = {
                fromAccount: this._getMyUserID(),
                updateType: 1,
                updateGroup: {
                  updateGroupType: 2,
                  groupName: r,
                  updateItem: [],
                },
              },
              s = [],
              c = [];
            return (
              n.forEach(function (e) {
                return t._hasLocalConv(e)
                  ? Tt(e) || Et(e)
                    ? void (Tt(e)
                        ? a.updateGroup.updateItem.push({
                            operationType: 2,
                            contactItem: {
                              type: 1,
                              toAccount: e.replace(D.CONV_C2C, ''),
                            },
                          })
                        : Et(e) &&
                          a.updateGroup.updateItem.push({
                            operationType: 2,
                            contactItem: {
                              type: 2,
                              groupID: e.replace(D.CONV_GROUP, ''),
                            },
                          }))
                    : (t._onConvIDInvalid(c, e), !0)
                  : (t._onConvNotFound(c, e), !0);
              }),
              c.length === n.length
                ? yn({
                    successConversationIDList: s,
                    failureConversationIDList: c,
                  })
                : this._convM
                    .req({ P: Gn.DEL_CONV_FROM_GRP, data: a })
                    .then(function (e) {
                      var n, a, u;
                      return (
                        o.end(),
                        Ae.l(''.concat(i, ' ok')),
                        $e((e = e.data.updateGroupResult.contactResultItem)) &&
                          ((u = !1),
                          e.forEach(function (e) {
                            var i;
                            (n = t._concatConvID(e.contactItem)),
                              0 === e.resultCode
                                ? !(a = t._getLocalConv(n)) ||
                                  (-1 !==
                                    (i = a.conversationGroupList.indexOf(r)) &&
                                    (a.conversationGroupList.splice(i, 1),
                                    s.push(n),
                                    (u = !0)))
                                : c.push({
                                    conversationID: n,
                                    code: e.resultCode,
                                    message: e.resultInfo,
                                  });
                          }),
                          !0 === u &&
                            (t._emitConvUpdate(), t._emitConvInGroupUpdate(r))),
                        mn({
                          successConversationIDList: s,
                          failureConversationIDList: c,
                        })
                      );
                    })
                    .catch(function (e) {
                      return (
                        o.setError(e).end(),
                        Ae.e(''.concat(i, ' failed. error:'), e),
                        In(e)
                      );
                    })
            );
          },
        },
        {
          key: 'onConvMarkUpdated',
          value: function (e) {
            var t,
              n,
              i = this;
            Ve(e) ||
              (Ae.l(''.concat(this._n, '.onConvMarkUpdated markItemList:'), e),
              (n = !1),
              e.forEach(function (e) {
                var o = e.recentContactItem,
                  r = e.optType,
                  a = e.standardMark;
                (e = e.customMark),
                  (t = i._concatConvID(o)),
                  (t = i._getLocalConv(t)) &&
                    (1 === r
                      ? (n = i._diffStandardMark(t, a))
                      : 2 === r
                        ? (n = i._diffCustomMark(t, e))
                        : 3 === r &&
                          (n =
                            i._diffStandardMark(t, a) ||
                            i._diffCustomMark(t, e)));
              }),
              !0 === n && this._emitConvUpdate());
          },
        },
        {
          key: '_diffStandardMark',
          value: function (e, t) {
            t = qt(t);
            var n = !1;
            return (
              !0 !==
                (function (e, t) {
                  if (e === t) return !0;
                  if (!e || !t) return !1;
                  if (e.length !== t.length) return !1;
                  for (var n = 0, i = e.length; n < i; n++)
                    if (e[n] !== t[n]) return !1;
                  return !0;
                })(e.markList, t) && ((e.markList = t), (n = !0)),
              n
            );
          },
        },
        {
          key: '_diffCustomMark',
          value: function (e, t) {
            var n = !1;
            return (
              e.customData !== t &&
                void 0 !== t &&
                ((e.customData = t), (n = !0)),
              n
            );
          },
        },
        {
          key: 'onConvGroupCreated',
          value: function (e) {
            var t = this,
              n =
                (Ae.l(''.concat(this._n, '.onConvGroupCreated resultList:'), e),
                !1),
              i = !1;
            $e(e) &&
              (e.forEach(function (e) {
                var o,
                  r,
                  a = (r = e.msgGroupItem).groupID,
                  s = r.groupName;
                t._convGroupMap.get(a) !== s &&
                  (t._convGroupMap.set(a, s), (i = !0)),
                  $e((r = e.msgRecentContactItem)) &&
                    r.forEach(function (e) {
                      (o = t._concatConvID(e)),
                        (o = t._getLocalConv(o)) &&
                          -1 === o.conversationGroupList.indexOf(s) &&
                          (o.conversationGroupList.push(s), (n = !0));
                    });
              }),
              !0 === n && this._emitConvUpdate(),
              !0 === i && this._emitConvGroupListUpdate());
          },
        },
        {
          key: 'onConvGroupDeleted',
          value: function (e) {
            var t,
              n = this,
              i =
                (Ae.l(
                  ''.concat(this._n, '.onConvGroupDeleted groupItemList:'),
                  e
                ),
                []);
            $e(e) &&
              ((t = !1),
              e.forEach(function (e) {
                var o = e.groupID;
                (e = e.groupName),
                  n._convGroupMap.has(o) &&
                    (n._convGroupMap.delete(o), (t = !0), i.push(e));
              }),
              !0 === t && this._emitConvGroupListUpdate()),
              this._eraseFromConversationGroupList(i);
          },
        },
        {
          key: '_eraseFromConversationGroupList',
          value: function (e) {
            Ve(e) ||
              (this._convM.getLocalConvList().forEach(function (t) {
                t.conversationGroupList = t.conversationGroupList.filter(
                  function (t) {
                    return !e.includes(t);
                  }
                );
              }),
              this._emitConvUpdate());
          },
        },
        {
          key: 'onConvGroupNameUpdated',
          value: function (e) {
            Ae.l(''.concat(this._n, '.onConvGroupNameUpdated options:'), e);
            var t,
              n,
              i,
              o = e.groupID,
              r = e.groupName,
              a = e.oldGroupName;
            this._convGroupMap.get(o) !== r &&
              (this._convGroupMap.set(o, r),
              this._emitConvGroupListUpdate(),
              (e = this._convM.getLocalConvList()),
              (i = !1),
              e.forEach(function (e) {
                (t = e.conversationGroupList),
                  -1 !== (n = t.indexOf(a)) && (t.splice(n, 1, r), (i = !0));
              }),
              !0 === i && this._emitConvUpdate());
          },
        },
        {
          key: 'onConvInGroupUpdated',
          value: function (e) {
            var t,
              n,
              i,
              o = this,
              r =
                (Ae.l(''.concat(this._n, '.onConvInGroupUpdated options:'), e),
                e.oldGroupName);
            $e((e = e.recentContactUpdateGroupItem)) &&
              ((i = !1),
              e.forEach(function (e) {
                var a = e.contactOptType;
                (e = e.recentContactItem),
                  (t = o._concatConvID(e)),
                  (t = o._getLocalConv(t)) &&
                    ((n = t.conversationGroupList.indexOf(r)),
                    1 === a
                      ? -1 === n && (t.conversationGroupList.push(r), (i = !0))
                      : 2 === a &&
                        -1 !== n &&
                        (t.conversationGroupList.splice(n, 1), (i = !0)));
              }),
              !0 === i &&
                (this._emitConvUpdate(), this._emitConvInGroupUpdate(r)));
          },
        },
        {
          key: 'onConvAddedToOrDeletedFromGroup',
          value: function (e) {
            var t,
              n,
              i = this,
              o =
                (Ae.l(
                  ''.concat(
                    this._n,
                    '.onConvAddedToOrDeletedFromGroup options:'
                  ),
                  e
                ),
                e.msgRecentContactItem),
              r =
                ((e = e.msgRecentContactUpdateContactItem),
                (o = this._concatConvID(o)),
                this._getLocalConv(o));
            r &&
              $e(e) &&
              ((n = !1),
              e.forEach(function (e) {
                var o = e.groupOptType;
                (e = e.recentContactGroupItem.groupName),
                  (t = r.conversationGroupList.indexOf(e)),
                  1 === o
                    ? -1 === t && (r.conversationGroupList.push(e), (n = !0))
                    : 2 === o &&
                      -1 !== t &&
                      (r.conversationGroupList.splice(t, 1), (n = !0)),
                  !0 === n && i._emitConvInGroupUpdate(e);
              }),
              !0 === n && this._emitConvUpdate());
          },
        },
        {
          key: 'onConvGroupListSynced',
          value: function (e) {
            $e(e) &&
              0 !== e.length &&
              (Ae.l(''.concat(this._n, '.onConvGroupListSynced groupItem:'), e),
              this._fillConvGroupMap(e));
          },
        },
        {
          key: 'getConvGroupListByID',
          value: function (e) {
            var t,
              n = this;
            if (!Ve(e))
              return (
                (t = []),
                e.forEach(function (e) {
                  n._convGroupMap.has(e) && t.push(n._convGroupMap.get(e));
                }),
                t
              );
          },
        },
        {
          key: '_onConvNotFound',
          value: function (e, t) {
            e.push({
              conversationID: t,
              code: wn.CONV_NOT_FOUND,
              message: this._convM.getErrMsg(wn.CONV_NOT_FOUND),
            });
          },
        },
        {
          key: '_onConvIDInvalid',
          value: function (e, t) {
            e.push({
              conversationID: t,
              code: wn.INVALID_CONV_ID,
              message: this._convM.getErrMsg(wn.INVALID_CONV_ID),
            });
          },
        },
        {
          key: '_getFlagBit',
          value: function (e) {
            for (var t = e.toString(2), n = t.length, i = n - 1; 0 <= i; i--)
              if ('1' === t[i]) return n - i - 1;
          },
        },
        {
          key: '_concatConvID',
          value: function (e) {
            var t,
              n = e.type,
              i = e.to,
              o = e.groupID;
            return (
              (e = e.userID),
              1 === n
                ? ut(e)
                  ? ut(i) || (t = ''.concat(D.CONV_C2C).concat(i))
                  : (t = ''.concat(D.CONV_C2C).concat(e))
                : 2 === n && (t = ''.concat(D.CONV_GROUP).concat(o)),
              t
            );
          },
        },
        {
          key: '_getMyUserID',
          value: function () {
            return this._convM.getMyUserID();
          },
        },
        {
          key: '_getLocalConv',
          value: function (e) {
            return this._convM.getLocalConversation(e);
          },
        },
        {
          key: '_hasLocalConv',
          value: function (e) {
            return this._convM.hasLocalConversation(e);
          },
        },
        {
          key: '_emitConvUpdate',
          value: function () {
            this._convM.emitConvUpdate(!0, !1);
          },
        },
        {
          key: '_emitConvGroupListUpdate',
          value: function () {
            this._convM.emitOEvt(
              E.CONVERSATION_GROUP_LIST_UPDATED,
              v(this._convGroupMap.values())
            );
          },
        },
        {
          key: '_emitConvInGroupUpdate',
          value: function (e) {
            var t = { groupName: e, conversationList: [] },
              n = this._convM.getLocalConvList();
            (t.conversationList = n.filter(function (t) {
              return t.conversationGroupList.includes(e);
            })),
              this._convM.emitOEvt(E.CONVERSATION_IN_GROUP_UPDATED, t);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._convGroupMap.clear(),
              (this._startIndex = 0),
              (this._pagingStatus = Dn);
          },
        },
      ]),
      er),
    uo =
      (s(Qo, An),
      (Zi = g(Qo)),
      r(Qo, [
        {
          key: '_initListeners',
          value: function () {
            var e = this.getIEmitInst();
            e.on(qi.A2KEY_AND_TINYID_UPDATED, this._init, this),
              e.on(qi.PROFILE_UPDATED, this._onProfileUpdated, this),
              e.on(qi.CLOUD_CONFIG, this._onCloudConfig, this);
          },
        },
        {
          key: '_init',
          value: function () {
            var e = this,
              t =
                (Ae.l(''.concat(this._n, '._init')),
                this.get(13).getItem('conversationMap')),
              n = this.isIntl(),
              i = this.isUsingChatCore();
            if (t) {
              for (var o = t.length, r = 0; r < o; r++) {
                var a = t[r];
                if (a) {
                  if (this._isNonExistentAccount(a.conversationID)) continue;
                  if (a.groupProfile && It(a.groupProfile.type)) continue;
                }
                this._convMap.set(a.conversationID, new ro(t[r], n, i));
              }
              this.emitConvUpdate(!0, !1);
            }
            this.ready(function () {
              0 < e._tmpGroupList.length &&
                (e.updateConvGroupProfile(e._tmpGroupList),
                (e._tmpGroupList.length = 0));
            }),
              this.syncConvList();
          },
        },
        {
          key: '_isNonExistentAccount',
          value: function (e) {
            var t;
            return (
              '@TLS#ERROR' ===
                (t = e.startsWith(D.CONV_C2C)
                  ? e.replace(D.CONV_C2C, '')
                  : t) || '@TLS#NOT_FOUND' === t
            );
          },
        },
        {
          key: 'onCheckTimer',
          value: function (e) {
            this.isLoggedIn() && this._msgListHandler.onCheckTimer(e);
          },
        },
        {
          key: 'onMessageSent',
          value: function (e) {
            this._onSendOrRcvMsg({
              conversationOptionsList: e.conversationOptionsList,
              isInstantMessage: !0,
            });
          },
        },
        {
          key: 'onNewMessage',
          value: function (e) {
            this._onSendOrRcvMsg(e);
          },
        },
        {
          key: '_onSendOrRcvMsg',
          value: function (e) {
            var t = this,
              n = e.conversationOptionsList,
              i = void 0 === (i = e.isInstantMessage) || i,
              o = void 0 !== (o = e.isUnreadC2CMessage) && o,
              r = void 0 === (r = e.updateUnreadCount) || r,
              a = void 0 !== (a = e.isSyncingEnded) && a;
            this._isReady
              ? 0 !== n.length
                ? (!0 === i && this._checkNewConv(n),
                  this._updateLocalConvList({
                    conversationOptionsList: n,
                    isInstantMessage: i,
                    isUnreadC2CMessage: o,
                    isFromGetConversations: !1,
                    updateUnreadCount: r,
                  }),
                  i ||
                    ((this._convIDFromUnreadDBMap = new Map(
                      [].concat(
                        v(this._convIDFromUnreadDBMap),
                        v(
                          n.map(function (e) {
                            return [e.conversationID, 1];
                          })
                        )
                      )
                    )),
                    this._diffAndDeleteConv(),
                    a && this.emitIEvt(qi.C2C_UNREAD_HANDLE_COMPLETED)),
                  0 <
                    n.filter(function (e) {
                      return !t._isConvNeedShow(e.conversationID);
                    }).length || this.emitConvUpdate())
                : a && this.emitIEvt(qi.C2C_UNREAD_HANDLE_COMPLETED)
              : this.ready(function () {
                  t._onSendOrRcvMsg(e);
                });
          },
        },
        {
          key: 'updateConvGroupProfile',
          value: function (e) {
            var t,
              n = this;
            ($e(e) && 0 === e.length) ||
              (0 !== this._convMap.size
                ? ((t = !1),
                  e.forEach(function (e) {
                    var i = ''.concat(D.CONV_GROUP).concat(e.groupID);
                    n._convMap.has(i) &&
                      ((t = !0),
                      ((i = n._convMap.get(i)).groupProfile = JSON.parse(
                        JSON.stringify(e)
                      )),
                      i.lastMessage.lastSequence < e.nextMessageSeq &&
                        (i.lastMessage.lastSequence = e.nextMessageSeq - 1),
                      i.subType || (i.subType = e.type));
                  }),
                  t && this.emitConvUpdate(!0, !1))
                : (this._tmpGroupList = e));
          },
        },
        {
          key: 'onMessageRevoked',
          value: function (e, t) {
            var n,
              i,
              o,
              r = this;
            0 !== e.length &&
              ((n = null),
              (i = !1),
              (o = []),
              e.forEach(function (e) {
                (n = r._convMap.get(e.conversationID)) &&
                  (t && n.reduceUnreadCount() && (i = n.type !== D.CONV_TOPIC),
                  n.type === D.CONV_TOPIC
                    ? o.push(e)
                    : n.isLastMessageRevoked({
                        sequence: e.sequence,
                        time: e.time,
                      }) &&
                      (n.setLastMessageRevoked(!0),
                      n.setLastMessageRevoker(e.revoker),
                      (i = !0)));
              }),
              this.get(10).onMessageRevoked(o),
              i && this.emitConvUpdate(!0, !1));
          },
        },
        {
          key: 'updateRevokerInfo',
          value: function (e) {
            for (var t = new Set(), n = 0; n < e.length; n++) {
              var i = e[n].revoker;
              t.add(i);
            }
            var o = v(t),
              r = this.get(4);
            return new Promise(function (t) {
              r.getUserProfile({ userIDList: o })
                .then(function (n) {
                  if (!$e((n = n.data)) || 0 === n.length) return t(e);
                  var i,
                    o = {},
                    r = T(n);
                  try {
                    for (r.s(); !(i = r.n()).done; ) {
                      var a = i.value,
                        s = a.userID,
                        c = a.nick,
                        u = a.avatar;
                      o[s] = { nick: c, avatar: u };
                    }
                  } catch (l) {
                    r.e(l);
                  } finally {
                    r.f();
                  }
                  e.forEach(function (e) {
                    var t = e.revoker;
                    o[t] &&
                      ((e.revokerInfo.nick = o[t].nick || ''),
                      (e.revokerInfo.avatar = o[t].avatar || ''));
                  }),
                    t(e);
                })
                .catch(function () {
                  t(e);
                });
            });
          },
        },
        {
          key: 'isLastMessageRevoked',
          value: function (e) {
            var t = !1,
              n = e.conversationID,
              i = e.sequence,
              o = e.time,
              r = this._convMap.get(n);
            return (
              r &&
                (t =
                  r.type === D.CONV_TOPIC
                    ? this.get(10).isLastMessageRevoked({
                        topicID: n.replace(D.CONV_GROUP, ''),
                        sequence: i,
                      })
                    : r.isLastMessageRevoked({ sequence: i, time: o })),
              Ae.l(
                ''.concat(this._n, '.isLastMessageRevoked options:'),
                e,
                'ret:'.concat(t)
              ),
              t
            );
          },
        },
        {
          key: 'onMessageDeleted',
          value: function (e) {
            var t = this;
            if (0 !== e.length) {
              var n = null;
              e.forEach(function (e) {
                (n = t._msgListHandler.getLocalMsg(e.conversationID, e.ID)) &&
                  (n.isDeleted = !0),
                  e !== n && (e.isDeleted = !0);
              }),
                (e = e[0].conversationID);
              for (
                var i = this._msgListHandler.getLocalMsgList(e),
                  o = {},
                  r = i.length - 1;
                0 <= r;
                r--
              )
                if (!i[r].isDeleted) {
                  o = i[r];
                  break;
                }
              var a,
                s = this._convMap.get(e);
              s &&
                ((a = !1),
                (s.lastMessage.lastSequence === o.sequence &&
                  s.lastMessage.lastTime === o.time) ||
                  (Ve(o) && (o = void 0),
                  s.updateLastMessage(o),
                  s.type !== D.CONV_TOPIC && (a = !0),
                  Ae.l(
                    ''
                      .concat(this._n, '.onMessageDeleted. update convID:')
                      .concat(e, ' with lastMessage:'),
                    s.lastMessage
                  )),
                e.startsWith(D.CONV_C2C) && this.updateUnreadCount(e),
                a && this.emitConvUpdate(!0, !1));
            }
          },
        },
        {
          key: 'onMessageModified',
          value: function (e) {
            var t = ''.concat(this._n, '.onMessageModified'),
              n = e.conversationType,
              i = e.from,
              o = e.to,
              r = e.time,
              a = e.sequence,
              s = e.elements,
              c = e.cloudCustomData,
              u = e.messageVersion,
              l = this.getMyUserID(),
              d = ''.concat(n).concat(o),
              p =
                ((n = (o === l &&
                  n === D.CONV_C2C &&
                  (d = ''.concat(n).concat(i)),
                (l = this._msgListHandler.onMsgModified(d, e))).isUpdated),
                (l = l.message),
                !0 === n && this.emitOEvt(E.MESSAGE_MODIFIED, [l]),
                this._isTopicConv(d));
            return (
              null === l
                ? Ae.l(''.concat(t, ' message is null! options:'), e)
                : Ae.l(
                    ''
                      .concat(t, ' isUpdated:')
                      .concat(n, ' isTopicMessage:')
                      .concat(p, ' from:')
                      .concat(i, ' to:')
                      .concat(o, ' sequence:')
                      .concat(l.sequence, ' time:')
                      .concat(l.time)
                  ),
              p
                ? this.get(10).onMessageModified(e)
                : !(n = this._convMap.get(d)) ||
                  ((i = n.lastMessage) &&
                    i.lastTime === r &&
                    i.lastSequence === a &&
                    i.version !== u &&
                    (Ae.l(
                      ''.concat(t, ' convID:').concat(d, ' lastMessage updated')
                    ),
                    (i.type = s[0].type),
                    (i.payload = s[0].content),
                    (i.messageForShow = xt(i.type, i.payload, this.isIntl())),
                    (i.cloudCustomData = c),
                    (i.version = u),
                    this.emitConvUpdate(!0, !1))),
              l
            );
          },
        },
        {
          key: 'onNewGroupAtTips',
          value: function (e) {
            var n = this,
              i = ((e = e.dataList), null);
            e.forEach(function (e) {
              e.groupAtTips
                ? (i = e.groupAtTips)
                : e.elements
                  ? (i = t(t({}, e.elements), {}, { sync: !0 }))
                  : e.groupAtType && (i = t(t({}, e), {}, { sync: !0 })),
                (i.__random = e.random),
                (i.__sequence = e.clientSequence),
                n._tmpGroupAtTipsList.push(i);
            }),
              Ae.l(
                ''
                  .concat(this._n, '.onNewGroupAtTips isReady:')
                  .concat(this._isReady),
                this._tmpGroupAtTipsList
              ),
              this._isReady && this._handleGroupAtTipsList();
          },
        },
        {
          key: '_handleGroupAtTipsList',
          value: function () {
            var e,
              t = this;
            0 !== this._tmpGroupAtTipsList.length &&
              ((e = !1),
              this._tmpGroupAtTipsList.forEach(function (n) {
                var i,
                  o = n.groupID,
                  r = n.from,
                  a = void 0 === (a = n.topicID) ? void 0 : a,
                  s = void 0 !== (s = n.sync) && s;
                r !== t.getMyUserID() &&
                  (ut(a)
                    ? (r = t._convMap.get(''.concat(D.CONV_GROUP).concat(o))) &&
                      (r.updateGroupAtInfoList(n), (e = !0))
                    : ((o = t._convMap.get(
                        ''.concat(D.CONV_GROUP).concat(a)
                      )) &&
                        (o.updateGroupAtInfoList(n),
                        (r = t.get(10)),
                        (i = o.groupAtInfoList),
                        r.onAtInfoUpdated({ topicID: a, groupAtInfoList: i })),
                      Ve(o) &&
                        s &&
                        (t.updateTopicConversation([
                          {
                            conversationID: ''.concat(D.CONV_GROUP).concat(a),
                            type: D.CONV_TOPIC,
                          },
                        ]),
                        t._convMap
                          .get(''.concat(D.CONV_GROUP).concat(a))
                          .updateGroupAtInfoList(n))));
              }),
              e && this.emitConvUpdate(!0, !1),
              (this._tmpGroupAtTipsList.length = 0));
          },
        },
        {
          key: '_checkNewConv',
          value: function (e) {
            var t = this,
              n = [],
              i = [];
            e.forEach(function (e) {
              t._convMap.has(e.conversationID) ||
                (e.type === D.CONV_C2C
                  ? n.push(e.conversationID.replace(D.CONV_C2C, ''))
                  : e.type === D.CONV_GROUP &&
                    i.push(e.conversationID.replace(D.CONV_GROUP, '')));
            }),
              0 < n.length && (this._onNewC2CConv(n), (n = null)),
              0 < i.length && (this._onNewGroupConv(i), (i = null));
          },
        },
        {
          key: '_onNewC2CConv',
          value: function (e) {
            this.get(6).getRemotePeerReadTime(e),
              this._msgRemindHandler.getC2CMsgRemindType(e),
              this._convGroupHandler.searchConvGroupAndMark(e, 1);
          },
        },
        {
          key: '_onNewGroupConv',
          value: function (e) {
            var t = this.get(7);
            t && t.getMsgRemindType(e),
              this._convGroupHandler.searchConvGroupAndMark(e, 2);
          },
        },
        {
          key: '_setStorageConvList',
          value: function () {
            var e =
                0 < arguments.length && void 0 !== arguments[0] && arguments[0],
              t = this.getLocalConvList()
                .filter(function (e) {
                  return (
                    e.type === D.CONV_C2C ||
                    (e.type === D.CONV_GROUP &&
                      e.lastMessage.type !== D.MSG_GRP_TIP)
                  );
                })
                .slice(0, 20)
                .map(function (e) {
                  return {
                    conversationID: e.conversationID,
                    type: e.type,
                    subType: e.subType,
                    lastMessage: e.lastMessage,
                    groupProfile: e.groupProfile,
                    userProfile: e.userProfile,
                  };
                });
            this.get(13).setItem('conversationMap', t, e);
          },
        },
        {
          key: 'emitConvUpdate',
          value: function () {
            var e =
                !(0 < arguments.length && void 0 !== arguments[0]) ||
                arguments[0],
              t =
                !(1 < arguments.length && void 0 !== arguments[1]) ||
                arguments[1],
              n = this.getLocalConvList();
            !t || ((t = this.get(7)) && t.updateGroupLastMessage(n)),
              e &&
                (this.get(12).isPartialUpdatedConvs()
                  ? (this._diffConvMap(this._convMapForDiff, this._convMap),
                    0 < this._partialUpdatedConvMap.size &&
                      (this.emitOEvt(E.CONVERSATION_LIST_UPDATED),
                      this.onTotalUnreadCountUpdate(),
                      this._convMapForDiff.clear(),
                      (this._convMapForDiff = Qe(this._convMap, !0))),
                    0 === this._convMapForDiff.size &&
                      (this._convMapForDiff = Qe(this._convMap, !0)))
                  : (this.emitOEvt(E.CONVERSATION_LIST_UPDATED),
                    this.onTotalUnreadCountUpdate()));
          },
        },
        {
          key: '_diffConvMap',
          value: function (e, t) {
            var n,
              i = T(e);
            try {
              for (i.s(); !(n = i.n()).done; ) {
                var o = _(n.value, 2),
                  r = o[0],
                  a = o[1];
                (t.has(r) && a === JSON.stringify(t.get(r))) ||
                  this._partialUpdatedConvMap.set(r, t.get(r));
              }
            } catch (s) {
              i.e(s);
            } finally {
              i.f();
            }
          },
        },
        {
          key: 'getPartialUpdatedConvs',
          value: function () {
            var e = v(Qe(this._partialUpdatedConvMap, !1).values());
            return this._partialUpdatedConvMap.clear(), e;
          },
        },
        {
          key: 'getLocalConvList',
          value: function () {
            var e = this;
            return v(this._convMap.values()).filter(function (t) {
              return e._isConvNeedShow(t.conversationID);
            });
          },
        },
        {
          key: 'getLocalConversation',
          value: function (e) {
            return this._convMap.get(e);
          },
        },
        {
          key: 'hasLocalConversation',
          value: function (e) {
            return this._convMap.has(e);
          },
        },
        {
          key: 'getLocalOldestMessage',
          value: function (e) {
            return this._msgListHandler.getLocalOldestMsg(e);
          },
        },
        {
          key: 'syncConvList',
          value: function () {
            var e = this,
              t =
                !(0 < arguments.length && void 0 !== arguments[0]) ||
                arguments[0],
              n = 'syncConvList',
              i = new ei(n);
            return (
              this._pagingStatus === Dn && this._convMap.clear(),
              this._pagingGetConvList(t)
                .then(function (t) {
                  var o = jt(e._pagingGetCostList),
                    r = Ht(e._pagingGetCostList);
                  return (
                    (e._pagingGetCostList.length = 0),
                    (e._pagingStatus = kn),
                    e._diffAndDeleteConv(),
                    e.emitConvUpdate(!0, !1),
                    e._setStorageConvList(),
                    e._handleC2CPeerReadTime(),
                    e.emitIEvt(qi.CONV_SYNC_COMPLETED),
                    (r = 'count:'
                      .concat(e._convMap.size, ' sum:')
                      .concat(r, ' avg:')
                      .concat(o)),
                    Ae.l(''.concat(e._n, '.').concat(n, '. ').concat(r)),
                    i.setMessage(r).end(),
                    t
                  );
                })
                .catch(function (t) {
                  return (
                    (e._pagingStatus = Rn),
                    i.setMessage(e._pagingTs).setError(t).end(),
                    In(t)
                  );
                })
            );
          },
        },
        {
          key: '_diffAndDeleteConv',
          value: function () {
            var e,
              t = this;
            this._isSyncCompleted() &&
              ((e = []),
              this._convMap.forEach(function (n, i) {
                !t._pagingConvIDMap.has(i) &&
                  t._convIDFromUnreadDBMap.has(i) &&
                  (t._convMap.delete(i), e.push(i));
              }),
              Ae.l(''.concat(this._n, '._diffAndDeleteConv list:').concat(e)),
              (e = null));
          },
        },
        {
          key: '_pagingGetConvList',
          value: function () {
            var e = this,
              t =
                !(0 < arguments.length && void 0 !== arguments[0]) ||
                arguments[0],
              n = ''.concat(this._n, '._pagingGetConvList'),
              i =
                (Ae.l(
                  ''
                    .concat(n, ' incrementalPullFlag:')
                    .concat(t, ' ts:')
                    .concat(this._pagingTs, ' startIdx:')
                    .concat(this._pagingStartIdx) +
                    ' pinnedTs:'
                      .concat(this._pagingPinnedTs, ' pinnedStartIdx:')
                      .concat(this._pagingPinnedStartIdx)
                ),
                Date.now());
            return (
              (this._pagingStatus = Sn),
              this.req({
                P: Gn.PAGING_GET_CONV_LIST,
                data: {
                  fromAccount: this.getMyUserID(),
                  timeStamp: t ? this._pagingTs : 0,
                  startIndex: t ? this._pagingStartIdx : 0,
                  pinnedTimeStamp: t ? this._pagingPinnedTs : 0,
                  pinnedStartIndex: t ? this._pagingPinnedStartIdx : 0,
                  orderType: 1,
                },
              })
                .then(function (t) {
                  var o = (t = t.data).completeFlag,
                    r = void 0 === (r = t.conversations) ? [] : r,
                    a = t.timeStamp,
                    s = t.startIndex,
                    c = t.pinnedTimeStamp,
                    u = t.pinnedStartIndex;
                  if (
                    ((t = t.groupItem),
                    e._pagingGetCostList.push(Kt(i, !1)),
                    Ae.l(
                      ''
                        .concat(n, ' ok. completeFlag:')
                        .concat(o, ' count:')
                        .concat(r.length, ' cost:')
                        .concat(Kt(i))
                    ),
                    e._convGroupHandler.onConvGroupListSynced(t),
                    0 < r.length &&
                      ((t = e._getConvOptions(r)),
                      (e._pagingConvIDMap = new Map(
                        [].concat(
                          v(e._pagingConvIDMap),
                          v(
                            t.map(function (e) {
                              return [e.conversationID, 1];
                            })
                          )
                        )
                      )),
                      e._updateLocalConvList({
                        conversationOptionsList: t,
                        isFromGetConversations: !0,
                        updateUnreadCount: !0,
                      }),
                      e.isLoggedIn() && e.emitConvUpdate()),
                    !e._isReady)
                  ) {
                    if (!e.isLoggedIn()) return yn();
                    e.triggerReady();
                  }
                  return (
                    (e._pagingTs = a),
                    (e._pagingStartIdx = s),
                    (e._pagingPinnedTs = c),
                    (e._pagingPinnedStartIdx = u),
                    1 !== o
                      ? e._pagingGetConvList()
                      : (e._handleGroupAtTipsList(),
                        e._convGroupHandler.getRemoteConvGroupList(),
                        yn())
                  );
                })
                .catch(function (t) {
                  throw (
                    (e.isLoggedIn() &&
                      (e._isReady ||
                        (Ae.w(''.concat(n, ' failed. error:'), t),
                        e.triggerReady())),
                    t)
                  );
                })
            );
          },
        },
        {
          key: '_updateLocalConvList',
          value: function (e) {
            var t = e.isFromGetConversations,
              n = Date.now();
            (e = this._getTmpConvListMapping(e).newConvList),
              (this._convMap = new Map(this._sortConvList(v(this._convMap)))),
              t || this._updateUserOrGroupProfile(e),
              Ae.l(
                ''.concat(this._n, '._updateLocalConvList cost:').concat(Kt(n))
              );
          },
        },
        {
          key: '_getTmpConvListMapping',
          value: function (e) {
            for (
              var t = e.conversationOptionsList,
                n = e.isFromGetConversations,
                i = e.isInstantMessage,
                o = e.isUnreadC2CMessage,
                r = void 0 !== o && o,
                a = e.updateUnreadCount,
                s = [],
                c = [],
                u = this.get(7),
                l = this.get(8),
                d = this.isIntl(),
                p = this.isUsingChatCore(),
                h = 0,
                f = t.length;
              h < f;
              h++
            ) {
              var g = new ro(t[h], d, p),
                _ = g.conversationID,
                v = g.type;
              if (!this._isNonExistentAccount(_)) {
                if (this._convMap.has(_)) {
                  var m = this._convMap.get(_);
                  if (n) {
                    this._convMap.set(_, g),
                      v === D.CONV_C2C && (g.unreadCount = m.unreadCount);
                    continue;
                  }
                  var y = [
                      'unreadCount',
                      'allowType',
                      'adminForbidType',
                      'payload',
                    ],
                    I =
                      (!1 === i && y.push('lastMessage'),
                      'boolean' == typeof i && y.push('isPinned'),
                      t[h].lastMessage),
                    M = !ut(I);
                  M ||
                    t[h].type === D.CONV_TOPIC ||
                    this._onLastMsgNotExist(t[h]),
                    ut(i) &&
                      M &&
                      null === m.lastMessage.payload &&
                      (m.lastMessage.payload = I.payload),
                    Ve(m.lastMessage.revoker) || (m.lastMessage.revoker = null),
                    Ze(m, g, y, [null, void 0, '', 0, NaN]),
                    !0 === a &&
                      m.updateUnreadCount({
                        nextUnreadCount: g.unreadCount,
                        isFromGetConversations: n,
                        isUnreadC2CMessage: r,
                      }),
                    i &&
                      M &&
                      (I.payload && (m.lastMessage.payload = I.payload),
                      m.type === D.CONV_GROUP &&
                        ((m.lastMessage.nameCard = I.nameCard),
                        (m.lastMessage.nick = I.nick))),
                    M &&
                      m.lastMessage.cloudCustomData !== I.cloudCustomData &&
                      (m.lastMessage.cloudCustomData = I.cloudCustomData || '');
                } else
                  v === D.CONV_GROUP && u
                    ? ((y = g.groupProfile.groupID),
                      (M = u.getLocalGroupProfile(y)) &&
                        ((g.groupProfile = M),
                        !0 === a &&
                          g.updateUnreadCount({ nextUnreadCount: 0 })))
                    : v === D.CONV_C2C &&
                      ((m = _.replace(D.CONV_C2C, '')),
                      l &&
                        l.isMyFriend(m) &&
                        (g.remark = l.getFriendRemark(m))),
                    s.push(g),
                    this._convMap.set(_, g);
                this._convMap.get(_).type === D.CONV_TOPIC &&
                  c.push(this._convMap.get(_));
              }
            }
            for (var C = this.get(10), T = 0, E = c.length; T < E; T++) {
              var S,
                k = (S = c[T]).conversationID;
              Ve((S = S.groupAtInfoList)) ||
                C.onAtInfoUpdated({
                  topicID: k.replace(D.CONV_GROUP, ''),
                  groupAtInfoList: S,
                });
            }
            return { newConvList: s };
          },
        },
        {
          key: '_onLastMsgNotExist',
          value: function (e) {
            new ei('lastMsgNotExist').setMessage(JSON.stringify(e)).end();
          },
        },
        {
          key: '_sortConvList',
          value: function (e) {
            var t = [],
              n = [],
              i = [],
              o = [];
            return (
              e.forEach(function (e) {
                (!0 === e[1].isPinned
                  ? Ve(e[1].lastMessage.lastTime)
                    ? n
                    : t
                  : Ve(e[1].lastMessage.lastTime)
                    ? o
                    : i
                ).push(e);
              }),
              t
                .sort(function (e, t) {
                  return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;
                })
                .concat(n)
                .concat(
                  i.sort(function (e, t) {
                    return (
                      t[1].lastMessage.lastTime - e[1].lastMessage.lastTime
                    );
                  })
                )
                .concat(o)
            );
          },
        },
        {
          key: '_sortConvListAndEmitEvent',
          value: function () {
            (this._convMap = new Map(this._sortConvList(v(this._convMap)))),
              this.emitConvUpdate(!0, !1);
          },
        },
        {
          key: '_updateUserOrGroupProfile',
          value: function (e) {
            var t,
              n,
              i,
              o,
              r = this;
            0 !== e.length &&
              ((t = []),
              (n = []),
              (i = this.get(4)),
              (o = this.get(7)),
              e.forEach(function (e) {
                var i;
                e.type === D.CONV_C2C
                  ? t.push(e.toAccount)
                  : e.type === D.CONV_GROUP &&
                    ((i = e.toAccount),
                    o.hasLocalGroup(i)
                      ? (e.groupProfile = o.getLocalGroupProfile(i))
                      : n.push(i));
              }),
              Ae.l(
                ''
                  .concat(this._n, '._updateUserOrGroupProfile userIDList:')
                  .concat(t, ' groupIDList:')
                  .concat(n)
              ),
              0 < t.length &&
                i.getUserProfile({ userIDList: t }).then(function (e) {
                  $e((e = e.data))
                    ? e.forEach(function (e) {
                        r._doUpdateUserProfile(
                          ''.concat(D.CONV_C2C).concat(e.userID),
                          e
                        );
                      })
                    : r._doUpdateUserProfile(
                        ''.concat(D.CONV_C2C).concat(e.userID),
                        e
                      );
                }),
              0 < n.length &&
                o
                  .getGroupProfileAdvance({
                    groupIDList: n,
                    responseFilter: {
                      groupBaseInfoFilter: ['Type', 'Name', 'FaceUrl'],
                    },
                  })
                  .then(function (e) {
                    e = e.data.successGroupList;
                    var t = !1;
                    e.forEach(function (e) {
                      var n = ''.concat(D.CONV_GROUP).concat(e.groupID);
                      r._convMap.has(n) &&
                        (Ze(
                          (n = r._convMap.get(n)).groupProfile,
                          e,
                          [],
                          [null, void 0, '', 0, NaN]
                        ),
                        !n.subType && e.type && (n.subType = e.type),
                        (t = !0));
                    }),
                      t && r.emitConvUpdate();
                  }));
          },
        },
        {
          key: '_doUpdateUserProfile',
          value: function (e, t) {
            this.hasLocalConversation(e) &&
              ((this.getLocalConversation(e).userProfile = t),
              this.emitConvUpdate());
          },
        },
        {
          key: '_getConvOptions',
          value: function (e) {
            var n = this,
              i = [],
              o =
                ((e = e.filter(function (e) {
                  var t = e.type;
                  return (
                    (e = e.userID),
                    (1 === t && !n._isNonExistentAccount(e)) || 2 === t
                  );
                })),
                this.getMyUserID());
            return (
              (e = e.map(function (e) {
                var r;
                return (
                  ut(e.lastMsg) && (e.lastMsg = { elements: [] }),
                  1 === e.type
                    ? ((r = {
                        userID: e.userID,
                        nick: e.peerNick,
                        avatar: e.peerAvatar,
                      }),
                      i.push(r),
                      {
                        conversationID: ''.concat(D.CONV_C2C).concat(e.userID),
                        type: D.CONV_C2C,
                        lastMessage: {
                          lastTime: e.time,
                          lastSequence: e.sequence,
                          fromAccount: e.lastC2CMsgFromAccount,
                          type: e.lastMsg.elements[0]
                            ? e.lastMsg.elements[0].type
                            : null,
                          payload: e.lastMsg.elements[0]
                            ? n._amendLayersOverLimitProp(
                                e.lastMsg.elements[0].content
                              )
                            : null,
                          cloudCustomData: e.lastMsg.cloudCustomData || '',
                          isRevoked: 8 === e.lastMessageFlag,
                          onlineOnlyFlag: !1,
                          nick: '',
                          nameCard: '',
                          version: 0,
                          isPeerRead:
                            e.lastC2CMsgFromAccount === o &&
                            e.time <= e.c2cPeerReadTime,
                          revoker: e.lastMsg.revokerInfo
                            ? e.lastMsg.revokerInfo.revoker
                            : null,
                        },
                        unreadCount: 0,
                        userProfile: new to(r),
                        peerReadTime: e.c2cPeerReadTime,
                        isPinned: 1 === e.isPinned,
                        customData: e.customMark || '',
                        markList: qt(e.standardMark),
                        conversationGroupList:
                          n._convGroupHandler.getConvGroupListByID(
                            e.contactGroupId
                          ),
                        remark: e.friendRemark || '',
                        messageRemindType: n._transMsgRemindType(
                          e.messageRemindType
                        ),
                      })
                    : {
                        conversationID: ''
                          .concat(D.CONV_GROUP)
                          .concat(e.groupID),
                        type: D.CONV_GROUP,
                        lastMessage: t(
                          t(
                            {
                              lastTime: e.time,
                              lastSequence: e.sequence,
                              fromAccount: e.msgGroupFromAccount,
                            },
                            n._patchTypeAndPayload(e)
                          ),
                          {},
                          {
                            cloudCustomData: e.lastMsg.cloudCustomData || '',
                            isRevoked: 2 === e.lastMessageFlag,
                            onlineOnlyFlag: !1,
                            nick: e.senderNick || '',
                            nameCard: e.senderNameCard || '',
                            revoker: e.lastMsg.revokerInfo
                              ? e.lastMsg.revokerInfo.revoker
                              : null,
                          }
                        ),
                        groupProfile: new oo({
                          groupID: e.groupID,
                          name: e.groupNick,
                          avatar: e.groupImage,
                          type: e.groupType,
                          nextMessageSeq: e.nextMessageSeq,
                        }),
                        unreadCount: n._computeGroupUnreadCount(e),
                        peerReadTime: 0,
                        isPinned: 1 === e.isPinned,
                        version: 0,
                        customData: e.customMark || '',
                        markList: qt(e.standardMark),
                        conversationGroupList:
                          n._convGroupHandler.getConvGroupListByID(
                            e.contactGroupId
                          ),
                        messageRemindType: n._transMsgRemindType(
                          e.messageRemindType
                        ),
                      }
                );
              })),
              0 < i.length && this.get(4).onConvProfileUpdated(i),
              e
            );
          },
        },
        {
          key: '_transMsgRemindType',
          value: function (e) {
            var t = '';
            return (
              0 === e
                ? (t = D.MSG_REMIND_ACPT_AND_NOTE)
                : 1 === e
                  ? (t = D.MSG_REMIND_DISCARD)
                  : 2 === e
                    ? (t = D.MSG_REMIND_ACPT_NOT_NOTE)
                    : 3 === e && (t = D.NOT_RECEIVE_OFFLINE_PUSH_EXCEPT_AT),
              t
            );
          },
        },
        {
          key: '_computeGroupUnreadCount',
          value: function (e) {
            var t;
            return 0 <
              (t =
                (void 0 === (t = e.unreadCount) ? 0 : t) -
                (void 0 === (e = e.noUnreadCount) ? 0 : e))
              ? t
              : 0;
          },
        },
        {
          key: '_patchTypeAndPayload',
          value: function (e) {
            var n = (e = e.lastMsg).event,
              i = void 0 === (i = e.elements) ? [] : i;
            return (
              (e = void 0 === (e = e.groupTips) ? {} : e),
              ut(void 0 === n ? void 0 : n) || Ve(e)
                ? {
                    type: i[0] ? i[0].type : null,
                    payload: i[0]
                      ? this._amendLayersOverLimitProp(i[0].content)
                      : null,
                  }
                : ((n = new Ei(e)).setElement({
                    type: D.MSG_GRP_TIP,
                    content: t(
                      t({}, e.elements),
                      {},
                      { groupProfile: e.groupProfile }
                    ),
                  }),
                  (i = JSON.parse(JSON.stringify(n.payload))),
                  (n = null),
                  { type: D.MSG_GRP_TIP, payload: i })
            );
          },
        },
        {
          key: '_amendLayersOverLimitProp',
          value: function (e) {
            var t = e.layersOverLimit;
            return (
              0 === t
                ? (e.layersOverLimit = !1)
                : 1 === t && (e.layersOverLimit = !0),
              e
            );
          },
        },
        {
          key: 'getLocalMessageList',
          value: function (e) {
            return this._msgListHandler.getLocalMsgList(e);
          },
        },
        {
          key: 'deleteLocalMessage',
          value: function (e) {
            e instanceof Ei && this._msgListHandler.remove(e);
          },
        },
        {
          key: 'onConvDeleted',
          value: function (e) {
            $e(e) &&
              ((e = e.map(function (e) {
                var t = e.type,
                  n = e.userID;
                return (
                  (e = e.groupID),
                  1 === t
                    ? ''.concat(D.CONV_C2C).concat(n)
                    : 2 === t
                      ? ''.concat(D.CONV_GROUP).concat(e)
                      : void 0
                );
              })),
              Ae.l(''.concat(this._n, '.onConvDeleted convIDList:').concat(e)),
              this.deleteLocalConvList(e));
          },
        },
        {
          key: 'onConvPinnedStatus',
          value: function (e, t) {
            var n,
              i = this;
            $e(e) &&
              ((n = !1),
              e.forEach(function (e) {
                var o,
                  r = e.type,
                  a = e.userID;
                (e = e.groupID),
                  1 === r
                    ? (o = i.getLocalConversation(
                        ''.concat(D.CONV_C2C).concat(a)
                      ))
                    : 2 === r &&
                      (o = i.getLocalConversation(
                        ''.concat(D.CONV_GROUP).concat(e)
                      )),
                  o &&
                    (Ae.l(
                      ''
                        .concat(i._n, '.onConvPinnedStatus convID:')
                        .concat(o.conversationID, ' localPinned:')
                        .concat(o.isPinned, ' remotePinned:')
                        .concat(t)
                    ),
                    t
                      ? o.isPinned || ((o.isPinned = !0), (n = !0))
                      : o.isPinned && ((o.isPinned = !1), (n = !0)));
              }),
              n && this._sortConvListAndEmitEvent());
          },
        },
        {
          key: 'getMessageList',
          value: function (e) {
            var t = this,
              n = e.conversationID,
              i = e.nextReqMessageID,
              o = ((e = e.count), ''.concat(this._n, '.getMessageList')),
              r = '';
            if (
              ((s = this.getLocalConversation(n)) &&
                s.groupProfile &&
                (r = s.groupProfile.type),
              It(r))
            )
              return (
                Ae.l(
                  ''
                    .concat(o, ' not available in ')
                    .concat(r, '. convID:')
                    .concat(n)
                ),
                yn({ messageList: [], nextReqMessageID: '', isCompleted: !0 })
              );
            (ut(e) || 15 < e) && (e = 15),
              i || this._isMeInCommunity(n) || this.clearMemMsg(n);
            var a = this._computeRemainingCount({
                conversationID: n,
                nextReqMessageID: i,
              }),
              s = this._completedMap.has(n);
            return (
              Ae.l(
                ''
                  .concat(o, ' convID:')
                  .concat(n, ' isEverCleared:')
                  .concat(this._isEverCleared(n), ' nextReqMessageID:')
                  .concat(i) +
                  ' remainingCount:'
                    .concat(a, ' count:')
                    .concat(e, ' isCompleted:')
                    .concat(s)
              ),
              this._needGetHistory({
                conversationID: n,
                remainingCount: a,
                count: e,
              })
                ? this.getHistoryMessages({
                    conversationID: n,
                    nextReqMessageID: i,
                    count: 20,
                  }).then(function (e) {
                    var i = e.nextReqID,
                      r = e.storedMessageList,
                      s = e.assembledMessageList,
                      c = ((e = e.isPullingCompleted), t._completedMap.has(n)),
                      u = r,
                      l =
                        (0 < a &&
                          (u = t._msgListHandler
                            .getLocalMsgList(n)
                            .slice(0, r.length + a)),
                        {
                          nextReqMessageID: void 0,
                          messageList: void 0,
                          isCompleted: void 0,
                        });
                    return (
                      t._isEverCleared(n)
                        ? ((l.nextReqMessageID = i),
                          (l.messageList = s),
                          (l.isCompleted = e))
                        : ((l.nextReqMessageID = c ? '' : i),
                          (l.messageList = u),
                          (l.isCompleted = c)),
                      (r =
                        l.messageList.filter(function (e) {
                          return e.isRevoked;
                        }) || []),
                      (s = l.messageList.map(function (e) {
                        return e.sequence;
                      })),
                      Ae.l(
                        ''
                          .concat(o, ' ret.nextReqMessageID:')
                          .concat(l.nextReqMessageID, ' ret.isCompleted:')
                          .concat(l.isCompleted, ' sequenceList:'),
                        s
                      ),
                      $e(r) && 0 !== r.length
                        ? t.updateRevokerInfo(r).then(function (e) {
                            return (
                              e.forEach(function (e) {
                                var t = e.revokerInfo;
                                l.messageList = l.messageList.map(function (n) {
                                  return (
                                    n.ID === e.ID &&
                                      t &&
                                      ((n.revokeReason = t.reason || ''),
                                      (n.revokerInfo = {
                                        userID: t.revoker || n.revoker,
                                        nick: t.nick,
                                        avatar: t.avatar,
                                      })),
                                    n
                                  );
                                });
                              }),
                              mn(l)
                            );
                          })
                        : mn(l)
                    );
                  })
                : (this.modifyMessageList(n),
                  yn(
                    (r = this._getMsgListFromMem({
                      conversationID: n,
                      nextReqMessageID: i,
                      count: e,
                    }))
                  ))
            );
          },
        },
        {
          key: '_isEverCleared',
          value: function (e) {
            return this._everClearedMap.has(e);
          },
        },
        {
          key: '_getMsgListFromMem',
          value: function (e) {
            var t = e.conversationID,
              n = e.nextReqMessageID,
              i = ((e = e.count), ''.concat(this._n, '._getMsgListFromMem')),
              o = this._msgListHandler.getLocalMsgList(t),
              r = o.length,
              a = Tt(t),
              s = 0,
              c = { isCompleted: !1, nextReqMessageID: '', messageList: [] };
            return (
              n
                ? (s = a
                    ? o.findIndex(function (e) {
                        return e.ID === n;
                      })
                    : o.findIndex(function (e) {
                        return e.sequence + '' === n;
                      })) > e
                  ? ((c.messageList = o.slice(s - e, s)),
                    (c.nextReqMessageID = a
                      ? o[s - e].ID
                      : o[s - e].sequence + ''))
                  : ((c.messageList = o.slice(0, s)), (c.isCompleted = !0))
                : e < r
                  ? ((c.messageList = o.slice((s = r - e), r)),
                    (c.nextReqMessageID = a ? o[s].ID : o[s].sequence + ''))
                  : ((c.messageList = o.slice(0, r)), (c.isCompleted = !0)),
              (e = c.messageList.map(function (e) {
                return e.sequence;
              })),
              Ae.l(
                ''.concat(i, ' convID:').concat(t) +
                  ' ret.nextReqMessageID:'
                    .concat(c.nextReqMessageID, ' ret.isCompleted:')
                    .concat(c.isCompleted, ' sequenceList:')
                    .concat(e)
              ),
              c
            );
          },
        },
        {
          key: 'getMessageListHopping',
          value: function (e) {
            var t,
              n,
              i = e.conversationID,
              o = e.sequence,
              r = e.time,
              a = e.count;
            return (
              (e = void 0 === (e = e.direction) ? 0 : e),
              (ut(a) || 15 < a) && (a = 15),
              i.startsWith(D.CONV_C2C)
                ? ((t = this.get(6)),
                  (n = i.replace(D.CONV_C2C, '')),
                  t.getRoamingMessagesHopping({
                    peerAccount: n,
                    time: r,
                    count: a,
                    direction: e,
                  }))
                : i.startsWith(D.CONV_GROUP)
                  ? ((t = this.get(7)),
                    (n = i.replace(D.CONV_GROUP, '')),
                    t.getRoamingMessagesHopping({
                      groupID: n,
                      sequence: o,
                      count: a,
                      direction: e,
                    }))
                  : void 0
            );
          },
        },
        {
          key: '_computeRemainingCount',
          value: function (e) {
            var t = e.conversationID,
              n = e.nextReqMessageID,
              i = (e = this._msgListHandler.getLocalMsgList(t)).length;
            return (
              Ae.l(
                ''
                  .concat(this._n, '._computeRemainingCount convID:')
                  .concat(t, ' nextReqMessageID:')
                  .concat(n, ' length:')
                  .concat(i)
              ),
              n
                ? ((i = 0),
                  Tt(t)
                    ? (i = e.findIndex(function (e) {
                        return e.ID === n;
                      }))
                    : Et(t) &&
                      (i =
                        -1 !== n.indexOf('-')
                          ? e.findIndex(function (e) {
                              return e.ID === n;
                            })
                          : e.findIndex(function (e) {
                              return e.sequence + '' === n;
                            })),
                  -1 === i ? 0 : i)
                : i
            );
          },
        },
        {
          key: '_needGetHistory',
          value: function (e) {
            var t = e.conversationID,
              n = e.remainingCount,
              i = ((e = e.count), this.getLocalConversation(t)),
              o = '';
            return (
              i && i.groupProfile && (o = i.groupProfile.type),
              !Dt(t) &&
                !It(o) &&
                (!!this._isEverCleared(t) ||
                  ((i = n <= e && !this._completedMap.has(t)),
                  Ae.l(
                    ''
                      .concat(this._n, '._needGetHistory convID:')
                      .concat(t, ' ret:')
                      .concat(i)
                  ),
                  i))
            );
          },
        },
        {
          key: '_isTopicConv',
          value: function (e) {
            return Ct((e = e.replace(D.CONV_GROUP, '')));
          },
        },
        {
          key: 'getHistoryMessages',
          value: function (e) {
            var t = e.conversationID,
              n = e.count;
            if (((e = e.nextReqMessageID), t === D.CONV_SYSTEM)) return yn();
            var i = 15;
            if ((20 < n && (i = 20), (n = null), Tt(t)))
              return (
                (o = this._roamingMsgKeyAndTimeMap.has(t)),
                (n = this.get(6)).getRoamingMessage({
                  conversationID: t,
                  peerAccount: t.replace(D.CONV_C2C, ''),
                  count: i,
                  lastMessageTime: o
                    ? this._roamingMsgKeyAndTimeMap.get(t).lastMessageTime
                    : 0,
                  messageKey: o
                    ? this._roamingMsgKeyAndTimeMap.get(t).messageKey
                    : '',
                })
              );
            if (Et(t)) {
              if (!(n = this.get(7))) return In({ code: wn.NO_MODULE });
              var o = t.replace(D.CONV_GROUP, ''),
                r = null,
                a =
                  (this._convMap.has(t) &&
                    !Ct(o) &&
                    (r = this._convMap.get(t).lastMessage),
                  0);
              return (
                e ? (a = Number(e)) : r && (a = r.lastSequence),
                n.getRoamingMessage({
                  conversationID: t,
                  groupID: o,
                  count: i,
                  sequence: a,
                })
              );
            }
            return yn();
          },
        },
        {
          key: 'patchConvLastMessage',
          value: function (e) {
            var t,
              n,
              i =
                1 < arguments.length && void 0 !== arguments[1] && arguments[1],
              o = this.getLocalConversation(e);
            o &&
              ((t = (n = o.lastMessage).messageForShow),
              (n = n.payload),
              !(Ve(t) || Ve(n) || i) ||
                (0 !== (t = this._msgListHandler.getLocalMsgList(e)).length &&
                  ((n = t[t.length - 1]),
                  Ae.l(
                    ''
                      .concat(this._n, '.patchConvLastMessage bForceUpdate:')
                      .concat(i, ' convID:')
                      .concat(e, ' payload:'),
                    n.payload
                  ),
                  o.updateLastMessage(n))));
          },
        },
        {
          key: 'onRoamingMessage',
          value: function () {
            var e,
              n,
              i =
                0 < arguments.length && void 0 !== arguments[0]
                  ? arguments[0]
                  : [],
              o =
                !(2 < arguments.length && void 0 !== arguments[2]) ||
                arguments[2],
              r = 3 < arguments.length ? arguments[3] : void 0,
              a = (u = 1 < arguments.length ? arguments[1] : void 0).startsWith(
                D.CONV_C2C
              )
                ? D.CONV_C2C
                : D.CONV_GROUP,
              s = null,
              c = [],
              u = [],
              l = 0,
              d = i.length,
              p = a === D.CONV_GROUP,
              h = this.getFileDownloadProxy(),
              f = this.getDowloadFileAuthKey(),
              g = $e(r),
              _ = this.get(17).getFileDNList(),
              v = function () {
                p ? --l : ++l;
              },
              m = function () {
                return p ? d <= l : l < d;
              };
            for (l = p ? i.length - 1 : 0, d = p ? 0 : i.length; m(); v())
              1 !== i[l].isPlaceMessage &&
                (((s = new Ei(i[l])).to = i[l].to),
                a !== D.CONV_GROUP || ut(i[l].topicID) || (s.to = i[l].topicID),
                (s.isSystemMessage = !!i[l].isSystemMessage),
                (s.conversationType = a),
                (e =
                  4 === i[l].event
                    ? {
                        type: D.MSG_GRP_TIP,
                        content: t(
                          t({}, i[l].elements),
                          {},
                          { groupProfile: i[l].groupProfile }
                        ),
                      }
                    : i[l].elements),
                p ||
                  s.setNickAndAvatar({ nick: i[l].nick, avatar: i[l].avatar }),
                Ve(e)
                  ? ((n = new ei('emptyMessageBody')).setMessage(
                      'from:'
                        .concat(s.from, ' to:')
                        .concat(s.to, ' sequence:')
                        .concat(s.sequence, ' event:')
                        .concat(i[l].event)
                    ),
                    n.setLevel('warning').end())
                  : (s.setElement(e, h, f, _),
                    s.reInitialize(this.getMyUserID()),
                    c.push(s),
                    g && r.push(s)));
            return (
              (v = m = null),
              o
                ? (this._msgListHandler.unshift(c, u), (c = null), u)
                : ((u = null), c)
            );
          },
        },
        {
          key: 'findMessage',
          value: function (e) {
            return this._msgListHandler.findMessage(e);
          },
        },
        {
          key: '_isMeInCommunity',
          value: function (e) {
            var t = !0;
            return (
              this._isTopicConv(e) &&
                ((e = Gt(e.replace(D.CONV_GROUP, ''))),
                this.get(7).hasLocalGroup(e) ||
                  ((t = !1),
                  Ae.l(
                    ''
                      .concat(this._n, '._isMeInCommunity groupID:')
                      .concat(e, ' ret:')
                      .concat(t)
                  ))),
              t
            );
          },
        },
        {
          key: 'deleteTopicRoamingInfo',
          value: function (e) {
            var t = this;
            Mt({ groupID: e }) &&
              this._msgListHandler.getTopicConvIDList(e).forEach(function (e) {
                t.clearMemMsg(e);
              });
          },
        },
        {
          key: 'deleteGroupRoamingInfo',
          value: function (e) {
            (e = ''.concat(D.CONV_GROUP).concat(e)),
              0 < this._msgListHandler.getLocalMsgList(e).length &&
                this.clearMemMsg(e);
          },
        },
        {
          key: 'setMessageRead',
          value: function (e) {
            var t = e.conversationID,
              n = this.getLocalConversation(t);
            if (
              ((e = ''.concat(this._n, '.setMessageRead')),
              Ae.l(
                ''
                  .concat(e, ' convID:')
                  .concat(t, ' unreadCount:')
                  .concat(n ? n.unreadCount : 0)
              ),
              !n)
            )
              return yn();
            if (
              ((n.type !== D.CONV_GROUP && n.type !== D.CONV_TOPIC) ||
                Ve(n.groupAtInfoList) ||
                this.deleteGroupAtTips(t),
              0 === n.unreadCount)
            )
              return yn();
            var i = this._msgListHandler.getLocalLastMsg(t),
              o = n.lastMessage.lastTime,
              r =
                (o < (r = this._msgListHandler.getLocalMaxTime(t)) &&
                  (Ae.l(
                    ''
                      .concat(e, ' update lastMessageTime from ')
                      .concat(o, ' to ')
                      .concat(r)
                  ),
                  (o = r)),
                this._msgListHandler.getLocalMaxSeq(t)),
              a = n.lastMessage.lastSequence,
              s =
                (a < r &&
                  (Ae.l(
                    ''
                      .concat(e, ' update lastMessageSeq from ')
                      .concat(a, ' to ')
                      .concat(r)
                  ),
                  (a = r)),
                n.type === D.CONV_TOPIC &&
                  ut(i) &&
                  ((e = this.get(10)),
                  (i = Gt((r = t.replace(D.CONV_GROUP, '')))),
                  (e = e.getLocalTopic(i, r)) && (a = e.nextMessageSeq - 1)),
                null);
            switch (n.type) {
              case D.CONV_C2C:
                return (s = this.get(6))
                  ? s.setMessageRead({ conversationID: t, lastMessageTime: o })
                  : In({ code: wn.NO_MODULE });
              case D.CONV_GROUP:
              case D.CONV_TOPIC:
                return (s = this.get(7))
                  ? s.setMessageRead({ conversationID: t, lastMessageSeq: a })
                  : In({ code: wn.NO_MODULE });
              case D.CONV_SYSTEM:
                return (n.unreadCount = 0), this.emitConvUpdate(!0, !1), yn();
              default:
                return yn();
            }
          },
        },
        {
          key: 'setAllMessageRead',
          value: function () {
            var e = this,
              t =
                0 < arguments.length && void 0 !== arguments[0]
                  ? arguments[0]
                  : {},
              n = 'setAllMessageRead',
              i = ''.concat(this._n, '.').concat(n),
              o =
                (t.scope || (t.scope = D.READ_ALL_MSG),
                Ae.l(''.concat(i, ' options:'), t),
                this._createSetAllMessageReadPack(t));
            if (
              0 === o.readAllC2CMessage &&
              0 === o.groupMessageReadInfoList.length
            )
              return yn();
            var r = new ei(n);
            return this.req({ P: Gn.SET_ALL_MSG_READ, data: o })
              .then(function (n) {
                return (
                  (n = n.data),
                  (n = e._handleAllMsgRead(n)),
                  r
                    .setMessage(
                      'scope:'
                        .concat(t.scope, ' failureGroups:')
                        .concat(JSON.stringify(n))
                    )
                    .end(),
                  yn()
                );
              })
              .catch(function (e) {
                return (
                  r.setError(e).end(),
                  Ae.w(''.concat(i, ' failed. error:'), e),
                  In({
                    code: e && e.code ? e.code : wn.MSG_UNREAD_ALL_FAIL,
                    message: e && e.message ? e.message : void 0,
                  })
                );
              });
          },
        },
        {
          key: 'setConvCustomData',
          value: function (e) {
            return this._convGroupHandler.setConvCustomData(e);
          },
        },
        {
          key: 'markConv',
          value: function (e) {
            return this._convGroupHandler.markConv(e);
          },
        },
        {
          key: 'getConvGroupList',
          value: function () {
            return this._convGroupHandler.getLocalConvGroupList();
          },
        },
        {
          key: 'createConvGroup',
          value: function (e) {
            return this._convGroupHandler.createConvGroup(e);
          },
        },
        {
          key: 'deleteConvGroup',
          value: function (e) {
            return this._convGroupHandler.deleteConvGroup(e);
          },
        },
        {
          key: 'renameConvGroup',
          value: function (e) {
            return this._convGroupHandler.renameConvGroup(e);
          },
        },
        {
          key: 'addConvsToGroup',
          value: function (e) {
            return this._convGroupHandler.addConvsToGroup(e);
          },
        },
        {
          key: 'deleteConvsFromGroup',
          value: function (e) {
            return this._convGroupHandler.deleteConvsFromGroup(e);
          },
        },
        {
          key: 'onConvMarkUpdated',
          value: function (e) {
            this._convGroupHandler.onConvMarkUpdated(e);
          },
        },
        {
          key: 'onConvGroupCreated',
          value: function (e) {
            this._convGroupHandler.onConvGroupCreated(e);
          },
        },
        {
          key: 'onConvGroupDeleted',
          value: function (e) {
            this._convGroupHandler.onConvGroupDeleted(e);
          },
        },
        {
          key: 'onConvGroupNameUpdated',
          value: function (e) {
            this._convGroupHandler.onConvGroupNameUpdated(e);
          },
        },
        {
          key: 'onConvInGroupUpdated',
          value: function (e) {
            this._convGroupHandler.onConvInGroupUpdated(e);
          },
        },
        {
          key: 'onConvAddedToOrDeletedFromGroup',
          value: function (e) {
            this._convGroupHandler.onConvAddedToOrDeletedFromGroup(e);
          },
        },
        {
          key: '_getConvLastMessageSeq',
          value: function (e) {
            var t = this._msgListHandler.getLocalLastMsg(e.conversationID);
            return (
              (e = e.lastMessage.lastSequence),
              t && e < t.sequence ? t.sequence : e
            );
          },
        },
        {
          key: '_getConvLastMessageTime',
          value: function (e) {
            var t = this._msgListHandler.getLocalLastMsg(e.conversationID);
            return (e = e.lastMessage.lastTime), t && e < t.time ? t.time : e;
          },
        },
        {
          key: '_createSetAllMessageReadPack',
          value: function (e) {
            var t,
              n = { readAllC2CMessage: 0, groupMessageReadInfoList: [] },
              i = e.scope,
              o = T(this._convMap);
            try {
              for (o.s(); !(t = o.n()).done; ) {
                var r,
                  a = _(t.value, 2)[1];
                if (0 < a.unreadCount)
                  if (a.type === D.CONV_C2C && 0 === n.readAllC2CMessage) {
                    if (i === D.READ_ALL_MSG) n.readAllC2CMessage = 1;
                    else if (i === D.READ_ALL_C2C_MSG) {
                      n.readAllC2CMessage = 1;
                      break;
                    }
                  } else
                    a.type !== D.CONV_GROUP ||
                      (i !== D.READ_ALL_GROUP_MSG && i !== D.READ_ALL_MSG) ||
                      ((r = this._getConvLastMessageSeq(a)),
                      n.groupMessageReadInfoList.push({
                        groupID: a.groupProfile.groupID,
                        messageSequence: r,
                      }));
              }
            } catch (s) {
              o.e(s);
            } finally {
              o.f();
            }
            return n;
          },
        },
        {
          key: 'onPushedAllMessageRead',
          value: function (e) {
            this._handleAllMsgRead(e);
          },
        },
        {
          key: '_handleAllMsgRead',
          value: function (e) {
            var t = e.groupMessageReadInfoList;
            return (
              (e = e.readAllC2CMessage),
              (t = this._parseGroupReadInfo(t)),
              1 <= this._updateAllConvUnreadCount({ readAllC2CMessage: e }) &&
                this.emitConvUpdate(!0, !1),
              t
            );
          },
        },
        {
          key: '_parseGroupReadInfo',
          value: function (e) {
            var t = [];
            if (e && e.length)
              for (var n = 0, i = e.length; n < i; n++) {
                var o = (s = e[n]).groupID,
                  r = s.sequence,
                  a = s.retCode,
                  s = s.lastMessageSeq;
                ut(a)
                  ? this._remoteGroupReadSeqMap.set(o, s)
                  : (this._remoteGroupReadSeqMap.set(o, r),
                    0 !== a &&
                      t.push(''.concat(o, '-').concat(r, '-').concat(a)));
              }
            return t;
          },
        },
        {
          key: '_updateAllConvUnreadCount',
          value: function (e) {
            var t,
              n = e.readAllC2CMessage,
              i = 0,
              o = T(this._convMap);
            try {
              for (o.s(); !(t = o.n()).done; ) {
                var r,
                  a,
                  s,
                  c,
                  u = _(t.value, 2),
                  l = u[0],
                  d = u[1];
                1 <= d.unreadCount &&
                  (1 === n && d.type === D.CONV_C2C
                    ? ((r = this._getConvLastMessageTime(d)),
                      this.updateIsReadAfterReadReport({
                        conversationID: l,
                        lastMessageTime: r,
                      }))
                    : d.type === D.CONV_GROUP &&
                      ((a = l.replace(D.CONV_GROUP, '')),
                      this._remoteGroupReadSeqMap.has(a) &&
                        ((s = this._remoteGroupReadSeqMap.get(a)),
                        (c = this._getConvLastMessageSeq(d)),
                        this.updateIsReadAfterReadReport({
                          conversationID: l,
                          remoteReadSequence: s,
                        }),
                        s <= c && this._remoteGroupReadSeqMap.delete(a))),
                  this.updateUnreadCount(l, !1) && (i += 1));
              }
            } catch (p) {
              o.e(p);
            } finally {
              o.f();
            }
            return i;
          },
        },
        {
          key: 'isRemoteRead',
          value: function (e) {
            var t,
              n = e.conversationID,
              i = ((e = e.sequence), n.replace(D.CONV_GROUP, '')),
              o = !1;
            return (
              this._remoteGroupReadSeqMap.has(i) &&
                (e <= (t = this._remoteGroupReadSeqMap.get(i)) &&
                  ((o = !0),
                  Ae.l(
                    ''
                      .concat(this._n, '.isRemoteRead convID:')
                      .concat(n, ' msgSeq:')
                      .concat(e, ' remoteReadSeq:')
                      .concat(t)
                  )),
                t + 10 <= e && this._remoteGroupReadSeqMap.delete(i)),
              o
            );
          },
        },
        {
          key: 'updateIsReadAfterReadReport',
          value: function (e) {
            var t = e.conversationID,
              n = e.lastMessageSeq,
              i = e.lastMessageTime,
              o = this._msgListHandler.getLocalMsgList(t);
            if (0 !== o.length)
              for (var r, a = o.length - 1; 0 <= a; a--)
                if (
                  ((r = o[a]), !((i && r.time > i) || (n && r.sequence > n)))
                ) {
                  if ('in' === r.flow && r.isRead) break;
                  r.setIsRead(!0);
                }
          },
        },
        {
          key: 'updateUnreadCount',
          value: function (e) {
            var t,
              n =
                !(1 < arguments.length && void 0 !== arguments[1]) ||
                arguments[1],
              i = !1,
              o = this.getLocalConversation(e),
              r = this._msgListHandler.getLocalMsgList(e);
            if (o)
              return (
                (t = o.unreadCount) !==
                  (r = r.filter(function (e) {
                    return !e.isRead && !e._onlineOnlyFlag && !e.isDeleted;
                  }).length) &&
                  ((o.unreadCount = r),
                  (i = !0),
                  Ae.l(
                    ''
                      .concat(this._n, '.updateUnreadCount from ')
                      .concat(t, ' to ')
                      .concat(r, ', convID:')
                      .concat(e)
                  ),
                  !0 === n && this.emitConvUpdate(!0, !1)),
                i &&
                  o.type === D.CONV_TOPIC &&
                  ((t = o.unreadCount),
                  (r = this.get(10)),
                  (n = e.replace(D.CONV_GROUP, '')),
                  r.onUnreadCountUpdatedFromConv(n, t)),
                i
              );
          },
        },
        {
          key: 'clearGroupAtInfoList',
          value: function (e) {
            var t,
              n =
                !(1 < arguments.length && void 0 !== arguments[1]) ||
                arguments[1],
              i = this.getLocalConversation(e);
            i &&
              0 < i.groupAtInfoList.length &&
              (i.clearGroupAtInfoList(),
              Ae.l(
                ''.concat(this._n, '.clearGroupAtInfoList convID:').concat(e)
              ),
              i.type === D.CONV_TOPIC &&
                ((i = i.groupAtInfoList),
                (t = this.get(10)),
                (e = e.replace(D.CONV_GROUP, '')),
                t.onAtInfoUpdated({ topicID: e, groupAtInfoList: i })),
              !0 === n && this.emitConvUpdate(!0, !1));
          },
        },
        {
          key: 'updateReadReceiptInfo',
          value: function (e) {
            var t,
              n,
              i,
              o = this,
              r = void 0 === (s = e.userID) ? void 0 : s,
              a = void 0 === (s = e.groupID) ? void 0 : s,
              s = e.readReceiptList,
              c = void 0 === (e = e.timestamp) ? 0 : e;
            Ve(s) ||
              ((t = []),
              ut(r)
                ? ut(a) ||
                  ((n = ''.concat(D.CONV_GROUP).concat(a)),
                  s.forEach(function (e) {
                    var i = e.tinyID,
                      r = e.clientTime,
                      s = e.random,
                      c = e.readCount;
                    (e = e.unreadCount),
                      (i = ''.concat(i, '-').concat(r, '-').concat(s)),
                      (r =
                        o._msgListHandler.getLocalMsg(n, i) ||
                        o._msgListHandler.getHoppingMsg(n, i)),
                      (s = {
                        groupID: a,
                        messageID: i,
                        readCount: 0,
                        unreadCount: 0,
                      }),
                      r &&
                        (Ke(c) &&
                          ((r.readReceiptInfo.readCount = c),
                          (s.readCount = c)),
                        Ke(e) &&
                          ((r.readReceiptInfo.unreadCount = e),
                          (s.unreadCount = e)),
                        t.push(s));
                  }))
                : ((i = ''.concat(D.CONV_C2C).concat(r)),
                  s.forEach(function (e) {
                    var n = e.tinyID,
                      a = e.clientTime;
                    (e = e.random),
                      (n = ''.concat(n, '-').concat(a, '-').concat(e)),
                      (a =
                        o._msgListHandler.getLocalMsg(i, n) ||
                        o._msgListHandler.getHoppingMsg(i, n)) &&
                        !a.readReceiptInfo.isPeerRead &&
                        ((a.readReceiptInfo.isPeerRead = !0),
                        (a.readReceiptInfo.timestamp = c),
                        t.push({
                          userID: r,
                          messageID: n,
                          isPeerRead: !0,
                          timestamp: c,
                        }));
                  })),
              0 < t.length &&
                this.emitOEvt(E.MESSAGE_READ_RECEIPT_RECEIVED, t));
          },
        },
        {
          key: 'updateIsRead',
          value: function (e) {
            var t = this.getLocalConversation(e),
              n = this.getLocalMessageList(e);
            if (t && 0 !== n.length && !Dt(t.type)) {
              for (var i = [], o = 0, r = n.length; o < r; o++)
                'in' !== n[o].flow
                  ? 'out' !== n[o].flow || n[o].isRead || n[o].setIsRead(!0)
                  : i.push(n[o]);
              var a = 0;
              a =
                t.type === D.CONV_C2C
                  ? ((e = i.slice(-t.unreadCount).filter(function (e) {
                      return e.isRevoked;
                    }).length),
                    i.length - t.unreadCount - e)
                  : i.length - t.unreadCount;
              for (var s = 0; s < a && !i[s].isRead; s++) i[s].setIsRead(!0);
            }
          },
        },
        {
          key: 'deleteGroupAtTips',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.deleteGroupAtTips');
            if ((Ae.l(''.concat(n)), !(o = this._convMap.get(e))))
              return Promise.resolve();
            var i = o.groupAtInfoList;
            if (0 === i.length) return Promise.resolve();
            var o = void 0,
              r =
                (e.startsWith(D.CONV_GROUP) &&
                  (o = e.replace(D.CONV_GROUP, '')),
                v(i));
            if (
              (Mt({ groupID: o }) || Ct(o)) &&
              0 ===
                (r = i.filter(function (e) {
                  return !e.atTypeArray.includes(D.CONV_AT_ALL);
                })).length
            )
              return this.clearGroupAtInfoList(e, !1), Promise.resolve();
            var a = this.getMyUserID();
            return this.req({
              P: Gn.DEL_GROUP_AT_TIPS,
              data: {
                messageListToDelete: r.map(function (e) {
                  return {
                    from: e.from,
                    to: a,
                    messageSeq: e.__sequence,
                    messageRandom: e.__random,
                    groupID: ut(e.topicID) ? e.groupID : e.topicID,
                  };
                }),
              },
            })
              .then(function () {
                return (
                  Ae.l(''.concat(n, ' ok. count:').concat(i.length)),
                  t.clearGroupAtInfoList(e, !1),
                  Promise.resolve()
                );
              })
              .catch(function (e) {
                return Ae.e(''.concat(n, ' failed. error:'), e), In(e);
              });
          },
        },
        {
          key: 'appendToMessageList',
          value: function (e) {
            return this._msgListHandler.pushIn(e);
          },
        },
        {
          key: 'setMessageRandom',
          value: function (e) {
            this._sll.set(e.random);
          },
        },
        {
          key: 'deleteMessageRandom',
          value: function (e) {
            this._sll.delete(e.random);
          },
        },
        {
          key: 'pushIntoMessageList',
          value: function (e, t, n) {
            return !(
              !this._msgListHandler.pushIn(t, n) ||
              (this._sll.has(t.random) && !n) ||
              (e.push(t), 0)
            );
          },
        },
        {
          key: 'revoke',
          value: function (e, t, n) {
            return this._msgListHandler.revoke(e, t, n);
          },
        },
        {
          key: 'getPeerReadTime',
          value: function (e) {
            return this._peerReadTimeMap.get(e);
          },
        },
        {
          key: 'recordPeerReadTime',
          value: function (e, t) {
            (!this._peerReadTimeMap.has(e) ||
              this._peerReadTimeMap.get(e) < t) &&
              this._peerReadTimeMap.set(e, t);
          },
        },
        {
          key: 'updateMsgIsPeerReadProp',
          value: function (e, t) {
            var n;
            e.startsWith(D.CONV_C2C) &&
              0 < t &&
              (0 <
                (n = this._msgListHandler.updateMsgIsPeerReadProp(e, t))
                  .length && this.emitOEvt(E.MESSAGE_READ_BY_PEER, n),
              this._convMap.has(e) &&
                (Ve((n = this._convMap.get(e).lastMessage)) ||
                  (n.fromAccount === this.getMyUserID() &&
                    n.lastTime <= t &&
                    !n.isPeerRead &&
                    ((n.isPeerRead = !0), this.emitConvUpdate(!0, !1)))));
          },
        },
        {
          key: 'updateMsgIsModifiedProp',
          value: function (e) {
            this._msgListHandler.updateMsgIsModifiedProp(e);
          },
        },
        {
          key: 'setCompleted',
          value: function (e) {
            Ae.l(''.concat(this._n, '.setCompleted convID:').concat(e)),
              this._completedMap.set(e, !0);
          },
        },
        {
          key: 'updateRoamingMsgKeyAndTime',
          value: function (e, t, n) {
            this._roamingMsgKeyAndTimeMap.set(e, {
              messageKey: t,
              lastMessageTime: n,
            });
          },
        },
        {
          key: 'getConvList',
          value: function (e) {
            var t,
              n = this,
              i = ''.concat(this._n, '.').concat('getConvList'),
              o = 'pagingStatus:'
                .concat(this._pagingStatus, ', local conversation count:')
                .concat(this._convMap.size, ', options:')
                .concat(JSON.stringify(e));
            return (
              Ae.l(''.concat(i, '. ').concat(o)),
              this._pagingStatus === Rn
                ? ((t = new ei('getConvList')).setMessage(o),
                  this.syncConvList()
                    .then(function () {
                      return (
                        t.end(),
                        mn({
                          conversationList: n._getConvList(e),
                          isSyncCompleted: n._isSyncCompleted(),
                        })
                      );
                    })
                    .catch(function (e) {
                      return (
                        t.setError(e).end(),
                        Ae.e(''.concat(i, ' failed. error:'), e),
                        In(e)
                      );
                    }))
                : ((o = this._getConvList(e)),
                  Ae.l(
                    ''
                      .concat(i, '. returned conversation count:')
                      .concat(o.length)
                  ),
                  yn({
                    conversationList: o,
                    isSyncCompleted: this._isSyncCompleted(),
                  }))
            );
          },
        },
        {
          key: '_getConvList',
          value: function (e) {
            var t,
              n,
              i,
              o,
              r,
              a = this;
            return ut(e)
              ? this.getLocalConvList()
              : $e(e)
                ? 0 === e.length
                  ? []
                  : this.getLocalConvList().filter(function (t) {
                      return e.includes(t.conversationID);
                    })
                : ze(e)
                  ? ((t = e.type),
                    (n = e.markType),
                    (i = e.groupName),
                    (o = e.hasUnreadCount),
                    (r = e.hasGroupAtInfo),
                    this.getLocalConvList().filter(function (e) {
                      return (
                        a._filterType(e, t) &&
                        a._filterMarkType(e, n) &&
                        a._filterGroupName(e, i) &&
                        a._filterUnreadCount(e, o) &&
                        a._filterGroupAtInfo(e, r)
                      );
                    }))
                  : [];
          },
        },
        {
          key: '_filterType',
          value: function (e, t) {
            return (t !== D.CONV_C2C && t !== D.CONV_GROUP) || e.type === t;
          },
        },
        {
          key: '_filterGroupName',
          value: function (e, t) {
            return (
              !ct(t) ||
              ('' === t
                ? 0 === e.conversationGroupList.length
                : e.conversationGroupList.includes(t))
            );
          },
        },
        {
          key: '_filterMarkType',
          value: function (e, t) {
            return (
              !Ke(t) ||
              (0 === t ? 0 === e.markList.length : e.markList.includes(t))
            );
          },
        },
        {
          key: '_filterUnreadCount',
          value: function (e, t) {
            var n = !0;
            return (
              !0 === t
                ? (n = 1 <= e.unreadCount)
                : !1 === t && (n = 0 === e.unreadCount),
              n
            );
          },
        },
        {
          key: '_filterGroupAtInfo',
          value: function (e, t) {
            var n = !0;
            return (
              !0 === t
                ? (n = 1 <= e.groupAtInfoList.length)
                : !1 === t && (n = 0 === e.groupAtInfoList.length),
              n
            );
          },
        },
        {
          key: '_handleC2CPeerReadTime',
          value: function () {
            var e,
              t = T(this._convMap);
            try {
              for (t.s(); !(e = t.n()).done; ) {
                var n = _(e.value, 2),
                  i = n[0],
                  o = n[1];
                o.type === D.CONV_C2C &&
                  this.recordPeerReadTime(i, o.peerReadTime);
              }
            } catch (r) {
              t.e(r);
            } finally {
              t.f();
            }
          },
        },
        {
          key: '_isPagingGetGroupListCompleted',
          value: function () {
            var e = this.get(7);
            return !e || e.isPagingGetCompleted();
          },
        },
        {
          key: '_getLocalGroupCount',
          value: function () {
            var e = this.get(7);
            return e ? e.getLocalGroupList().length : 0;
          },
        },
        {
          key: '_hasLocalGroup',
          value: function (e) {
            var t = this.get(7);
            return !!t && t.hasLocalGroup(e.replace(D.CONV_GROUP, ''));
          },
        },
        {
          key: 'getConversationProfile',
          value: function (e) {
            var t,
              n = this;
            if (
              (t = this._convMap.has(e)
                ? this._convMap.get(e)
                : new ro(
                    {
                      conversationID: e,
                      type: Tt(e) ? D.CONV_C2C : D.CONV_GROUP,
                    },
                    this.isIntl(),
                    this.isUsingChatCore()
                  ))._isInfoCompleted ||
              t.type === D.CONV_SYSTEM
            )
              return yn({ conversation: t });
            if (Et(e)) {
              if (!this.get(7)) return In({ code: wn.NO_MODULE });
              if (!this._hasLocalGroup(e)) return yn({ conversation: t });
            }
            var i = ''.concat(this._n, '.').concat('getConversationProfile'),
              o = new ei('getConversationProfile');
            return (
              Ae.l(
                ''
                  .concat(i, '. convID:')
                  .concat(e, ' remark:')
                  .concat(t.remark, ' lastMessage:'),
                t.lastMessage
              ),
              this._getUserOrGroupProfile(t)
                .then(function (r) {
                  o.setMessage(
                    'convID:'
                      .concat(e, ' unreadCount:')
                      .concat(r.data.conversation.unreadCount)
                  ).end();
                  var a,
                    s = n.get(8);
                  return (
                    s &&
                      t.type === D.CONV_C2C &&
                      ((a = e.replace(D.CONV_C2C, '')),
                      s.isMyFriend(a) &&
                        ((s = s.getFriendRemark(a)),
                        t.remark !== s &&
                          ((t.remark = s),
                          Ae.l(
                            ''
                              .concat(i, '. convID:')
                              .concat(e, ' patch remark:')
                              .concat(t.remark)
                          )))),
                    Ae.l(''.concat(i, ' ok. convID:').concat(e)),
                    r
                  );
                })
                .catch(function (t) {
                  return (
                    o.setError(t).setMessage('convID:'.concat(e)).end(),
                    Ae.e(''.concat(i, ' failed. error:'), t),
                    In(t)
                  );
                })
            );
          },
        },
        {
          key: '_getUserOrGroupProfile',
          value: function (e) {
            var t = this;
            return e.type === D.CONV_C2C
              ? this.get(4)
                  .getUserProfile({ userIDList: [e.toAccount] })
                  .then(function (n) {
                    return 0 === (n = n.data).length
                      ? In({ code: wn.USER_OR_GRP_NOT_FOUND })
                      : ((e.userProfile = n[0]),
                        (e._isInfoCompleted = !0),
                        t._insertConvAfterTopmost(e),
                        yn({ conversation: e }));
                  })
              : this.get(7)
                  .getGroupProfile({ groupID: e.toAccount })
                  .then(function (n) {
                    return (
                      (e.groupProfile = n.data.group),
                      (e._isInfoCompleted = !0),
                      t._insertConvAfterTopmost(e),
                      yn({ conversation: e })
                    );
                  });
          },
        },
        {
          key: '_insertConvAfterTopmost',
          value: function (e) {
            var t, n;
            e instanceof ro &&
              !this._convMap.has(e.conversationID) &&
              ((n = (t = v(this._convMap)).findIndex(function (e) {
                return !1 === e[1].isPinned;
              })),
              t.splice(n, 0, [e.conversationID, e]),
              (this._convMap = new Map(t)),
              this._setStorageConvList(),
              this.emitConvUpdate(!0, !1));
          },
        },
        {
          key: '_onProfileUpdated',
          value: function (e) {
            var t = this;
            e.data.forEach(function (e) {
              var n = e.userID;
              n === t.getMyUserID()
                ? t._onMyProfileModified({
                    latestNick: e.nick,
                    latestAvatar: e.avatar,
                  })
                : (n = t._convMap.get(''.concat(D.CONV_C2C).concat(n))) &&
                  (n.userProfile = e);
            });
          },
        },
        {
          key: '_onCloudConfig',
          value: function (e) {
            '0' === this.getCloudConfig('pull_on_invite') &&
              (this._bPullOnInvite = !1),
              Ae.l(
                ''
                  .concat(this._n, '._onCloudConfig bPullOnInvite:')
                  .concat(this._bPullOnInvite)
              );
          },
        },
        {
          key: '_isSyncCompleted',
          value: function () {
            return this._pagingStatus === kn;
          },
        },
        {
          key: '_errorLog',
          value: function (e, t, n, i) {
            var o = new Error('Params validate failed.'),
              r = ''.concat(this.getErrMsg('API_REFER')).concat(e);
            throw (
              (Ae.w(
                '['
                  .concat(e, '] | ')
                  .concat(t, ' | ')
                  .concat(this.getErrMsg(n, i), ', ')
                  .concat(r)
              ),
              Ae.e(
                '['
                  .concat(e, '] Invalid ')
                  .concat(t, ': type check failed for ')
                  .concat(t, '.')
              ),
              o)
            );
          },
        },
        {
          key: '_isValidConvID',
          value: function (e) {
            return Tt(e) || Et(e) || Dt(e);
          },
        },
        {
          key: 'deleteConversation',
          value: function (e) {
            var t = this,
              n = 'deleteConversation';
            return (
              ct(e) ||
                We(e) ||
                this._errorLog(n, 'options', 'StringOrObjectRequiredLog'),
              ct(e)
                ? (this._isValidConvID(e) ||
                    this._errorLog(n, 'options', 'InvalidConversationID', e),
                  Ae.l(''.concat(this._n, '.').concat(n, ' convID:').concat(e)),
                  this.deleteConvList({ conversationIDList: [e], flag: 1 }))
                : ($e(e.conversationIDList) ||
                    this._errorLog(n, 'conversationIDList', 'ArrayRequiredLog'),
                  0 === e.conversationIDList.length &&
                    this._errorLog(n, 'conversationIDList', 'NonEmptyArrayLog'),
                  e.conversationIDList.forEach(function (e) {
                    t._isValidConvID(e) ||
                      t._errorLog(
                        n,
                        'conversationIDList',
                        'InvalidConversationID',
                        e
                      );
                  }),
                  'clearHistoryMessage' in e &&
                    'boolean' != typeof e.clearHistoryMessage &&
                    this._errorLog(
                      n,
                      'clearHistoryMessage',
                      'BooleanRequiredLog'
                    ),
                  100 < e.conversationIDList.length &&
                    (e.conversationIDList = e.conversationIDList.slice(0, 100)),
                  this.deleteConvList(e))
            );
          },
        },
        {
          key: 'deleteConvList',
          value: function (e) {
            var t = void 0 === (t = e.conversationIDList) ? [] : t,
              n = void 0 === (n = e.clearHistoryMessage) || n,
              i = void 0 === (e = e.flag) ? 0 : e,
              o = ''.concat(this._n, '.').concat('deleteConvList'),
              r =
                ((e = 'convIDList:'
                  .concat(t, ' clearHistoryMessage:')
                  .concat(n)),
                Ae.l(''.concat(o, ' ').concat(e)),
                new ei('deleteConvList'));
            return (
              r.setMessage(e),
              Promise.all([
                this.rmLocalOnlyConvList(t),
                this.rmLocalAndRemoteConvList(t, n),
              ])
                .then(function (e) {
                  return (
                    r.end(),
                    0 === (e = [].concat(v(e[0]), v(e[1]))).length
                      ? In(new Pn({ code: wn.CONV_NOT_FOUND }))
                      : (Ae.l(''.concat(o, ' ok')),
                        yn(
                          1 === i
                            ? { conversationID: e[0] }
                            : { conversationIDList: e }
                        ))
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.e(''.concat(o, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'rmLocalOnlyConvList',
          value: function (e) {
            var t = this;
            return e.filter(function (e) {
              if (!t._convMap.has(e)) return !1;
              var n = t.getLocalConversation(e).type;
              return n !== D.CONV_GROUP || t._hasLocalGroup(e)
                ? n === D.CONV_SYSTEM &&
                    (t
                      .get(7)
                      .deleteGroupSystemNotice({
                        messageList: t._msgListHandler.getLocalMsgList(e),
                      }),
                    t.deleteLocalConv(e),
                    !0)
                : (t.deleteLocalConv(e), !0);
            });
          },
        },
        {
          key: 'rmLocalAndRemoteConvList',
          value: function (e, t) {
            var n = this,
              i = {
                fromAccount: this.getMyUserID(),
                conversationList: [],
                clearHistoryMessage: t ? 1 : 0,
              };
            return (
              e.forEach(function (e) {
                var t;
                n._convMap.has(e) &&
                  ((t = n.getLocalConversation(e).type) === D.CONV_C2C
                    ? i.conversationList.push({
                        toAccount: e.replace(t, ''),
                        type: 1,
                      })
                    : t === D.CONV_GROUP &&
                      n._hasLocalGroup(e) &&
                      i.conversationList.push({
                        toGroupID: e.replace(t, ''),
                        type: 2,
                      }));
              }),
              0 === i.conversationList.length
                ? []
                : this.req({ P: Gn.DEL_CONV, data: i }).then(function (e) {
                    var t = [];
                    return (
                      0 < e.data.resultList.length &&
                        e.data.resultList.map(function (e) {
                          0 === e.code &&
                            ((e =
                              1 === e.type
                                ? ''.concat(D.CONV_C2C).concat(e.to)
                                : ''.concat(D.CONV_GROUP).concat(e.groupID)),
                            t.push(e));
                        }),
                      n.deleteLocalConvList(t),
                      t
                    );
                  })
            );
          },
        },
        {
          key: 'setConvDraft',
          value: function (e) {
            var t = e.conversationID,
              n =
                ((e = e.draftText),
                ''.concat(this._n, '.').concat('setConvDraft'));
            return (
              Ae.l(''.concat(n, ' convID:').concat(t, ' draftText:').concat(e)),
              this._convMap.has(t)
                ? ((n = this._convMap.get(t)).setDraftText(e),
                  this.emitConvUpdate(),
                  yn({ code: 0, conversation: n }))
                : In({ code: wn.CONV_NOT_FOUND })
            );
          },
        },
        {
          key: 'clearHistoryMessage',
          value: function (e) {
            var t = this,
              n = {
                fromAccount: this.getMyUserID(),
                toAccount: void 0,
                type: void 0,
                toGroupID: void 0,
              };
            if (!this._convMap.has(e)) return In({ code: wn.CONV_NOT_FOUND });
            var i = this._convMap.get(e).type;
            if (i === D.CONV_C2C)
              (n.type = 1), (n.toAccount = e.replace(D.CONV_C2C, ''));
            else {
              if (i !== D.CONV_GROUP)
                return i === D.CONV_SYSTEM
                  ? (this.get(7).deleteGroupSystemNotice({
                      messageList: this._msgListHandler.getLocalMsgList(e),
                    }),
                    yn({ conversationID: e }))
                  : In({ code: wn.CONV_UN_RECORDED_TYPE });
              (n.type = 2), (n.toGroupID = e.replace(D.CONV_GROUP, ''));
            }
            var o = ''.concat(this._n, '.').concat('clearHistoryMessage'),
              r = new ei('clearHistoryMessage');
            return (
              r.setMessage('convID:'.concat(e)),
              Ae.l(''.concat(o, '. convID:').concat(e)),
              this.setMessageRead({ conversationID: e })
                .then(function () {
                  return t.req({ P: Gn.CLEAR_HISTORY_MSG, data: n });
                })
                .then(function () {
                  r.end(), Ae.l(''.concat(o, ' ok')), t.clearMemMsg(e);
                  var n = t.getLocalConversation(e);
                  return (
                    n && (n.updateLastMessage(), t._sortConvListAndEmitEvent()),
                    yn({ conversationID: e })
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.e(''.concat(o, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'pinConversation',
          value: function (e) {
            var t = this,
              n = e.conversationID,
              i = e.isPinned,
              o = this.getLocalConversation(n);
            if (o && o.isPinned === i) return yn({ conversationID: n });
            if (Dt(n))
              return (
                o && (o.isPinned = i),
                this._sortConvListAndEmitEvent(),
                yn({ conversationID: n })
              );
            if (
              ((e = null),
              Tt(n)
                ? (e = { type: 1, toAccount: n.replace(D.CONV_C2C, '') })
                : Et(n) &&
                  (e = { type: 2, groupID: n.replace(D.CONV_GROUP, '') }),
              null === e)
            )
              return In({ code: wn.INVALID_CONV_ID });
            var r = ''.concat(this._n, '.').concat('pinConversation'),
              a = 'convID:'.concat(n, ' isPinned:').concat(i),
              s = new ei('pinConversation');
            return (
              s.setMessage(a),
              Ae.l(''.concat(r, '. ').concat(a)),
              this.req({
                P: Gn.PIN_CONV,
                data: {
                  fromAccount: this.getMyUserID(),
                  operationType: !0 === i ? 1 : 2,
                  itemList: [e],
                },
              })
                .then(function () {
                  return (
                    s.end(),
                    Ae.l(''.concat(r, ' ok')),
                    o
                      ? o.isPinned !== i && (o.isPinned = i)
                      : t._convMap.set(
                          n,
                          new ro(
                            {
                              conversationID: n,
                              type: Tt(n) ? D.CONV_C2C : D.CONV_GROUP,
                              isPinned: i,
                            },
                            t.isIntl(),
                            t.isUsingChatCore()
                          )
                        ),
                    t._sortConvListAndEmitEvent(),
                    mn({ conversationID: n })
                  );
                })
                .catch(function (e) {
                  return (
                    s.setError(e).end(),
                    Ae.e(''.concat(r, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'setMessageRemindType',
          value: function (e) {
            return this._msgRemindHandler.set(e);
          },
        },
        {
          key: 'patchMsgRemindType',
          value: function (e) {
            var t = e.ID,
              n = e.isC2CConversation,
              i = e.messageRemindType,
              o = !1;
            return (
              (n = this.getLocalConversation(
                ''.concat(n ? D.CONV_C2C : D.CONV_GROUP).concat(t)
              )) &&
                n.messageRemindType !== i &&
                ((n.messageRemindType = i), (o = !0)),
              Ae.l(
                ''.concat(this._n, '.patchMsgRemindType options:'),
                e,
                'ret:'.concat(o)
              ),
              o
            );
          },
        },
        {
          key: 'onC2CMsgRemindTypeFetched',
          value: function (e) {
            var t,
              n = this;
            $e(e) &&
              0 < e.length &&
              ((t = 0),
              e.forEach(function (e) {
                var i = e.userID;
                (e = e.muteFlag),
                  (e = n._transMsgRemindType(e)),
                  !0 ===
                    n.patchMsgRemindType({
                      ID: i,
                      isC2CConversation: !0,
                      messageRemindType: e,
                    }) && (t += 1);
              }),
              Ae.l(
                ''
                  .concat(this._n, '.onC2CMsgRemindTypeFetched updateCount:')
                  .concat(t)
              ),
              1 <= t && this.emitConvUpdate(!0, !1));
          },
        },
        {
          key: 'onC2CMsgRemindTypeSynced',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.onC2CMsgRemindTypeSynced');
            e.dataList.forEach(function (e) {
              var i;
              Ve(e.muteNotificationsSync) ||
                ((i = (e = e.muteNotificationsSync).to),
                (e = e.muteFlag),
                (e = t._transMsgRemindType(e)),
                t.patchMsgRemindType({
                  ID: i,
                  isC2CConversation: !(i = 0),
                  messageRemindType: e,
                }) && (i += 1),
                Ae.l(''.concat(n, ' updateCount:').concat(i)),
                1 <= i && t.emitConvUpdate(!0, !1));
            });
          },
        },
        {
          key: 'onGroupMsgRemindTypeUpdated',
          value: function (e) {
            this._msgRemindHandler.onGroupMsgRemindTypeUpdated(e);
          },
        },
        {
          key: 'deleteLocalConv',
          value: function (e) {
            var t =
                !(1 < arguments.length && void 0 !== arguments[1]) ||
                arguments[1],
              n = this._convMap.has(e);
            Ae.l(
              ''
                .concat(this._n, '.deleteLocalConv convID:')
                .concat(e, ' has:')
                .concat(n)
            ),
              n &&
                (this._convMap.delete(e),
                this.clearMemMsg(e),
                this._setStorageConvList(),
                t) &&
                ((n = !this._isTopicConv(e)), this.emitConvUpdate(n, !1));
          },
        },
        {
          key: 'pullMsgOnInvite',
          value: function (e) {
            var t,
              n,
              i,
              o,
              r,
              a = this.get(7);
            a &&
              ((t = ''.concat(this._n, '.pullMsgOnInvite')),
              Ae.l(''.concat(t, ' flag:').concat(this._bPullOnInvite)),
              this._bPullOnInvite &&
                ((r = this.getLocalLastMessage(e)),
                (n = this.getLocalSecondLastMessage(e)),
                (o = i = 1),
                r && (i = r.sequence),
                n && (o = n.sequence),
                (r = a.getGroupRemoteLastSeq(e.replace(D.CONV_GROUP, ''))),
                Ae.l(
                  ''
                    .concat(t, ' convID:')
                    .concat(e, ' localLastSeq:')
                    .concat(i, ' localSecondLastSeq:')
                    .concat(o, ' remoteLastSeq:')
                    .concat(r)
                ),
                this.clearMemMsg(e),
                1 < i - o
                  ? this._recursiveGetMsgList([], e, !1, i, o)
                  : 1 < r - i && this._recursiveGetMsgList([], e, !0, r, i)));
          },
        },
        {
          key: '_recursiveGetMsgList',
          value: function (e, t, n, i, o, r) {
            var a = this;
            this.getMessageList({
              conversationID: t,
              nextReqMessageID: r,
            }).then(function (r) {
              var s = (r = r.data.messageList).filter(function (e) {
                return n
                  ? e.sequence > o && e.sequence <= i
                  : e.sequence > o && e.sequence < i;
              });
              e.unshift.apply(e, v(s)),
                0 < r.length && r[0].sequence > o && e.length < 100
                  ? a._recursiveGetMsgList(e, t, n, i, o, r[0].ID)
                  : a._emitMsgReceived(t, e);
            });
          },
        },
        {
          key: '_emitMsgReceived',
          value: function (e, t) {
            var n,
              i,
              o = this;
            0 < t.length &&
              ((n = this.hasLocalConversation(e)),
              (i = t.map(function (e) {
                return e.sequence;
              })),
              Ae.l(
                ''
                  .concat(this._n, '._emitMsgReceived convID:')
                  .concat(e, ' has:')
                  .concat(n, ' count:')
                  .concat(i.length, ' sequenceList:'),
                i
              ),
              this.emitOEvt(E.MESSAGE_RECEIVED, t),
              n
                ? this.patchConvLastMessage(e, !0)
                : this.getConversationProfile(e).then(function () {
                    o.patchConvLastMessage(e, !0);
                  }));
          },
        },
        {
          key: 'deleteLocalConvList',
          value: function (e) {
            var t = this,
              n = !1;
            e.forEach(function (e) {
              t._convMap.has(e) && (t.deleteLocalConv(e, !1), (n = !0));
            }),
              Ae.l(
                ''
                  .concat(this._n, '.deleteLocalConvList convID:')
                  .concat(e, ' isConvIDExisted:')
                  .concat(n)
              ),
              n && this.emitConvUpdate(!0, !1);
          },
        },
        {
          key: 'isMessageSentByCurrentInstance',
          value: function (e) {
            return !(
              !this._msgListHandler.hasLocalMsg(e.conversationID, e.ID) &&
              !this._sll.has(e.random)
            );
          },
        },
        {
          key: 'modifyMessageList',
          value: function (e) {
            var t, n;
            e.startsWith(D.CONV_C2C) &&
              this._convMap.has(e) &&
              ((n = this._convMap.get(e)),
              (t = Date.now()),
              this._msgListHandler.modifyMsgSentByPeer({
                conversationID: e,
                latestNick: n.userProfile.nick,
                latestAvatar: n.userProfile.avatar,
              }),
              (n = this.get(4).getNickAndAvatarByUserID(this.getMyUserID())),
              this._msgListHandler.modifyMsgSentByMe({
                conversationID: e,
                latestNick: n.nick,
                latestAvatar: n.avatar,
              }),
              Ae.l(
                ''
                  .concat(this._n, '.modifyMessageList convID:')
                  .concat(e, ' cost:')
                  .concat(Kt(t))
              ));
          },
        },
        {
          key: 'updateUserProfileSpecifiedKey',
          value: function (e) {
            Ae.l(
              ''.concat(this._n, '.updateUserProfileSpecifiedKey options:'),
              e
            );
            var t = e.conversationID,
              n = e.nick;
            (e = e.avatar),
              this._convMap.has(t) &&
                ((t = this._convMap.get(t).userProfile),
                ct(n) && t.nick !== n && (t.nick = n),
                ct(e) && t.avatar !== e && (t.avatar = e),
                this.emitConvUpdate(!0, !1));
          },
        },
        {
          key: '_onMyProfileModified',
          value: function (e) {
            var n = this,
              i = this.getLocalConvList(),
              o = Date.now();
            i.forEach(function (i) {
              n.modifyMessageSentByMe(
                t({ conversationID: i.conversationID }, e)
              );
            }),
              Ae.l(
                ''
                  .concat(
                    this._n,
                    '._onMyProfileModified. modify all messages sent by me, cost:'
                  )
                  .concat(Kt(o))
              );
          },
        },
        {
          key: 'modifyMessageSentByMe',
          value: function (e) {
            this._msgListHandler.modifyMsgSentByMe(e);
          },
        },
        {
          key: 'getLatestMessageSentByMe',
          value: function (e) {
            return this._msgListHandler.getLatestMsgSentByMe(e);
          },
        },
        {
          key: 'modifyMessageSentByPeer',
          value: function (e) {
            this._msgListHandler.modifyMsgSentByPeer(e);
          },
        },
        {
          key: 'getLatestMessageSentByPeer',
          value: function (e) {
            return this._msgListHandler.getLatestMsgSentByPeer(e);
          },
        },
        {
          key: 'pushIntoNoticeResult',
          value: function (e, t) {
            return !(
              !this._msgListHandler.pushIn(t) ||
              this._sll.has(t.random) ||
              (e.push(t), 0)
            );
          },
        },
        {
          key: 'getLocalLastMessage',
          value: function (e) {
            return this._msgListHandler.getLocalLastMsg(e);
          },
        },
        {
          key: 'getLocalSecondLastMessage',
          value: function (e) {
            return this._msgListHandler.getLocalSecondLastMsg(e);
          },
        },
        {
          key: 'checkAndPatchRemark',
          value: function () {
            var e,
              t,
              n = this.get(8);
            0 === this._convMap.size ||
              !n ||
              (0 !==
                (e = v(this._convMap.values()).filter(function (e) {
                  return e.type === D.CONV_C2C;
                })).length &&
                ((t = 0),
                e.forEach(function (e) {
                  var i = e.conversationID.replace(D.CONV_C2C, '');
                  n.isMyFriend(i) &&
                    ((i = n.getFriendRemark(i)),
                    e.remark !== i && ((e.remark = i), (t += 1)));
                }),
                Ae.l(
                  ''
                    .concat(this._n, '.checkAndPatchRemark. c2cConvCount:')
                    .concat(e.length, ' patchedCount:')
                    .concat(t)
                )));
          },
        },
        {
          key: 'updateTopicConversation',
          value: function (e) {
            this._updateLocalConvList({
              conversationOptionsList: e,
              isFromGetConversations: !0,
              updateUnreadCount: !0,
            });
          },
        },
        {
          key: 'sendReadReceipt',
          value: function (e) {
            var t = e[0],
              n = null;
            return (
              t.conversationType === D.CONV_C2C
                ? (n = this._m.get(6))
                : t.conversationType === D.CONV_GROUP && (n = this._m.get(7)),
              n ? n.sendReadReceipt(e) : In({ code: wn.NO_MODULE })
            );
          },
        },
        {
          key: 'getReadReceiptList',
          value: function (e) {
            var t = e[0],
              n = null;
            return (
              t.conversationType === D.CONV_C2C
                ? (n = this._m.get(6))
                : t.conversationType === D.CONV_GROUP && (n = this._m.get(7)),
              n ? n.getReadReceiptList(e) : In({ code: wn.NO_MODULE })
            );
          },
        },
        {
          key: 'getLastMessageTime',
          value: function (e) {
            return (e = this.getLocalConversation(e))
              ? e.lastMessage.lastTime
              : 0;
          },
        },
        {
          key: 'getTotalUnreadCount',
          value: function () {
            var e = this.getLocalConvList(),
              t = 0;
            return (
              e.forEach(function (e) {
                e.type !== D.CONV_SYSTEM &&
                  (('' !== e.messageRemindType &&
                    e.messageRemindType !== D.MSG_REMIND_ACPT_AND_NOTE) ||
                    (t += e.unreadCount));
              }),
              t
            );
          },
        },
        {
          key: 'onTotalUnreadCountUpdate',
          value: function () {
            var e = this.getTotalUnreadCount();
            this._convTotalUnreadCount !== e &&
              (Ae.l(
                ''
                  .concat(this._n, '.onTotalUnreadCountUpdate from ')
                  .concat(this._convTotalUnreadCount, ' to ')
                  .concat(e)
              ),
              (this._convTotalUnreadCount = e),
              this.emitOEvt(E.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED));
          },
        },
        {
          key: '_isConvNeedShow',
          value: function (e) {
            if (((e = this.getLocalConversation(e)), ut(e))) return !0;
            var t = e.type === D.CONV_TOPIC,
              n = e.type === D.CONV_GROUP && e.groupProfile.type === D.GRP_ROOM;
            return (
              (e =
                e.type === D.CONV_GROUP && e.groupProfile.type === D.GRP_LIVE),
              !(t || n || e)
            );
          },
        },
        {
          key: 'setAllRcvMsgOpt',
          value: function (e) {
            return this._msgRemindHandler.setAllRcvMsgOpt(e);
          },
        },
        {
          key: 'getAllRcvMsgOpt',
          value: function () {
            return this._msgRemindHandler.getAllRcvMsgOpt();
          },
        },
        {
          key: 'onAllRcvMsgOptNotify',
          value: function (e) {
            this._msgRemindHandler.onAllRcvMsgOptNotify(e);
          },
        },
        {
          key: 'clearUnreadCount',
          value: function (e) {
            (e = this.getLocalConversation(e)) &&
              0 < e.unreadCount &&
              ((e.unreadCount = 0), this.emitConvUpdate(!0, !1));
          },
        },
        {
          key: 'storeHoppingMessageList',
          value: function (e) {
            this._msgListHandler.storeHoppingMsgList(e);
          },
        },
        {
          key: 'clearMemMsg',
          value: function (e) {
            var t =
              1 < arguments.length && void 0 !== arguments[1] && arguments[1];
            Ae.l(
              ''
                .concat(this._n, '.clearMemMsg convID:')
                .concat(e, ' isOverLimit:')
                .concat(t)
            ),
              this._msgListHandler.removeByConvID(e),
              this._completedMap.delete(e),
              this._roamingMsgKeyAndTimeMap.delete(e),
              !0 === t && this._everClearedMap.set(e, 1);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._setStorageConvList(!0),
              (this._pagingStatus = Dn),
              this._msgListHandler.reset(),
              this._msgRemindHandler.reset(),
              this._roamingMsgKeyAndTimeMap.clear(),
              this._sll.reset(),
              this._peerReadTimeMap.clear(),
              this._completedMap.clear(),
              this._convMap.clear(),
              (this._pagingTs = 0),
              (this._pagingStartIdx = 0),
              (this._pagingPinnedTs = 0),
              (this._pagingPinnedStartIdx = 0),
              this._remoteGroupReadSeqMap.clear(),
              (this._convTotalUnreadCount = 0),
              (this._pagingGetCostList.length = 0),
              this._pagingConvIDMap.clear(),
              this._convIDFromUnreadDBMap.clear(),
              (this._pagingGetCostList.length = 0),
              this._convMapForDiff.clear(),
              this._partialUpdatedConvMap.clear(),
              this._everClearedMap.clear(),
              (this._bPullOnInvite = !0),
              this.resetReady();
          },
        },
      ]),
      Qo),
    lo =
      (r(Zo, [
        {
          key: 'onCheckTimer',
          value: function (e) {
            e % 1 == 0 &&
              0 < this._cachedGroupTipsMap.size &&
              this._checkCachedGroupTips();
          },
        },
        {
          key: '_checkCachedGroupTips',
          value: function () {
            var e = this;
            this._cachedGroupTipsMap.forEach(function (t, n) {
              var i = e._checkCountMap.get(n),
                o = e._grpM.hasLocalGroup(n);
              Ae.l(
                ''
                  .concat(e._n, '._checkCachedGroupTips groupID:')
                  .concat(n, ' hasLocalGroup:')
                  .concat(o, ' checkCount:')
                  .concat(i)
              ),
                o
                  ? (e._notifyCachedGroupTips(n),
                    e._checkCountMap.delete(n),
                    e._grpM.deleteUnjoinedAVChatRoom(n))
                  : i >= e.MAX_CHECK_COUNT
                    ? (e._deleteCachedGroupTips(n), e._checkCountMap.delete(n))
                    : e._checkCountMap.set(n, ++i);
            });
          },
        },
        {
          key: 'onNewGroupTips',
          value: function (e) {
            Ae.l(
              ''
                .concat(this._n, '.onNewGroupTips options:')
                .concat(JSON.stringify(e.dataList))
            );
            var t = (e = this._assembly(e)).eventDataList,
              n = e.result;
            0 < (e = e.AVChatRoomMessageList).length &&
              this._grpM.onAVChatRoomMessage(e),
              0 < n.length &&
                (this._grpM.emitOEvt(E.MESSAGE_RECEIVED, n),
                this._handleTips(n)),
              0 < t.length &&
                (this._grpM.updateNextMessageSeq(t),
                this._grpM
                  .get(11)
                  .onNewMessage({
                    conversationOptionsList: t,
                    isInstantMessage: !0,
                  }));
          },
        },
        {
          key: '_assembly',
          value: function (e) {
            for (
              var n = e.event,
                i = e.dataList,
                o = null,
                r = [],
                a = [],
                s = {},
                c = [],
                u = 0,
                l = i.length;
              u < l;
              u++
            ) {
              var d = at(i[u]);
              if (6 === n) {
                if (this._grpM.isGroupAttributesUpdatedNotice(d)) continue;
                if (this._grpM.isGroupCountersNotice(d)) continue;
              }
              var p = (g = d.groupProfile).groupID,
                h = void 0 === (h = g.communityType) ? 0 : h,
                f = void 0 === (f = g.topicID) ? void 0 : f,
                g = g.invisible,
                _ = void 0;
              if (
                ((m = this._grpM.isMessageFromTopic(h, f)) &&
                  ((_ = D.CONV_TOPIC), (d.to = f)),
                (v = this._grpM.hasLocalGroup(p)) ||
                  !this._grpM.isUnjoinedAVChatRoom(p))
              )
                if (v || m)
                  if (this._grpM.isMessageFromOrToAVChatroom(p))
                    (d.event = n), c.push(d);
                  else if (
                    ((d.currentUser = this._grpM.getMyUserID()),
                    (d.conversationType = D.CONV_GROUP),
                    (o = new Ei(d)).setElement({
                      type: D.MSG_GRP_TIP,
                      content: t(
                        t({}, d.elements),
                        {},
                        { groupProfile: d.groupProfile }
                      ),
                    }),
                    (o.isSystemMessage = !1),
                    1 !== g)
                  ) {
                    var v = this._grpM.get(11),
                      m = ((g = (m = o).conversationID), m.sequence);
                    if (6 === n) (o._onlineOnlyFlag = !0), a.push(o);
                    else if (!v.pushIntoNoticeResult(a, o)) continue;
                    this._grpM.isMessageFromCommunityOfTopic(h, f) ||
                      (6 === n && v.getLocalConversation(g)) ||
                      (6 !== n && this._qualityStat(o),
                      (h = v.isRemoteRead({ conversationID: g, sequence: m })),
                      ut(s[g])
                        ? ((f = 0),
                          'in' === o.flow &&
                            (o._isExcludedFromUnreadCount ||
                              o._onlineOnlyFlag ||
                              h ||
                              (f = 1)),
                          (s[g] =
                            r.push({
                              conversationID: g,
                              unreadCount: f,
                              type: ut(_) ? o.conversationType : _,
                              subType: o.conversationSubType,
                              lastMessage: o._isExcludedFromLastMessage
                                ? ''
                                : o,
                            }) - 1))
                        : ((r[(v = s[g])].type = o.conversationType),
                          (r[v].subType = o.conversationSubType),
                          (r[v].lastMessage = o._isExcludedFromLastMessage
                            ? ''
                            : o),
                          'in' === o.flow &&
                            (o._isExcludedFromUnreadCount ||
                              o._onlineOnlyFlag ||
                              h ||
                              r[v].unreadCount++)));
                  } else this._qualityStat(o);
                else
                  this._cacheGroupTipsAndProbe({
                    groupID: p,
                    event: n,
                    item: d,
                  });
            }
            return { eventDataList: r, result: a, AVChatRoomMessageList: c };
          },
        },
        {
          key: '_qualityStat',
          value: function (e) {
            this._grpM.get(26).addMessageSequence({ key: Kn, message: e });
          },
        },
        {
          key: '_handleTips',
          value: function (e) {
            var t = this;
            e.forEach(function (e) {
              switch (e.payload.operationType) {
                case 1:
                  t._onNewMemberComeIn(e);
                  break;
                case 2:
                  t._onMemberQuit(e);
                  break;
                case 3:
                  t._onMemberKickedOut(e);
                  break;
                case 4:
                  t._onMemberSetAdmin(e);
                  break;
                case 5:
                  t._onMemberCancelledAdmin(e);
                  break;
                case 6:
                  t._onGroupProfileModified(e);
                  break;
                case 7:
                  t._onMemberInfoModified(e);
                  break;
                case 8:
                  t._onTopicProfileUpdated(e);
                  break;
                default:
                  Ae.w(
                    ''
                      .concat(t._n, '._handleTips unknown operationType:')
                      .concat(e.payload.operationType)
                  );
              }
            });
          },
        },
        {
          key: '_onNewMemberComeIn',
          value: function (e) {
            var t = (e = e.payload).memberNum;
            (e = e.groupProfile.groupID),
              (e = this._grpM.getLocalGroupProfile(e)) &&
                Ke(t) &&
                e.memberCount !== t &&
                ((e.memberCount = t), this._updateConvGroupProfile(e));
          },
        },
        {
          key: '_onMemberQuit',
          value: function (e) {
            var t = (n = e.payload).memberNum,
              n = n.groupProfile.groupID,
              i = this._grpM.getLocalGroupProfile(n);
            i &&
              Ke(t) &&
              i.memberCount !== t &&
              ((i.memberCount = t), this._updateConvGroupProfile(i)),
              this._grpM
                .getGroupMemberHandler()
                .deleteLocalGroupMembers(n, e.payload.userIDList);
          },
        },
        {
          key: '_onMemberKickedOut',
          value: function (e) {
            var t = (n = e.payload).memberNum,
              n = n.groupProfile.groupID,
              i = this._grpM.getLocalGroupProfile(n);
            i &&
              Ke(t) &&
              i.memberCount !== t &&
              ((i.memberCount = t), this._updateConvGroupProfile(i)),
              this._grpM
                .getGroupMemberHandler()
                .deleteLocalGroupMembers(n, e.payload.userIDList);
          },
        },
        {
          key: '_updateConvGroupProfile',
          value: function (e) {
            this._grpM.get(11).updateConvGroupProfile([e]);
          },
        },
        {
          key: '_onMemberSetAdmin',
          value: function (e) {
            var t = e.payload.groupProfile.groupID,
              n =
                ((e = e.payload.userIDList),
                this._grpM.getGroupMemberHandler());
            e.forEach(function (e) {
              (e = n.getLocalGroupMemberInfo(t, e)) &&
                e.updateRole(D.GRP_MBR_ROLE_ADMIN);
            });
          },
        },
        {
          key: '_onMemberCancelledAdmin',
          value: function (e) {
            var t = e.payload.groupProfile.groupID,
              n =
                ((e = e.payload.userIDList),
                this._grpM.getGroupMemberHandler());
            e.forEach(function (e) {
              (e = n.getLocalGroupMemberInfo(t, e)) &&
                e.updateRole(D.GRP_MBR_ROLE_MEMBER);
            });
          },
        },
        {
          key: '_onGroupProfileModified',
          value: function (e) {
            var t = this,
              n = (e = e.payload).newGroupProfile,
              i = e.groupProfile,
              o = e.operatorInfo,
              r = ((e = i.groupID), this._grpM.getLocalGroupProfile(e));
            Object.keys(n).forEach(function (e) {
              switch (e) {
                case 'ownerID':
                  t._ownerChanged(r, n);
                  break;
                case 'groupName':
                  r.name = n[e];
                  break;
                default:
                  r[e] = n[e];
              }
            }),
              ut(o) ||
                Object.keys(o).forEach(function (e) {
                  'nameCard' === e
                    ? r.updateSelfInfo({ nameCard: o[e] })
                    : 'role' === e && r.updateSelfInfo({ role: o[e] });
                }),
              (i = !r.isSupportTopic),
              this._grpM.emitGroupListUpdate(!0, i);
          },
        },
        {
          key: '_ownerChanged',
          value: function (e, t) {
            e = e.groupID;
            var n = this._grpM.getLocalGroupProfile(e),
              i = this._grpM.getMyUserID();
            i === t.ownerID &&
              (n.updateGroup({ selfInfo: { role: D.GRP_MBR_ROLE_OWNER } }),
              (n = (t =
                this._grpM.getGroupMemberHandler()).getLocalGroupMemberInfo(
                e,
                i
              )),
              (i = this._grpM.getLocalGroupProfile(e).ownerID),
              (t = t.getLocalGroupMemberInfo(e, i)),
              n && n.updateRole(D.GRP_MBR_ROLE_OWNER),
              t && t.updateRole(D.GRP_MBR_ROLE_MEMBER));
          },
        },
        {
          key: '_onMemberInfoModified',
          value: function (e) {
            var t = e.to,
              n = (i = e.payload).groupProfile,
              i = i.memberList,
              o = n.groupID,
              r =
                (Ct(t) && this._updateTopicMuteTime(e),
                this._grpM.getGroupMemberHandler());
            i.forEach(function (e) {
              var t = r.getLocalGroupMemberInfo(o, e.userID);
              t && Ke(e.muteTime) && t.updateMuteUntil(e.muteTime);
            });
          },
        },
        {
          key: '_updateTopicMuteTime',
          value: function (e) {
            var t = e.to,
              n = (e = e.payload).groupProfile,
              i = void 0 === (e = e.memberList) ? [] : e,
              o =
                ((e = this._grpM.get(10)),
                (n = n.groupID),
                e.getLocalTopic(n, t));
            if (o) {
              for (var r = !1, a = 0; a < i.length; a++) {
                var s = i[a];
                if (s.userID === this._grpM.getMyUserID() && 0 <= s.muteTime) {
                  o.updateSelfInfo({ muteTime: s.muteTime }), (r = !0);
                  break;
                }
              }
              r &&
                this._grpM.emitOEvt(E.TOPIC_UPDATED, { groupID: n, topic: o });
            }
          },
        },
        {
          key: '_onTopicProfileUpdated',
          value: function (e) {
            var n = (i = e.payload).groupProfile.groupID,
              i = i.newTopicInfo;
            this._grpM
              .get(10)
              .onTopicProfileUpdated(t({ groupID: n, topicID: e.to }, i));
          },
        },
        {
          key: '_cacheGroupTips',
          value: function (e, t) {
            this._cachedGroupTipsMap.has(e) ||
              this._cachedGroupTipsMap.set(e, []),
              this._cachedGroupTipsMap.get(e).push(t);
          },
        },
        {
          key: '_deleteCachedGroupTips',
          value: function (e) {
            this._cachedGroupTipsMap.has(e) &&
              this._cachedGroupTipsMap.delete(e);
          },
        },
        {
          key: '_notifyCachedGroupTips',
          value: function (e) {
            var t = this,
              n = this._cachedGroupTipsMap.get(e) || [];
            n.forEach(function (e) {
              t.onNewGroupTips(e);
            }),
              this._deleteCachedGroupTips(e),
              Ae.l(
                ''
                  .concat(this._n, '._notifyCachedGroupTips groupID:')
                  .concat(e, ' count:')
                  .concat(n.length)
              );
          },
        },
        {
          key: '_cacheGroupTipsAndProbe',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = e.event;
            (e = e.item),
              this._cacheGroupTips(n, { event: i, dataList: [e] }),
              this._grpM.getGroupSimplifiedInfo(n).then(function (e) {
                e.type === D.GRP_AVCHATROOM
                  ? t._grpM.hasLocalGroup(n)
                    ? t._notifyCachedGroupTips(n)
                    : t._grpM.setUnjoinedAVChatRoom(n)
                  : (t._grpM.updateGroupMap([e]), t._notifyCachedGroupTips(n));
              }),
              this._checkCountMap.has(n) || this._checkCountMap.set(n, 0),
              Ae.l(
                ''
                  .concat(this._n, '._cacheGroupTipsAndProbe groupID:')
                  .concat(n)
              );
          },
        },
        {
          key: 'reset',
          value: function () {
            this._cachedGroupTipsMap.clear(), this._checkCountMap.clear();
          },
        },
      ]),
      Zo),
    po =
      (r(Xo, [
        {
          key: 'onCheckTimer',
          value: function (e) {
            e % 1 == 0 &&
              0 < this._cachedGroupMessageMap.size &&
              this._checkCachedGroupMessage();
          },
        },
        {
          key: '_checkCachedGroupMessage',
          value: function () {
            var e = this;
            this._cachedGroupMessageMap.forEach(function (t, n) {
              var i = e._checkCountMap.get(n),
                o = e._grpM.hasLocalGroup(n);
              Ae.l(
                ''
                  .concat(e._n, '._checkCachedGroupMessage groupID:')
                  .concat(n, ' hasLocalGroup:')
                  .concat(o, ' checkCount:')
                  .concat(i)
              ),
                o
                  ? (e._notifyCachedGroupMessage(n),
                    e._checkCountMap.delete(n),
                    e._grpM.deleteUnjoinedAVChatRoom(n))
                  : i >= e.MAX_CHECK_COUNT
                    ? (e._deleteCachedGroupMessage(n),
                      e._checkCountMap.delete(n))
                    : e._checkCountMap.set(n, ++i);
            });
          },
        },
        {
          key: 'updateLastMsg',
          value: function (e) {
            var n = ''.concat(this._n, '.updateLastMsg');
            if (0 !== this._grpM.getGroupMap().size) {
              for (var i, o, r, a, s = !1, c = e.length, u = 0; u < c; u++)
                (i = e[u]).type === D.CONV_GROUP &&
                  0 !== i.lastMessage.lastSequence &&
                  null !== i.lastMessage.payload &&
                  ((o = i.conversationID.split(/^GROUP/)[1]),
                  (o = this._grpM.getLocalGroupProfile(o)) &&
                    ((r = o.lastMessage),
                    (a = i.lastMessage),
                    JSON.stringify(r) !== JSON.stringify(a) &&
                      ((o.lastMessage = t({}, i.lastMessage)), (s = !0))));
              Ae.l(
                ''
                  .concat(n, ' convCount:')
                  .concat(c, ' groupCount:')
                  .concat(this._grpM.getLocalGroupList().length, ' isUpdated:')
                  .concat(s)
              ),
                s &&
                  (this._grpM.sortLocalGroupList(),
                  this._grpM.emitGroupListUpdate(!0, !1));
            } else this.tempConversationList = e;
          },
        },
        {
          key: 'onNewMessage',
          value: function (e) {
            var t,
              n = (t = this._assembly(e)).conversationOptionsList,
              i = t.messageList;
            0 <
              (0 <
                (0 < (t = t.AVChatRoomMessageList).length &&
                  this._grpM.onAVChatRoomMessage(t),
                (t = mt(i))).length &&
                this._grpM.emitOEvt(E.MESSAGE_MODIFIED, t),
              0 < n.length &&
                (this._grpM
                  .get(11)
                  .onNewMessage({
                    conversationOptionsList: n,
                    isInstantMessage: !1 !== e.isInstantMessage,
                    updateUnreadCount: !1 !== e.updateUnreadCount,
                  }),
                this._grpM.updateNextMessageSeq(n)),
              (t = yt(i))).length && this._grpM.emitOEvt(E.MESSAGE_RECEIVED, t),
              (i.length = 0);
          },
        },
        {
          key: '_assembly',
          value: function (e) {
            var t = e.dataList,
              n = e.event,
              i = e.isInstantMessage,
              o = null,
              r = [],
              a = [],
              s = [],
              c = {},
              u = this._grpM.getFileDownloadProxy(),
              l = this._grpM.getDowloadFileAuthKey(),
              d = this._grpM.get(17).getFileDNList(),
              p = t.length;
            1 < p &&
              t.sort(function (e, t) {
                return e.sequence - t.sequence;
              });
            for (
              var h = this._grpM.get(11), f = this._grpM.get(4), g = 0;
              g < p;
              g++
            ) {
              var _,
                v = at(t[g]),
                m = (M = v.groupProfile).groupID,
                y = void 0 === (y = M.communityType) ? 0 : y,
                I = void 0 === (I = M.topicID) ? void 0 : I,
                M = M.invisible,
                C = void 0,
                T = this._grpM.isMessageFromTopic(y, I),
                E =
                  (T && ((C = D.CONV_TOPIC), (v.to = I)),
                  this._grpM.hasLocalGroup(m));
              (!E && this._grpM.isUnjoinedAVChatRoom(m)) ||
                (E || T
                  ? this._grpM.isMessageFromOrToAVChatroom(m)
                    ? ((v.event = n), s.push(v))
                    : ((v.currentUser = this._grpM.getMyUserID()),
                      (v.conversationType = D.CONV_GROUP),
                      (v.isSystemMessage = !!v.isSystemMessage),
                      (o = new Ei(v)).setElement(v.elements, u, l, d),
                      1 !== M
                        ? ((E = 1 === t[g].isModified),
                          h.isMessageSentByCurrentInstance(o)
                            ? (o.isModified = E)
                            : (E = !1),
                          1 === v.onlineOnlyFlag
                            ? ((o._onlineOnlyFlag = !0),
                              h.isMessageSentByCurrentInstance(o) || a.push(o))
                            : this._grpM.isMessageFromCommunityOfTopic(y, I)
                              ? a.push(o)
                              : (o.from !== this._grpM.getMyUserID() ||
                                  ((T = h.getLatestMessageSentByMe(
                                    o.conversationID
                                  )) &&
                                    ((M = T.nick),
                                    (y = T.avatar),
                                    (M === o.nick && y === o.avatar) ||
                                      (h.modifyMessageSentByMe({
                                        conversationID: _,
                                        latestNick: o.nick,
                                        latestAvatar: o.avatar,
                                      }),
                                      f.mockOnNickAvatarModified(
                                        o.nick,
                                        o.avatar
                                      )))),
                                h.pushIntoMessageList(a, o, E) &&
                                  (this._qualityStat(i, o),
                                  (_ = (I = o).conversationID),
                                  (T = I.sequence),
                                  (M = h.isRemoteRead({
                                    conversationID: _,
                                    sequence: T,
                                  })),
                                  ut(c[_])
                                    ? ((y = 0),
                                      'in' === o.flow &&
                                        (o._isExcludedFromUnreadCount ||
                                          M ||
                                          (y = 1)),
                                      (c[_] =
                                        r.push({
                                          conversationID: _,
                                          unreadCount: y,
                                          type: ut(C) ? o.conversationType : C,
                                          subType: o.conversationSubType,
                                          lastMessage:
                                            o._isExcludedFromLastMessage
                                              ? ''
                                              : o,
                                        }) - 1))
                                    : ((r[(E = c[_])].type = ut(C)
                                        ? o.conversationType
                                        : C),
                                      (r[E].subType = o.conversationSubType),
                                      (r[E].lastMessage =
                                        o._isExcludedFromLastMessage ? '' : o),
                                      'in' === o.flow &&
                                        (o._isExcludedFromUnreadCount ||
                                          M ||
                                          r[E].unreadCount++)))))
                        : this._qualityStat(i, o))
                  : this._cacheGroupMessageAndProbe({
                      groupID: m,
                      event: n,
                      item: v,
                    }));
            }
            return {
              conversationOptionsList: r,
              messageList: a,
              AVChatRoomMessageList: s,
            };
          },
        },
        {
          key: '_qualityStat',
          value: function (e, t) {
            var n = this._grpM.get(26);
            n.addMessageSequence({ key: Kn, message: t }),
              e && 0 < t.clientTime && n.addMessageDelay(t.clientTime);
          },
        },
        {
          key: 'onMsgRevoked',
          value: function (e, t) {
            var n = this,
              i = this._grpM.get(11),
              o = [],
              r = [];
            e.dataList.forEach(function (e) {
              var t = e.elements.revokedInfos,
                n = e.revokerInfo,
                a = e.groupProfile,
                s = !1;
              a && (s = Mt({ groupID: a.groupID }) || !Ve(a.topicID)),
                ut(t) ||
                  t.forEach(function (e) {
                    var t,
                      c = Ve(e.topicID)
                        ? 'GROUP'.concat(e.groupID)
                        : 'GROUP'.concat(e.topicID),
                      u = i.getLocalConversation(c),
                      l =
                        (e.revokerInfo && e.revokerInfo.revoker) ||
                        (n && n.revoker),
                      d = (n && n.reason) || '';
                    u && It(u.type)
                      ? (t = {
                          conversationID: c,
                          sequence: e.sequence,
                          ID: ''
                            .concat(e.tinyID, '-')
                            .concat(e.clientTime, '-')
                            .concat(e.random),
                        })
                      : (u = i.revoke(c, e.sequence, e.random))
                        ? (t = u)
                        : ((t = { conversationID: c, sequence: e.sequence }),
                          e.tinyID &&
                            e.clientTime &&
                            e.random &&
                            (t.ID = ''
                              .concat(e.tinyID, '-')
                              .concat(e.clientTime, '-')
                              .concat(e.random)),
                          e.time && (t.time = e.time)),
                      t &&
                        ((t.revoker = l),
                        (t.revokeReason = d),
                        (t.revokerInfo = { userID: l, nick: '', avatar: '' }),
                        s
                          ? ((t.revokerInfo.nick = a.nick),
                            (t.revokerInfo.avatar = a.avatar),
                            o.push(t))
                          : r.push(t));
                  });
            }),
              (0 === r.length && 0 === o.length) ||
                (i.onMessageRevoked([].concat(o, r), t),
                0 < o.length && this._grpM.emitOEvt(E.MESSAGE_REVOKED, o),
                0 < r.length &&
                  i.updateRevokerInfo(r).then(function (e) {
                    n._grpM.emitOEvt(E.MESSAGE_REVOKED, e);
                  }));
          },
        },
        {
          key: '_groupListTreeShaking',
          value: function (e) {
            for (
              var t = new Map(v(this._grpM.getGroupMap())), n = 0, i = e.length;
              n < i;
              n++
            )
              t.delete(e[n].groupID);
            this._grpM.hasJoinedAVChatRoom() &&
              this._grpM.getJoinedAVChatRoom().forEach(function (e) {
                t.delete(e);
              }),
              this._grpM.getGroupMap().forEach(function (e, n) {
                e.isSupportTopic && t.delete(n);
              });
            for (var o = v(t.keys()), r = 0, a = o.length; r < a; r++)
              this._grpM.deleteGroup(o[r]);
          },
        },
        {
          key: 'syncGroupList',
          value: function () {
            var e = this,
              t =
                0 < arguments.length && void 0 !== arguments[0] && arguments[0],
              n =
                (this._pagingStatus === Dn && this._grpM.clearGroupMap(), v(G)),
              i = this.PAGING_GRP_COUNT_LIMIT,
              o = [];
            if (!0 === t)
              return this._pagingGetGroupListWithTopic({
                limit: i,
                offset: 0,
                groupBaseInfoFilter: n,
                groupList: o,
              });
            t = 'syncGroupList';
            var r = ''.concat(this._n, '.').concat(t),
              a = new ei(t);
            return this._pagingGetGroupList({
              limit: i,
              offset: 0,
              groupBaseInfoFilter: n,
              groupList: o,
            })
              .then(function () {
                var t = jt(e._pagingGetCostList),
                  n = Ht(e._pagingGetCostList),
                  i =
                    ((e._pagingGetCostList.length = 0),
                    (e._pagingStatus = kn),
                    e._groupListTreeShaking(o),
                    e._grpM.updateGroupMap(o),
                    e._grpM.getLocalGroupList().length);
                return (
                  (i = 'count:'
                    .concat(i, ' sum:')
                    .concat(n, ' avg:')
                    .concat(t)),
                  Ae.l(''.concat(r, ' ok. ').concat(i)),
                  a.setMessage(i).end(),
                  e.tempConversationList &&
                    (e.updateLastMsg(e.tempConversationList),
                    (e.tempConversationList = null)),
                  e._grpM.emitGroupListUpdate(!0, !0),
                  mn({ groupList: e._grpM.getLocalGroupList() })
                );
              })
              .catch(function (t) {
                return (
                  (e._pagingStatus = Rn),
                  a.setError(t).end(),
                  Ae.e(''.concat(r, ' failed. error:'), t),
                  In(t)
                );
              });
          },
        },
        {
          key: 'getGroupList',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('getGroupList');
            if (
              (Ae.l(''.concat(t, ' pagingStatus:').concat(this._pagingStatus)),
              this._pagingStatus === Rn || this._pagingStatus === Dn)
            )
              return this.syncGroupList()
                .then(function () {
                  return mn({
                    groupList: e._grpM.getLocalGroupList(),
                    isSyncCompleted: e.isPagingGetCompleted(),
                  });
                })
                .catch(function (e) {
                  return Ae.e(''.concat(t, ' failed. error:'), e), In(e);
                });
            var n = this._grpM.getLocalGroupList();
            return (
              Ae.l(''.concat(t, '. returned group count:').concat(n.length)),
              yn({ groupList: n, isSyncCompleted: this.isPagingGetCompleted() })
            );
          },
        },
        {
          key: 'isPagingGetCompleted',
          value: function () {
            return this._pagingStatus === kn;
          },
        },
        {
          key: '_pagingGetGroupList',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('_pagingGetGroupList'),
              i = e.isCommunityRelay,
              o = void 0 !== i && i,
              r = e.limit,
              a = e.offset,
              s = e.groupBaseInfoFilter,
              c = e.groupList,
              u = Date.now();
            return this._grpM
              .req({
                P: Gn.GET_GRP_LIST,
                data: {
                  type: o ? D.GRP_COMMUNITY : void 0,
                  memberAccount: this._grpM.getMyUserID(),
                  limit: r,
                  offset: a,
                  responseFilter: {
                    groupBaseInfoFilter: s,
                    selfInfoFilter: ['Role', 'JoinTime', 'MsgFlag', 'MsgSeq'],
                  },
                },
              })
              .then(function (e) {
                var i = void 0 === (i = (e = e.data).groups) ? [] : i,
                  l =
                    ((e = e.totalCount),
                    c.push.apply(c, v(i)),
                    t._handleGroupAtInfoWithoutTopic(o, i),
                    !((i = a + r) < e));
                return (
                  (e =
                    'offset:'
                      .concat(a, ' limit:')
                      .concat(r, ' total:')
                      .concat(e, ' isCompleted:')
                      .concat(l, ' ') +
                    'current:'
                      .concat(c.length, ' isCommunityRelay:')
                      .concat(o)),
                  t._pagingGetCostList.push(Kt(u, !1)),
                  Ae.l(''.concat(n, ' ok. ').concat(e, ' cost:').concat(Kt(u))),
                  o || l
                    ? !o && l
                      ? (Ae.l(''.concat(n, ' start to get community list')),
                        (a = 0),
                        t._pagingGetGroupList({
                          limit: r,
                          offset: a,
                          groupBaseInfoFilter: s,
                          groupList: c,
                          isCommunityRelay: !0,
                        }))
                      : o && !l
                        ? ((a = i),
                          t._pagingGetGroupList({
                            limit: r,
                            offset: a,
                            groupBaseInfoFilter: s,
                            groupList: c,
                            isCommunityRelay: !0,
                          }))
                        : mn({ groupList: c })
                    : ((a = i),
                      t._pagingGetGroupList({
                        limit: r,
                        offset: a,
                        groupBaseInfoFilter: s,
                        groupList: c,
                      }))
                );
              })
              .catch(function (e) {
                return 10018 === e.code
                  ? (Ae.w(
                      ''
                        .concat(
                          t.logPrefix,
                          ' response size exceeds the limit, request count:'
                        )
                        .concat(r)
                    ),
                    (r = 50),
                    t._pagingGetGroupList({
                      limit: r,
                      offset: a,
                      groupBaseInfoFilter: s,
                      groupList: c,
                      isCommunityRelay: o,
                    }))
                  : o
                    ? (11e3 === e.code &&
                        Ae.l(''.concat(n, ' ok. community unavailable')),
                      yn({ groupList: c }))
                    : In(e);
              });
          },
        },
        {
          key: '_pagingGetGroupListWithTopic',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '._pagingGetGroupListWithTopic'),
              i = e.limit,
              o = e.offset,
              r = e.groupBaseInfoFilter,
              a = e.groupList,
              s = Date.now();
            return this._grpM
              .req({
                P: Gn.GET_GRP_LIST,
                data: {
                  type: D.GRP_COMMUNITY,
                  memberAccount: this._grpM.getMyUserID(),
                  limit: i,
                  offset: o,
                  responseFilter: {
                    groupBaseInfoFilter: r,
                    selfInfoFilter: v(x),
                  },
                  isSupportTopic: 1,
                  needAppDefineData: 1,
                },
              })
              .then(function (e) {
                var c = (e = e.data).groups,
                  u =
                    ((e = e.totalCount),
                    a.push.apply(a, v(void 0 === c ? [] : c)),
                    !((c = o + i) < e));
                return (
                  Ae.l(
                    ''
                      .concat(n, ' ok. offset:')
                      .concat(o, ' limit:')
                      .concat(i, ' totalCount:')
                      .concat(e, ' isCompleted:')
                      .concat(u, ' currentCount:')
                      .concat(a.length, ' cost:')
                      .concat(Kt(s))
                  ),
                  u
                    ? (t._grpM.updateGroupMap(a),
                      t._grpM.emitGroupListUpdate(!0, !1),
                      mn({
                        groupList: (e = t._grpM
                          .getLocalGroupList()
                          .filter(function (e) {
                            return !0 === e.isSupportTopic;
                          })),
                      }))
                    : ((o = c),
                      t._pagingGetGroupListWithTopic({
                        limit: i,
                        offset: o,
                        groupBaseInfoFilter: r,
                        groupList: a,
                      }))
                );
              })
              .catch(function (e) {
                return 10018 === e.code
                  ? (Ae.w(
                      ''
                        .concat(
                          t.logPrefix,
                          ' response size exceeds the limit, request count:'
                        )
                        .concat(i)
                    ),
                    (i = 50),
                    t._pagingGetGroupListWithTopic({
                      limit: i,
                      offset: o,
                      groupBaseInfoFilter: r,
                      groupList: a,
                    }))
                  : In(e);
              });
          },
        },
        {
          key: '_cacheGroupMessage',
          value: function (e, t) {
            this._cachedGroupMessageMap.has(e) ||
              this._cachedGroupMessageMap.set(e, []),
              this._cachedGroupMessageMap.get(e).push(t);
          },
        },
        {
          key: '_deleteCachedGroupMessage',
          value: function (e) {
            this._cachedGroupMessageMap.has(e) &&
              this._cachedGroupMessageMap.delete(e);
          },
        },
        {
          key: '_notifyCachedGroupMessage',
          value: function (e) {
            var t = this,
              n = this._cachedGroupMessageMap.get(e) || [];
            n.forEach(function (e) {
              t.onNewMessage(e);
            }),
              this._deleteCachedGroupMessage(e),
              Ae.l(
                ''
                  .concat(this._n, '._notifyCachedGroupMessage groupID:')
                  .concat(e, ' count:')
                  .concat(n.length)
              );
          },
        },
        {
          key: '_cacheGroupMessageAndProbe',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = e.event;
            (e = e.item),
              this._cacheGroupMessage(n, { event: i, dataList: [e] }),
              this._grpM.getGroupSimplifiedInfo(n).then(function (e) {
                e.type === D.GRP_AVCHATROOM
                  ? t._grpM.hasLocalGroup(n)
                    ? t._notifyCachedGroupMessage(n)
                    : t._grpM.setUnjoinedAVChatRoom(n)
                  : (t._grpM.updateGroupMap([e]),
                    t._notifyCachedGroupMessage(n));
              }),
              this._checkCountMap.has(n) || this._checkCountMap.set(n, 0),
              Ae.l(
                ''
                  .concat(this._n, '._cacheGroupMessageAndProbe groupID:')
                  .concat(n)
              );
          },
        },
        {
          key: '_handleGroupAtInfoWithoutTopic',
          value: function (e, n) {
            var i = this;
            e &&
              0 !== n.length &&
              n.forEach(function (e) {
                var n = e.groupID,
                  o = ((e = e.groupAtInfoList), []);
                ut(e) ||
                  (e.forEach(function (e) {
                    o.push(t(t({}, e), {}, { groupID: n }));
                  }),
                  i._grpM.get(11).onNewGroupAtTips({ dataList: o }));
              });
          },
        },
        {
          key: 'setPagingGroupCount',
          value: function (e) {
            ut(e) || (this.PAGING_GRP_COUNT_LIMIT = parseInt(e, 10));
          },
        },
        {
          key: 'reset',
          value: function () {
            (this.PAGING_GRP_COUNT_LIMIT = 200),
              this._cachedGroupMessageMap.clear(),
              this._checkCountMap.clear(),
              (this._pagingStatus = Dn),
              (this._pagingGetCostList = []);
          },
        },
      ]),
      Xo),
    ho =
      (r(Jo, [
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this._grpM.getCloudConfig('grp_attr_cache_time');
            ut(e) || (this.CACHE_EXPIRE_TIME = Number(e));
          },
        },
        {
          key: 'updateLocalMainSequenceOnReconnected',
          value: function () {
            this._groupAttributesMap.forEach(function (e) {
              e.localMainSequence = 0;
            });
          },
        },
        {
          key: 'isGroupAttributesUpdatedNotice',
          value: function (e) {
            var t = e.to,
              n =
                ((e = e.elements.newGroupProfile),
                !ut(e) && !Ve(e.groupAttributeOption));
            return (
              n &&
                this._onGroupAttributesUpdated({
                  groupID: t,
                  groupAttributeOption: e.groupAttributeOption,
                }),
              n
            );
          },
        },
        {
          key: '_onGroupAttributesUpdated',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = (e = e.groupAttributeOption).mainSequence,
              o = e.isWithChangedAttributeInfo,
              r = void 0 === (r = e.groupAttributeList) ? [] : r;
            if (
              ((e = e.operationType),
              Ae.l(
                ''.concat(this._n, '.onGroupAttributesUpdated. ') +
                  'groupID:'
                    .concat(n, ' isWithChangedAttributeInfo:')
                    .concat(o, ' operationType:')
                    .concat(e)
              ),
              !ut(e))
            ) {
              this._groupAttributesCopy = this._getCachedAttributes({
                groupID: n,
              });
              var a = i - this._getLocalGroupAttributes(n).localMainSequence;
              if (0 != a) {
                if (1 === o && 1 == a)
                  return (
                    this._refreshCachedGroupAttributes({
                      groupID: n,
                      remoteMainSequence: i,
                      groupAttributeList: r,
                      operationType: e,
                    }),
                    void this._emitGroupAttributesUpdated(n)
                  );
                this._hasLocalGroupAttributes(n) &&
                  ((o = this._getLocalGroupAttributes(n).avChatRoomKey),
                  this._getGroupAttributes({
                    groupID: n,
                    avChatRoomKey: o,
                  }).then(function () {
                    t._emitGroupAttributesUpdated(n);
                  }));
              }
            }
          },
        },
        {
          key: 'initGroupAttributesCache',
          value: function (e) {
            var t = e.groupID;
            (e = void 0 === (e = e.avChatRoomKey) ? void 0 : e),
              this._groupAttributesMap.set(t, {
                lastUpdateTime: 0,
                localMainSequence: 0,
                remoteMainSequence: 0,
                attributes: new Map(),
                avChatRoomKey: e,
              }),
              Ae.l(
                ''
                  .concat(this._n, '.initGroupAttributesCache groupID:')
                  .concat(t, ' avChatRoomKey:')
                  .concat(e)
              );
          },
        },
        {
          key: 'initGroupAttributes',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = e.groupAttributes,
              o = (e = this._getLocalGroupAttributes(n)).remoteMainSequence,
              r = ((e = e.avChatRoomKey), new ei('initGroupAttributes'));
            return (
              r.setMessage(
                'groupID:'
                  .concat(n, ' avChatRoomKey:')
                  .concat(e, ' mainSequence:')
                  .concat(o)
              ),
              this._grpM
                .req({
                  P: Gn.SET_GRP_ATTR,
                  data: {
                    groupID: n,
                    avChatRoomKey: e,
                    mainSequence: o,
                    groupAttributeList: this._transformGroupAttributes(i),
                  },
                })
                .then(function (e) {
                  Ae.l(
                    ''
                      .concat(t._n, '.')
                      .concat('initGroupAttributes', ' ok. groupID:')
                      .concat(n)
                  );
                  var o = (e = e.data).mainSequence;
                  return (
                    (e = v(e.groupAttributeList)).forEach(function (e) {
                      e.value = i[e.key];
                    }),
                    (t._groupAttributesCopy = t._getCachedAttributes({
                      groupID: n,
                    })),
                    t._refreshCachedGroupAttributes({
                      groupID: n,
                      remoteMainSequence: o,
                      groupAttributeList: e,
                      operationType: 1,
                    }),
                    t._emitGroupAttributesUpdated(n),
                    r.end(),
                    mn({ groupAttributes: i })
                  );
                })
                .catch(function (e) {
                  return r.setError(e).end(), In(e);
                })
            );
          },
        },
        {
          key: 'setGroupAttributes',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('setGroupAttributes'),
              i = e.groupID,
              o = e.groupAttributes,
              r = (e = this._getLocalGroupAttributes(i)).remoteMainSequence,
              a = e.avChatRoomKey,
              s = e.attributes,
              c =
                ((e = this._transformGroupAttributes(o)).forEach(function (e) {
                  var t = e.key;
                  (e.sequence = 0),
                    s.has(t) && (e.sequence = s.get(t).sequence);
                }),
                new ei('setGroupAttributes'));
            return (
              c.setMessage(
                'groupID:'
                  .concat(i, ' groupAttributes:')
                  .concat(JSON.stringify(o))
              ),
              Ae.l(
                ''.concat(n, '. groupID:').concat(i, ' mainSequence:').concat(r)
              ),
              this._grpM
                .req({
                  P: Gn.MODIFY_GRP_ATTR,
                  data: {
                    groupID: i,
                    avChatRoomKey: a,
                    mainSequence: r,
                    groupAttributeList: e,
                  },
                })
                .then(function (e) {
                  Ae.l(''.concat(n, ' ok.'));
                  var r = (e = e.data).mainSequence;
                  return (
                    (e = v(e.groupAttributeList)).forEach(function (e) {
                      e.value = o[e.key];
                    }),
                    (t._groupAttributesCopy = t._getCachedAttributes({
                      groupID: i,
                    })),
                    t._refreshCachedGroupAttributes({
                      groupID: i,
                      remoteMainSequence: r,
                      groupAttributeList: e,
                      operationType: 2,
                    }),
                    t._emitGroupAttributesUpdated(i),
                    c.end(),
                    mn({ groupAttributes: o })
                  );
                })
                .catch(function (e) {
                  return c.setError(e).end(), In(e);
                })
            );
          },
        },
        {
          key: 'deleteGroupAttributes',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i =
                ((e = void 0 === (e = e.keyList) ? [] : e),
                (s = this._getLocalGroupAttributes(n)).remoteMainSequence),
              o = s.avChatRoomKey,
              r = s.attributes,
              a = v(r.keys()),
              s = Gn.CLEAR_GRP_ATTR,
              c = 3,
              u = ((o = { groupID: n, avChatRoomKey: o, mainSequence: i }), []),
              l =
                (0 < e.length &&
                  ((a = []),
                  (s = Gn.DEL_GRP_ATTR),
                  (c = 4),
                  e.forEach(function (e) {
                    var t = 0;
                    r.has(e) && ((t = r.get(e).sequence), a.push(e)),
                      u.push({ key: e, sequence: t });
                  }),
                  (o.groupAttributeList = u)),
                new ei('deleteGroupAttributes'));
            return (
              l.setMessage(
                'groupID:'
                  .concat(n, ' mainSequence:')
                  .concat(i, ' keyList:')
                  .concat(e, ' proto:')
                  .concat(s)
              ),
              this._grpM
                .req({ P: s, data: o })
                .then(function (e) {
                  return (
                    Ae.l(
                      ''
                        .concat(t._n, '.')
                        .concat('deleteGroupAttributes', ' ok. groupID:')
                        .concat(n)
                    ),
                    (e = e.data.mainSequence),
                    (t._groupAttributesCopy = t._getCachedAttributes({
                      groupID: n,
                    })),
                    t._refreshCachedGroupAttributes({
                      groupID: n,
                      remoteMainSequence: e,
                      groupAttributeList: u,
                      operationType: c,
                    }),
                    t._emitGroupAttributesUpdated(n),
                    l.end(),
                    mn({ keyList: a })
                  );
                })
                .catch(function (e) {
                  return l.setError(e).end(), In(e);
                })
            );
          },
        },
        {
          key: 'getGroupAttributes',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('getGroupAttributes'),
              i = e.groupID,
              o = (s = this._getLocalGroupAttributes(i)).avChatRoomKey,
              r = s.lastUpdateTime,
              a = s.localMainSequence,
              s = s.remoteMainSequence,
              c = new ei('getGroupAttributes');
            return (
              c.setMessage(
                'groupID:'
                  .concat(i, ' localMainSequence:')
                  .concat(a, ' remoteMainSequence:')
                  .concat(s, ' keyList:')
                  .concat(e.keyList)
              ),
              Date.now() - r >= this.CACHE_EXPIRE_TIME || a < s
                ? this._getGroupAttributes({ groupID: i, avChatRoomKey: o })
                    .then(function (o) {
                      return (
                        c
                          .setMoreMessage(
                            'get attributes from remote. count:'.concat(
                              o.length
                            )
                          )
                          .end(),
                        Ae.l(''.concat(n, ' from remote. groupID:').concat(i)),
                        mn({ groupAttributes: (o = t._getCachedAttributes(e)) })
                      );
                    })
                    .catch(function (e) {
                      return c.setError(e).end(), In(e);
                    })
                : (c.setMoreMessage('get attributes from cache').end(),
                  Ae.l(''.concat(n, ' from cache. groupID:').concat(i)),
                  yn({ groupAttributes: (r = this._getCachedAttributes(e)) }))
            );
          },
        },
        {
          key: '_getGroupAttributes',
          value: function (e) {
            var n = this,
              i = 0;
            return (
              ut(e.avChatRoomKey) || (i = 1),
              this._grpM
                .req({
                  P: Gn.GET_GRP_ATTR,
                  data: t(t({}, e), {}, { groupType: i }),
                })
                .then(function (t) {
                  Ae.l(
                    ''
                      .concat(n._n, '._getGroupAttributes ok. groupID:')
                      .concat(e.groupID)
                  );
                  var i = (t = t.data).mainSequence,
                    o = v((t = t.groupAttributeList));
                  return (
                    ut(i) ||
                      n._refreshCachedGroupAttributes({
                        groupID: e.groupID,
                        remoteMainSequence: i,
                        groupAttributeList: o,
                        operationType: 5,
                      }),
                    t
                  );
                })
                .catch(function (e) {
                  return In(e);
                })
            );
          },
        },
        {
          key: '_refreshCachedGroupAttributes',
          value: function (e) {
            var t = e.groupID,
              n = e.remoteMainSequence,
              i = e.groupAttributeList;
            if (((e = e.operationType), this._hasLocalGroupAttributes(t))) {
              var o = this._getLocalGroupAttributes(t),
                r = o.localMainSequence;
              if (5 === e || n - r == 1)
                (o.remoteMainSequence = n),
                  (o.localMainSequence = n),
                  (o.lastUpdateTime = Date.now()),
                  this._updateCachedAttributes({
                    groupAttributes: o,
                    groupAttributeList: i,
                    operationType: e,
                  });
              else {
                if (r === n) return;
                o.remoteMainSequence = n;
              }
              this._groupAttributesMap.set(t, o),
                (i = 'operationType:'
                  .concat(e, ' localMainSequence:')
                  .concat(r, ' remoteMainSequence:')
                  .concat(n)),
                Ae.l(
                  ''
                    .concat(this._n, '._refreshCachedGroupAttributes. ')
                    .concat(i)
                );
            }
          },
        },
        {
          key: '_getCachedAttributes',
          value: function (e) {
            var t = e.groupID,
              n = ((e = void 0 === (e = e.keyList) ? [] : e), {});
            if (this._hasLocalGroupAttributes(t)) {
              var i = this._getLocalGroupAttributes(t).attributes;
              if (0 < e.length)
                e.forEach(function (e) {
                  i.has(e) && (n[e] = i.get(e).value);
                });
              else {
                var o,
                  r = T(i.keys());
                try {
                  for (r.s(); !(o = r.n()).done; ) {
                    var a = o.value;
                    n[a] = i.get(a).value;
                  }
                } catch (s) {
                  r.e(s);
                } finally {
                  r.f();
                }
              }
            }
            return n;
          },
        },
        {
          key: '_updateCachedAttributes',
          value: function (e) {
            var t = e.groupAttributes,
              n = e.groupAttributeList;
            3 !== (e = e.operationType)
              ? 4 !== e
                ? (1 === e && t.attributes.clear(),
                  n.forEach(function (e) {
                    var n = e.key,
                      i = e.value;
                    (e = e.sequence),
                      t.attributes.set(n, { value: i, sequence: e });
                  }))
                : n.forEach(function (e) {
                    t.attributes.delete(e.key);
                  })
              : t.attributes.clear();
          },
        },
        {
          key: '_hasLocalGroupAttributes',
          value: function (e) {
            return this._groupAttributesMap.has(e);
          },
        },
        {
          key: '_getLocalGroupAttributes',
          value: function (e) {
            return (
              this._hasLocalGroupAttributes(e) ||
                this.initGroupAttributesCache({ groupID: e }),
              this._groupAttributesMap.get(e)
            );
          },
        },
        {
          key: '_transformGroupAttributes',
          value: function (e) {
            var t = [];
            return (
              Object.keys(e).forEach(function (n) {
                t.push({ key: n, value: e[n] });
              }),
              t
            );
          },
        },
        {
          key: '_emitGroupAttributesUpdated',
          value: function (e) {
            var t = this._getCachedAttributes({ groupID: e }),
              n = (i = this._computeAttrChangedInfo(t)).updatedKeyList,
              i = i.deletedKeyList;
            Ae.l(
              ''
                .concat(this._n, '._emitGroupAttributesUpdated update:')
                .concat(n.length, ', delete:')
                .concat(i.length)
            ),
              (0 === n.length && 0 === i.length) ||
                this._grpM.emitOEvt(E.GROUP_ATTRIBUTES_UPDATED, {
                  groupID: e,
                  groupAttributes: t,
                  updatedKeyList: n,
                  deletedKeyList: i,
                });
          },
        },
        {
          key: '_computeAttrChangedInfo',
          value: function (e) {
            var t = this,
              n = [],
              i = [];
            return (
              Object.keys(e).forEach(function (i) {
                e[i] !== t._groupAttributesCopy[i] && n.push(i);
              }),
              Object.keys(this._groupAttributesCopy).forEach(function (t) {
                ut(e[t]) && i.push(t);
              }),
              (this._groupAttributesCopy = {}),
              { updatedKeyList: n, deletedKeyList: i }
            );
          },
        },
        {
          key: 'deleteLocalGroupAttributes',
          value: function (e) {
            this._hasLocalGroupAttributes(e) &&
              this._groupAttributesMap.delete(e);
          },
        },
        {
          key: 'reset',
          value: function () {
            this._groupAttributesMap.clear(),
              (this._groupAttributesCopy = {}),
              (this.CACHE_EXPIRE_TIME = 3e4);
          },
        },
      ]),
      Jo),
    fo =
      (r(Yo, [
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this._grpM.getCloudConfig('grp_counter_expire_time');
            ut(e) || (this.EXPIRE_TIME = Number(e));
          },
        },
        {
          key: 'isGroupCountersNotice',
          value: function (e) {
            var t = e.to,
              n = !1;
            return (
              Ve((e = e.elements.groupCounterInfo)) ||
                (this._onGroupCountersUpdated({
                  groupID: t,
                  groupCounterInfo: e,
                }),
                (n = !0)),
              n
            );
          },
        },
        {
          key: '_onGroupCountersUpdated',
          value: function (e) {
            var t = this,
              n = e.groupID;
            e.groupCounterInfo.forEach(function (e) {
              var i = e.type,
                o = e.groupCounterSeq;
              (e = void 0 === (e = e.counterList) ? [] : e),
                (0 !== i && 2 !== i) ||
                  (t._updateLocalGroupCounters({
                    groupID: n,
                    groupCounterSeq: o,
                    counterList: e,
                  }),
                  e.forEach(function (e) {
                    t._grpM.emitOEvt(E.GROUP_COUNTER_UPDATED, {
                      groupID: n,
                      key: e.key,
                      value: e.value,
                    });
                  })),
                1 === i &&
                  t._deleteLocalGroupCounters({
                    groupID: n,
                    groupCounterSeq: o,
                    counterList: e,
                  });
            }),
              Ae.l(
                ''
                  .concat(this._n, '._onGroupCountersUpdated groupID:')
                  .concat(n)
              );
          },
        },
        {
          key: 'initGroupCountersCache',
          value: function (e) {
            var t = e.groupID;
            (e = e.avChatRoomKey),
              this._groupCountersMap.set(t, {
                lastUpdateTime: 0,
                groupCounterSeq: 0,
                counters: new Map(),
                avChatRoomKey: e,
              }),
              Ae.l(
                ''
                  .concat(this._n, '.initGroupCountersCache groupID:')
                  .concat(t, ' avChatRoomKey:')
                  .concat(e)
              );
          },
        },
        {
          key: 'setGroupCounters',
          value: function (e) {
            if (!this._grpM.canIUse(w.GRP_COUNTER))
              return this._grpM.noUse('setGroupCounters');
            var t = ''.concat(this._n, '.').concat('setGroupCounters'),
              n = e.groupID,
              i =
                ((e = e.counters),
                (e = this._convertObjectToList(e)),
                this._getLocalGroupCounters(n).avChatRoomKey),
              o = 'groupID:'.concat(n, ' count:').concat(e.length),
              r = new ei('setGroupCounters');
            return (
              r.setMessage(''.concat(o)),
              Ae.l(''.concat(t, '. ').concat(o)),
              this._updateGroupCounters({
                groupID: n,
                counterList: e,
                avChatRoomKey: i,
                mode: 'Set',
              })
                .then(function (e) {
                  return (
                    r.end(), Ae.l(''.concat(t, ' ok.')), mn({ counters: e })
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.e(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'increaseGroupCounter',
          value: function (e) {
            var t = 'increaseGroupCounter';
            if (!this._grpM.canIUse(w.GRP_COUNTER)) return this._grpM.noUse(t);
            var n = ''.concat(this._n, '.').concat(t),
              i = e.groupID,
              o = e.key,
              r = ((e = e.value), this._getLocalGroupCounters(i).avChatRoomKey),
              a = 'groupID:'.concat(i, ' key:').concat(o, ' value:').concat(e),
              s = new ei(t);
            return (
              s.setMessage(''.concat(a)),
              Ae.l(''.concat(n, '. ').concat(a)),
              this._updateGroupCounters({
                groupID: i,
                counterList: [{ key: o, value: e }],
                avChatRoomKey: r,
                mode: 'Increase',
              })
                .then(function (e) {
                  return (
                    s.end(), Ae.l(''.concat(n, ' ok.')), mn({ counters: e })
                  );
                })
                .catch(function (e) {
                  return (
                    s.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'decreaseGroupCounter',
          value: function (e) {
            var t = 'decreaseGroupCounter';
            if (!this._grpM.canIUse(w.GRP_COUNTER)) return this._grpM.noUse(t);
            var n = ''.concat(this._n, '.').concat(t),
              i = e.groupID,
              o = e.key,
              r = ((e = e.value), this._getLocalGroupCounters(i).avChatRoomKey),
              a = 'groupID:'.concat(i, ' key:').concat(o, ' value:').concat(e),
              s = new ei(t);
            return (
              s.setMessage(''.concat(a)),
              Ae.l(''.concat(n, '. ').concat(a)),
              this._updateGroupCounters({
                groupID: i,
                counterList: [{ key: o, value: e }],
                avChatRoomKey: r,
                mode: 'Decrease',
              })
                .then(function (e) {
                  return (
                    s.end(), Ae.l(''.concat(n, ' ok.')), mn({ counters: e })
                  );
                })
                .catch(function (e) {
                  return (
                    s.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getGroupCounters',
          value: function (e) {
            var t = this;
            if (!this._grpM.canIUse(w.GRP_COUNTER))
              return this._grpM.noUse('getGroupCounters');
            var n = ''.concat(this._n, '.').concat('getGroupCounters'),
              i = e.groupID,
              o = void 0 === (e = e.keyList) ? [] : e,
              r = (e = this._getLocalGroupCounters(i)).avChatRoomKey,
              a = ((e = e.lastUpdateTime), new ei('getGroupCounters'));
            return (
              a.setMessage('groupID:'.concat(i)),
              Date.now() - e >= this.EXPIRE_TIME
                ? this._getRemoteGroupCounters({ groupID: i, avChatRoomKey: r })
                    .then(function (e) {
                      return (
                        a
                          .setMoreMessage(
                            'from remote. count:'.concat(e.length)
                          )
                          .end(),
                        Ae.l(''.concat(n, ' from remote. groupID:').concat(i)),
                        mn({ counters: (e = t._getLocalCounters(i, o)) })
                      );
                    })
                    .catch(function (e) {
                      return a.setError(e).end(), In(e);
                    })
                : (a.setMoreMessage('from cache').end(),
                  Ae.l(''.concat(n, ' from cache. groupID:').concat(i)),
                  yn({ counters: (e = this._getLocalCounters(i, o)) }))
            );
          },
        },
        {
          key: '_getRemoteGroupCounters',
          value: function (e) {
            var n = this;
            return this._grpM
              .req({ P: Gn.GET_GRP_COUNTER, data: t({}, e) })
              .then(function (t) {
                var i = void 0 === (i = (t = t.data).counterList) ? [] : i;
                return (
                  (t = t.groupCounterSeq),
                  n._updateLocalGroupCounters({
                    groupID: e.groupID,
                    counterList: i,
                    groupCounterSeq: t,
                  }),
                  Ae.l(
                    ''
                      .concat(n._n, '._getRemoteGroupCounters ok. groupID:')
                      .concat(e.groupID)
                  ),
                  i
                );
              })
              .catch(function (e) {
                return In(e);
              });
          },
        },
        {
          key: '_convertObjectToList',
          value: function (e) {
            var t = [];
            return (
              Object.keys(e).forEach(function (n) {
                t.push({ key: n, value: e[n] });
              }),
              t
            );
          },
        },
        {
          key: '_updateGroupCounters',
          value: function (e) {
            var n = ''.concat(this._n, '._updateGroupCounters'),
              i = e.groupID,
              o = e.avChatRoomKey,
              r = e.mode;
            return (
              Ae.l(
                ''
                  .concat(n, '. groupID:')
                  .concat(i, ' avChatRoomKey:')
                  .concat(o, ' mode:')
                  .concat(r)
              ),
              this._grpM
                .req({ P: Gn.UPDATE_GRP_COUNTER, data: t({}, e) })
                .then(function (e) {
                  Ae.l(''.concat(n, ' ok.')), (e = e.data.counterList);
                  var t = {};
                  return (
                    (void 0 === e ? [] : e).forEach(function (e) {
                      var n = e.key;
                      (e = e.value), (t[n] = e);
                    }),
                    t
                  );
                })
                .catch(function (e) {
                  return In(e);
                })
            );
          },
        },
        {
          key: '_hasLocalGroupCounters',
          value: function (e) {
            return this._groupCountersMap.has(e);
          },
        },
        {
          key: '_getLocalGroupCounters',
          value: function (e) {
            return (
              this._hasLocalGroupCounters(e) ||
                this.initGroupCountersCache({ groupID: e }),
              this._groupCountersMap.get(e)
            );
          },
        },
        {
          key: '_updateLocalGroupCounters',
          value: function (e) {
            var t,
              n,
              i,
              o = e.groupID,
              r = void 0 === (r = e.counterList) ? [] : r;
            (e = e.groupCounterSeq),
              this._hasLocalGroupCounters(o) &&
                ((i = this._getLocalGroupCounters(o)),
                (t = i.counters),
                (n = i.avChatRoomKey),
                (i = i.groupCounterSeq),
                (0 < e && e < i) ||
                  (r.forEach(function (e) {
                    var n = e.key;
                    (e = e.value), t.set(n, e);
                  }),
                  this._groupCountersMap.set(o, {
                    lastUpdateTime: Date.now(),
                    groupCounterSeq: e,
                    counters: t,
                    avChatRoomKey: n,
                  })));
          },
        },
        {
          key: '_deleteLocalGroupCounters',
          value: function (e) {
            var t,
              n,
              i = e.groupID,
              o = void 0 === (o = e.counterList) ? [] : o;
            (e = e.groupCounterSeq),
              this._hasLocalGroupCounters(i) &&
                ((n = this._getLocalGroupCounters(i)),
                (t = n.counters),
                (n = n.avChatRoomKey),
                o.forEach(function (e) {
                  t.delete(e.key);
                }),
                this._groupCountersMap.set(i, {
                  lastUpdateTime: Date.now(),
                  groupCounterSeq: e,
                  counters: t,
                  avChatRoomKey: n,
                }));
          },
        },
        {
          key: '_getLocalCounters',
          value: function (e, t) {
            var n = {};
            if (!this._hasLocalGroupCounters(e)) return n;
            var i = this._getLocalGroupCounters(e).counters;
            if (0 < t.length)
              t.forEach(function (e) {
                i.has(e) && (n[e] = i.get(e));
              });
            else {
              var o,
                r = T(i.keys());
              try {
                for (r.s(); !(o = r.n()).done; ) {
                  var a = o.value;
                  n[a] = i.get(a);
                }
              } catch (s) {
                r.e(s);
              } finally {
                r.f();
              }
            }
            return n;
          },
        },
        {
          key: 'reset',
          value: function () {
            this._groupCountersMap.clear(), (this.EXPIRE_TIME = 3e4);
          },
        },
      ]),
      Yo),
    go =
      (r($o, [
        {
          key: 'start',
          value: function () {
            var e = this._grpM.isLoggedIn();
            e || (this._proto = Gn.AV_NOAUTH_POLLING),
              Ae.l(
                ''
                  .concat(this._n, '.start pollingInterval:')
                  .concat(this._manager.getPollingInterval(), ' isLoggedIn:')
                  .concat(e)
              ),
              (this._isRunning = !0),
              this._request();
          },
        },
        {
          key: 'isRunning',
          value: function () {
            return this._isRunning;
          },
        },
        {
          key: '_request',
          value: function () {
            var e = this,
              t = this._onInit(this._groupID);
            this._grpM
              .req({ P: this._proto, data: t })
              .then(function (t) {
                e._onSuccess(e._groupID, t),
                  e.isRunning() &&
                    (clearTimeout(e._timeoutID),
                    (e._timeoutID = setTimeout(
                      e._request.bind(e),
                      e._manager.getPollingInterval()
                    )));
              })
              .catch(function (t) {
                e._onFail(e._groupID, t),
                  e.isRunning() &&
                    (clearTimeout(e._timeoutID),
                    (e._timeoutID = setTimeout(
                      e._request.bind(e),
                      e._manager.MAX_POLLING_INTERVAL
                    )));
              });
          },
        },
        {
          key: 'stop',
          value: function () {
            Ae.l(''.concat(this._n, '.stop')),
              0 < this._timeoutID &&
                (clearTimeout(this._timeoutID), (this._timeoutID = -1)),
              (this._isRunning = !1);
          },
        },
        {
          key: 'getPollingTimerID',
          value: function () {
            return this._timeoutID;
          },
        },
      ]),
      $o),
    _o = { 3: !0, 4: !0, 5: !0, 6: !0, 17: !0, 20: !0, 21: !0, 100: !0 },
    vo =
      (r(zo, [
        {
          key: 'hasJoinedAVChatRoom',
          value: function () {
            var e = [];
            return (
              0 <
              (e =
                0 < this._joinedGroupMap.size
                  ? v(this._joinedGroupMap.values()).filter(function (e) {
                      return e.type === D.GRP_AVCHATROOM;
                    })
                  : e).length
            );
          },
        },
        {
          key: 'getJoinedLiveList',
          value: function () {
            var e = [];
            return 0 < this._joinedGroupMap.size
              ? v(this._joinedGroupMap.values()).filter(function (e) {
                  return e.type === D.GRP_LIVE;
                })
              : e;
          },
        },
        {
          key: 'checkJoinedAVChatRoomByID',
          value: function (e) {
            return this._joinedGroupMap.has(e);
          },
        },
        {
          key: 'getJoinedAVChatRoom',
          value: function () {
            return 0 < this._joinedGroupMap.size
              ? v(this._joinedGroupMap.keys())
              : [];
          },
        },
        {
          key: '_updatedata',
          value: function (e) {
            var n = this._pollingRequestInfoMap.get(e);
            return e === v(this._pollingInstanceMap.keys())[0]
              ? t(
                  t({}, n),
                  {},
                  {
                    startBroadcastSeq: this._startBroadcastSeq,
                    simplifiedMessage: this.DEFAULT_POLLING_SIMPLIFIED_MSG,
                  }
                )
              : t(
                  t({}, n),
                  {},
                  { simplifiedMessage: this.DEFAULT_POLLING_SIMPLIFIED_MSG }
                );
          },
        },
        {
          key: '_handleSuccess',
          value: function (e, t) {
            var n,
              i = (c = t.data).key,
              o = c.nextSeq,
              r = c.rspMsgList,
              a = c.errorCode,
              s = c.nextBroadcastSeq,
              c = c.broadcastMessageList;
            0 !== a
              ? ((a = this._pollingRequestInfoMap.get(e)),
                (n = new ei('longPollingAVError')),
                (a = a
                  ? ''.concat(a.key, '-').concat(a.startSeq)
                  : 'requestInfo is undefined'),
                n
                  .setMessage(
                    ''.concat(e, '-').concat(a, '-').concat(t.errorInfo)
                  )
                  .setCode(t.errorCode)
                  .end(!0))
              : this.checkJoinedAVChatRoomByID(e) &&
                (ct(i) &&
                  Ke(o) &&
                  this._pollingRequestInfoMap.set(e, { key: i, startSeq: o }),
                Ke(s) &&
                  s > this._startBroadcastSeq &&
                  (this._startBroadcastSeq = s),
                $e(r) && 0 < r.length
                  ? (r.forEach(function (e) {
                      e.to = e.groupID;
                    }),
                    this.onMessage(r, e))
                  : ((this._pollingNoMessageCount += 1),
                    this._pollingNoMessageCount ===
                      this.DEFAULT_POLLING_NO_MESSAGE_COUNT &&
                      (this._pollingInterval =
                        this.DEFAULT_POLLING_INTERVAL +
                        this.DEFAULT_POLLING_INTERVAL_PLUS)),
                this._onBroadcastMessage(c));
          },
        },
        { key: '_handleFailure', value: function (e, t) {} },
        {
          key: 'onMessage',
          value: function (e, t) {
            if ($e(e) && 0 !== e.length) {
              var n = ''.concat(this._n, '.onMessage'),
                i =
                  (t && (n += ' groupID:'.concat(t)),
                  0 !== this._pollingNoMessageCount &&
                    ((this._pollingNoMessageCount = 0),
                    (this._pollingInterval = this.DEFAULT_POLLING_INTERVAL)),
                  null),
                o = [],
                r = this._get(11),
                a = this._get(26),
                s = e.length,
                c =
                  (1 < s &&
                    e.sort(function (e, t) {
                      return e.sequence - t.sequence;
                    }),
                  this._get(12).isUnlimitedAVChatRoom()),
                u = !1;
              Ae.getLevel() <= 0 &&
                ((t = e.map(function (e) {
                  return e.sequence;
                })),
                Ae.l(
                  ''
                    .concat(n, ' count:')
                    .concat(t.length, ' sequenceList:')
                    .concat(t)
                ),
                (t.length = 0));
              for (var l = 0; l < s; l++) {
                var d = this.restoreMessageFromSimplified(e[l]);
                if (_o[d.event]) {
                  if (6 === d.event) {
                    if (this._grpM.isGroupAttributesUpdatedNotice(d)) continue;
                    if (this._grpM.isGroupCountersNotice(d)) continue;
                  }
                  if (20 !== d.event)
                    if (21 !== d.event)
                      if (100 !== d.event) {
                        i = this.packMessage(d, d.event);
                        var p = 1 === d.isModified;
                        if (((u = 1 === d.isHistoryMessage), !c)) {
                          if (this._seqSll.has(i.sequence)) continue;
                          this._seqSll.set(i.sequence);
                        }
                        var h = this._IDSll.has(i.ID);
                        h
                          ? Ae.w(
                              ''
                                .concat(n, ' ID:')
                                .concat(i.ID, ' has:')
                                .concat(h)
                            )
                          : (this._IDSll.set(i.ID),
                            (h = !1),
                            !u && this._isMessageSentByCurrentInstance(i)
                              ? p &&
                                ((h = !0),
                                (i.isModified = p),
                                r.updateMsgIsModifiedProp(i))
                              : (h = !0),
                            h &&
                              (i.conversationType === D.CONV_SYSTEM &&
                                5 === i.payload.operationType &&
                                this._onGroupDismissed(
                                  i.payload.groupProfile.groupID
                                ),
                              u ||
                                i.conversationType === D.CONV_SYSTEM ||
                                ((p = i.conversationID.replace(
                                  D.CONV_GROUP,
                                  ''
                                )),
                                this._pollingInstanceMap.has(p)
                                  ? this._grpM.isLoggedIn() &&
                                    a.addMessageSequence({
                                      key: zn,
                                      message: i,
                                    })
                                  : (i.type !== D.MSG_GRP_TIP &&
                                      0 < i.clientTime &&
                                      a.addMessageDelay(i.clientTime),
                                    a.addMessageSequence({
                                      key: Wn,
                                      message: i,
                                    }))),
                              o.push(i)));
                      } else this.onRoomCustomData(d);
                    else
                      this._get(34).onMessageReactionNotify({
                        event: 21,
                        dataList: d.elements.messageReactionNotifyList,
                      });
                  else this.handleMessageRevokedNotice(d);
                } else Ae.w(''.concat(n, '. unknown event:').concat(d.event));
              }
              0 !== o.length &&
                (0 < (t = mt(o)).length &&
                  this._grpM.emitOEvt(E.MESSAGE_MODIFIED, t),
                u ||
                  (0 < (t = this.packConversationOption(o)).length &&
                    r.onNewMessage({
                      conversationOptionsList: t,
                      isInstantMessage: !0,
                    })),
                this._checkMessageStacked(o),
                0 < (t = yt(o)).length &&
                  this._grpM.emitOEvt(E.MESSAGE_RECEIVED, t),
                (o.length = 0));
            }
          },
        },
        {
          key: 'handleMessageRevokedNotice',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = e.elements.revokeMsgList,
              o = e.revokerInfo,
              r = [];
            i.forEach(function (e) {
              var t = e.tinyID,
                i = e.clientTime,
                a = e.random;
              (e = e.sequence),
                (t = {
                  conversationID: ''.concat(D.CONV_GROUP).concat(n),
                  ID: ''.concat(t, '-').concat(i, '-').concat(a),
                  revoker: o.revoker,
                  revokeReason: o.reason || '',
                  revokerInfo: { userID: o.revoker, nick: '', avatar: '' },
                  sequence: e,
                }),
                r.push(t);
            }),
              0 !== r.length &&
                this._get(11)
                  .updateRevokerInfo(r)
                  .then(function (e) {
                    t._grpM.emitOEvt(E.MESSAGE_REVOKED, e);
                  });
          },
        },
        {
          key: 'isBroadcastOrNormal',
          value: function (e) {
            return 3 === e || 17 === e;
          },
        },
        {
          key: 'isGroupTip',
          value: function (e) {
            return 4 === e || 6 === e;
          },
        },
        {
          key: 'isGroupSystemNotice',
          value: function (e) {
            return 5 === e;
          },
        },
        {
          key: 'restoreGroupTipElements',
          value: function () {
            var e =
                0 < arguments.length && void 0 !== arguments[0]
                  ? arguments[0]
                  : {},
              t = void 0 === (t = e.operatorInfo) ? {} : t,
              n = e.operatorID,
              i = void 0 === (i = e.userIDList) ? [] : i,
              o = e.operationType,
              r =
                (Ke(e.groupJoinType) ||
                  (1 !== o && 2 !== o) ||
                  (e.groupJoinType = 2 === o ? 0 : 1),
                (o = t.userID),
                t.avatar);
            return (
              (t = t.nick),
              (e.operatorInfo = {
                userID: void 0 === o ? n : o,
                avatar: void 0 === r ? '' : r,
                nick: void 0 === t ? '' : t,
              }),
              (n = i.map(function (e) {
                return { userID: e };
              })),
              (e.memberInfoList = e.memberInfoList || n),
              e
            );
          },
        },
        {
          key: 'restoreMessageFromSimplified',
          value: function (e) {
            var n,
              i,
              o,
              r = e.event;
            return (
              this.isBroadcastOrNormal(r) &&
                ((e.cloudCustomData = e.cloudCustomData || ''),
                (e.elements = e.elements.map(function (e) {
                  var n;
                  return (
                    e.type === D.MSG_CUSTOM &&
                      ((n = e.content),
                      (e.content = t(
                        { data: '', description: '', extension: '' },
                        void 0 === n ? {} : n
                      ))),
                    e
                  );
                }))),
              (this.isGroupTip(r) || this.isGroupSystemNotice(r)) &&
                (e.from = e.from || '@TIM#SYSTEM'),
              this.isGroupTip(r) &&
                ((e.elements = this.restoreGroupTipElements(e.elements)),
                (i = (o = void 0 === (o = e.elements) ? {} : o).operationType),
                (n = o.operatorInfo),
                1 === i &&
                  ((i = [{ userID: (void 0 === n ? {} : n).userID }]),
                  (o.memberInfoList = o.memberInfoList || i))),
              this.isGroupSystemNotice(r) &&
                ((o = (n = e.elements).memberInfoList),
                (i = n.operatorInfo),
                (e.elements.memberInfoList = t(
                  { userID: e.elements.operatorID, avatar: '', nick: '' },
                  (o = o || (void 0 === i ? {} : i))
                )),
                (e.elements = t(
                  {
                    authentication: '',
                    remarkInfo: '',
                    messageKey: 1e3 * e.time,
                  },
                  e.elements
                )),
                (r = Object.keys(e.elements)
                  .filter(function (e) {
                    return 'operatorInfo' !== e;
                  })
                  .reduce(function (n, i) {
                    return t(t({}, n), {}, a({}, i, e.elements[i]));
                  }, {})),
                (e.elements = r)),
              e
            );
          },
        },
        {
          key: '_onGroupDismissed',
          value: function (e) {
            Ae.l(''.concat(this._n, '._onGroupDismissed groupID:').concat(e)),
              this._grpM.deleteLocalGroupAndConversation(e),
              this.reset(e);
          },
        },
        {
          key: '_checkMessageStacked',
          value: function (e) {
            var t = 'MessageStacked';
            100 <= (e = e.length) &&
              (this._grpM.warn(t, e),
              this._reportMessageStackedCount < 5 &&
                (new ei(t)
                  .setMessage(
                    'count:'
                      .concat(e, ' groupID:')
                      .concat(v(this._joinedGroupMap.keys()))
                  )
                  .setLevel('warning')
                  .end(),
                (this._reportMessageStackedCount += 1)));
          },
        },
        {
          key: '_isMessageSentByCurrentInstance',
          value: function (e) {
            return !!this._get(11).isMessageSentByCurrentInstance(e);
          },
        },
        {
          key: 'packMessage',
          value: function (e, t) {
            (e.currentUser = this._grpM.getMyUserID()),
              (e.conversationType = 5 === t ? D.CONV_SYSTEM : D.CONV_GROUP),
              (e.isSystemMessage = !!e.isSystemMessage);
            var n = new Ei(e),
              i =
                ((e = this.packElements(e, t)),
                (t = this._grpM.getFileDownloadProxy()),
                this._grpM.getDowloadFileAuthKey()),
              o = this._get(17).getFileDNList();
            return n.setElement(e, t, i, o), n;
          },
        },
        {
          key: 'packElements',
          value: function (e, n) {
            return 4 === n || 6 === n
              ? (this._updateMemberCountByGroupTips(e),
                {
                  type: D.MSG_GRP_TIP,
                  content: t(
                    t({}, e.elements),
                    {},
                    { groupProfile: e.groupProfile }
                  ),
                })
              : 5 === n
                ? {
                    type: D.MSG_GRP_SYS_NOTICE,
                    content: t(
                      t({}, e.elements),
                      {},
                      {
                        groupProfile: t(
                          t({}, e.groupProfile),
                          {},
                          { groupID: e.groupID }
                        ),
                      }
                    ),
                  }
                : e.elements;
          },
        },
        {
          key: 'packConversationOption',
          value: function (e) {
            for (var t = new Map(), n = 0; n < e.length; n++) {
              var i,
                o = e[n],
                r = o.conversationID;
              t.has(r)
                ? 'in' === ((i = t.get(r)).lastMessage = o).flow &&
                  i.unreadCount++
                : t.set(r, {
                    conversationID: o.conversationID,
                    unreadCount: 'out' === o.flow ? 0 : 1,
                    type: o.conversationType,
                    subType: o.conversationSubType,
                    lastMessage: o,
                  });
            }
            return v(t.values());
          },
        },
        {
          key: '_updateMemberCountByGroupTips',
          value: function (e) {
            var t,
              n,
              i,
              o = e.groupProfile.groupID;
            Ve(
              (e = void 0 === (e = e.elements.onlineMemberInfo) ? void 0 : e)
            ) ||
              ((t = void 0 === (t = e.onlineMemberNum) ? 0 : t),
              (e =
                void 0 === (e = e.expireTime) ? this.DEFAULT_EXPIRE_TIME : e),
              (n = this._onlineMemberCountMap.get(o) || {}),
              (i = Date.now()),
              Ve(n)
                ? Object.assign(n, {
                    lastReqTime: 0,
                    lastSyncTime: 0,
                    latestUpdateTime: i,
                    memberCount: t,
                    expireTime: e,
                  })
                : ((n.latestUpdateTime = i), (n.memberCount = t)),
              this._onlineMemberCountMap.set(o, n));
          },
        },
        {
          key: '_onBroadcastMessage',
          value: function (e) {
            if (!Ve(e)) {
              for (var t = [], n = e.length, i = null, o = 0; o < n; o++) {
                var r = this.restoreMessageFromSimplified(e[o]);
                _o[r.event]
                  ? (((i = this.packMessage(r, r.event)).isBroadcastMessage =
                      !0),
                    this._broadcastMessageIDMap.has(i.ID) ||
                      (t.push(i), this._broadcastMessageIDMap.set(i.ID, 1)))
                  : Ae.w(
                      ''
                        .concat(this._n, '._onBroadcastMessage unknown event:')
                        .concat(r.event)
                    );
              }
              0 < t.length && this._grpM.emitOEvt(E.MESSAGE_RECEIVED, t);
            }
          },
        },
        {
          key: 'start',
          value: function (e) {
            var t;
            this._pollingInstanceMap.has(e)
              ? (t = this._pollingInstanceMap.get(e)).isRunning() || t.start()
              : ((t = new go({
                  manager: this,
                  groupID: e,
                  onInit: this._updatedata.bind(this),
                  onSuccess: this._handleSuccess.bind(this),
                  onFail: this._handleFailure.bind(this),
                })).start(),
                this._pollingInstanceMap.set(e, t),
                Ae.l(''.concat(this._n, '.start groupID:').concat(e)));
          },
        },
        {
          key: 'handleJoinResult',
          value: function (e) {
            var t = this;
            return this._preCheck(e.group).then(function () {
              var n = e.longPollingKey,
                i = e.group,
                o = i.groupID;
              return (
                t._joinedGroupMap.set(o, i),
                t._grpM.updateGroupMap([i]),
                t._grpM.deleteUnjoinedAVChatRoom(o),
                t._grpM.emitGroupListUpdate(!0, !1),
                ut(n) ? yn({ status: Ge, group: i }) : Promise.resolve()
              );
            });
          },
        },
        {
          key: 'startRunLoop',
          value: function (e) {
            var t = this;
            return this.handleJoinResult(e).then(function () {
              var n = e.longPollingKey,
                i = e.group,
                o = e.startSeq,
                r = i.groupID;
              return (
                t._pollingRequestInfoMap.set(r, {
                  key: n,
                  startSeq: void 0 === o ? 0 : o,
                }),
                t.start(r),
                t._grpM.isLoggedIn()
                  ? yn({ status: Ge, group: i })
                  : yn({ status: Ge })
              );
            });
          },
        },
        {
          key: '_preCheck',
          value: function (e) {
            if (this._get(12).isUnlimitedAVChatRoom()) return Promise.resolve();
            if (!this.hasJoinedAVChatRoom()) return Promise.resolve();
            if (e.type === D.GRP_LIVE) return Promise.resolve();
            var t = (e = _(this._joinedGroupMap.entries().next().value, 2))[0];
            if (((e = e[1]), this._grpM.isLoggedIn())) {
              if (
                e.selfInfo.role !== D.GRP_MBR_ROLE_OWNER &&
                e.ownerID !== this._grpM.getMyUserID()
              )
                return this._grpM.quitGroup(t);
              this._grpM.deleteLocalGroupAndConversation(t);
            } else this._grpM.deleteLocalGroupAndConversation(t);
            return this.reset(t), Promise.resolve();
          },
        },
        {
          key: 'joinWithoutAuth',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = ''.concat(this._n, '.').concat('joinWithoutAuth'),
              o = new ei('joinWithoutAuth');
            return this._grpM
              .req({ P: Gn.APPLY_JOIN_GRP_NOAUTH, data: e })
              .then(function (e) {
                if (
                  ((e = e.data.longPollingKey),
                  o
                    .setMessage(
                      'groupID:'.concat(n, ' longPollingKey:').concat(e)
                    )
                    .end(!0),
                  ut(e))
                )
                  return In({ code: wn.CANNOT_JOIN_NON_AV_WITHOUT_LOGIN });
                Ae.l(''.concat(i, ' ok. groupID:').concat(n)),
                  t._get(11).setCompleted(''.concat(D.CONV_GROUP).concat(n));
                var r = new oo({ groupID: n });
                return (
                  t.startRunLoop({ group: r, longPollingKey: e }),
                  mn({ status: Ge })
                );
              })
              .catch(function (e) {
                return (
                  Ae.e(
                    ''.concat(i, ' failed. groupID:').concat(n, ' error:'),
                    e
                  ),
                  o.setError(e).setMessage('groupID:'.concat(n)).end(!0),
                  In(e)
                );
              })
              .finally(function () {
                t._grpM.get(14).reportAtOnce();
              });
          },
        },
        {
          key: 'getGroupOnlineMemberCount',
          value: function (e) {
            var t = this._onlineMemberCountMap.get(e) || {},
              n = Date.now();
            return Ve(t) ||
              (n - t.lastSyncTime > 1e3 * t.expireTime &&
                1e4 < n - t.latestUpdateTime &&
                3e3 < n - t.lastReqTime)
              ? ((t.lastReqTime = n),
                this._onlineMemberCountMap.set(e, t),
                this._getGroupOnlineMemberCount(e)
                  .then(function (e) {
                    return mn({ memberCount: e.memberCount });
                  })
                  .catch(function (e) {
                    return In(e);
                  }))
              : yn({ memberCount: t.memberCount });
          },
        },
        {
          key: '_getGroupOnlineMemberCount',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('_getGroupOnlineMemberCount'),
              i = new ei('_getGroupOnlineMemberCount');
            return this._grpM
              .requestOnlineCount(e)
              .then(function (i) {
                var o = t._onlineMemberCountMap.get(e) || {},
                  r = void 0 === (r = (i = i.data).memberCount) ? 0 : r,
                  a =
                    ((i =
                      void 0 === (i = i.expireTime)
                        ? t.DEFAULT_EXPIRE_TIME
                        : i),
                    Ae.l(
                      ''
                        .concat(n, ' ok. groupID:')
                        .concat(e, ' memberCount:')
                        .concat(r, ' expireTime:')
                        .concat(i)
                    ),
                    Date.now());
                return (
                  Ve(o) && (o.lastReqTime = a),
                  t._onlineMemberCountMap.set(
                    e,
                    Object.assign(o, {
                      lastSyncTime: a,
                      latestUpdateTime: a,
                      memberCount: r,
                      expireTime: i,
                    })
                  ),
                  { memberCount: r }
                );
              })
              .catch(function (t) {
                return (
                  Ae.w(''.concat(n, ' failed. error:'), t),
                  i
                    .setCode(t.code)
                    .setMessage(
                      'groupID:'.concat(e, ' error:').concat(JSON.stringify(t))
                    )
                    .end(),
                  Promise.reject(t)
                );
              });
          },
        },
        {
          key: '_get',
          value: function (e) {
            return this._grpM.get(e);
          },
        },
        {
          key: 'setPollingInterval',
          value: function (e) {
            ut(e) ||
              (Ke(e)
                ? (this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = e)
                : (this._pollingInterval = this.DEFAULT_POLLING_INTERVAL =
                    parseInt(e, 10)));
          },
        },
        {
          key: 'setPollingIntervalPlus',
          value: function (e) {
            ut(e) ||
              (Ke(e)
                ? (this.DEFAULT_POLLING_INTERVAL_PLUS = e)
                : (this.DEFAULT_POLLING_INTERVAL_PLUS = parseInt(e, 10)));
          },
        },
        {
          key: 'setPollingNoMessageCount',
          value: function (e) {
            ut(e) ||
              (Ke(e)
                ? (this.DEFAULT_POLLING_NO_MESSAGE_COUNT = e)
                : (this.DEFAULT_POLLING_NO_MESSAGE_COUNT = parseInt(e, 10)));
          },
        },
        {
          key: 'setPollingSimplifiedMessage',
          value: function (e) {
            ut(e) ||
              ('0' !== e && '1' !== e) ||
              (this.DEFAULT_POLLING_SIMPLIFIED_MSG = parseInt(e, 10));
          },
        },
        {
          key: 'getPollingInterval',
          value: function () {
            return this._pollingInterval;
          },
        },
        {
          key: 'onAVChatRoomMemberBanned',
          value: function (e) {
            (e = e.payload.groupProfile.groupID),
              Ae.l(
                ''
                  .concat(this._n, '.onAVChatRoomMemberBanned groupID:')
                  .concat(e)
              ),
              this._grpM.deleteLocalGroupAndConversation(e),
              this.reset(e);
          },
        },
        {
          key: 'restartPolling',
          value: function () {
            Ae.l(
              ''
                .concat(this._n, '.restartPolling count:')
                .concat(this._pollingInstanceMap.size)
            );
            var e,
              t = T(this._pollingInstanceMap.values());
            try {
              for (t.s(); !(e = t.n()).done; ) {
                var n = e.value;
                n.stop(), n.start();
              }
            } catch (i) {
              t.e(i);
            } finally {
              t.f();
            }
          },
        },
        {
          key: 'getPollingTimerID',
          value: function (e) {
            if (!this._pollingInstanceMap.has(e)) return -1;
            var t = this._pollingInstanceMap.get(e).getPollingTimerID();
            return (
              Ae.l(
                ''
                  .concat(this._n, '.getPollingTimerID groupID:')
                  .concat(e, ' timerID:')
                  .concat(t)
              ),
              t
            );
          },
        },
        {
          key: 'hasPollingInstance',
          value: function (e) {
            return this._pollingInstanceMap.has(e);
          },
        },
        {
          key: 'onRoomCustomData',
          value: function (e) {
            var t = e.groupID,
              n = e.sequence,
              i = e.time;
            (e = (e = e.elements) && e.content),
              this._get(30).onRoomCustomDataReceived(e),
              Ae.l(
                ''
                  .concat(this._n, '.onRoomCustomData groupID:')
                  .concat(t, ' sequence:')
                  .concat(n, ' time:')
                  .concat(i, ' data:')
                  .concat(e)
              );
          },
        },
        {
          key: 'reset',
          value: function (e) {
            if (e) {
              Ae.l(''.concat(this._n, '.reset groupID:').concat(e));
              var t = this._pollingInstanceMap.get(e);
              t && t.stop(),
                this._pollingInstanceMap.delete(e),
                this._joinedGroupMap.delete(e),
                this._pollingRequestInfoMap.delete(e),
                this._onlineMemberCountMap.delete(e);
            } else {
              Ae.l(''.concat(this._n, '.reset all'));
              var n,
                i = T(this._pollingInstanceMap.values());
              try {
                for (i.s(); !(n = i.n()).done; ) n.value.stop();
              } catch (o) {
                i.e(o);
              } finally {
                i.f();
              }
              this._pollingInstanceMap.clear(),
                this._joinedGroupMap.clear(),
                this._pollingRequestInfoMap.clear(),
                this._onlineMemberCountMap.clear(),
                this._broadcastMessageIDMap.clear();
            }
            this._seqSll.reset(),
              this._IDSll.reset(),
              (this._reportMessageStackedCount = 0),
              (this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = 300),
              (this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20),
              (this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3),
              (this._pollingNoMessageCount = 0);
          },
        },
      ]),
      zo),
    mo =
      (r(Wo, [
        {
          key: 'updateMember',
          value: function (e) {
            ut(e.onlineStatus) || (this.isOnline = 'Online' === e.onlineStatus);
            var t = [null, void 0, '', 0, NaN];
            e.memberCustomField &&
              vt(this.memberCustomField, e.memberCustomField),
              Ze(this, e, ['memberCustomField', 'marks', 'onlineStatus'], t);
          },
        },
        {
          key: 'updateRole',
          value: function (e) {
            ['Owner', 'Admin', 'Member'].indexOf(e) < 0 || (this.role = e);
          },
        },
        {
          key: 'updateMuteUntil',
          value: function (e) {
            ut(e) ||
              (this.muteUntil = Math.floor((Date.now() + 1e3 * e) / 1e3));
          },
        },
        {
          key: 'updateNameCard',
          value: function (e) {
            ut(e) || (this.nameCard = e);
          },
        },
        {
          key: 'updateMemberCustomField',
          value: function (e) {
            e && vt(this.memberCustomField, e);
          },
        },
      ]),
      Wo),
    yo =
      (r(Ko, [
        {
          key: '_onProfileUpdated',
          value: function (e) {
            for (var t = this, n = e.data, i = 0; i < n.length; i++)
              !(function (e) {
                var i = n[e];
                t.groupMemberListMap.forEach(function (e) {
                  e.has(i.userID) &&
                    e
                      .get(i.userID)
                      .updateMember({ nick: i.nick, avatar: i.avatar });
                });
              })(i);
          },
        },
        {
          key: 'deleteGroupMemberList',
          value: function (e) {
            this.groupMemberListMap.delete(e);
          },
        },
        {
          key: 'getGroupMemberList',
          value: function (e) {
            var t,
              n = this,
              i = e.groupID,
              o = void 0 === (o = e.role) ? void 0 : o,
              r = void 0 === (c = e.offset) ? 0 : c,
              a = void 0 === (c = e.count) ? 15 : c,
              s =
                ((e = void 0 === (c = e.filter) ? void 0 : c),
                ''.concat(this._n, '.').concat('getGroupMemberList')),
              c = this._grpM.hasLocalGroup(i);
            if (
              (Ae.l(
                ''
                  .concat(s, ' groupID:')
                  .concat(i, ' role:')
                  .concat(o, ' offset:')
                  .concat(r, ' count:')
                  .concat(a, ' hasLocalGroup:')
                  .concat(c)
              ),
              !c)
            )
              return yn({ memberList: [], offset: 0 });
            if (this._grpM.getLocalGroupProfile(i).type === D.GRP_AVCHATROOM) {
              if (this._grpM.canIUse(w.AV_MBR_LIST))
                return this._getAVChatRoomMemberList({
                  groupID: i,
                  offset: r,
                  filter: e,
                });
              this._grpM.warn('LiveOnlineMember');
            }
            (o !== D.GRP_MBR_ROLE_ADMIN &&
              o !== D.GRP_MBR_ROLE_OWNER &&
              o !== D.GRP_MBR_ROLE_MEMBER) ||
              (t = o);
            var u = new ei('getGroupMemberList'),
              l = 0,
              d =
                ((c = {
                  groupID: i,
                  limit: 100 < a ? 100 : a,
                  memberRoleFilter: t ? [t] : void 0,
                  memberInfoFilter: this.DEFAULT_MEMBER_INFO_FILTER,
                }),
                Mt({ groupID: i })
                  ? (c.next = ''.concat(r))
                  : ((c.offset = r), (l = r + a)),
                []);
            return this._grpM
              .req({ P: Gn.GET_GRP_MBR_LIST, data: c })
              .then(function (e) {
                var t = (e = e.data).members,
                  o = e.memberNum;
                return (
                  (e = e.next),
                  ut((e = void 0 === e ? void 0 : e)) || (l = Ve(e) ? 0 : e),
                  $e(t) && 0 !== t.length
                    ? (n._grpM.hasLocalGroup(i) &&
                        (n._grpM.getLocalGroupProfile(i).memberNum = o),
                      (d = n._updateLocalGroupMemberMap(i, t)),
                      n._grpM.get(4).getUserProfile({
                        userIDList: t.map(function (e) {
                          return e.userID;
                        }),
                        tagList: [be.NICK, be.AVATAR],
                      }))
                    : ((l = 0), Promise.resolve([]))
                );
              })
              .then(function (e) {
                return $e((e = e.data)) && 0 !== e.length
                  ? ((e = e.map(function (e) {
                      return {
                        userID: e.userID,
                        nick: e.nick,
                        avatar: e.avatar,
                      };
                    })),
                    n._updateLocalGroupMemberMap(i, e),
                    d.length < a && (l = 0),
                    u
                      .setMessage(
                        'groupID:'
                          .concat(i, ' offset:')
                          .concat(r, ' count:')
                          .concat(a)
                      )
                      .end(),
                    Ae.l(''.concat(s, ' ok.')),
                    mn({ memberList: d, offset: l }))
                  : yn({ memberList: [], offset: l });
              })
              .catch(function (e) {
                return (
                  u.setError(e).end(),
                  Ae.e(''.concat(s, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: '_getAVChatRoomMemberList',
          value: function (e) {
            var n = this,
              i = e.groupID,
              o = e.offset,
              r =
                ((e = e.filter),
                ''.concat(this._n, '.').concat('_getAVChatRoomMemberList')),
              a = new ei('_getAVChatRoomMemberList');
            return (
              a.setMessage(
                'groupID:'.concat(i, ' offset:').concat(o, ' filter:').concat(e)
              ),
              this._grpM
                .req({
                  P: Gn.GET_AV_MBR_LIST,
                  data: { groupID: i, offset: o, filter: e },
                })
                .then(function (e) {
                  var o = void 0 === (o = (e = e.data).memberList) ? [] : o;
                  return (
                    (e = void 0 === (e = e.offset) ? 0 : e),
                    a.end(),
                    Ae.l(
                      ''
                        .concat(r, ' ok. member count:')
                        .concat(o.length, ', next request timestamp:')
                        .concat(e)
                    ),
                    (o = o.map(function (e) {
                      return t(t({}, e), {}, { onlineStatus: 'Online' });
                    })),
                    mn({
                      memberList: (o = n._updateLocalGroupMemberMap(i, o)),
                      offset: e,
                    })
                  );
                })
                .catch(function (e) {
                  return (
                    a.setError(e).end(),
                    Ae.e(''.concat(r, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getGroupMemberProfile',
          value: function (e) {
            var n = this,
              i = 'getGroupMemberProfile',
              o = ''.concat(this._n, '.').concat(i),
              r = 'groupID:'.concat(e.groupID),
              a =
                (5 < e.userIDList.length
                  ? (r += ' userIDList.length:'.concat(e.userIDList.length))
                  : (r += ' userIDList:'.concat(e.userIDList)),
                Ae.l(''.concat(o, ' ').concat(r)),
                50 < e.userIDList.length &&
                  (e.userIDList = e.userIDList.slice(0, 50)),
                e.groupID),
              s = e.userIDList;
            if ((o = this._grpM.getLocalGroupProfile(a)) && It(o.type))
              return In({
                code: (o = wn.OPERATION_NOT_SUPPORTED_IN_AV),
                message: this._grpM.getErrMsg(o, i),
              });
            var c = new ei(i);
            return (
              c.setMessage(r),
              this._getGroupMemberProfileAdvance(
                t(t({}, e), {}, { userIDList: s })
              )
                .then(function (e) {
                  return $e((e = e.data.members)) && 0 !== e.length
                    ? (n._updateLocalGroupMemberMap(a, e),
                      n._grpM.get(4).getUserProfile({
                        userIDList: e.map(function (e) {
                          return e.userID;
                        }),
                        tagList: [be.NICK, be.AVATAR],
                      }))
                    : yn([]);
                })
                .then(function (e) {
                  return (
                    (e = e.data.map(function (e) {
                      return {
                        userID: e.userID,
                        nick: e.nick,
                        avatar: e.avatar,
                      };
                    })),
                    n._updateLocalGroupMemberMap(a, e),
                    (e = s
                      .filter(function (e) {
                        return n.hasLocalGroupMember(a, e);
                      })
                      .map(function (e) {
                        return n.getLocalGroupMemberInfo(a, e);
                      })),
                    c.end(),
                    mn({ memberList: e })
                  );
                })
            );
          },
        },
        {
          key: 'addGroupMember',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('addGroupMember'),
              i = e.groupID,
              o = this._grpM.getLocalGroupProfile(i),
              r = o.type,
              a = new ei('addGroupMember');
            return (
              a.setMessage('groupID:'.concat(i, ' groupType:').concat(r)),
              It(r)
                ? ((r = new Pn({ code: wn.CANNOT_ADD_MEMBER_IN_AV })),
                  a.setError(r).end(),
                  In(r))
                : ((e.userIDList = e.userIDList.map(function (e) {
                    return { userID: e };
                  })),
                  Ae.l(''.concat(n, ' groupID:').concat(i)),
                  this._grpM
                    .req({ P: Gn.ADD_GRP_MBR, data: e })
                    .then(function (i) {
                      i = i.data.members;
                      var r =
                          (Ae.l(''.concat(n, ' ok')),
                          i
                            .filter(function (e) {
                              return 1 === e.result;
                            })
                            .map(function (e) {
                              return e.userID;
                            })),
                        s = i
                          .filter(function (e) {
                            return 0 === e.result;
                          })
                          .map(function (e) {
                            return e.userID;
                          }),
                        c = i
                          .filter(function (e) {
                            return 2 === e.result;
                          })
                          .map(function (e) {
                            return e.userID;
                          }),
                        u =
                          ((i = i
                            .filter(function (e) {
                              return 4 === e.result;
                            })
                            .map(function (e) {
                              return e.userID;
                            })),
                          'groupID:'.concat(e.groupID, ', ') +
                            'successUserIDList:'.concat(r, ', ') +
                            'failureUserIDList:'.concat(s, ', ') +
                            'existedUserIDList:'.concat(c, ', ') +
                            'overLimitUserIDList:'.concat(i));
                      return (
                        a.setMoreMessage(u).end(),
                        0 === r.length
                          ? mn({
                              successUserIDList: r,
                              failureUserIDList: s,
                              existedUserIDList: c,
                              overLimitUserIDList: i,
                            })
                          : (t._updateConvGroupProfile(o),
                            mn({
                              successUserIDList: r,
                              failureUserIDList: s,
                              existedUserIDList: c,
                              overLimitUserIDList: i,
                              group: o,
                            }))
                      );
                    })
                    .catch(function (e) {
                      return (
                        a.setError(e).end(),
                        Ae.e(''.concat(n, ' failed. error:'), e),
                        In(e)
                      );
                    }))
            );
          },
        },
        {
          key: 'deleteGroupMember',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('deleteGroupMember'),
              i = e.groupID,
              o = e.userIDList,
              r = this._grpM.getLocalGroupProfile(i);
            if (ut(r)) return In({ code: wn.CANNOT_FIND_GRP });
            if (It(r.type))
              return this._grpM.canIUse(w.AV_BAN_MBR)
                ? this._banAVChatRoomMember(e)
                : this._grpM.noUse('deleteGroupMember');
            var a = 'groupID:'
                .concat(i, ' ')
                .concat(
                  5 < o.length
                    ? 'userIDList.length:'.concat(o.length)
                    : 'userIDList:'.concat(o)
                ),
              s =
                (Ae.l(''.concat(n, ' groupID:').concat(i, ' userIDList:'), o),
                new ei('deleteGroupMember'));
            return (
              s.setMessage(a),
              this._grpM
                .req({ P: Gn.DEL_GRP_MBR, data: e })
                .then(function () {
                  return (
                    s.end(),
                    Ae.l(''.concat(n, ' ok')),
                    t._updateConvGroupProfile(r),
                    t.deleteLocalGroupMembers(i, o),
                    mn({ group: r, userIDList: o })
                  );
                })
                .catch(function (e) {
                  return (
                    s.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_updateConvGroupProfile',
          value: function (e) {
            this._grpM.get(11).updateConvGroupProfile([e]);
          },
        },
        {
          key: '_banAVChatRoomMember',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('_banAVChatRoomMember'),
              i = e.groupID,
              o = e.userIDList,
              r = 'groupID:'
                .concat(i, ' ')
                .concat(
                  5 < o.length
                    ? 'userIDList.length:'.concat(o.length)
                    : 'userIDList:'.concat(o)
                ),
              a = new ei('_banAVChatRoomMember'),
              s =
                (a.setMessage(r),
                Ae.l(''.concat(n, ' groupID:').concat(i, ' userIDList:'), o),
                this._grpM.getLocalGroupProfile(i));
            return ut(e.duration) || 0 === e.duration
              ? In({ code: wn.BAN_DURATION_INVALID })
              : this._grpM
                  .req({ P: Gn.BAN_AV_MBR, data: e })
                  .then(function () {
                    return (
                      a.end(),
                      Ae.l(''.concat(n, ' ok')),
                      t.deleteLocalGroupMembers(i, o),
                      mn({ group: s, userIDList: o })
                    );
                  })
                  .catch(function (e) {
                    return (
                      a.setError(e).end(),
                      Ae.e(''.concat(n, ' failed. error:'), e),
                      In(e)
                    );
                  });
          },
        },
        {
          key: 'setGroupMemberMuteTime',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = e.userID,
              o =
                ((e = e.muteTime),
                ''.concat(this._n, '.').concat('setGroupMemberMuteTime'));
            if (i === this._grpM.getMyUserID())
              return In({ code: wn.CANNOT_MUTE_SELF });
            var r = 'groupID:'
                .concat(n, ' userID:')
                .concat(i, ' muteTime:')
                .concat(e),
              a =
                (Ae.l(''.concat(o, ' ').concat(r)),
                new ei('setGroupMemberMuteTime'));
            return (
              a.setMessage(r),
              this.modifyGroupMemberInfo({ groupID: n, userID: i, muteTime: e })
                .then(function (e) {
                  return (
                    a.end(),
                    Ae.l(''.concat(o, ' ok')),
                    mn({ group: t._grpM.getLocalGroupProfile(n), member: e })
                  );
                })
                .catch(function (e) {
                  return (
                    a.setError(e).end(),
                    Ae.e(''.concat(o, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'setGroupMemberRole',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('setGroupMemberRole'),
              n = e.groupID,
              i = e.userID,
              o =
                ((e = e.role),
                'groupID:'.concat(n, ' userID:').concat(i, ' role:').concat(e)),
              r = this._grpM.getLocalGroupProfile(n);
            if (!r || r.type === D.GRP_WORK || r.type === D.GRP_AVCHATROOM)
              return In({ code: wn.CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AV });
            if (r && r.selfInfo.role !== D.GRP_MBR_ROLE_OWNER)
              return In({ code: wn.NOT_OWNER });
            var a = [D.GRP_MBR_ROLE_ADMIN, D.GRP_MBR_ROLE_MEMBER];
            if (
              (Mt({ groupID: n }) && a.push(D.GRP_MBR_ROLE_CUSTOM),
              a.indexOf(e) < 0)
            )
              return In({ code: wn.INVALID_MEMBER_ROLE });
            if (i === this._grpM.getMyUserID())
              return In({ code: wn.CANNOT_SET_SELF_MEMBER_ROLE });
            var s = new ei('setGroupMemberRole');
            return (
              s.setMessage(o),
              Ae.l(''.concat(t, ' ').concat(o)),
              this.modifyGroupMemberInfo({ groupID: n, userID: i, role: e })
                .then(function (e) {
                  return (
                    s.end(),
                    Ae.l(''.concat(t, ' ok')),
                    mn({ group: r, member: e })
                  );
                })
                .catch(function (e) {
                  return (
                    s.setError(e).end(),
                    Ae.e(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_filterProfanity',
          value: function (e, t) {
            if (!(i = this._grpM.get(29))) return !0;
            var n = (i = i.filterText(t[e], 'group_member_profile'))
                .isAllowedToSend,
              i = i.modifiedText;
            return !0 === n && ((t[e] = i), !0);
          },
        },
        {
          key: 'setGroupMemberNameCard',
          value: function (e) {
            var t = this,
              n = 'setGroupMemberNameCard',
              i = ''.concat(this._n, '.').concat(n);
            if (e.nameCard && !1 === this._filterProfanity('nameCard', e))
              return In({ code: wn.PROFANITY_FOUND });
            var o = e.groupID,
              r = void 0 === (s = e.userID) ? this._grpM.getMyUserID() : s,
              a = e.nameCard,
              s = 'groupID:'
                .concat(o, ' userID:')
                .concat(r, ' nameCard:')
                .concat(a);
            if (
              (Ae.l(''.concat(i, ' ').concat(s)),
              (e = this._grpM.getLocalGroupProfile(o)) && It(e.type))
            )
              return In({
                code: (e = wn.OPERATION_NOT_SUPPORTED_IN_AV),
                message: this._grpM.getErrMsg(e, n),
              });
            var c = new ei(n);
            return (
              c.setMessage(s),
              this.modifyGroupMemberInfo({ groupID: o, userID: r, nameCard: a })
                .then(function (e) {
                  Ae.l(''.concat(i, ' ok')), c.end();
                  var n = t._grpM.getLocalGroupProfile(o);
                  return (
                    r === t._grpM.getMyUserID() && n && n.setSelfNameCard(a),
                    mn({ group: n, member: e })
                  );
                })
                .catch(function (e) {
                  return (
                    c.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'setGroupMemberCustomField',
          value: function (e) {
            var t = this,
              n = 'setGroupMemberCustomField',
              i = ''.concat(this._n, '.').concat(n),
              o = e.groupID,
              r = void 0 === (r = e.userID) ? this._grpM.getMyUserID() : r,
              a =
                ((e = e.memberCustomField),
                'groupID:'
                  .concat(o, ' userID:')
                  .concat(r, ' memberCustomField:')
                  .concat(JSON.stringify(e))),
              s =
                (Ae.l(''.concat(i, ' ').concat(a)),
                this._grpM.getLocalGroupProfile(o));
            if (s && It(s.type))
              return In({
                code: (s = wn.OPERATION_NOT_SUPPORTED_IN_AV),
                message: this._grpM.getErrMsg(s, n),
              });
            var c = new ei(n);
            return (
              c.setMessage(a),
              this.modifyGroupMemberInfo({
                groupID: o,
                userID: r,
                memberCustomField: e,
              })
                .then(function (e) {
                  return (
                    c.end(),
                    Ae.l(''.concat(i, ' ok')),
                    mn({ group: t._grpM.getLocalGroupProfile(o), member: e })
                  );
                })
                .catch(function (e) {
                  return (
                    c.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'modifyGroupMemberInfo',
          value: function (e) {
            var n = this,
              i = e.groupID,
              o = e.userID,
              r = void 0;
            return (
              Ct(i) && (i = Gt((r = i))),
              this._grpM
                .req({
                  P: Gn.MODIFY_GRP_MBR_INFO,
                  data: t(t({}, e), {}, { groupID: i, topicID: r }),
                })
                .then(function () {
                  if (n.hasLocalGroupMember(i, o))
                    return (
                      (t = n.getLocalGroupMemberInfo(i, o)),
                      ut(e.muteTime) || t.updateMuteUntil(e.muteTime),
                      ut(e.role) || t.updateRole(e.role),
                      ut(e.nameCard) || t.updateNameCard(e.nameCard),
                      ut(e.memberCustomField) ||
                        t.updateMemberCustomField(e.memberCustomField),
                      t
                    );
                  var t = n._grpM.getLocalGroupProfile(i);
                  return t && !It(t.type)
                    ? n
                        .getGroupMemberProfile({ groupID: i, userIDList: [o] })
                        .then(function (e) {
                          return _(e.data.memberList, 1)[0];
                        })
                    : void 0;
                })
            );
          },
        },
        {
          key: 'markGroupMemberList',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('markGroupMemberList'),
              n = e.groupID,
              i = e.markType,
              o = e.enableMark,
              r = void 0 === (e = e.userIDList) ? [] : e,
              a =
                ((e = 'groupID:'
                  .concat(n, ' markType:')
                  .concat(i, ' enableMark:')
                  .concat(o, ' userIDList count:')
                  .concat(r.length)),
                Ae.l(''.concat(t, ' ').concat(e)),
                2),
              s = [],
              c =
                (!0 === o && (a = 1),
                (o = v(r)),
                500 < r.length &&
                  ((o = r.slice(0, 500)),
                  Ae.w(''.concat(t, ' ').concat(Bt(500)))),
                o.forEach(function (e) {
                  s.push({ userID: e, markType: [i] });
                }),
                (o = null),
                new ei('markGroupMemberList'));
            return (
              c.setMessage(e),
              this._grpM
                .req({
                  P: Gn.MARK_AV_MBR_INFO,
                  data: { groupID: n, operationType: a, memberList: s },
                })
                .then(function (e) {
                  e = e.data.memberList;
                  var n = [],
                    i = [];
                  return (
                    (e = void 0 === e ? [] : e).length === r.length
                      ? n.push.apply(n, v(r))
                      : (e.forEach(function (e) {
                          n.push(e.userID);
                        }),
                        r.forEach(function (e) {
                          n.includes(e) || i.push(e);
                        })),
                    (e = 'success count:'
                      .concat(n.length, ' fail count:')
                      .concat(i.length)),
                    c.setMessage(e).end(),
                    Ae.l(''.concat(t, ' ok. ').concat(e)),
                    mn({ successUserIDList: n, failureUserIDList: i })
                  );
                })
                .catch(function (e) {
                  return (
                    c.setError(e).end(),
                    Ae.e(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_getGroupMemberProfileAdvance',
          value: function (e) {
            return this._grpM.req({
              P: Gn.GET_GRP_MBR_PROFILE,
              data: t(
                t({}, e),
                {},
                {
                  memberInfoFilter:
                    e.memberInfoFilter || this.DEFAULT_MEMBER_INFO_FILTER,
                }
              ),
            });
          },
        },
        {
          key: '_updateLocalGroupMemberMap',
          value: function (e, t) {
            var n = this;
            return $e(t) && 0 !== t.length
              ? t.map(function (t) {
                  return (
                    n.hasLocalGroupMember(e, t.userID)
                      ? n.getLocalGroupMemberInfo(e, t.userID).updateMember(t)
                      : n.setLocalGroupMember(e, new mo(t)),
                    n.getLocalGroupMemberInfo(e, t.userID)
                  );
                })
              : [];
          },
        },
        {
          key: 'deleteLocalGroupMembers',
          value: function (e, t) {
            var n = this.groupMemberListMap.get(e);
            n &&
              t.forEach(function (e) {
                n.delete(e);
              });
          },
        },
        {
          key: 'getLocalGroupMemberInfo',
          value: function (e, t) {
            return this.groupMemberListMap.has(e)
              ? this.groupMemberListMap.get(e).get(t)
              : null;
          },
        },
        {
          key: 'setLocalGroupMember',
          value: function (e, t) {
            this.groupMemberListMap.has(e)
              ? this.groupMemberListMap.get(e).set(t.userID, t)
              : ((t = new Map().set(t.userID, t)),
                this.groupMemberListMap.set(e, t));
          },
        },
        {
          key: 'getLocalGroupMemberList',
          value: function (e) {
            return this.groupMemberListMap.get(e);
          },
        },
        {
          key: 'hasLocalGroupMember',
          value: function (e, t) {
            return (
              this.groupMemberListMap.has(e) &&
              this.groupMemberListMap.get(e).has(t)
            );
          },
        },
        {
          key: 'hasLocalGroupMemberMap',
          value: function (e) {
            return this.groupMemberListMap.has(e);
          },
        },
        {
          key: 'reset',
          value: function () {
            this.groupMemberListMap.clear();
          },
        },
      ]),
      Ko),
    Io = [17, 18, 20],
    Mo =
      (r(jo, [
        {
          key: 'onNewGroupSystemNotice',
          value: function (e) {
            var t = e.dataList,
              n = e.isSyncingEnded,
              i =
                ((e = e.isInstantMessage),
                (Ae.d(
                  ''
                    .concat(this._n, '.onReceiveSystemNotice count:')
                    .concat(t.length)
                ),
                (t = this._assembly({ notifiesList: t, isInstantMessage: e })))
                  .eventDataList);
            (t = t.result),
              0 < i.length &&
                (this._grpM
                  .get(11)
                  .onNewMessage({
                    conversationOptionsList: i,
                    isInstantMessage: e,
                  }),
                this._onReceivedGroupSystemNotice({
                  result: t,
                  isInstantMessage: e,
                })),
              e
                ? 0 < t.length && this._grpM.emitOEvt(E.MESSAGE_RECEIVED, t)
                : !0 === n && this._clearGroupSystemNotice();
          },
        },
        {
          key: '_assembly',
          value: function (e) {
            var n = e.notifiesList,
              i = e.isInstantMessage,
              o = null,
              r = n.length,
              a = 0,
              s = [],
              c = {
                conversationID: D.CONV_SYSTEM,
                unreadCount: 0,
                type: D.CONV_SYSTEM,
                subType: null,
                lastMessage: null,
              };
            for (a = 0; a < r; a++) {
              var u = n[a],
                l = (d = u.groupProfile).communityType,
                d = void 0 === (d = d.topicID) ? void 0 : d,
                p = void 0 === (p = (h = u.elements).topicIDList) ? void 0 : p,
                h = h.operationType;
              if (!(2 !== (void 0 === l ? 0 : l) || (Ve(d) && Ve(p)))) {
                if (Io.includes(h)) {
                  this._handleTopicSystemNotice(u);
                  continue;
                }
                Ve(d) || (u.to = d);
              }
              15 !== u.elements.operationType &&
                ((u.currentUser = this._grpM.getMyUserID()),
                (u.conversationType = D.CONV_SYSTEM),
                (u.conversationID = D.CONV_SYSTEM),
                (o = new Ei(u)).setElement({
                  type: D.MSG_GRP_SYS_NOTICE,
                  content: t(
                    t({}, u.elements),
                    {},
                    { groupProfile: t({}, u.groupProfile) }
                  ),
                }),
                (o.isSystemMessage = !0),
                ((1 === o.sequence && 1 === o.random) ||
                  (2 === o.sequence && 2 === o.random)) &&
                  ((o.sequence = nt()),
                  (o.random = nt()),
                  o.generateMessageID(),
                  Ae.l(
                    ''.concat(this._n, '._assembly regenerate ID:').concat(o.ID)
                  )),
                this._grpM.get(11).pushIntoNoticeResult(s, o) &&
                  (i ? c.unreadCount++ : o.setIsRead(!0),
                  (c.subType = o.conversationSubType)));
            }
            return (
              (c.lastMessage = s[s.length - 1]),
              { eventDataList: 0 < s.length ? [c] : [], result: s }
            );
          },
        },
        {
          key: '_clearGroupSystemNotice',
          value: function () {
            var e = this;
            this._getPendencyList().then(function (t) {
              t.forEach(function (t) {
                e.pendencyMap.set(
                  ''.concat(t.from, '_').concat(t.groupID, '_').concat(t.to),
                  t
                );
              }),
                (t = e._grpM.get(11).getLocalMessageList(D.CONV_SYSTEM));
              var n = [];
              t.forEach(function (t) {
                var i = (r = t.payload).operatorID,
                  o = r.operationType,
                  r = r.groupProfile;
                1 === o &&
                  ((o = ''.concat(i, '_').concat(r.groupID, '_').concat(r.to)),
                  (i = e.pendencyMap.get(o)) &&
                    Ke(i.handled) &&
                    0 !== i.handled &&
                    n.push(t));
              }),
                e.deleteGroupSystemNotice({ messageList: n });
            });
          },
        },
        {
          key: 'deleteGroupSystemNotice',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.deleteGroupSystemNotice');
            return $e(e.messageList) && 0 !== e.messageList.length
              ? (Ae.l(
                  ''.concat(n, ' ') +
                    e.messageList.map(function (e) {
                      return e.ID;
                    })
                ),
                this._grpM
                  .req({
                    P: Gn.DEL_GRP_SYSTEM_NOTICE,
                    data: {
                      messageListToDelete: e.messageList.map(function (e) {
                        return {
                          from: D.CONV_SYSTEM,
                          messageSeq: e.clientSequence,
                          messageRandom: e.random,
                        };
                      }),
                    },
                  })
                  .then(function () {
                    Ae.l(''.concat(n, ' ok'));
                    var i = t._grpM.get(11);
                    return (
                      e.messageList.forEach(function (e) {
                        i.deleteLocalMessage(e);
                      }),
                      mn()
                    );
                  })
                  .catch(function (e) {
                    return Ae.e(''.concat(n, ' error:'), e), In(e);
                  }))
              : yn();
          },
        },
        {
          key: '_getPendencyList',
          value: function () {
            var e = this,
              t = (i =
                0 < arguments.length && void 0 !== arguments[0]
                  ? arguments[0]
                  : {}).type,
              n = i.startTime,
              i = i.limit;
            return this._grpM
              .req({
                P: Gn.GET_GRP_PENDENCY,
                data: {
                  type: void 0 === t ? void 0 : t,
                  startTime: void 0 === n ? 0 : n,
                  limit: void 0 === i ? 20 : i,
                  handleAccount: this._grpM.getMyUserID(),
                },
              })
              .then(function (t) {
                var n = t.data.pendencyList;
                return 0 !== t.data.nextStartTime
                  ? e
                      ._getPendencyList({ startTime: t.data.nextStartTime })
                      .then(function (e) {
                        return [].concat(v(n), v(e));
                      })
                  : n;
              });
          },
        },
        {
          key: 'getGroupApplicationList',
          value: function () {
            var e = this;
            return this._getPendencyList().then(function (t) {
              return e
                ._getPendencyList({ type: D.GRP_COMMUNITY })
                .then(function (n) {
                  return t.push.apply(t, v(n)), e._handlePendencyResult(t);
                })
                .catch(function (n) {
                  return e._handlePendencyResult(t);
                });
            });
          },
        },
        {
          key: '_handlePendencyResult',
          value: function (e) {
            var t = this,
              n = [];
            return (
              e.forEach(function (e) {
                t.pendencyMap.set(
                  ''.concat(e.from, '_').concat(e.groupID, '_').concat(e.to),
                  e
                ),
                  0 === e.handled &&
                    n.push({
                      applicant: e.from,
                      applicantNick: e.fromUserNickName,
                      groupName: e.groupName,
                      groupID: e.groupID,
                      authentication: e.authentication,
                      messageKey: e.time,
                      applicationType: e.applicationType,
                      userID: e.userID,
                      note: e.note,
                    });
              }),
              yn({ applicationList: n })
            );
          },
        },
        {
          key: '_onReceivedGroupSystemNotice',
          value: function (e) {
            var t = this,
              n = e.result;
            e.isInstantMessage &&
              n.forEach(function (e) {
                switch (e.payload.operationType) {
                  case 1:
                  case 3:
                  case 6:
                  case 11:
                  case 12:
                  case 15:
                    break;
                  case 2:
                    t._onApplyJoinGroup(e);
                    break;
                  case 4:
                    t._onMemberKicked(e);
                    break;
                  case 5:
                    t._onGroupDismissed(e);
                    break;
                  case 7:
                    t._onInviteGroup(e);
                    break;
                  case 8:
                    t._onQuitGroup(e);
                    break;
                  case 9:
                    t._onSetManager(e);
                    break;
                  case 10:
                    t._onDeleteManager(e);
                    break;
                  case 20:
                    t._onMessageRemindTypeSynced(e);
                    break;
                  case 21:
                    t._grpM.onAVChatRoomMemberBanned(e);
                }
              });
          },
        },
        {
          key: '_onApplyJoinGroup',
          value: function (e) {
            var t = this,
              n = (e = e.payload.groupProfile).groupID,
              i = ((e = e.groupType), this._grpM.hasLocalGroup(n));
            Ae.l(
              ''
                .concat(this._n, '._onApplyJoinGroup groupID:')
                .concat(n, ' groupType:')
                .concat(e, ' hasGroup:')
                .concat(i)
            ),
              i ||
                It(e) ||
                this._grpM.getGroupProfile({ groupID: n }).then(function (e) {
                  (e = e.data.group) &&
                    (t._grpM.updateGroupMap([e]),
                    (e = !e.isSupportTopic),
                    t._grpM.emitGroupListUpdate(!0, e));
                });
          },
        },
        {
          key: '_onMemberKicked',
          value: function (e) {
            (e = e.payload.groupProfile.groupID),
              this._grpM.hasLocalGroup(e) &&
                this._grpM.deleteLocalGroupAndConversation(e);
          },
        },
        {
          key: '_onGroupDismissed',
          value: function (e) {
            e = e.payload.groupProfile.groupID;
            var t =
              (this._grpM.hasLocalGroup(e) &&
                this._grpM.deleteLocalGroupAndConversation(e),
              this._grpM._AVChatRoomHandler);
            t && t.checkJoinedAVChatRoomByID(e) && t.reset(e);
          },
        },
        {
          key: '_onInviteGroup',
          value: function (e) {
            var t = this,
              n = e.payload.groupProfile.groupID;
            (e = this._grpM.hasLocalGroup(n)),
              Ae.l(
                ''
                  .concat(this._n, '._onInviteGroup groupID:')
                  .concat(n, ' hasGroup:')
                  .concat(e)
              ),
              this._grpM.getGroupProfile({ groupID: n }).then(function () {
                t._grpM.emitGroupListUpdate(),
                  t._grpM
                    .get(11)
                    .pullMsgOnInvite(''.concat(D.CONV_GROUP).concat(n));
              });
          },
        },
        {
          key: '_onQuitGroup',
          value: function (e) {
            var t = (e = e.payload.groupProfile).groupID,
              n = ((e = e.groupType), this._grpM.hasLocalGroup(t));
            Ae.l(
              ''
                .concat(this._n, '._onQuitGroup groupID:')
                .concat(t, ' groupType:')
                .concat(e, ' hasGroup:')
                .concat(n)
            ),
              n && this._grpM.deleteLocalGroupAndConversation(t);
          },
        },
        {
          key: '_onSetManager',
          value: function (e) {
            var t = (e = e.payload.groupProfile).to;
            (e = e.groupID),
              (e = this._grpM
                .getGroupMemberHandler()
                .getLocalGroupMemberInfo(e, t)) &&
                e.updateRole(D.GRP_MBR_ROLE_ADMIN);
          },
        },
        {
          key: '_onDeleteManager',
          value: function (e) {
            var t = (e = e.payload.groupProfile).to;
            (e = e.groupID),
              (e = this._grpM
                .getGroupMemberHandler()
                .getLocalGroupMemberInfo(e, t)) &&
                e.updateRole(D.GRP_MBR_ROLE_MEMBER);
          },
        },
        {
          key: '_onMessageRemindTypeSynced',
          value: function (e) {
            var t = e.payload.groupProfile.groupID;
            (e = e.payload.messageRemindType),
              this._grpM
                .get(11)
                .onGroupMsgRemindTypeUpdated({
                  groupID: t,
                  messageRemindType: e,
                });
          },
        },
        {
          key: '_handleTopicSystemNotice',
          value: function (e) {
            var t = (n = e.groupProfile).groupID,
              n = n.topicID,
              i = (e = e.elements).operationType,
              o = e.topicIDList,
              r = ((e = e.messageRemindType), this._grpM.get(10));
            17 === i
              ? r.onTopicCreated({ groupID: t, topicID: n })
              : 18 === i
                ? r.onTopicDeleted({ groupID: t, topicIDList: o })
                : 20 === i &&
                  r.onMessageRemindTypeUpdated({
                    groupID: t,
                    topicID: n,
                    messageRemindType: e,
                  });
          },
        },
        {
          key: 'reset',
          value: function () {
            this.pendencyMap.clear();
          },
        },
      ]),
      jo),
    Co = ['relayFlag'],
    To =
      (s(Ho, An),
      (Xi = g(Ho)),
      r(Ho, [
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this.getCloudConfig('polling_interval'),
              t = this.getCloudConfig('polling_interval_plus'),
              n = this.getCloudConfig('polling_no_msg_count'),
              i = this.getCloudConfig('polling_simplified_msg'),
              o = this.getCloudConfig('paging_grp_count');
            Ae.l(
              ''.concat(this._n, '._onCloudConfig pollingInterval:').concat(e) +
                ' pollingIntervalPlus:'
                  .concat(t, ' pollingNoMessageCount:')
                  .concat(n) +
                ' pollingSimplifiedMessage:'
                  .concat(i, ' pagingGroupCount:')
                  .concat(o)
            ),
              this._AVChatRoomHandler.setPollingInterval(e),
              this._AVChatRoomHandler.setPollingIntervalPlus(t),
              this._AVChatRoomHandler.setPollingNoMessageCount(n),
              this._AVChatRoomHandler.setPollingSimplifiedMessage(i),
              this._commonGroupHandler.setPagingGroupCount(o);
          },
        },
        {
          key: 'onCheckTimer',
          value: function (e) {
            this.isLoggedIn() &&
              (this._commonGroupHandler.onCheckTimer(e),
              this._groupTipsHandler.onCheckTimer(e));
          },
        },
        {
          key: 'guardForAVChatRoom',
          value: function (e) {
            var t,
              n = this;
            return e.conversationType === D.CONV_GROUP
              ? ((t = Ct(e.to) ? Gt(e.to) : e.to),
                this.hasLocalGroup(t)
                  ? yn()
                  : this.getGroupProfile({ groupID: t }).then(function (i) {
                      return (
                        (i = i.data.group.type),
                        Ae.l(
                          ''
                            .concat(n._n, '.guardForAVChatRoom. groupID:')
                            .concat(t, ' type:')
                            .concat(i)
                        ),
                        i === D.GRP_AVCHATROOM
                          ? In(
                              new Pn({
                                code: (i = wn.MSG_SEND_FAIL_NOT_IN_AV),
                                message: n.getErrMsg(i, e.from, t),
                                data: { message: e },
                              })
                            )
                          : yn()
                      );
                    }))
              : yn();
          },
        },
        {
          key: 'checkJoinedAVChatRoomByID',
          value: function (e) {
            return this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e);
          },
        },
        {
          key: 'onNewMessage',
          value: function (e) {
            this._commonGroupHandler.onNewMessage(e);
          },
        },
        {
          key: 'updateNextMessageSeq',
          value: function (e) {
            var t,
              n = this;
            $e(e) &&
              ((t = this.get(10)),
              e.forEach(function (e) {
                var i = e.conversationID.replace(D.CONV_GROUP, '');
                Ct(i) && t.updateUnreadCountAndLastMsg(i, e.lastMessage),
                  n.groupMap.has(i) &&
                    (n.groupMap.get(i).nextMessageSeq =
                      e.lastMessage.sequence + 1);
              }));
          },
        },
        {
          key: 'onNewGroupTips',
          value: function (e) {
            this._groupTipsHandler.onNewGroupTips(e);
          },
        },
        {
          key: 'onMsgRevoked',
          value: function (e) {
            this._commonGroupHandler.onMsgRevoked(
              e,
              !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1]
            );
          },
        },
        {
          key: 'onNewGroupSystemNotice',
          value: function (e) {
            this._groupSystemNoticeHandler.onNewGroupSystemNotice(e);
          },
        },
        {
          key: 'onMsgReadNotice',
          value: function (e) {
            var t = this;
            e.dataList.forEach(function (e) {
              var n;
              (e = e.elements.groupMessageReadNotice),
                ut(e) ||
                  ((n = t.get(11)),
                  e.forEach(function (e) {
                    var i = e.groupID,
                      o = void 0 === (o = e.topicID) ? void 0 : o,
                      r =
                        ((e = e.lastMessageSeq),
                        Ae.l(
                          ''
                            .concat(t._n, '.onMsgReadNotice groupID:')
                            .concat(i, ' lastMessageSeq:')
                            .concat(e)
                        ),
                        (i = ''.concat(D.CONV_GROUP).concat(i)),
                        !0);
                    Ve(o) ||
                      ((i = ''.concat(D.CONV_GROUP).concat(o)), (r = !1)),
                      n.updateIsReadAfterReadReport({
                        conversationID: i,
                        lastMessageSeq: e,
                      }),
                      n.updateUnreadCount(i, r),
                      n.clearGroupAtInfoList(i, r);
                  }));
            });
          },
        },
        {
          key: 'onReadReceiptList',
          value: function (e) {
            var t = this;
            Ae.l(''.concat(this._n, '.onReadReceiptList options:'), e),
              e.dataList.forEach(function (e) {
                var n = e.groupProfile,
                  i = ((e = e.elements), (n = n.groupID), t.get(11));
                (e = e.readReceiptList),
                  i.updateReadReceiptInfo({ groupID: n, readReceiptList: e });
              });
          },
        },
        {
          key: 'onMsgModified',
          value: function (e) {
            Ae.l(''.concat(this._n, '.onMsgModified options:'), e);
            var n = this.get(11);
            e.dataList.forEach(function (e) {
              n.onMessageModified(
                t(
                  t({}, e),
                  {},
                  { conversationType: D.CONV_GROUP, to: e.topicID || e.groupID }
                )
              );
            });
          },
        },
        {
          key: 'deleteGroupSystemNotice',
          value: function (e) {
            this._groupSystemNoticeHandler.deleteGroupSystemNotice(e);
          },
        },
        {
          key: 'initGroupMap',
          value: function (e) {
            this.groupMap.set(e.groupID, new oo(e));
          },
        },
        {
          key: 'clearGroupMap',
          value: function () {
            this.groupMap.clear();
          },
        },
        {
          key: 'deleteGroup',
          value: function (e) {
            this.groupMap.delete(e);
          },
        },
        {
          key: 'updateGroupMap',
          value: function (e) {
            var t,
              n = this,
              i = this.get(11);
            e.forEach(function (e) {
              (t = e.groupID),
                n.groupMap.has(t)
                  ? n.groupMap.get(t).updateGroup(e)
                  : (n.groupMap.set(t, new oo(e)), i.deleteGroupRoamingInfo(t));
            });
            var o,
              r = this.getMyUserID(),
              a = T(this.groupMap);
            try {
              for (a.s(); !(o = a.n()).done; ) {
                var s = _(o.value, 2)[1];
                (s.selfInfo.userID = r),
                  'Owner' === s.selfInfo.role && (s.ownerID = r);
              }
            } catch (c) {
              a.e(c);
            } finally {
              a.f();
            }
          },
        },
        {
          key: 'getGroupMap',
          value: function () {
            return this.groupMap;
          },
        },
        {
          key: 'getLocalGroupList',
          value: function () {
            return v(this.groupMap.values()).filter(function (e) {
              return e.type !== D.GRP_ROOM && e.type !== D.GRP_LIVE;
            });
          },
        },
        {
          key: 'getLocalGroupProfile',
          value: function (e) {
            return this.groupMap.get(e);
          },
        },
        {
          key: 'sortLocalGroupList',
          value: function () {
            var e = v(this.groupMap).filter(function (e) {
              return (e = _(e, 2))[0], !Ve(e[1].lastMessage);
            });
            e.sort(function (e, t) {
              return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;
            }),
              (this.groupMap = new Map(v(e)));
          },
        },
        {
          key: 'updateGroupLastMessage',
          value: function (e) {
            this._commonGroupHandler.updateLastMsg(e);
          },
        },
        {
          key: 'emitGroupListUpdate',
          value: function () {
            var e =
                !(0 < arguments.length && void 0 !== arguments[0]) ||
                arguments[0],
              t =
                !(1 < arguments.length && void 0 !== arguments[1]) ||
                arguments[1],
              n = this.getLocalGroupList();
            e && this.emitOEvt(E.GROUP_LIST_UPDATED),
              t &&
                ((e = JSON.parse(JSON.stringify(n))),
                this.get(11).updateConvGroupProfile(e));
          },
        },
        {
          key: 'getMyNameCardByGroupID',
          value: function (e) {
            return (e = this.getLocalGroupProfile(e))
              ? e.selfInfo.nameCard
              : '';
          },
        },
        {
          key: 'isPagingGetCompleted',
          value: function () {
            return this._commonGroupHandler.isPagingGetCompleted();
          },
        },
        {
          key: 'getMsgRemindType',
          value: function (e) {
            var t = this;
            !$e(e) ||
              0 === e.length ||
              (0 !==
                (e = e.filter(function (e) {
                  return !It(t.getLocalGroupProfile(e).type);
                })).length &&
                (Ae.l(
                  ''.concat(this._n, '.getMsgRemindType groupIDList:').concat(e)
                ),
                this.getGroupProfileAdvance({
                  groupIDList: e,
                  responseFilter: { memberInfoFilter: ['MsgFlag'] },
                }).then(function (e) {
                  e = e.data.successGroupList;
                  var n = t.get(11);
                  e.forEach(function (e) {
                    n.onGroupMsgRemindTypeUpdated({
                      groupID: e.groupID,
                      messageRemindType: $e(e.members)
                        ? e.members[0].messageRemindType
                        : '',
                    });
                  });
                })));
          },
        },
        {
          key: 'getGroupList',
          value: function () {
            return this._commonGroupHandler.getGroupList();
          },
        },
        {
          key: 'syncCommunityWithTopic',
          value: function () {
            return this._commonGroupHandler.syncGroupList(!0);
          },
        },
        {
          key: 'getGroupProfile',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('getGroupProfile'),
              i = new ei('getGroupProfile'),
              o = e.groupID,
              r = e.groupCustomFieldFilter;
            return (
              Ae.l(''.concat(n, ' groupID:').concat(o)),
              (r = {
                groupIDList: [o],
                responseFilter: {
                  groupBaseInfoFilter: v(G),
                  groupCustomFieldFilter: r,
                  memberInfoFilter: [].concat(v(x), ['NameCard']),
                },
              }),
              this.getGroupProfileAdvance(r)
                .then(function (e) {
                  var r = (e = e.data).successGroupList;
                  return (
                    (e = e.failureGroupList),
                    Ae.l(''.concat(n, ' ok')),
                    0 < e.length
                      ? In(e[0])
                      : ((e =
                          It(r[0].type) && !t.hasLocalGroup(o)
                            ? new oo(r[0])
                            : (t.updateGroupMap(r), t.getLocalGroupProfile(o)))
                          .isSupportTopic ||
                          t.get(11).updateConvGroupProfile([e]),
                        i
                          .setMessage(
                            'groupID:'
                              .concat(o, ' type:')
                              .concat(e.type, ' muteAllMembers:')
                              .concat(e.muteAllMembers, ' ownerID:')
                              .concat(e.ownerID)
                          )
                          .end(),
                        mn({ group: e }))
                  );
                })
                .catch(function (t) {
                  return (
                    i
                      .setError(t)
                      .setMessage('groupID:'.concat(e.groupID))
                      .end(),
                    Ae.e(''.concat(n, ' failed. error:'), t),
                    In(t)
                  );
                })
            );
          },
        },
        {
          key: 'getGroupProfileAdvance',
          value: function (e) {
            var n,
              i = ''.concat(this._n, '.getGroupProfileAdvance'),
              o =
                ($e((a = e.groupIDList)) &&
                  50 < a.length &&
                  (this.warn('GetGroupProfileLimit'), (a.length = 50)),
                []),
              r = [],
              a =
                (a.forEach(function (e) {
                  (Mt({ groupID: e }) ? r : o).push(e);
                }),
                []);
            return (
              0 < o.length &&
                ((n = this._getGroupProfileAdvance(
                  t(t({}, e), {}, { groupIDList: o })
                )),
                a.push(n)),
              0 < r.length &&
                ((n = this._getGroupProfileAdvance(
                  t(t({}, e), {}, { groupIDList: r, relayFlag: 0 < o.length })
                )),
                a.push(n)),
              Promise.all(a)
                .then(function (e) {
                  var t = [],
                    n = [];
                  return (
                    e.forEach(function (e) {
                      t.push.apply(t, v(e.successGroupList)),
                        n.push.apply(n, v(e.failureGroupList));
                    }),
                    mn({ successGroupList: t, failureGroupList: n })
                  );
                })
                .catch(function (e) {
                  return Ae.e(''.concat(i, ' failed. error:'), e), In(e);
                })
            );
          },
        },
        {
          key: '_getGroupProfileAdvance',
          value: function (e) {
            var t = this,
              n = e.relayFlag,
              i = void 0 !== n && n,
              o = h(e, Co);
            return this.req({ P: Gn.GET_GRP_PROFILE, data: o })
              .then(function (e) {
                return (
                  Ae.l(
                    ''.concat(t._n, '._getGroupProfileAdvance ok. options:'),
                    o
                  ),
                  {
                    successGroupList: (e = e.data.groups).filter(function (e) {
                      return ut(e.errorCode) || 0 === e.errorCode;
                    }),
                    failureGroupList: e
                      .filter(function (e) {
                        return e.errorCode && 0 !== e.errorCode;
                      })
                      .map(function (e) {
                        return new Pn({
                          code: e.errorCode,
                          message: e.errorInfo,
                          data: { groupID: e.groupID },
                        });
                      }),
                  }
                );
              })
              .catch(function (t) {
                return i && Mt({ groupID: e.groupIDList[0] })
                  ? { successGroupList: [], failureGroupList: [] }
                  : In(t);
              });
          },
        },
        {
          key: 'createGroup',
          value: function (e) {
            var n = this,
              i = [
                D.GRP_PUBLIC,
                D.GRP_WORK,
                D.GRP_MEETING,
                D.GRP_AVCHATROOM,
                D.GRP_COMMUNITY,
              ],
              o = ''.concat(this._n, '.').concat('createGroup'),
              r = e.type,
              a = e.groupID;
            if (e.name && !1 === this._filterProfanity('name', e))
              return In({ code: wn.PROFANITY_FOUND });
            if (
              e.introduction &&
              !1 === this._filterProfanity('introduction', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            if (
              e.notification &&
              !1 === this._filterProfanity('notification', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            if (!i.includes(r)) return In({ code: wn.ILLEGAL_GRP_TYPE });
            if (!Mt({ type: r })) {
              if (!Ve(a) && Mt({ groupID: a }))
                return In({ code: wn.ILLEGAL_GRP_ID });
              e.isSupportTopic = void 0;
            }
            if (
              (It(r) &&
                !ut(e.memberList) &&
                0 < e.memberList.length &&
                (e.memberList = void 0),
              this._canIUseJoinOption(r) ||
                ut(e.joinOption) ||
                (e.joinOption = void 0),
              Mt({ type: r }))
            ) {
              if (!Ve(a) && !Mt({ groupID: a }))
                return In({ code: wn.ILLEGAL_GRP_ID });
              e.isSupportTopic = !0 === e.isSupportTopic ? 1 : 0;
            }
            var s = new ei('createGroup'),
              c = (Ae.l(''.concat(o, ' options:'), e), null),
              u = [];
            return this.req({
              P: Gn.CREATE_GRP,
              data: t(
                t({}, e),
                {},
                { ownerID: this.getMyUserID(), webPushFlag: 1 }
              ),
            })
              .then(function (i) {
                var r = (i = i.data).groupID,
                  a = void 0 === (i = i.overLimitUserIDList) ? [] : i;
                if (
                  ((c = r),
                  (u = a),
                  (i = 'groupType:'
                    .concat(e.type, ' groupID:')
                    .concat(r, ' overLimitUserIDList:')
                    .concat(a)),
                  s.setMessage(i).end(),
                  Ae.l(''.concat(o, ' ok. ').concat(i)),
                  e.type === D.GRP_AVCHATROOM)
                )
                  return n.getGroupProfile({ groupID: r });
                if (e.type === D.GRP_COMMUNITY && 1 === e.isSupportTopic)
                  return n.getGroupProfile({ groupID: r });
                Ve(e.memberList) ||
                  Ve(a) ||
                  (e.memberList = e.memberList.filter(function (e) {
                    return -1 === a.indexOf(e.userID);
                  })),
                  n.updateGroupMap([t(t({}, e), {}, { groupID: r })]),
                  (i = n.get(2));
                var l = '',
                  d = 0,
                  p =
                    (e.type === D.GRP_COMMUNITY
                      ? ((l = n.isIntl() ? 'Create Community' : '创建社群'),
                        (d = 1))
                      : (l = n.isIntl() ? 'Create Group' : '创建群组'),
                    n.get(4).getMyNick());
                return (
                  (l = i.createCustomMessage({
                    to: r,
                    conversationType: D.CONV_GROUP,
                    payload: {
                      data: JSON.stringify({
                        businessID: 'group_create',
                        content: l,
                        cmd: d,
                        opUser: p || n.getMyUserID(),
                        version: 4,
                      }),
                    },
                  })),
                  i.sendMessageInstance(l),
                  n.emitGroupListUpdate(),
                  n.getGroupProfile({ groupID: r })
                );
              })
              .then(function (e) {
                var t = (n = (e = e.data.group).selfInfo).nameCard,
                  n = n.joinTime;
                return (
                  e.updateSelfInfo({
                    nameCard: t,
                    joinTime: n,
                    messageRemindType: D.MSG_REMIND_ACPT_AND_NOTE,
                    role: D.GRP_MBR_ROLE_OWNER,
                  }),
                  mn({ group: e, overLimitUserIDList: u })
                );
              })
              .catch(function (i) {
                var r;
                return (
                  s.setMessage('groupType:'.concat(e.type)).setError(i).end(),
                  10010 === i.code || 10007 === i.code
                    ? (n._silentlyGetGroupProfile(i.code, c),
                      n.updateGroupMap([t(t({}, e), {}, { groupID: c })]),
                      ((r = n.getLocalGroupProfile(c)).selfInfo.role =
                        D.GRP_MBR_ROLE_OWNER),
                      mn({ group: r, overLimitUserIDList: u }))
                    : (Ae.e(''.concat(o, ' failed. error:'), i), In(i))
                );
              });
          },
        },
        {
          key: 'dismissGroup',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('dismissGroup'),
              i = 'groupID:'.concat(e);
            if (
              this.hasLocalGroup(e) &&
              this.getLocalGroupProfile(e).type === D.GRP_WORK
            )
              return In(new Pn({ code: wn.CANNOT_DISMISS_WORK }));
            var o = new ei('dismissGroup');
            return (
              o.setMessage(i),
              Ae.l(''.concat(n, ' ').concat(i)),
              this.req({ P: Gn.DISMISS_GRP, data: { groupID: e } })
                .then(function () {
                  return (
                    o.end(),
                    Ae.l(''.concat(n, ' ok')),
                    t.deleteLocalGroupAndConversation(e),
                    t.checkJoinedAVChatRoomByID(e) &&
                      t._AVChatRoomHandler.reset(e),
                    t._groupAttributesHandler.deleteLocalGroupAttributes(e),
                    mn({ groupID: e })
                  );
                })
                .catch(function (e) {
                  return (
                    o.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'updateGroupProfile',
          value: function (e) {
            var t,
              n = this,
              i = ''.concat(this._n, '.').concat('updateGroupProfile');
            if (
              (this.hasLocalGroup(e.groupID) &&
                ((t = this.getLocalGroupProfile(e.groupID).type),
                this._canIUseJoinOption(t) ||
                  ut(e.joinOption) ||
                  (Ae.w(
                    ''.concat(
                      i,
                      ' joinOption is unavailable for Work/Meeting/AVChatRoom'
                    )
                  ),
                  (e.joinOption = void 0))),
              ut(e.muteAllMembers) ||
                (e.muteAllMembers
                  ? (e.muteAllMembers = 'On')
                  : (e.muteAllMembers = 'Off')),
              e.name && !1 === this._filterProfanity('name', e))
            )
              return In({ code: wn.PROFANITY_FOUND });
            if (
              e.introduction &&
              !1 === this._filterProfanity('introduction', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            if (
              e.notification &&
              !1 === this._filterProfanity('notification', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            var o = new ei('updateGroupProfile');
            return (
              o.setMessage(JSON.stringify(e)),
              Ae.l(''.concat(i, ' groupID:').concat(e.groupID)),
              this.req({ P: Gn.UPDATE_GRP_PROFILE, data: e })
                .then(function () {
                  return (
                    o.end(),
                    Ae.l(''.concat(i, ' ok')),
                    n.hasLocalGroup(e.groupID) &&
                      n.groupMap.get(e.groupID).updateGroup(e),
                    mn({ group: n.groupMap.get(e.groupID) })
                  );
                })
                .catch(function (e) {
                  return (
                    o.setError(e).end(),
                    Ae.l(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_filterProfanity',
          value: function (e, t) {
            if (!(i = this.get(29))) return !0;
            var n = (i = i.filterText(t[e], U)).isAllowedToSend,
              i = i.modifiedText;
            return !0 === n && ((t[e] = i), !0);
          },
        },
        {
          key: 'joinGroup',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = e.type,
              o = ''.concat(this._n, '.joinGroup');
            if (i === D.GRP_WORK) return In({ code: wn.CANNOT_JOIN_WORK });
            if ((this.deleteUnjoinedAVChatRoom(n), this.hasLocalGroup(n))) {
              if (!this.isLoggedIn())
                return yn({ status: D.JOIN_STATUS_ALREADY_IN_GROUP });
              var r = new ei('applyJoinGroup');
              return this.getGroupProfile({ groupID: n })
                .then(function () {
                  return (
                    r
                      .setMessage(
                        'groupID:'
                          .concat(n, ' joinedStatus:')
                          .concat(D.JOIN_STATUS_ALREADY_IN_GROUP)
                      )
                      .end(),
                    yn({ status: D.JOIN_STATUS_ALREADY_IN_GROUP })
                  );
                })
                .catch(function (i) {
                  return (
                    r.setMessage('groupID:'.concat(n, ' unjoined')).end(),
                    Ae.w(
                      ''.concat(o, ' ').concat(n, ' was unjoined, now join!')
                    ),
                    t.groupMap.delete(n),
                    t.applyJoinGroup(e)
                  );
                });
            }
            return (
              Ae.l(''.concat(o, ' groupID:').concat(n)),
              this.isLoggedIn()
                ? this.applyJoinGroup(e)
                : this._AVChatRoomHandler.joinWithoutAuth(e)
            );
          },
        },
        {
          key: 'applyJoinGroup',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('applyJoinGroup'),
              o = e.groupID;
            if (
              !Ve(e.applyMessage) &&
              !1 === this._filterProfanity('applyMessage', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            var r = new ei('applyJoinGroup'),
              a = ((e = t({}, e)), this.canIUse(w.AV_HISTORY_MSG));
            return (
              a && (e.historyMessageFlag = 1),
              this.get(11).deleteTopicRoamingInfo(o),
              this.req({ P: Gn.APPLY_JOIN_GRP, data: e })
                .then(function (e) {
                  var t = (e = e.data).joinedStatus,
                    s = e.longPollingKey,
                    c = e.startSeq,
                    u = e.avChatRoomFlag,
                    l = e.avChatRoomKey,
                    d = e.messageList;
                  switch (
                    ((e =
                      'groupID:'
                        .concat(o, ' joinedStatus:')
                        .concat(t, ' longPollingKey:')
                        .concat(s, ' startSeq:')
                        .concat(c) +
                      ' avChatRoomFlag:'
                        .concat(u, ' canGetAVChatRoomHistoryMsg:')
                        .concat(a, ',') +
                      ' historyMsgCount:'.concat(Ve(d) ? 0 : d.length)),
                    r.setMessage(e).end(),
                    Ae.l(''.concat(i, ' ok. ').concat(e)),
                    t)
                  ) {
                    case xe:
                      return mn({ status: xe });
                    case Ge:
                      return n
                        .getGroupProfile({ groupID: o })
                        .then(function (e) {
                          return (
                            (e = e.data.group),
                            n._handleJoinResult({
                              group: e,
                              avChatRoomFlag: u,
                              longPollingKey: s,
                              startSeq: c,
                              avChatRoomKey: l,
                              messageList: d,
                            })
                          );
                        })
                        .catch(function (e) {
                          var t;
                          return 10010 === e.code || 10007 === e.code
                            ? (n._silentlyGetGroupProfile(e.code, o),
                              (t = new oo({ groupID: o })),
                              n.updateGroupMap([t]),
                              n._handleJoinResult({
                                group: t,
                                avChatRoomFlag: u,
                                longPollingKey: s,
                                startSeq: c,
                                avChatRoomKey: l,
                                messageList: d,
                              }))
                            : (Ae.e(''.concat(i, ' failed. error:'), e), In(e));
                        });
                    default:
                      var p = new Pn({ code: wn.JOIN_GRP_FAIL });
                      return Ae.e(''.concat(i, ' failed. error:'), p), In(p);
                  }
                })
                .catch(function (e) {
                  return (
                    r.setMessage('groupID:'.concat(o)).setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_handleJoinResult',
          value: function (e) {
            var t = this,
              n = e.group,
              i = e.avChatRoomFlag,
              o = e.longPollingKey,
              r = e.startSeq,
              a = e.avChatRoomKey,
              s = e.messageList,
              c = n.groupID;
            return 1 === i
              ? (this.get(11).setCompleted(''.concat(D.CONV_GROUP).concat(c)),
                this._groupAttributesHandler.initGroupAttributesCache({
                  groupID: c,
                  avChatRoomKey: a,
                }),
                this._groupCountersHandler.initGroupCountersCache({
                  groupID: c,
                  avChatRoomKey: a,
                }),
                (e = ut(o)
                  ? this._AVChatRoomHandler.handleJoinResult({ group: n })
                  : this._AVChatRoomHandler.startRunLoop({
                      group: n,
                      longPollingKey: o,
                      startSeq: r,
                    })).then(function () {
                  t._onAVChatRoomHistoryMessage(s, c);
                }),
                e)
              : (this.emitGroupListUpdate(!0, !1),
                mn({ status: Ge, group: n }));
          },
        },
        {
          key: 'quitGroup',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('quitGroup'),
              i = 'groupID:'.concat(e),
              o =
                (Ae.l(''.concat(n, ' ').concat(i)),
                this.checkJoinedAVChatRoomByID(e));
            if (!o && !this.hasLocalGroup(e))
              return In({ code: wn.MEMBER_NOT_IN_GRP });
            if (o && !this.isLoggedIn())
              return (
                Ae.l(''.concat(n, ' anonymously ok. ').concat(i)),
                this.deleteLocalGroupAndConversation(e),
                this._AVChatRoomHandler.reset(e),
                yn({ groupID: e })
              );
            var r = new ei('quitGroup');
            return (
              r.setMessage(i),
              this.req({ P: Gn.QUIT_GRP, data: { groupID: e } })
                .then(function () {
                  return (
                    r.end(),
                    Ae.l(''.concat(n, ' ok')),
                    t.deleteLocalGroupAndConversation(e),
                    o && t._AVChatRoomHandler.reset(e),
                    t._groupAttributesHandler.deleteLocalGroupAttributes(e),
                    mn({ groupID: e })
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'searchGroupByID',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('searchGroupByID'),
              n = { groupIDList: [e] },
              i = new ei('searchGroupByID');
            return (
              i.setMessage('groupID:'.concat(e)),
              Ae.l(''.concat(t, ' groupID:').concat(e)),
              this.req({ P: Gn.SEARCH_GRP, data: n })
                .then(function (e) {
                  if (0 !== (e = e.data.groupProfile)[0].errorCode)
                    throw new Pn({
                      code: e[0].errorCode,
                      message: e[0].errorInfo,
                    });
                  return (
                    i.end(),
                    Ae.l(''.concat(t, ' ok')),
                    mn({ group: new oo(e[0]) })
                  );
                })
                .catch(function (e) {
                  return (
                    i.setError(e).end(),
                    Ae.w(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'changeGroupOwner',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('changeGroupOwner');
            if (
              this.hasLocalGroup(e.groupID) &&
              this.getLocalGroupProfile(e.groupID).type === D.GRP_AVCHATROOM
            )
              return In({ code: wn.CANNOT_CHANGE_OWNER_IN_AV });
            if (e.newOwnerID === this.getMyUserID())
              return In({ code: wn.CANNOT_CHANGE_OWNER_TO_SELF });
            var i = new ei('changeGroupOwner');
            return (
              i.setMessage(
                'groupID:'
                  .concat(e.groupID, ' newOwnerID:')
                  .concat(e.newOwnerID)
              ),
              Ae.l(''.concat(n, ' groupID:').concat(e.groupID)),
              this.req({ P: Gn.CHANGE_GRP_OWNER, data: e })
                .then(function () {
                  i.end(), Ae.l(''.concat(n, ' ok'));
                  var o,
                    r = e.groupID,
                    a = e.newOwnerID,
                    s =
                      ((t.groupMap.get(r).ownerID = a),
                      t._groupMemberHandler.getLocalGroupMemberList(r));
                  return (
                    s instanceof Map &&
                      ((o = s.get(t.getMyUserID())),
                      ut(o) ||
                        (o.updateRole('Member'),
                        (t.groupMap.get(r).selfInfo.role = 'Member')),
                      (o = s.get(a)),
                      ut(o) || o.updateRole('Owner')),
                    t.emitGroupListUpdate(!0, !1),
                    mn({ group: t.groupMap.get(r) })
                  );
                })
                .catch(function (e) {
                  return (
                    i.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getGroupApplicationList',
          value: function () {
            return this._groupSystemNoticeHandler.getGroupApplicationList();
          },
        },
        {
          key: 'handleGroupApplication',
          value: function (e) {
            var t,
              n,
              i,
              o,
              r,
              a = this,
              s = ''.concat(this._n, '.').concat('handleGroupApplication'),
              c = e.handleAction,
              u = e.handleMessage,
              l = e.message,
              d = e.application,
              p =
                (l
                  ? ((t = l.payload.operatorID),
                    (n = l.payload.groupProfile.groupID),
                    (i = l.payload.authentication),
                    (o = l.payload.messageKey))
                  : d &&
                    ((t = d.applicant),
                    (n = d.groupID),
                    (i = d.authentication),
                    (o = d.messageKey)),
                Gn.HANDLE_GRP_APPLICATION),
              h =
                (d &&
                  2 === d.applicationType &&
                  ((p = Gn.HANDLE_INVITE_JOIN_GRP), (r = d.userID)),
                new ei('handleGroupApplication'));
            return (
              h.setMessage('groupID:'.concat(n)),
              Ae.l(''.concat(s, ' groupID:').concat(n)),
              this.req({
                P: p,
                data: {
                  handleAction: c,
                  handleMessage: u,
                  applicant: t,
                  invitee: r,
                  groupID: n,
                  authentication: i,
                  messageKey: o,
                },
              })
                .then(function () {
                  return (
                    h.end(),
                    Ae.l(''.concat(s, ' ok')),
                    l &&
                      a._groupSystemNoticeHandler.deleteGroupSystemNotice({
                        messageList: [e.message],
                      }),
                    mn({ group: a.getLocalGroupProfile(n) })
                  );
                })
                .catch(function (e) {
                  return (
                    h.setError(e).end(),
                    Ae.e(''.concat(s, ' failed. error'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'handleGroupInvitation',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('handleGroupInvitation'),
              o = (s = e.message.payload).groupProfile.groupID,
              r = s.authentication,
              a = s.messageKey,
              s = s.operatorID,
              c = e.handleAction,
              u = new ei('handleGroupInvitation');
            return (
              u.setMessage(
                'groupID:'
                  .concat(o, ' inviter:')
                  .concat(s, ' handleAction:')
                  .concat(c)
              ),
              Ae.l(
                ''
                  .concat(i, ' groupID:')
                  .concat(o, ' inviter:')
                  .concat(s, ' handleAction:')
                  .concat(c)
              ),
              this.req({
                P: Gn.HANDLE_GRP_INVITATION,
                data: t(
                  t({}, e),
                  {},
                  { inviter: s, groupID: o, authentication: r, messageKey: a }
                ),
              })
                .then(function () {
                  return (
                    u.end(),
                    Ae.l(''.concat(i, ' ok')),
                    n._groupSystemNoticeHandler.deleteGroupSystemNotice({
                      messageList: [e.message],
                    }),
                    mn({ group: n.getLocalGroupProfile(o) })
                  );
                })
                .catch(function (e) {
                  return (
                    u.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getGroupOnlineMemberCount',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.getGroupOnlineMemberCount'),
              i = this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e),
              o = this.hasLocalGroup(e);
            if (
              (Ae.l(
                ''
                  .concat(n, ' groupID:')
                  .concat(e, ' isAVChatRoom:')
                  .concat(i, ' has:')
                  .concat(o)
              ),
              i)
            )
              return this._AVChatRoomHandler.getGroupOnlineMemberCount(e);
            if (!o) return yn({ memberCount: 0 });
            if (((i = Date.now()), this._onlineMemberCountMap.has(e))) {
              if (
                i - (o = this._onlineMemberCountMap.get(e)).lastReqTime <=
                6e4
              )
                return yn({ memberCount: o.memberCount });
              o.lastReqTime = i;
            }
            return this.requestOnlineCount(e)
              .then(function (i) {
                return (
                  (i = void 0 === (i = i.data.memberCount) ? 0 : i),
                  t._onlineMemberCountMap.set(e, {
                    lastReqTime: Date.now(),
                    memberCount: i,
                  }),
                  Ae.l(
                    ''
                      .concat(n, ' ok. groupID:')
                      .concat(e, ' memberCount:')
                      .concat(i)
                  ),
                  yn({ memberCount: i })
                );
              })
              .catch(function (e) {
                return (
                  Ae.w(''.concat(n, ' failed. error:'), e), Promise.reject(e)
                );
              });
          },
        },
        {
          key: 'requestOnlineCount',
          value: function (e) {
            return this.req({ P: Gn.GET_ONLINE_MBR_NUM, data: { groupID: e } });
          },
        },
        {
          key: 'hasLocalGroup',
          value: function (e) {
            return this.groupMap.has(e);
          },
        },
        {
          key: 'deleteLocalGroupAndConversation',
          value: function (e) {
            var t,
              n = this.checkJoinedAVChatRoomByID(e),
              i =
                (Ae.l(
                  ''
                    .concat(
                      this._n,
                      '.deleteLocalGroupAndConversation groupID:'
                    )
                    .concat(e, ' isJoinedAVChatRoom:')
                    .concat(n)
                ),
                this.get(11)),
              o = ''.concat(D.CONV_GROUP).concat(e);
            n && i.deleteLocalConv(o),
              Mt({ groupID: e }) &&
                (t = this.getLocalGroupProfile(e)) &&
                !0 === t.isSupportTopic &&
                this.get(10).deleteTopicListInCommunity(e),
              i.clearUnreadCount(o),
              i.setCompleted(o),
              this._deleteLocalGroup(e),
              this._onlineMemberCountMap.delete(e),
              this.emitGroupListUpdate(!0, !1);
          },
        },
        {
          key: '_deleteLocalGroup',
          value: function (e) {
            this.groupMap.delete(e),
              this._groupMemberHandler.deleteGroupMemberList(e);
          },
        },
        {
          key: 'sendMessage',
          value: function (e, t) {
            return $e(e._receiverList) &&
              0 < e._receiverList.length &&
              !this.canIUse(w.MSG_TO_SPECIFIED_GRP_MBR)
              ? this.noUse('Targeted Group Message')
              : ((e = this.createGroupMessagePack(e, t)), this.req(e));
          },
        },
        {
          key: 'createGroupMessagePack',
          value: function (e, t) {
            var n = null,
              i = (t && t.offlinePushInfo && (n = t.offlinePushInfo), ''),
              o =
                (ct(e.cloudCustomData) &&
                  0 < e.cloudCustomData.length &&
                  (i = e.cloudCustomData),
                []),
              r = void (
                ze(t) &&
                ze(t.messageControlInfo) &&
                ((r = (s = t.messageControlInfo).excludedFromUnreadCount),
                (a = s.excludedFromLastMessage),
                (s = s.excludedFromContentModeration),
                !0 === r && o.push('NoUnread'),
                !0 === a && o.push('NoLastMsg'),
                !0 === s && o.push('NoMsgCheck'))
              ),
              a =
                ($e(e._receiverList) &&
                  0 < e._receiverList.length &&
                  ((r = e._receiverList),
                  50 < e._receiverList.length &&
                    ((r = e._receiverList.slice(0, 50)),
                    this.warn('ReceiverListLimit'))),
                this.isOnlineMessage(e, t) ? 1 : 0),
              s = JSON.parse(JSON.stringify(e.getElements())),
              c = ((t = this.get(17).getFileDNList()), e.getGroupAtInfoList());
            return (
              (s = {
                fromAccount: this.getMyUserID(),
                groupID: e.to,
                msgBody: si(e.type, s, t),
                cloudCustomData: i,
                random: e.random,
                priority: e.priority,
                clientSequence: e.clientSequence,
                groupAtInfo: e.type !== D.MSG_TEXT || Ve(c) ? void 0 : c,
                onlineOnlyFlag: a,
                clientTime: e.clientTime,
                offlinePushInfo: Gi(n),
                messageControlInfo: 0 == a ? o : void 0,
                needReadReceipt:
                  !0 !== e.needReadReceipt ||
                  this.isMessageFromOrToAVChatroom(e.to)
                    ? 0
                    : 1,
                receiverList: r,
                isSupportExtension: !0 === e.isSupportExtension ? 1 : 0,
                isRelayMessage: !0 === e._relayFlag ? 1 : 0,
                cmConfigID: e._cmConfigID,
              }),
              Ct(e.to) && ((s.groupID = Gt(e.to)), (s.topicID = e.to)),
              { P: Gn.SEND_GRP_MSG, tjgID: this.generateTjgID(e), data: s }
            );
          },
        },
        {
          key: 'revokeMessage',
          value: function (e) {
            var t = { groupID: e.to, msgSeqList: [{ msgSeq: e.sequence }] };
            return (
              Ct(e.to) && ((t.groupID = Gt(e.to)), (t.topicID = e.to)),
              this.req({ P: Gn.REVOKE_GRP_MSG, data: t })
            );
          },
        },
        {
          key: 'deleteMessage',
          value: function (e) {
            var t = e.to;
            return (
              (e = e.keyList),
              Ae.l(
                ''
                  .concat(this._n, '.deleteMessage groupID:')
                  .concat(t, ' count:')
                  .concat(e.length)
              ),
              (e = { groupID: t, deleter: this.getMyUserID(), keyList: e }),
              Ct(t) && ((e.groupID = Gt(t)), (e.topicID = t)),
              this.req({ P: Gn.DEL_GRP_MSG, data: e })
            );
          },
        },
        {
          key: 'modifyRemoteMessage',
          value: function (e) {
            var t = e.to,
              n = e.sequence,
              i = e.payload,
              o = e.type,
              r = void 0 === (r = e.version) ? 0 : r,
              a = ((e = e.cloudCustomData), t),
              s = void 0;
            return (
              (t = void (Ct(t) && ((a = Gt(t)), (s = t)))),
              Ft(o) && (t = []).push({ type: o, content: i }),
              this.req({
                P: Gn.MODIFY_GRP_MSG,
                data: {
                  groupID: a,
                  topicID: s,
                  sequence: n,
                  version: r,
                  elements: t,
                  cloudCustomData: e,
                },
              })
            );
          },
        },
        {
          key: 'getRoamingMessage',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('getRoamingMessage'),
              i = e.conversationID,
              o = e.groupID,
              r = ((e = e.sequence), new ei('getRoamingMessage')),
              a = 0,
              s = void 0;
            return (
              Ct(o) && (o = Gt((s = o))),
              this._computeLastSequence({ groupID: o, topicID: s, sequence: e })
                .then(function (e) {
                  return (
                    (a = e),
                    Ae.l(
                      ''
                        .concat(n, ' groupID:')
                        .concat(o, ' startSequence:')
                        .concat(a)
                    ),
                    t.req({
                      P: Gn.GET_GRP_ROAMING_MSG,
                      data: { groupID: o, count: 21, sequence: a, topicID: s },
                    })
                  );
                })
                .then(function (e) {
                  var c = (l = e.data).messageList,
                    u = l.complete,
                    l = void 0 === (l = l.invisibleSequenceList) ? [] : l,
                    d =
                      ((e = void 0 === (e = e.data.nextSequence) ? 0 : e),
                      ut(c)
                        ? Ae.l(
                            ''
                              .concat(n, ' ok. complete:')
                              .concat(u, ' nextSequence:')
                              .concat(e, ' but messageList is undefined!')
                          )
                        : Ae.l(
                            ''
                              .concat(n, ' ok. complete:')
                              .concat(u, ' nextSequence:')
                              .concat(e, ' count:')
                              .concat(c.length)
                          ),
                      r
                        .setMessage(
                          'groupID:'
                            .concat(o, ' topicID:')
                            .concat(s, ' startSequence:')
                            .concat(a, ' complete:')
                            .concat(u, ' nextSequence:')
                            .concat(e)
                        )
                        .end(),
                      t.get(11)),
                    p = [],
                    h = [];
                  return (
                    Ve(c) ||
                      ((p = d.onRoamingMessage(c, i, !0, h)),
                      d.updateIsRead(i),
                      d.patchConvLastMessage(i)),
                    (c = 2 === u || e < 1) && (d.setCompleted(i), (e = '')),
                    Ae.l(
                      ''
                        .concat(n, ' isPullingCompleted:')
                        .concat(c, ' nextReqID:')
                        .concat(e, ' storedMsgCount:')
                        .concat(p.length) +
                        ' invisibleSeqCount:'.concat(l.length)
                    ),
                    {
                      nextReqID: e + '',
                      storedMessageList: p,
                      assembledMessageList: h,
                      isPullingCompleted: c,
                    }
                  );
                })
                .catch(function (e) {
                  return (
                    r
                      .setError(e)
                      .setMessage(
                        'groupID:'
                          .concat(o, ' topicID:')
                          .concat(s, ' startSequence:')
                          .concat(a)
                      )
                      .end(),
                    Ae.w(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_getGroupIDOfMessage',
          value: function (e) {
            return e.conversationID.replace(D.CONV_GROUP, '');
          },
        },
        {
          key: 'getReadReceiptList',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('getReadReceiptList'),
              n = this._getGroupIDOfMessage(e[0]),
              i = this.getMyUserID(),
              o = e
                .filter(function (e) {
                  return e.from === i && !0 === e.needReadReceipt;
                })
                .map(function (e) {
                  return { sequence: e.sequence };
                });
            if (
              (Ae.l(
                ''
                  .concat(t, ' groupID:')
                  .concat(n, ' sequenceList:')
                  .concat(JSON.stringify(o))
              ),
              0 === o.length)
            )
              return yn({ messageList: e });
            var r = new ei('getReadReceiptList');
            return (
              r.setMessage('groupID:'.concat(n)),
              this.req({
                P: Gn.GET_READ_RECEIPT,
                data: { groupID: n, sequenceList: o },
              })
                .then(function (n) {
                  return (
                    r.end(),
                    Ae.l(''.concat(t, ' ok')),
                    $e((n = n.data.readReceiptList)) &&
                      n.forEach(function (t) {
                        e.forEach(function (e) {
                          0 === t.code &&
                            t.sequence === e.sequence &&
                            ((e.readReceiptInfo.readCount = t.readCount),
                            (e.readReceiptInfo.unreadCount = t.unreadCount));
                        });
                      }),
                    mn({ messageList: e })
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.w(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'sendReadReceipt',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('sendReadReceipt'),
              n = this._getGroupIDOfMessage(e[0]),
              i = new ei('sendReadReceipt'),
              o = (i.setMessage('groupID:'.concat(n)), this.getMyUserID());
            return 0 ===
              (e = e
                .filter(function (e) {
                  return e.from !== o && !0 === e.needReadReceipt;
                })
                .map(function (e) {
                  return { sequence: e.sequence };
                })).length
              ? In({ code: wn.READ_RECEIPT_MSG_LIST_EMPTY })
              : (Ae.l(
                  ''.concat(t, '. sequenceList:').concat(JSON.stringify(e))
                ),
                this.req({
                  P: Gn.SEND_READ_RECEIPT,
                  data: { groupID: n, sequenceList: e },
                })
                  .then(function (e) {
                    return i.end(), Ae.l(''.concat(t, ' ok')), mn();
                  })
                  .catch(function (e) {
                    return (
                      i.setError(e).end(),
                      Ae.w(''.concat(t, ' failed. error:'), e),
                      In(e)
                    );
                  }));
          },
        },
        {
          key: 'getReadReceiptDetail',
          value: function (e) {
            var t = this,
              n = e.message,
              i = e.filter,
              o = e.cursor,
              r = ((e = e.count), this._getGroupIDOfMessage(n)),
              a = n.ID,
              s =
                ((n = n.sequence),
                ''.concat(this._n, '.').concat('getReadReceiptDetail')),
              c = this._receiptDetailCompleteMap.get(a) || !1,
              u = 0 !== i && 1 !== i ? 0 : i,
              l =
                ((i = ct(o) ? o : ''),
                (o = !Ke(e) || e <= 0 || 100 <= e ? 100 : e),
                (e = 'groupID:'
                  .concat(r, ' sequence:')
                  .concat(n, ' cursor:')
                  .concat(i, ' filter:')
                  .concat(u, ' completeFlag:')
                  .concat(c)),
                Ae.l(''.concat(s, ' ').concat(e)),
                {
                  cursor: '',
                  isCompleted: !1,
                  messageID: a,
                  unreadUserIDList: [],
                  readUserIDList: [],
                }),
              d = new ei('getReadReceiptDetail');
            return (
              d.setMessage(e),
              this.req({
                P: Gn.GET_READ_RECEIPT_DETAIL,
                data: { groupID: r, sequence: n, flag: u, cursor: i, count: o },
              })
                .then(function (e) {
                  d.end();
                  var n = (e = e.data).cursor,
                    i = e.isCompleted,
                    o = e.unreadUserIDList;
                  return (
                    (e = e.readUserIDList),
                    (l.cursor = n),
                    1 === i &&
                      ((l.isCompleted = !0),
                      t._receiptDetailCompleteMap.set(a, !0)),
                    0 === u
                      ? (l.readUserIDList = e.map(function (e) {
                          return e.userID;
                        }))
                      : 1 === u &&
                        (l.unreadUserIDList = o.map(function (e) {
                          return e.userID;
                        })),
                    Ae.l(''.concat(s, ' ok')),
                    mn(l)
                  );
                })
                .catch(function (e) {
                  return (
                    d.setError(e).end(),
                    Ae.w(''.concat(s, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getRoamingMessagesHopping',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('getRoamingMessagesHopping'),
              i = e.groupID,
              o = e.count,
              r = e.sequence,
              a = e.direction,
              s = void 0;
            return ut(r) && 1 === a
              ? yn({ messageList: [], isCompleted: !0, nextMessageSeq: '' })
              : (Ct(i) && (i = Gt((s = i))),
                this._computeReqSeqHopping({
                  groupID: i,
                  topicID: s,
                  sequence: r,
                }).then(function (c) {
                  ut(r) || 1 !== a || (c = r + o - 1);
                  var u = ''
                      .concat(
                        s ? 'topicID:'.concat(s) : 'groupID:'.concat(i),
                        ' sequence:'
                      )
                      .concat(r, ' reqSeq:')
                      .concat(c, ' direction:')
                      .concat(a),
                    l =
                      (Ae.l(''.concat(n, ' ').concat(u)),
                      new ei('getRoamingMessagesHopping'));
                  return t
                    .req({
                      P: Gn.GET_GRP_ROAMING_MSG,
                      data: { groupID: i, topicID: s, count: o, sequence: c },
                    })
                    .then(function (i) {
                      var o =
                          void 0 === (o = (i = i.data).messageList) ? [] : o,
                        s = i.complete,
                        c = void 0 === (c = i.nextSequence) ? 0 : c,
                        d =
                          ((i =
                            void 0 === (i = i.invisibleSequenceList) ? [] : i),
                          'complete:'
                            .concat(s, ' nextSequence:')
                            .concat(c, ' remoteMsgCount:')
                            .concat(o.length, ' invisibleSequenceList:')
                            .concat(i)),
                        p =
                          (l.setMessage(''.concat(u, ' ').concat(d)).end(),
                          Ae.l(''.concat(n, ' ok. ').concat(d)),
                          (d = ''.concat(D.CONV_GROUP).concat(e.groupID)),
                          t.get(11));
                      return (
                        (d = p.onRoamingMessage(o, d, !1)),
                        (o = t._computeResult({
                          groupID: e.groupID,
                          direction: a,
                          sequence: r,
                          remoteMessageList: o,
                          processedMessageList: d,
                          complete: s,
                          nextSequence: c,
                          invisibleSequenceList: i,
                        })),
                        p.storeHoppingMessageList(o.messageList),
                        mn(o)
                      );
                    })
                    .catch(function (e) {
                      return (
                        l
                          .setError(e)
                          .setMessage(
                            'groupID:'
                              .concat(i, ' sequence:')
                              .concat(r, ' count:')
                              .concat(o)
                          )
                          .end(),
                        Ae.w(''.concat(n, ' failed. error:'), e),
                        In(e)
                      );
                    });
                }));
          },
        },
        {
          key: '_computeReqSeqHopping',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = void 0 === (i = e.topicID) ? void 0 : i;
            return 0 < (e = void 0 === (e = e.sequence) ? void 0 : e)
              ? Promise.resolve(e)
              : ut(i)
                ? this.getGroupProfileAdvance({
                    groupIDList: [n],
                    responseFilter: { groupBaseInfoFilter: ['NextMsgSeq'] },
                  })
                    .then(function (e) {
                      var i = 0;
                      return (
                        Ve((e = e.data.successGroupList)) ||
                          (i = e[0].nextMessageSeq - 1),
                        Ae.l(
                          ''
                            .concat(t._n, '._computeReqSeqHopping groupID:')
                            .concat(n, ' lastSequence:')
                            .concat(i, ' from remote')
                        ),
                        i
                      );
                    })
                    .catch(function (e) {
                      return In(e);
                    })
                : Promise.resolve(0);
          },
        },
        {
          key: '_computeResult',
          value: function (e) {
            var t = { messageList: [], isCompleted: !1, nextMessageSeq: '' },
              n = e.groupID,
              i = e.direction,
              o = e.sequence,
              r = void 0 === (r = e.remoteMessageList) ? [] : r,
              a = void 0 === (a = e.processedMessageList) ? [] : a,
              s = e.complete,
              c = e.nextSequence;
            if (((e = e.invisibleSequenceList), 0 === i))
              return (
                (t.nextMessageSeq = c),
                (2 === s || c < 1) &&
                  ((t.isCompleted = !0), (t.nextMessageSeq = '')),
                (t.messageList = a),
                t
              );
            if (1 === i) {
              if (Ve(r)) {
                if (Ve(e))
                  return (t.isCompleted = !0), (t.nextMessageSeq = ''), t;
                t.nextMessageSeq = e[0] + 1;
              } else
                (s = r[0].sequence),
                  (c = e[0] || 0),
                  (t.nextMessageSeq = c < s ? s + 1 : c + 1);
              return (
                a.forEach(function (e) {
                  e.sequence >= o && t.messageList.push(e);
                }),
                (Mt({ groupID: n }) || Ct(n)) &&
                  0 === t.messageList.length &&
                  r[0].sequence < o &&
                  ((t.isCompleted = !0), (t.nextMessageSeq = '')),
                t
              );
            }
          },
        },
        {
          key: 'setMessageRead',
          value: function (e) {
            var t = this,
              n = e.conversationID,
              i = e.lastMessageSeq,
              o = ''.concat(this._n, '.').concat('setMessageRead'),
              r =
                ((e = 'convID:'.concat(n, ' lastMessageSeq:').concat(i)),
                Ae.l(''.concat(o, ' ').concat(e)),
                Ke(i) || this.warn('DoNotModifyLastSeq'),
                new ei('setMessageRead')),
              a = (r.setMessage(e), n.replace(D.CONV_GROUP, '')),
              s = void 0;
            return (
              Ct(a) && (a = Gt((s = a))),
              this.req({
                P: Gn.SET_GRP_MSG_READ,
                data: { groupID: a, topicID: s, messageReadSeq: i },
              })
                .then(function () {
                  r.end(), Ae.l(''.concat(o, ' ok'));
                  var e,
                    c = t.get(11),
                    u =
                      (c.updateIsReadAfterReadReport({
                        conversationID: n,
                        lastMessageSeq: i,
                      }),
                      !0);
                  return (
                    ut(s) ||
                      ((u = !1),
                      (e = t.get(10).getLocalTopic(a, s)) &&
                        e.updateSelfInfo({ readedSequence: i })),
                    c.updateUnreadCount(n, u),
                    mn()
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.l(''.concat(o, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_computeLastSequence',
          value: function (e) {
            var t = e.groupID,
              n = void 0 === (n = e.topicID) ? void 0 : n;
            return 0 < (e = e.sequence)
              ? Promise.resolve(e)
              : ut(n)
                ? this.getGroupLastSequence(t)
                : Promise.resolve(0);
          },
        },
        {
          key: 'getGroupLastSequence',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('getGroupLastSequence'),
              n = new ei('getGroupLastSequence'),
              i = 0,
              o = '',
              r = 'groupID:'.concat(e);
            if (this.hasLocalGroup(e)) {
              var a = this.getLocalGroupProfile(e),
                s = a.lastMessage;
              if (0 < s.lastSequence && !1 === s.onlineOnlyFlag)
                return (
                  (i = s.lastSequence),
                  (o = ''
                    .concat(r, ', ')
                    .concat(i, ' from group.lastMessage.lastSequence')),
                  Ae.l(''.concat(t, ' ').concat(o)),
                  n.setMessage(o).end(),
                  Promise.resolve(i)
                );
              if (1 < a.nextMessageSeq)
                return (
                  (i = a.nextMessageSeq - 1),
                  (o = ''
                    .concat(r, ', ')
                    .concat(i, ' from group.nextMessageSeq')),
                  Ae.l(''.concat(t, ' ').concat(o)),
                  n.setMessage(o).end(),
                  Promise.resolve(i)
                );
            }
            return (s = this.get(11).getLocalConversation('GROUP'.concat(e))) &&
              s.lastMessage.lastSequence &&
              !1 === s.lastMessage.onlineOnlyFlag
              ? ((i = s.lastMessage.lastSequence),
                (o = ''
                  .concat(r, ', ')
                  .concat(i, ' from conversation.lastMessage.lastSequence')),
                Ae.l(''.concat(t, ' ').concat(o)),
                n.setMessage(o).end(),
                Promise.resolve(i))
              : this.getGroupProfileAdvance({
                  groupIDList: [e],
                  responseFilter: { groupBaseInfoFilter: ['NextMsgSeq'] },
                })
                  .then(function (e) {
                    return (
                      Ve((e = e.data.successGroupList))
                        ? Ae.w(
                            ''
                              .concat(t, ' ')
                              .concat(r, ', empty successGroupList')
                          )
                        : ((i = e[0].nextMessageSeq - 1),
                          (o = ''.concat(r, ', ').concat(i, ' from remote')),
                          Ae.l(''.concat(t, ' ').concat(o))),
                      n.setMessage(o).end(),
                      i
                    );
                  })
                  .catch(function (e) {
                    return (
                      n.setError(e).setMessage(r).end(),
                      Ae.w(''.concat(t, ' failed. error:'), e),
                      In(e)
                    );
                  });
          },
        },
        {
          key: 'isMessageFromOrToAVChatroom',
          value: function (e) {
            return this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e);
          },
        },
        {
          key: 'hasJoinedAVChatRoom',
          value: function () {
            return this._AVChatRoomHandler.hasJoinedAVChatRoom();
          },
        },
        {
          key: 'getJoinedAVChatRoom',
          value: function () {
            return this._AVChatRoomHandler.getJoinedAVChatRoom();
          },
        },
        {
          key: 'getGroupRemoteLastSeq',
          value: function (e) {
            return (e = this.getLocalGroupProfile(e))
              ? e.nextMessageSeq - 1
              : 1;
          },
        },
        {
          key: 'isOnlineMessage',
          value: function (e, t) {
            return !(
              !this._canIUseOnlineOnlyFlag(e) ||
              !t ||
              !0 !== t.onlineUserOnly
            );
          },
        },
        {
          key: '_canIUseOnlineOnlyFlag',
          value: function (e) {
            var t = this.getJoinedAVChatRoom();
            return (
              !t || !t.includes(e.to) || e.conversationType !== D.CONV_GROUP
            );
          },
        },
        {
          key: '_onAVChatRoomHistoryMessage',
          value: function (e, n) {
            var i;
            Ve(e) ||
              (Ae.l(
                ''
                  .concat(this._n, '._onAVChatRoomHistoryMessage groupID:')
                  .concat(n, ' count:')
                  .concat(e.length)
              ),
              (i = []),
              e.forEach(function (e) {
                i.push(t(t({}, e), {}, { isHistoryMessage: 1 }));
              }),
              this.onAVChatRoomMessage(i, n));
          },
        },
        {
          key: 'onAVChatRoomMessage',
          value: function (e) {
            this._AVChatRoomHandler.onMessage(
              e,
              1 < arguments.length && void 0 !== arguments[1]
                ? arguments[1]
                : ''
            );
          },
        },
        {
          key: 'onAVChatRoomMemberBanned',
          value: function (e) {
            this._AVChatRoomHandler.onAVChatRoomMemberBanned(e);
          },
        },
        {
          key: 'getGroupSimplifiedInfo',
          value: function (e) {
            var t = new ei('getGroupSimplifiedInfo');
            return this.getGroupProfileAdvance({
              groupIDList: [e],
              responseFilter: { groupBaseInfoFilter: ['Type', 'Name'] },
            })
              .then(function (n) {
                return (
                  (n = n.data.successGroupList),
                  t
                    .setMessage(
                      'groupID:'.concat(e, ' type:').concat(n[0].type)
                    )
                    .end(),
                  n[0]
                );
              })
              .catch(function (n) {
                t.setError(n).setMessage('groupID:'.concat(e)).end();
              });
          },
        },
        {
          key: 'setUnjoinedAVChatRoom',
          value: function (e) {
            this._unjoinedAVChatRoomList.set(e, 1);
          },
        },
        {
          key: 'deleteUnjoinedAVChatRoom',
          value: function (e) {
            this._unjoinedAVChatRoomList.has(e) &&
              this._unjoinedAVChatRoomList.delete(e);
          },
        },
        {
          key: 'isUnjoinedAVChatRoom',
          value: function (e) {
            return this._unjoinedAVChatRoomList.has(e);
          },
        },
        {
          key: 'isGroupAttributesUpdatedNotice',
          value: function (e) {
            return this._groupAttributesHandler.isGroupAttributesUpdatedNotice(
              e
            );
          },
        },
        {
          key: 'updateLocalMainSequenceOnReconnected',
          value: function () {
            this._groupAttributesHandler.updateLocalMainSequenceOnReconnected();
          },
        },
        {
          key: 'initGroupAttributes',
          value: function (e) {
            return this._groupAttributesHandler.initGroupAttributes(e);
          },
        },
        {
          key: 'setGroupAttributes',
          value: function (e) {
            return this._groupAttributesHandler.setGroupAttributes(e);
          },
        },
        {
          key: 'deleteGroupAttributes',
          value: function (e) {
            return this._groupAttributesHandler.deleteGroupAttributes(e);
          },
        },
        {
          key: 'getGroupAttributes',
          value: function (e) {
            return this._groupAttributesHandler.getGroupAttributes(e);
          },
        },
        {
          key: 'isMessageFromTopic',
          value: function (e, t) {
            return 2 === e && !Ve(t);
          },
        },
        {
          key: 'isMessageFromCommunityOfTopic',
          value: function (e, t) {
            return 2 === e && Ve(t);
          },
        },
        {
          key: 'getMessageExtensions',
          value: function (e, t) {
            return (
              Ae.l(
                ''
                  .concat(this._n, '.getMessageExtensions startSequence:')
                  .concat(t)
              ),
              this.req({
                P: Gn.GET_GRP_MSG_EXT,
                data: {
                  groupID: e.to,
                  messageSequence: e.sequence,
                  startSequence: t,
                },
              })
            );
          },
        },
        {
          key: 'modifyMsgExts',
          value: function (e, t) {
            var n =
              2 < arguments.length && void 0 !== arguments[2]
                ? arguments[2]
                : 1;
            return (
              Ae.l(''.concat(this._n, '.modifyMsgExts operateType:').concat(n)),
              this.req({
                P: Gn.MODIFY_GRP_MSG_EXT,
                data: {
                  groupID: e.to,
                  messageSequence: e.sequence,
                  extensionList: t,
                  operateType: n,
                },
              })
            );
          },
        },
        {
          key: '_genNotifyReqList',
          value: function (e) {
            for (var t, n, i, o, r = [], a = 0, s = e.length; a < s; a++)
              (t = e[a]),
                (o = this.getLocalGroupProfile(t).type),
                (n = this._getGroupLastRevokedTime(t)),
                (i = 1e3 * Se()),
                (o = {
                  notifyType: 1,
                  limit: 20,
                  type: Mt({ type: o, groupID: t }) ? D.GRP_COMMUNITY : void 0,
                  groupID: t,
                  beginTime: n,
                  endTime: i,
                }),
                r.push(o);
            return r;
          },
        },
        {
          key: 'getNotice',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.getNotice');
            0 !==
              (e = e.filter(function (e) {
                if (!t.hasLocalGroup(e)) return !1;
                var n = (e = t.getLocalGroupProfile(e)).type;
                return (e = e.isSupportTopic), !It(n) && !e;
              })).length &&
              (Ae.l(''.concat(n, ' list:').concat(e)),
              this.req({
                P: Gn.GET_GRP_NOTIFY,
                data: { notifyReqList: this._genNotifyReqList(e) },
              })
                .then(function (e) {
                  e = e.data.notifyRspList;
                  var i,
                    o,
                    r = [];
                  $e(e) &&
                    ((i = { dataList: [] }),
                    (o = ''.concat(n, ' ok.')),
                    e.forEach(function (e) {
                      var n = e.nextRevokedTime,
                        a = e.groupID,
                        s = e.notifyList;
                      (o += ' groupID:'
                        .concat(a, ' nextRevokedTime:')
                        .concat(n, ' count:')
                        .concat(s.length, '\n')),
                        i.dataList.push({
                          elements: { revokedInfos: t._genRevokedInfos(e) },
                        }),
                        0 !== n
                          ? (t._setGroupLastRevokedTime(a, n), r.push(a))
                          : t._setGroupLastRevokedTime(a, 1e3 * Se());
                    }),
                    Ae.l(o),
                    t.onMsgRevoked(i, !1)),
                    0 < r.length && t.getNotice(r);
                })
                .catch(function (e) {
                  Ae.e(''.concat(n, ' failed. error:'), e);
                }));
          },
        },
        {
          key: '_genRevokedInfos',
          value: function (e) {
            var n = e.notifyList,
              i = e.groupID,
              o = [];
            return (
              $e(n) &&
                n.forEach(function (e) {
                  o.push({
                    groupID: i,
                    sequence: e.sequence,
                    random: e.random,
                    revokerInfo: t({}, e.revokerInfo),
                  });
                }),
              o
            );
          },
        },
        {
          key: '_getGroupLastRevokedTime',
          value: function (e) {
            return this.hasLocalGroup(e)
              ? this.getLocalGroupProfile(e)._lastRevokedTime
              : 0;
          },
        },
        {
          key: '_setGroupLastRevokedTime',
          value: function (e, t) {
            this.hasLocalGroup(e) &&
              (this.getLocalGroupProfile(e)._lastRevokedTime = t);
          },
        },
        {
          key: 'isGroupCountersNotice',
          value: function (e) {
            return this._groupCountersHandler.isGroupCountersNotice(e);
          },
        },
        {
          key: 'setGroupCounters',
          value: function (e) {
            return this._groupCountersHandler.setGroupCounters(e);
          },
        },
        {
          key: 'increaseGroupCounter',
          value: function (e) {
            return this._groupCountersHandler.increaseGroupCounter(e);
          },
        },
        {
          key: 'decreaseGroupCounter',
          value: function (e) {
            return this._groupCountersHandler.decreaseGroupCounter(e);
          },
        },
        {
          key: 'getGroupCounters',
          value: function (e) {
            return this._groupCountersHandler.getGroupCounters(e);
          },
        },
        {
          key: 'getGroupMemberHandler',
          value: function () {
            return this._groupMemberHandler;
          },
        },
        {
          key: 'getGroupMemberList',
          value: function (e) {
            return this._groupMemberHandler.getGroupMemberList(e);
          },
        },
        {
          key: 'getGroupMemberProfile',
          value: function (e) {
            return this._groupMemberHandler.getGroupMemberProfile(e);
          },
        },
        {
          key: 'addGroupMember',
          value: function (e) {
            return this._groupMemberHandler.addGroupMember(e);
          },
        },
        {
          key: 'deleteGroupMember',
          value: function (e) {
            return this._groupMemberHandler.deleteGroupMember(e);
          },
        },
        {
          key: 'setGroupMemberMuteTime',
          value: function (e) {
            return this._groupMemberHandler.setGroupMemberMuteTime(e);
          },
        },
        {
          key: 'setGroupMemberRole',
          value: function (e) {
            return this._groupMemberHandler.setGroupMemberRole(e);
          },
        },
        {
          key: 'setGroupMemberNameCard',
          value: function (e) {
            return this._groupMemberHandler.setGroupMemberNameCard(e);
          },
        },
        {
          key: 'setGroupMemberCustomField',
          value: function (e) {
            return this._groupMemberHandler.setGroupMemberCustomField(e);
          },
        },
        {
          key: 'markGroupMemberList',
          value: function (e) {
            return this._groupMemberHandler.markGroupMemberList(e);
          },
        },
        {
          key: 'modifyGroupMemberInfo',
          value: function (e) {
            return this._groupMemberHandler.modifyGroupMemberInfo(e);
          },
        },
        {
          key: 'restartPolling',
          value: function () {
            this._AVChatRoomHandler.restartPolling();
          },
        },
        {
          key: 'getPollingTimerID',
          value: function (e) {
            if (!e) return -1;
            var t = this.getLocalGroupProfile(e);
            return t && It(t.type)
              ? this._AVChatRoomHandler.getPollingTimerID(e)
              : -1;
          },
        },
        {
          key: '_canIUseJoinOption',
          value: function (e) {
            return e === D.GRP_PUBLIC || Mt({ type: e });
          },
        },
        {
          key: '_silentlyGetGroupProfile',
          value: function (e, t) {
            var n = setTimeout(
              this.getGroupProfile.bind(this, { groupID: t }),
              3e3
            );
            this._timeoutIDs.push(n),
              Ae.l(
                ''
                  .concat(this._n, '._silentlyGetGroupProfile errorCode:')
                  .concat(e, ' groupID:')
                  .concat(t, ' timeoutIDs:')
                  .concat(this._timeoutIDs)
              );
          },
        },
        {
          key: '_clearTimeoutIDs',
          value: function () {
            this._timeoutIDs.forEach(function (e) {
              clearTimeout(e);
            }),
              (this._timeoutIDs = []);
          },
        },
        {
          key: 'startMessageLongPolling',
          value: function (e) {
            var t = e.groupID,
              n = e.longPollingKey,
              i =
                ((e = void 0 === (e = e.longPollingSequence) ? 1 : e),
                this.get(12).isUnlimitedAVChatRoom()),
              o =
                (this._AVChatRoomHandler.hasPollingInstance(t) &&
                  this.stopMessageLongPolling({ groupID: t }),
                this._AVChatRoomHandler.getJoinedLiveList());
            return (
              !i &&
                0 < o.length &&
                this.stopMessageLongPolling({ groupID: o[0] }),
              (i = new oo({ groupID: t, type: D.GRP_LIVE })),
              Ae.l(
                ''
                  .concat(this._n, '.startMessageLongPolling groupID:')
                  .concat(t, ' longPollingKey:')
                  .concat(n, ' longPollingSequence:')
                  .concat(e)
              ),
              this._AVChatRoomHandler.startRunLoop({
                group: i,
                longPollingKey: n,
                startSeq: e,
              })
            );
          },
        },
        {
          key: 'stopMessageLongPolling',
          value: function (e) {
            e = e.groupID;
            var t = this.get(11);
            return (
              this._AVChatRoomHandler.reset(e),
              this._deleteLocalGroup(e),
              t.deleteLocalConv(''.concat(D.CONV_GROUP).concat(e)),
              Ae.l(
                ''
                  .concat(this._n, '.stopMessageLongPolling ok, groupID:')
                  .concat(e)
              ),
              yn({ groupID: e })
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            this.groupMap.clear(),
              this._unjoinedAVChatRoomList.clear(),
              this._receiptDetailCompleteMap.clear(),
              this._onlineMemberCountMap.clear(),
              this._commonGroupHandler.reset(),
              this._groupSystemNoticeHandler.reset(),
              this._groupTipsHandler.reset(),
              this._groupAttributesHandler.reset(),
              this._groupCountersHandler.reset(),
              this._AVChatRoomHandler.reset(),
              this._groupMemberHandler.reset(),
              this._clearTimeoutIDs();
          },
        },
      ]),
      Ho),
    Eo = [
      'topicID',
      'topicName',
      'avatar',
      'introduction',
      'notification',
      'unreadCount',
      'muteAllMembers',
      'customData',
      'groupAtInfoList',
      'nextMessageSeq',
      'selfInfo',
    ],
    Do =
      (r(Bo, [
        {
          key: '_initTopic',
          value: function (e) {
            for (var t in e)
              Eo.indexOf(t) < 0 ||
                ('selfInfo' === t
                  ? this.updateSelfInfo(e[t])
                  : (this[t] = 'muteAllMembers' === t ? 1 === e[t] : e[t]));
          },
        },
        {
          key: 'updateUnreadCount',
          value: function () {
            this.unreadCount =
              0 < arguments.length && void 0 !== arguments[0]
                ? arguments[0]
                : 0;
          },
        },
        {
          key: 'updateNextMessageSeq',
          value: function (e) {
            this.nextMessageSeq = e;
          },
        },
        {
          key: 'updateLastMessage',
          value: function (e) {
            this.lastMessage = Wi(e);
          },
        },
        {
          key: 'updateGroupAtInfoList',
          value: function (e) {
            this.groupAtInfoList = JSON.parse(JSON.stringify(e));
          },
        },
        {
          key: 'updateTopic',
          value: function (e) {
            ut(e.selfInfo) || this.updateSelfInfo(e.selfInfo),
              ut(e.muteAllMembers) ||
                (this.muteAllMembers = 1 === e.muteAllMembers),
              Ze(this, e, [
                'groupID',
                'lastMessageTime',
                'selfInfo',
                'muteAllMembers',
                'lastMsg',
              ]);
          },
        },
        {
          key: 'updateSelfInfo',
          value: function (e) {
            return 0 === Ze(this.selfInfo, e, [], ['']);
          },
        },
        {
          key: 'reduceUnreadCount',
          value: function () {
            return 1 <= this.unreadCount && (--this.unreadCount, !0);
          },
        },
        {
          key: 'isLastMessageRevoked',
          value: function (e) {
            return e.sequence === this.lastMessage.lastSequence;
          },
        },
        {
          key: 'setLastMessageRevoked',
          value: function (e) {
            this.lastMessage.isRevoked = e;
          },
        },
        {
          key: 'setLastMessageRevoker',
          value: function (e) {
            this.lastMessage.revoker = e;
          },
        },
      ]),
      Bo),
    So =
      (s(Vo, An),
      (Ji = g(Vo)),
      r(Vo, [
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this.getCloudConfig('topic_cache_time'),
              t = this.getCloudConfig('topic_last_active_time');
            ut(e) || (this.TOPIC_CACHE_TIME = Number(e)),
              ut(t) || (this.TOPIC_LAST_ACTIVE_TIME = Number(t));
          },
        },
        {
          key: 'onTopicCreated',
          value: function (e) {
            var t = e.groupID;
            this.resetGetTopicTime(t), this.emitOEvt(E.TOPIC_CREATED, e);
          },
        },
        {
          key: 'onTopicDeleted',
          value: function (e) {
            var t = this,
              n = e.groupID,
              i = e.topicIDList;
            (void 0 === i ? [] : i).forEach(function (e) {
              t._deleteLocalTopic(n, e);
            }),
              this.emitOEvt(E.TOPIC_DELETED, e);
          },
        },
        {
          key: 'onTopicProfileUpdated',
          value: function (e) {
            var t = e.groupID,
              n = e.topicID;
            (n = this.getLocalTopic(t, n)) &&
              (n.updateTopic(e),
              this.emitOEvt(E.TOPIC_UPDATED, { groupID: t, topic: n }));
          },
        },
        {
          key: 'onTopicLatestMsg',
          value: function (e) {
            var t,
              n,
              i = (e = e || {}).topicLatestMessage;
            (e = e.excludedUnreadSequenceList),
              Ve(i) ||
                ((t = i.groupProfile.topicID),
                (i.conversationType = D.CONV_GROUP),
                (i.to = t),
                (n = new Ei(i)).setElement(i.elements),
                this.updateUnreadCountAndLastMsg(t, n, e));
          },
        },
        {
          key: 'onMessageRemindTypeUpdated',
          value: function (e) {
            var t,
              n = e.groupID,
              i = e.topicID,
              o = ((e = e.messageRemindType), this.getLocalTopic(n, i));
            o &&
              ((t = o.updateSelfInfo({ messageRemindType: e })) &&
                this.emitOEvt(E.TOPIC_UPDATED, { groupID: n, topic: o }),
              Ae.l(
                ''
                  .concat(this._n, '.onMessageRemindTypeUpdated topicID:')
                  .concat(i, ' messageRemindType:')
                  .concat(e, ' isUpdated:')
                  .concat(t)
              ));
          },
        },
        {
          key: 'onAtInfoUpdated',
          value: function (e) {
            var t = e.topicID,
              n = ((e = e.groupAtInfoList), Gt(t));
            (t = this.getLocalTopic(n, t)) &&
              !ut(e) &&
              (t.updateGroupAtInfoList(e),
              this.emitOEvt(E.TOPIC_UPDATED, { groupID: n, topic: t }));
          },
        },
        {
          key: 'onUnreadCountUpdatedFromConv',
          value: function (e) {
            var t =
                1 < arguments.length && void 0 !== arguments[1]
                  ? arguments[1]
                  : 0,
              n = Gt(e);
            (e = this.getLocalTopic(n, e)) &&
              e.unreadCount !== t &&
              (e.updateUnreadCount(t),
              0 === t &&
                e.updateSelfInfo({
                  readedSequence: e.lastMessage.lastSequence,
                }),
              this.emitOEvt(E.TOPIC_UPDATED, { groupID: n, topic: e }));
          },
        },
        {
          key: 'onMessageSent',
          value: function (e) {
            var t,
              n,
              i = e.groupID,
              o = e.topicID;
            (e = e.lastMessage),
              !(o = this.getLocalTopic(i, o)) ||
                ((n = (t = void 0 === (t = e.sequence) ? 0 : t) + 1) >
                  o.nextMessageSeq &&
                  (o.updateNextMessageSeq(n),
                  o.updateLastMessage(e),
                  o.updateSelfInfo({ readedSequence: t }),
                  o.updateUnreadCount(0),
                  this.emitOEvt(E.TOPIC_UPDATED, { groupID: i, topic: o })));
          },
        },
        {
          key: 'onMessageModified',
          value: function (e) {
            var t,
              n = e.to,
              i = e.time,
              o = e.sequence,
              r = e.elements,
              a = e.cloudCustomData,
              s = e.messageVersion,
              c = Gt(n),
              u = this.getLocalTopic(c, n);
            u &&
              ((t = u.lastMessage),
              Ae.d(
                ''
                  .concat(this._n, '.onMessageModified topicID:')
                  .concat(n, ' lastMessage:'),
                JSON.stringify(t),
                'options:',
                JSON.stringify(e)
              ),
              t &&
                (null === t.payload ||
                  (t.lastTime === i &&
                    t.lastSequence === o &&
                    t.version !== s)) &&
                ((t.type = r[0].type),
                (t.payload = r[0].content),
                (t.messageForShow = xt(t.type, t.payload, this.isIntl())),
                (t.cloudCustomData = a),
                (t.version = s),
                (t.lastSequence = o),
                (t.lastTime = i),
                this.emitOEvt(E.TOPIC_UPDATED, { groupID: c, topic: u })));
          },
        },
        {
          key: 'onMessageRevoked',
          value: function (e) {
            var t,
              n,
              i,
              o = this;
            0 !== e.length &&
              ((n = t = null),
              (i = !1),
              e.forEach(function (e) {
                var r = e.to;
                (n = Gt(r)),
                  (t = o.getLocalTopic(n, r)) &&
                    (t.reduceUnreadCount() && (i = !0),
                    t.isLastMessageRevoked(e) &&
                      (t.setLastMessageRevoked(!0),
                      t.setLastMessageRevoker(e.revoker),
                      (i = !0)),
                    (r = t.selfInfo.excludedUnreadSequenceList || []).push(
                      e.sequence
                    ),
                    t.updateSelfInfo({ excludedUnreadSequenceList: r }));
              }),
              i && this.emitOEvt(E.TOPIC_UPDATED, { groupID: n, topic: t }));
          },
        },
        {
          key: 'isLastMessageRevoked',
          value: function (e) {
            var t = e.topicID,
              n = ((e = e.sequence), Gt(t));
            return (
              (n = this.getLocalTopic(n, t)),
              (t = !1),
              n ? n.isLastMessageRevoked({ sequence: e }) : t
            );
          },
        },
        {
          key: 'updateUnreadCountAndLastMsg',
          value: function (e, t, n) {
            var i,
              o = Gt(e),
              r = this.getLocalTopic(o, e);
            r &&
              ((i = r.selfInfo.excludedUnreadSequenceList || []),
              ut(n) || (i = n),
              t._isExcludedFromUnreadCount && i.push(t.sequence),
              r.updateSelfInfo({ excludedUnreadSequenceList: i }),
              Ae.l(
                ''
                  .concat(this._n, '.updateUnreadCountAndLastMsg seq:')
                  .concat(t.sequence, ' lastSeq:')
                  .concat(r.lastMessage.lastSequence)
              ),
              t.sequence > r.lastMessage.lastSequence &&
                (r.updateLastMessage(t),
                (n = t.sequence + 1),
                r.updateNextMessageSeq(n),
                (i = this._computeUnreadCount(r)),
                r.updateUnreadCount(i),
                (t = this.get(11).getLocalConversation(
                  ''.concat(D.CONV_GROUP).concat(e)
                )) &&
                  t.updateUnreadCount({
                    nextUnreadCount: i,
                    isFromGetConversations: !0,
                  }),
                this.emitOEvt(E.TOPIC_UPDATED, { groupID: o, topic: r })));
          },
        },
        {
          key: 'getJoinedCommunityList',
          value: function () {
            return this.get(7).syncCommunityWithTopic();
          },
        },
        {
          key: 'createTopicInCommunity',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('createTopicInCommunity'),
              o = e.topicID;
            if (!ut(o) && !Ct(o)) return In({ code: wn.ILLEGAL_TOPIC_ID });
            if (e.topicName && !1 === this._filterProfanity('topicName', e))
              return In({ code: wn.PROFANITY_FOUND });
            if (
              e.introduction &&
              !1 === this._filterProfanity('introduction', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            if (
              e.notification &&
              !1 === this._filterProfanity('notification', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            var r = new ei('createTopicInCommunity');
            return this.req({ P: Gn.CREATE_TOPIC, data: t({}, e) })
              .then(function (o) {
                return (
                  (o = o.data.topicID),
                  r.setMessage('topicID:'.concat(o)).end(),
                  Ae.l(''.concat(i, ' ok. topicID:').concat(o)),
                  n._updateTopicMap([t(t({}, e), {}, { topicID: o })]),
                  mn({ topicID: o })
                );
              })
              .catch(function (e) {
                return (
                  r.setError(e).end(),
                  Ae.e(''.concat(i, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: 'deleteTopicFromCommunity',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('deleteTopicFromCommunity'),
              i = e.groupID,
              o =
                ((e = void 0 === (e = e.topicIDList) ? [] : e),
                new ei('deleteTopicFromCommunity'));
            return (
              o.setMessage('groupID:'.concat(i, ' topicIDList:').concat(e)),
              this.req({
                P: Gn.DEL_TOPIC,
                data: { groupID: i, topicIDList: e },
              })
                .then(function (e) {
                  e = e.data.resultList;
                  var r = [],
                    a = [];
                  return (
                    (void 0 === e ? [] : e).forEach(function (e) {
                      var t = e.topicID,
                        n = e.errorCode;
                      (e = e.errorInfo),
                        0 === n
                          ? r.push({ topicID: t })
                          : a.push({ topicID: t, code: n, message: e });
                    }),
                    (e = 'success count:'
                      .concat(r.length, ', fail count:')
                      .concat(a.length)),
                    o.setMoreMessage(e).end(),
                    Ae.l(''.concat(n, ' ok. ').concat(e)),
                    r.forEach(function (e) {
                      t._deleteLocalTopic(i, e.topicID);
                    }),
                    mn({ successTopicList: r, failureTopicList: a })
                  );
                })
                .catch(function (e) {
                  return (
                    o.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'updateTopicProfile',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('updateTopicProfile');
            if (
              (Ae.l(''.concat(i, ' options:'), e),
              e.topicName && !1 === this._filterProfanity('topicName', e))
            )
              return In({ code: wn.PROFANITY_FOUND });
            if (
              e.introduction &&
              !1 === this._filterProfanity('introduction', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            if (
              e.notification &&
              !1 === this._filterProfanity('notification', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            var o = new ei('updateTopicProfile');
            return (
              o.setMessage(
                'groupID:'.concat(e.groupID, ' topicID:').concat(e.topicID)
              ),
              ut(e.muteAllMembers) ||
                (e.muteAllMembers = !0 === e.muteAllMembers ? 'On' : 'Off'),
              this.req({ P: Gn.UPDATE_TOPIC_PROFILE, data: t({}, e) })
                .then(function () {
                  return (
                    o.end(),
                    Ae.l(''.concat(i, ' ok')),
                    n._updateTopicMap([e]),
                    mn({ topic: n.getLocalTopic(e.groupID, e.topicID) })
                  );
                })
                .catch(function (e) {
                  return (
                    o.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getTopicList',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('getTopicList'),
              o = e.groupID,
              r = 0 === (e = void 0 === (e = e.topicIDList) ? [] : e).length,
              a = new ei('getTopicList');
            if (
              (a.setMessage('groupID:'.concat(o)), this._getTopicTimeMap.has(o))
            ) {
              var s = (c = this._getTopicTimeMap.get(o)).isGetAll,
                c = c.time;
              if (
                (s || (!s && !r)) &&
                Date.now() - c < 1e3 * this.TOPIC_CACHE_TIME &&
                ((s = this._getLocalTopicList(o, e)),
                r || s.length === e.length)
              )
                return (
                  a
                    .setMoreMessage('from cache, topic count:'.concat(s.length))
                    .end(),
                  Ae.l(
                    ''
                      .concat(i, ' groupID:')
                      .concat(o, ' from cache, topic count:')
                      .concat(s.length)
                  ),
                  yn({ successTopicList: s, failureTopicList: [] })
                );
            }
            return this.req({
              P: Gn.GET_TOPIC_LIST,
              data: { groupID: o, topicIDList: e },
            })
              .then(function (e) {
                e = e.data.topicInfoList;
                var s = [],
                  c = [],
                  u = [];
                return (
                  (void 0 === e ? [] : e).forEach(function (e) {
                    var n = e.topic,
                      i = e.selfInfo,
                      o = e.errorCode,
                      r = ((e = e.errorInfo), n.topicID);
                    0 === o
                      ? (s.push(t(t({}, n), {}, { selfInfo: i })), c.push(r))
                      : u.push({ topicID: r, code: o, message: e });
                  }),
                  n._updateTopicMap(s),
                  n._handleTopicAtInfo(s),
                  (e = 'success count:'
                    .concat(c.length, ', fail count:')
                    .concat(u.length)),
                  a.setMoreMessage(e).end(),
                  Ae.l(
                    ''
                      .concat(i, ' groupID:')
                      .concat(o, ' from remote, ')
                      .concat(e)
                  ),
                  (e = []),
                  Ve(c) ||
                    (n._getTopicTimeMap.set(o, {
                      time: Date.now(),
                      isGetAll: r,
                    }),
                    (e = n._getLocalTopicList(o, c))),
                  mn({ successTopicList: e, failureTopicList: u })
                );
              })
              .catch(function (e) {
                return (
                  a.setError(e).end(),
                  Ae.e(''.concat(i, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: 'hasLocalTopic',
          value: function (e, t) {
            return !!this._topicMap.has(e) && this._topicMap.get(e).has(t);
          },
        },
        {
          key: 'getLocalTopic',
          value: function (e, t) {
            var n = null;
            return this._topicMap.has(e) ? this._topicMap.get(e).get(t) : n;
          },
        },
        {
          key: '_getLocalTopicList',
          value: function (e) {
            var t =
                1 < arguments.length && void 0 !== arguments[1]
                  ? arguments[1]
                  : [],
              n = [];
            return (
              (e = this._topicMap.get(e)) && (n = v(e.values())),
              0 === t.length
                ? n
                : n.filter(function (e) {
                    return t.includes(e.topicID);
                  })
            );
          },
        },
        {
          key: '_deleteLocalTopic',
          value: function (e, t) {
            this._topicMap.has(e) &&
              this._topicMap.get(e).has(t) &&
              (this._topicMap.get(e).delete(t),
              Ae.l(
                ''
                  .concat(this._n, '._deleteLocalTopic groupID:')
                  .concat(e, ' topicID:')
                  .concat(t)
              ));
          },
        },
        {
          key: '_updateTopicMap',
          value: function (e) {
            var t = this,
              n = [];
            e.forEach(function (e) {
              var i = e.groupID,
                o = e.topicID,
                r = null;
              t._topicMap.has(i) || t._topicMap.set(i, new Map()),
                t._topicMap.get(i).has(o)
                  ? (r = t._topicMap.get(i).get(o)).updateTopic(e)
                  : (t._getTopicLastMessage(e),
                    (r = new Do(e, t.isIntl())),
                    t._topicMap.get(i).set(o, r)),
                (e = t._computeUnreadCount(r)),
                r.updateUnreadCount(e),
                n.push({
                  conversationID: ''.concat(D.CONV_GROUP).concat(o),
                  type: D.CONV_TOPIC,
                  unreadCount: e,
                });
            }),
              0 < n.length && this.get(11).updateTopicConversation(n);
          },
        },
        {
          key: 'resetGetTopicTime',
          value: function (e) {
            var t = this;
            ut(e)
              ? v(this._getTopicTimeMap.keys()).forEach(function (e) {
                  t._getTopicTimeMap.set(e, 0);
                })
              : this._getTopicTimeMap.set(e, 0);
          },
        },
        {
          key: 'getTopicListOnReconnected',
          value: function () {
            var e = this,
              t = v(this._topicMap.keys()),
              n = [],
              i = this.get(11);
            t.forEach(function (t) {
              var o = [],
                r = e._getLocalTopicList(t);
              i.deleteTopicRoamingInfo(t),
                r.forEach(function (t) {
                  var n = void 0 === (n = t.lastMessage.lastTime) ? 0 : n;
                  Date.now() - 1e3 * n < 1e3 * e.TOPIC_LAST_ACTIVE_TIME &&
                    o.push(t.topicID);
                }),
                0 < o.length && n.push({ groupID: t, topicIDList: o });
            }),
              Ae.l(
                ''
                  .concat(
                    this._n,
                    '.getTopicListOnReconnected. active community count:'
                  )
                  .concat(n.length)
              ),
              this._relayGetTopicList(n);
          },
        },
        {
          key: '_relayGetTopicList',
          value: function (e) {
            var t,
              n,
              i,
              o = this;
            0 !== e.length &&
              ((n =
                5 < (t = e.shift()).topicIDList.length
                  ? 'topicIDList.length:'.concat(t.topicIDList.length)
                  : 'topicIDList:'.concat(t.topicIDList)),
              (i = new ei('relayGetTopicList')).setMessage(n),
              Ae.l(''.concat(this._n, '._relayGetTopicList. ').concat(n)),
              this.getTopicList(t)
                .then(function () {
                  i.end(), o._relayGetTopicList(e);
                })
                .catch(function (t) {
                  i.setError(t).end(), o._relayGetTopicList(e);
                }));
          },
        },
        {
          key: '_handleTopicAtInfo',
          value: function (e) {
            var n = this;
            0 !== e.length &&
              e.forEach(function (e) {
                var i = e.groupID,
                  o = e.topicID,
                  r = ((e = e.groupAtInfoList), []);
                ut(e) ||
                  (e.forEach(function (e) {
                    r.push(t(t({}, e), {}, { groupID: i, topicID: o }));
                  }),
                  n.get(11).onNewGroupAtTips({ dataList: r }));
              });
          },
        },
        {
          key: '_getTopicLastMessage',
          value: function (e) {
            var t;
            ut(e.lastMsg) ||
              ((t = {
                time: e.lastMsg.time,
                sequence: e.lastMsg.sequence,
                from: e.lastMsg.from,
                payload: e.lastMsg.elements[0]
                  ? e.lastMsg.elements[0].content
                  : null,
                type: e.lastMsg.elements[0] ? e.lastMsg.elements[0].type : '',
                nick: e.lastMsg.nick,
                avatar: e.lastMsg.avatar,
                version: e.lastMsg.messageVersion,
                cloudCustomData: e.lastMsg.cloudCustomData,
                isRevoked: 2 === e.lastMsg.isPlaceMessage,
                revoker: Ve(e.lastMsg.revokerInfo)
                  ? null
                  : e.lastMsg.revokerInfo.revoker,
              }),
              (e.lastMessage = t));
          },
        },
        {
          key: 'deleteTopicListInCommunity',
          value: function (e) {
            var t = this,
              n = this._getLocalTopicList(e),
              i = this.get(11);
            n.forEach(function (n) {
              (n = n.topicID),
                t._deleteLocalTopic(e, n),
                t._getTopicTimeMap.delete(e),
                i.deleteLocalConv(''.concat(D.CONV_GROUP).concat(n));
            });
          },
        },
        {
          key: '_computeUnreadCount',
          value: function (e) {
            var t,
              n = (o = e.selfInfo).excludedUnreadSequenceList,
              i = o.readedSequence,
              o = e.nextMessageSeq - e.selfInfo.readedSequence - 1;
            return (
              $e(n) &&
                ((t = 0),
                n.forEach(function (n) {
                  i < n && n <= e.nextMessageSeq - 1 && (t += 1);
                }),
                1 <= t && (o -= t)),
              o < 0 ? 0 : o
            );
          },
        },
        {
          key: '_filterProfanity',
          value: function (e, t) {
            if (!(i = this.get(29))) return !0;
            var n = (i = i.filterText(t[e], U)).isAllowedToSend,
              i = i.modifiedText;
            return !0 === n && ((t[e] = i), !0);
          },
        },
        {
          key: 'getMessageExtensions',
          value: function (e, t) {
            Ae.l(
              ''
                .concat(this._n, '.getMessageExtensions startSequence:')
                .concat(t)
            );
            var n = Gt(e.to);
            return this.req({
              P: Gn.GET_GRP_MSG_EXT,
              data: {
                groupID: n,
                topicID: e.to,
                messageSequence: e.sequence,
                startSequence: t,
              },
            });
          },
        },
        {
          key: 'modifyMsgExts',
          value: function (e, t) {
            var n =
                2 < arguments.length && void 0 !== arguments[2]
                  ? arguments[2]
                  : 1,
              i =
                (Ae.l(
                  ''.concat(this._n, '.modifyMsgExts operateType:').concat(n)
                ),
                Gt(e.to));
            return this.req({
              P: Gn.MODIFY_GRP_MSG_EXT,
              data: {
                groupID: i,
                topicID: e.to,
                messageSequence: e.sequence,
                extensionList: t,
                operateType: n,
              },
            });
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._topicMap.clear(),
              this._getTopicTimeMap.clear(),
              (this.TOPIC_CACHE_TIME = 300),
              (this.TOPIC_LAST_ACTIVE_TIME = 3600);
          },
        },
      ]),
      Vo),
    ko =
      (r(qo, [
        {
          key: 'setExpirationTime',
          value: function (e) {
            this.expirationTime = e;
          },
        },
        {
          key: 'getUserProfile',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('getUserProfile'),
              i = e.userIDList;
            (e.fromAccount = this._userM.getMyAccount()),
              100 < i.length &&
                (Ae.w(''.concat(n, ' ').concat(Bt(100))), (i.length = 100));
            for (var o, r = [], a = [], s = 0, c = i.length; s < c; s++)
              (o = i[s]),
                this._userM.isMyFriend(o) && this._contains(o)
                  ? a.push(this._getProfileFromMap(o))
                  : r.push(o);
            if (0 === r.length) return yn(a);
            e.toAccount = r;
            var u = e.bFromGetMyProfile || !1,
              l = [],
              d =
                (e.toAccount.forEach(function (e) {
                  l.push({
                    toAccount: e,
                    standardSequence: 0,
                    customSequence: 0,
                  });
                }),
                (e.userItem = l),
                new ei('getUserProfile'));
            return (
              d.setMessage(
                5 < i.length
                  ? 'userIDList.length:'.concat(i.length)
                  : 'userIDList:'.concat(i)
              ),
              this._userM
                .req({ P: Gn.GET_USER_PROFILE, data: e })
                .then(function (e) {
                  return (
                    d.end(),
                    Ae.i(''.concat(n, ' ok')),
                    (e = t._handleResponse(e).concat(a)),
                    mn(u ? e[0] : e)
                  );
                })
                .catch(function (e) {
                  return (
                    d.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getMyProfile',
          value: function () {
            var e,
              t = this._userM.getMyAccount(),
              n = ''.concat(this._n, '.getMyProfile');
            return (
              Ae.l(''.concat(n, ' myAccount:').concat(t)),
              this._fill(),
              this._contains(t)
                ? ((e = this._getProfileFromMap(t)),
                  Ae.d(
                    ''
                      .concat(n, ' from cache, myProfile:')
                      .concat(JSON.stringify(e))
                  ),
                  yn(e))
                : this.getUserProfile({
                    fromAccount: t,
                    userIDList: [t],
                    bFromGetMyProfile: !0,
                  })
            );
          },
        },
        {
          key: '_handleResponse',
          value: function (e) {
            var t = e.data.userProfileItem;
            if (!$e(t)) return [];
            for (
              var n = [], i = ((e = Date.now()), 0), o = t.length;
              i < o;
              i++
            ) {
              var r = (a = t[i]).to,
                a = a.profileItem;
              '@TLS#NOT_FOUND' !== r &&
                '' !== r &&
                ((r = this._update(
                  r,
                  this._getLatestProfileFromResponse(r, a)
                ).latestProfile),
                n.push(r));
            }
            return (
              Ae.l(''.concat(this._n, '._handleResponse cost:').concat(Kt(e))),
              n
            );
          },
        },
        {
          key: '_getLatestProfileFromResponse',
          value: function (e, t) {
            var n = { userID: e, profileCustomField: [] };
            if (!Ve(t))
              for (var i = 0, o = t.length; i < o; i++)
                if (-1 < t[i].tag.indexOf('Tag_Profile_Custom'))
                  n.profileCustomField.push({
                    key: t[i].tag,
                    value: t[i].value,
                  });
                else
                  switch (t[i].tag) {
                    case be.NICK:
                      n.nick = t[i].value;
                      break;
                    case be.GENDER:
                      n.gender = t[i].value;
                      break;
                    case be.BIRTHDAY:
                      n.birthday = t[i].value;
                      break;
                    case be.LOCATION:
                      n.location = t[i].value;
                      break;
                    case be.SELFSIGNATURE:
                      n.selfSignature = t[i].value;
                      break;
                    case be.ALLOWTYPE:
                      n.allowType = t[i].value;
                      break;
                    case be.LANGUAGE:
                      n.language = t[i].value;
                      break;
                    case be.AVATAR:
                      n.avatar = t[i].value;
                      break;
                    case be.MESSAGESETTINGS:
                      n.messageSettings = t[i].value;
                      break;
                    case be.ADMINFORBIDTYPE:
                      n.adminForbidType = t[i].value;
                      break;
                    case be.LEVEL:
                      n.level = t[i].value;
                      break;
                    case be.ROLE:
                      n.role = t[i].value;
                      break;
                    default:
                      Ae.w(
                        ''.concat(
                          this._n,
                          '._getLatestProfileFromResponse unknown tag:'
                        ),
                        t[i].tag,
                        t[i].value
                      );
                  }
            return n;
          },
        },
        {
          key: 'updateMyProfile',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('updateMyProfile');
            if (e.nick && !1 === this._userM.filterProfanity('nick', e))
              return In({ code: wn.PROFANITY_FOUND });
            if (
              e.selfSignature &&
              !1 === this._userM.filterProfanity('selfSignature', e)
            )
              return In({ code: wn.PROFANITY_FOUND });
            var i = new ei('updateMyProfile'),
              o = (i.setMessage(JSON.stringify(e)), new to().validate(e));
            if (!o.valid)
              return (
                i
                  .setCode(wn.UPDATE_PROFILE_INVALID_PARAM)
                  .setMoreMessage('info:'.concat(o.tips))
                  .end(),
                Ae.e(''.concat(n, ' info:').concat(o.tips)),
                In({ code: wn.UPDATE_PROFILE_INVALID_PARAM })
              );
            var r,
              a = [];
            for (r in e)
              Object.prototype.hasOwnProperty.call(e, r) &&
                ('profileCustomField' === r
                  ? e.profileCustomField.forEach(function (e) {
                      a.push({ tag: e.key, value: e.value });
                    })
                  : a.push({ tag: be[r.toUpperCase()], value: e[r] }));
            if (0 === a.length)
              return (
                (o = new Pn({ code: wn.UPDATE_PROFILE_NO_KEY })),
                i.setError(o).end(),
                Ae.e(''.concat(n, ' failed. error:'), o),
                In(o)
              );
            var s = this._userM.getMyAccount();
            return this._userM
              .req({
                P: Gn.UPDATE_MY_PROFILE,
                data: { fromAccount: s, profileItem: a },
              })
              .then(function (o) {
                i.end(), Ae.i(''.concat(n, ' ok'));
                var r = (a = t._update(s, e)).isProfileUpdated,
                  a = a.latestProfile;
                return (
                  !0 === r && t._userM.emitOEvt(E.PROFILE_UPDATED, [a]), yn(a)
                );
              })
              .catch(function (e) {
                return (
                  i.setError(e).end(),
                  Ae.e(''.concat(n, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: 'onProfileModified',
          value: function (e) {
            var t = e.dataList;
            if (!Ve(t)) {
              var n = t.length;
              Ae.d(
                ''
                  .concat(this._n, '.onProfileModified count:')
                  .concat(n, ' dataList:'),
                e.dataList
              );
              for (var i = [], o = 0; o < n; o++) {
                var r = t[o].userID,
                  a = (r = this._update(
                    r,
                    this._getLatestProfileFromResponse(r, t[o].profileList)
                  )).isProfileUpdated;
                (r = r.latestProfile), !0 === a && i.push(r);
              }
              0 < i.length &&
                (this._userM.emitIEvt(qi.PROFILE_UPDATED, i),
                this._userM.emitOEvt(E.PROFILE_UPDATED, i));
            }
          },
        },
        {
          key: '_fill',
          value: function () {
            if (0 === this.accountProfileMap.size) {
              for (
                var e = this._getCachedProfiles(),
                  t = Date.now(),
                  n = 0,
                  i = e.length;
                n < i;
                n++
              )
                t - e[n].lastUpdatedTime < this.expirationTime &&
                  this.accountProfileMap.set(e[n].userID, e[n]);
              Ae.l(
                ''
                  .concat(this._n, '._fill from cache, size:')
                  .concat(this.accountProfileMap.size)
              );
            }
          },
        },
        {
          key: '_update',
          value: function (e, t) {
            var n,
              i = !1,
              o = Date.now();
            return (
              this._contains(e)
                ? ((n = this._getProfileFromMap(e)),
                  t.profileCustomField &&
                    !0 === vt(n.profileCustomField, t.profileCustomField) &&
                    ((n.lastUpdatedTime = o), (i = !0)),
                  0 < Ze(n, t, ['profileCustomField']) &&
                    ((n.lastUpdatedTime = o), (i = !0)))
                : ((n = new to(t)),
                  (!this._userM.isMyFriend(e) &&
                    e !== this._userM.getMyAccount()) ||
                    ((n.lastUpdatedTime = o),
                    (i = !0),
                    this.accountProfileMap.set(e, n))),
              this._flush(e === this._userM.getMyAccount()),
              !0 === i &&
                Ae.l(
                  ''
                    .concat(this._n, '._update account:')
                    .concat(e, ' isUpdated:')
                    .concat(i)
                ),
              { isProfileUpdated: i, latestProfile: n }
            );
          },
        },
        {
          key: '_flush',
          value: function (e) {
            var t = v(this.accountProfileMap.values()),
              n = this._userM.getStorageModule();
            Ae.d(
              ''
                .concat(this._n, '._flush length:')
                .concat(t.length, ' flushAtOnce:')
                .concat(e)
            ),
              n.setItem(this.TAG, t, e);
          },
        },
        {
          key: '_contains',
          value: function (e) {
            return this.accountProfileMap.has(e);
          },
        },
        {
          key: '_getProfileFromMap',
          value: function (e) {
            return this.accountProfileMap.get(e);
          },
        },
        {
          key: '_getCachedProfiles',
          value: function () {
            var e = this._userM.getStorageModule().getItem(this.TAG);
            return Ve(e) ? [] : e;
          },
        },
        {
          key: 'onConvProfileUpdated',
          value: function (e) {
            for (var t, n, i = [], o = 0, r = e.length; o < r; o++)
              (n = (t = e[o]).userID),
                this._userM.isMyFriend(n) &&
                  (this._contains(n)
                    ? 0 < Ze(this._getProfileFromMap(n), t) && i.push(n)
                    : i.push(t.userID));
            0 !== i.length &&
              (Ae.l(
                ''
                  .concat(this._n, '.onConvProfileUpdated toAccountList:')
                  .concat(i)
              ),
              this.getUserProfile({ userIDList: i }));
          },
        },
        {
          key: 'getNickAndAvatarByUserID',
          value: function (e) {
            return this._contains(e)
              ? {
                  nick: (e = this._getProfileFromMap(e)).nick,
                  avatar: e.avatar,
                }
              : { nick: '', avatar: '' };
          },
        },
        {
          key: 'getUserNickAndAvatar',
          value: function (e) {
            var t = this,
              n = v(new Set(e)),
              i =
                (Ae.l(
                  ''
                    .concat(this._n, '.getUserNickAndAvatar userIDList.length:')
                    .concat(e.length, ' uniqueUserIDList.length:')
                    .concat(n.length)
                ),
                []);
            if (0 === e.length) return Promise.resolve(i);
            e = this._createUserIDListGroup(n);
            var o = [];
            return (
              e.forEach(function (e) {
                o.push(t.getUserProfile({ userIDList: e }));
              }),
              Promise.all(o).then(function (e) {
                return (
                  e.forEach(function (e) {
                    (e = e.data.map(function (e) {
                      return {
                        userID: e.userID,
                        nick: e.nick,
                        avatar: e.avatar,
                      };
                    })),
                      i.push.apply(i, v(e));
                  }),
                  i
                );
              })
            );
          },
        },
        {
          key: '_createUserIDListGroup',
          value: function (e) {
            for (var t = [], n = 0; n < e.length; )
              t.push(e.slice(n, (n += 100)));
            return t;
          },
        },
        {
          key: 'reset',
          value: function () {
            this._flush(!0), this.accountProfileMap.clear();
          },
        },
      ]),
      qo),
    Ro = r(function e(t) {
      i(this, e);
    }),
    Lo =
      (r(Fo, [
        {
          key: 'getLocalBlacklist',
          value: function () {
            return v(this._blacklistMap.keys());
          },
        },
        {
          key: 'getBlacklist',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.getBlacklist'),
              n = {
                fromAccount: this._userM.getMyAccount(),
                maxLimited: this.maxLimited,
                startIndex: 0,
                lastSequence: this.currentSequence,
              },
              i = new ei('getBlacklist');
            return this._userM
              .req({ P: Gn.GET_BL, data: n })
              .then(function (n) {
                var o = (n = n.data).blackListItem,
                  r = ((n = n.currentSequence), Ve(o) ? 0 : o.length);
                i.setMessage('count:'.concat(r)).end(),
                  Ae.i(''.concat(t, ' ok')),
                  (e.currentSequence = n),
                  e._handleResponse(o, !0),
                  e._userM.emitOEvt(
                    E.BLACKLIST_UPDATED,
                    v(e._blacklistMap.keys())
                  );
              })
              .catch(function (e) {
                return (
                  i.setError(e).end(),
                  Ae.e(''.concat(t, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: 'addBlacklist',
          value: function (e) {
            var t,
              n,
              i = this,
              o = new ei('addToBlacklist'),
              r = ''.concat(this._n, '.addBlacklist'),
              a = this._userM.getMyAccount();
            return 1 === e.userIDList.length && e.userIDList[0] === a
              ? ((n = this._userM.getErrMsg(
                  (t = wn.CANNOT_ADD_SELF_TO_BLACKLIST)
                )),
                o.setCode(t).setMessage(n).end(),
                (n = new Pn({ code: t })),
                Ae.e(''.concat(r, ' failed. error:'), n),
                In(n))
              : (e.userIDList.includes(a) &&
                  (e.userIDList = e.userIDList.filter(function (e) {
                    return e !== a;
                  })),
                (e.fromAccount = this._userM.getMyAccount()),
                (e.toAccount = e.userIDList),
                this._userM
                  .req({ P: Gn.ADD_TO_BL, data: e })
                  .then(function (t) {
                    return (
                      o
                        .setMessage(
                          5 < e.userIDList.length
                            ? 'userIDList.length:'.concat(e.userIDList.length)
                            : 'userIDList:'.concat(e.userIDList)
                        )
                        .end(),
                      Ae.i(''.concat(r, ' ok')),
                      i._handleResponse(t.resultItem, !0),
                      mn(v(i._blacklistMap.keys()))
                    );
                  })
                  .catch(function (e) {
                    return (
                      o.setError(e).end(),
                      Ae.e(''.concat(r, ' failed. error:'), e),
                      In(e)
                    );
                  }));
          },
        },
        {
          key: '_handleResponse',
          value: function (e, t) {
            if (!Ve(e))
              for (var n, i, o, r = 0, a = e.length; r < a; r++)
                (i = e[r].to),
                  (o = e[r].resultCode),
                  (!ut(o) && 0 !== o) ||
                    (t
                      ? (((n = this._blacklistMap.has(i)
                          ? this._blacklistMap.get(i)
                          : new Ro()).userID = i),
                        Ve(e[r].addBlackTimeStamp) ||
                          (n.timeStamp = e[r].addBlackTimeStamp),
                        this._blacklistMap.set(i, n))
                      : this._blacklistMap.has(i) &&
                        ((n = this._blacklistMap.get(i)),
                        this._blacklistMap.delete(i)));
            Ae.l(
              ''
                .concat(this._n, '._handleResponse total:')
                .concat(this._blacklistMap.size, ' bAdd:')
                .concat(t)
            );
          },
        },
        {
          key: 'deleteBlacklist',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.deleteBlacklist'),
              i = new ei('removeFromBlacklist');
            return (
              (e.fromAccount = this._userM.getMyAccount()),
              (e.toAccount = e.userIDList),
              this._userM
                .req({ P: Gn.RM_FROM_BL, data: e })
                .then(function (o) {
                  return (
                    i
                      .setMessage(
                        5 < e.userIDList.length
                          ? 'userIDList.length:'.concat(e.userIDList.length)
                          : 'userIDList:'.concat(e.userIDList)
                      )
                      .end(),
                    Ae.i(''.concat(n, ' ok')),
                    t._handleResponse(o.data.resultItem, !1),
                    mn(v(t._blacklistMap.keys()))
                  );
                })
                .catch(function (e) {
                  return (
                    i.setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'onAccountDeleted',
          value: function (e) {
            for (var t = 0, n = e.length; t < n; t++) {
              var i = e[t];
              this._blacklistMap.has(i) && this._blacklistMap.delete(i);
            }
            var o = e.length;
            0 < o &&
              (Ae.l(
                ''
                  .concat(this._n, '.onAccountDeleted count:')
                  .concat(o, ' ')
                  .concat(o < 30 ? 'userIDList:'.concat(e) : '')
              ),
              this._userM.emitOEvt(
                E.BLACKLIST_UPDATED,
                v(this._blacklistMap.keys())
              ));
          },
        },
        {
          key: 'onAccountAdded',
          value: function (e) {
            for (var t, n = [], i = 0, o = e.length; i < o; i++)
              (t = e[i]),
                this._blacklistMap.has(t) ||
                  (this._blacklistMap.set(t, new Ro({ userID: t })), n.push(t));
            0 < n.length &&
              (Ae.l(
                ''
                  .concat(this._n, '.onAccountAdded count:')
                  .concat(n.length, ' userIDList:'),
                n
              ),
              this._userM.emitOEvt(
                E.BLACKLIST_UPDATED,
                v(this._blacklistMap.keys())
              ));
          },
        },
        {
          key: 'reset',
          value: function () {
            this._blacklistMap.clear(),
              (this.startIndex = 0),
              (this.maxLimited = 100),
              (this.currentSequence = 0);
          },
        },
      ]),
      Fo),
    Ao =
      (r(xo, [
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this._userM.getCloudConfig('status_query_count'),
              t = this._userM.getCloudConfig('status_sub_count'),
              n = this._userM.getCloudConfig('status_unsub_count');
            Ae.l(
              ''
                .concat(this._n, '._onCloudConfig statusQueryCount:')
                .concat(e, ' statusSubscribeCount:')
                .concat(t) + ' statusUnsubscribeCount:'.concat(n)
            ),
              ut(e) || (this.MAX_QUERY_USER_COUNT = parseInt(e, 10)),
              ut(e) || (this.MAX_SUBSCRIBE_USER_COUNT = parseInt(t, 10)),
              ut(e) || (this.MAX_UNSUBSCRIBE_USER_COUNT = parseInt(n, 10));
          },
        },
        {
          key: 'onUserStatusUpdated',
          value: function (e) {
            e = e.dataList;
            var t = this._userM.getMyUserID(),
              n = this._userM.get(12);
            (e = e.map(function (e) {
              var i = e.to,
                o = e.statusType;
              return (
                (e = zi((e = e.customStatus))),
                i === t && n.setCustomStatus(e),
                { userID: i, statusType: o, customStatus: e }
              );
            })),
              Ae.l(
                ''
                  .concat(this._n, '.onUserStatusUpdated list:')
                  .concat(JSON.stringify(e))
              ),
              this._userM.emitOEvt(E.USER_STATUS_UPDATED, e);
          },
        },
        {
          key: 'setSelfStatus',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.setSelfStatus');
            if (!1 === this._userM.filterProfanity('customStatus', e))
              return In({ code: wn.PROFANITY_FOUND });
            var i = new ei('setSelfStatus'),
              o = e.customStatus;
            return this._userM
              .req({ P: Gn.SET_SELF_STATUS, data: { customStatus: o } })
              .then(function (e) {
                return (
                  i.setMessage('customStatus:'.concat(o)).end(),
                  Ae.l(''.concat(n, ' ok. customStatus:').concat(o)),
                  t._userM.get(12).setCustomStatus(o),
                  mn({
                    userID: t._userM.getMyUserID(),
                    statusType: 1,
                    customStatus: o,
                  })
                );
              })
              .catch(function (e) {
                return (
                  i.setError(e).end(),
                  Ae.e(''.concat(n, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: 'getUserStatus',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('getUserStatus'),
              n = void 0 === (e = e.userIDList) ? [] : e,
              i = ((e = this._userM.getMyUserID()), v(n)),
              o = void 0,
              r = i.indexOf(e);
            if (
              (-1 < r &&
                (i.splice(r, 1),
                (o = {
                  userID: e,
                  statusType: 1,
                  customStatus: this._userM.get(12).getCustomStatus(),
                })),
              0 === i.length)
            )
              return yn({ successUserList: [o], failureUserList: [] });
            if (!this._userM.canIUse(w.USER_STATUS))
              return this._userM.noUse('getUserStatus');
            i.length > this.MAX_QUERY_USER_COUNT &&
              (Ae.w(''.concat(t, ' ').concat(Bt(this.MAX_QUERY_USER_COUNT))),
              (i = n.slice(0, this.MAX_QUERY_USER_COUNT)));
            var a = new ei('getUserStatus');
            return this._userM
              .req({ P: Gn.GET_USER_STATUS, data: { userIDList: i } })
              .then(function (e) {
                var i = void 0 === (i = (e = e.data).successUserList) ? [] : i,
                  r =
                    ((e = void 0 === (e = e.failureUserList) ? [] : e),
                    (i = i.map(function (e) {
                      return {
                        userID: e.userID,
                        statusType: e.statusType,
                        customStatus: zi((e = e.customStatus)),
                      };
                    })),
                    (e = e.map(function (e) {
                      var t = e.userID,
                        n = e.invalidUserID,
                        i = e.errorCode;
                      return (
                        (e = e.errorInfo),
                        { userID: Ve(n) ? t : n, code: i, message: e }
                      );
                    })),
                    ut(o) || i.unshift(o),
                    'userID count:'
                      .concat(n.length, ', success count:')
                      .concat(i.length, ', fail count:')
                      .concat(e.length));
                return (
                  a.setMessage(''.concat(r)).end(),
                  Ae.l(''.concat(t, ' ok. ').concat(r, '.')),
                  mn({ successUserList: i, failureUserList: e })
                );
              })
              .catch(function (e) {
                return (
                  a
                    .setMessage('userID count:'.concat(n.length))
                    .setError(e)
                    .end(),
                  Ae.e(''.concat(t, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: 'subscribeUserStatus',
          value: function (e) {
            var t = 'subscribeUserStatus';
            if (!this._userM.canIUse(w.USER_STATUS))
              return this._userM.noUse(t);
            var n = ''.concat(this._n, '.').concat(t),
              i = v((e = void 0 === (e = e.userIDList) ? [] : e)),
              o =
                (i.length > this.MAX_SUBSCRIBE_USER_COUNT &&
                  (Ae.w(
                    ''.concat(n, ' ').concat(Bt(this.MAX_SUBSCRIBE_USER_COUNT))
                  ),
                  (i = e.slice(0, this.MAX_SUBSCRIBE_USER_COUNT))),
                new ei(t)),
              r = 'userID count:'.concat(e.length);
            return (
              Ae.l(''.concat(n, ' ').concat(r)),
              this._userM
                .req({ P: Gn.SUB_USER_STATUS, data: { userIDList: i } })
                .then(function (e) {
                  return (
                    (e = (void 0 === (e = e.data.failureUserList) ? [] : e).map(
                      function (e) {
                        var t = e.userID,
                          n = e.invalidUserID,
                          i = e.errorCode;
                        return (
                          (e = e.errorInfo),
                          { userID: Ve(n) ? t : n, code: i, message: e }
                        );
                      }
                    )),
                    o
                      .setMessage(''.concat(r, ' fail count:').concat(e.length))
                      .end(),
                    Ae.l(
                      ''.concat(n, ' ok. fail count:').concat(e.length, '.')
                    ),
                    mn({ failureUserList: e })
                  );
                })
                .catch(function (e) {
                  return (
                    o.setMessage(r).setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'unsubscribeUserStatus',
          value: function (e) {
            var t = 'unsubscribeUserStatus';
            if (!this._userM.canIUse(w.USER_STATUS))
              return this._userM.noUse(t);
            var n = ''.concat(this._n, '.').concat(t),
              i = v((e = void 0 === (e = (e || {}).userIDList) ? [] : e)),
              o =
                (e.length > this.MAX_UNSUBSCRIBE_USER_COUNT &&
                  (Ae.w(
                    ''
                      .concat(n, ' ')
                      .concat(Bt(this.MAX_UNSUBSCRIBE_USER_COUNT))
                  ),
                  (i = e.slice(0, this.MAX_UNSUBSCRIBE_USER_COUNT))),
                new ei(t)),
              r = 'userID count:'.concat(e.length);
            return (
              Ae.l(''.concat(n, ' ').concat(r)),
              (t = { userIDList: i }),
              0 === i.length &&
                ((t.userIDList = void 0), (t.unsubscribeAll = 1)),
              this._userM
                .req({ P: Gn.UNSUB_USER_STATUS, data: t })
                .then(function (e) {
                  return (
                    (e = (void 0 === (e = e.data.failureUserList) ? [] : e).map(
                      function (e) {
                        var t = e.userID,
                          n = e.invalidUserID,
                          i = e.errorCode;
                        return (
                          (e = e.errorInfo),
                          { userID: Ve(n) ? t : n, code: i, message: e }
                        );
                      }
                    )),
                    o
                      .setMessage(''.concat(r, ' fail count:').concat(e.length))
                      .end(),
                    Ae.l(
                      ''.concat(n, ' ok. fail count:').concat(e.length, '.')
                    ),
                    mn({ failureUserList: e })
                  );
                })
                .catch(function (e) {
                  return (
                    o.setMessage(''.concat(r)).setError(e).end(),
                    Ae.e(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            (this.MAX_QUERY_USER_COUNT = 500),
              (this.MAX_SUBSCRIBE_USER_COUNT = 100),
              (this.MAX_UNSUBSCRIBE_USER_COUNT = 100);
          },
        },
      ]),
      xo),
    Oo =
      (s(Go, An),
      (Yi = g(Go)),
      r(Go, [
        {
          key: 'onContextUpdated',
          value: function (e) {
            this._profileHandler.getMyProfile(),
              this._blacklistHandler.getBlacklist();
          },
        },
        {
          key: 'mockOnNickAvatarModified',
          value: function (e, t) {
            Ae.l(
              ''
                .concat(this._n, '._mockOnNickAvatarModified nick:')
                .concat(e, ' avatar:')
                .concat(t)
            ),
              this.onProfileModified({
                dataList: [
                  {
                    pushType: 1,
                    userID: this.getMyUserID(),
                    profileList: [
                      { tag: be.NICK, value: e },
                      { tag: be.AVATAR, value: t },
                    ],
                  },
                ],
              });
          },
        },
        {
          key: 'onProfileModified',
          value: function (e) {
            this._profileHandler.onProfileModified(e);
          },
        },
        {
          key: 'onRelationChainModified',
          value: function (e) {
            var t, n;
            Ve((e = e.dataList)) ||
              ((t = []),
              e.forEach(function (e) {
                e.blackListDelAccount &&
                  t.push.apply(t, v(e.blackListDelAccount));
              }),
              0 < t.length && this._blacklistHandler.onAccountDeleted(t),
              (n = []),
              e.forEach(function (e) {
                e.blackListAddAccount &&
                  n.push.apply(n, v(e.blackListAddAccount));
              }),
              0 < n.length && this._blacklistHandler.onAccountAdded(n));
          },
        },
        {
          key: 'onConvProfileUpdated',
          value: function (e) {
            this._profileHandler.onConvProfileUpdated(e);
          },
        },
        {
          key: 'getMyAccount',
          value: function () {
            return this.getMyUserID();
          },
        },
        {
          key: 'getMyNick',
          value: function () {
            return this._profileHandler.getNickAndAvatarByUserID(
              this.getMyUserID()
            ).nick;
          },
        },
        {
          key: 'getMyProfile',
          value: function () {
            return this._profileHandler.getMyProfile();
          },
        },
        {
          key: 'getStorageModule',
          value: function () {
            return this.get(13);
          },
        },
        {
          key: 'filterProfanity',
          value: function (e, t) {
            if (!(i = this.get(29))) return !0;
            var n = (i = i.filterText(t[e], 'user_profile')).isAllowedToSend,
              i = i.modifiedText;
            return !0 === n && ((t[e] = i), !0);
          },
        },
        {
          key: 'isMyFriend',
          value: function (e) {
            var t = this.get(8);
            return !!t && t.isMyFriend(e);
          },
        },
        {
          key: 'getUserProfile',
          value: function (e) {
            return this._profileHandler.getUserProfile(e);
          },
        },
        {
          key: 'updateMyProfile',
          value: function (e) {
            return this._profileHandler.updateMyProfile(e);
          },
        },
        {
          key: 'getNickAndAvatarByUserID',
          value: function (e) {
            return this._profileHandler.getNickAndAvatarByUserID(e);
          },
        },
        {
          key: 'getUserNickAndAvatar',
          value: function (e) {
            return this._profileHandler.getUserNickAndAvatar(e);
          },
        },
        {
          key: 'getLocalBlacklist',
          value: function () {
            return yn(this._blacklistHandler.getLocalBlacklist());
          },
        },
        {
          key: 'addBlacklist',
          value: function (e) {
            return this._blacklistHandler.addBlacklist(e);
          },
        },
        {
          key: 'deleteBlacklist',
          value: function (e) {
            return this._blacklistHandler.deleteBlacklist(e);
          },
        },
        {
          key: 'onUserStatusUpdated',
          value: function (e) {
            this._userStatusHandler.onUserStatusUpdated(e);
          },
        },
        {
          key: 'setSelfStatus',
          value: function (e) {
            return this._userStatusHandler.setSelfStatus(e);
          },
        },
        {
          key: 'getUserStatus',
          value: function (e) {
            return this._userStatusHandler.getUserStatus(e);
          },
        },
        {
          key: 'subscribeUserStatus',
          value: function (e) {
            return this._userStatusHandler.subscribeUserStatus(e);
          },
        },
        {
          key: 'unsubscribeUserStatus',
          value: function (e) {
            return this._userStatusHandler.unsubscribeUserStatus(e);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._profileHandler.reset(),
              this._blacklistHandler.reset(),
              this._userStatusHandler.reset();
          },
        },
      ]),
      Go),
    bo =
      (r(Uo, [
        {
          key: 'isLoggedIn',
          value: function () {
            return this._isLoggedIn;
          },
        },
        {
          key: 'isOversea',
          value: function () {
            return this._oversea;
          },
        },
        {
          key: 'isPrivateNetWork',
          value: function () {
            return this._proxyServer;
          },
        },
        {
          key: 'isDevMode',
          value: function () {
            return this._isDevMode;
          },
        },
        {
          key: 'isTestEnv',
          value: function () {
            return this._isTestEnv;
          },
        },
        {
          key: 'isPartialUpdatedConvs',
          value: function () {
            return this._isPartialUpdatedConvs;
          },
        },
        {
          key: 'isSingaporeSite',
          value: function () {
            return (
              (2e7 <= this._SDKAppID && this._SDKAppID < 3e7) ||
              (172e7 <= this._SDKAppID && this._SDKAppID < 173e7)
            );
          },
        },
        {
          key: 'isKoreaSite',
          value: function () {
            return (
              (3e7 <= this._SDKAppID && this._SDKAppID < 4e7) ||
              (173e7 <= this._SDKAppID && this._SDKAppID < 174e7)
            );
          },
        },
        {
          key: 'isGermanySite',
          value: function () {
            return (
              (4e7 <= this._SDKAppID && this._SDKAppID < 5e7) ||
              (174e7 <= this._SDKAppID && this._SDKAppID < 175e7)
            );
          },
        },
        {
          key: 'isIndiaSite',
          value: function () {
            return (
              (5e7 <= this._SDKAppID && this._SDKAppID < 6e7) ||
              (175e7 <= this._SDKAppID && this._SDKAppID < 176e7)
            );
          },
        },
        {
          key: 'isJapanSite',
          value: function () {
            return (
              (6e7 <= this._SDKAppID && this._SDKAppID < 7e7) ||
              (176e7 <= this._SDKAppID && this._SDKAppID < 177e7)
            );
          },
        },
        {
          key: 'isUSASite',
          value: function () {
            return (
              (7e7 <= this._SDKAppID && this._SDKAppID < 8e7) ||
              (177e7 <= this._SDKAppID && this._SDKAppID < 178e7)
            );
          },
        },
        {
          key: 'isIndonesiaSite',
          value: function () {
            return (
              (8e7 <= this._SDKAppID && this._SDKAppID < 9e7) ||
              (178e7 <= this._SDKAppID && this._SDKAppID < 179e7)
            );
          },
        },
        {
          key: 'isIntl',
          value: function () {
            return (
              0 === (e = this._SDKAppID) ||
              (2e7 <= e && e < 9e7) ||
              (172e7 <= e && e < 179e7)
            );
            var e;
          },
        },
        {
          key: 'isUnlimitedAVChatRoom',
          value: function () {
            return this._unlimitedAVChatRoom;
          },
        },
        {
          key: 'isUsingChatCore',
          value: function () {
            return this._isUsingChatCore;
          },
        },
        {
          key: 'setUsingChatCore',
          value: function (e) {
            this._isUsingChatCore = e;
          },
        },
        {
          key: 'getUIPlatform',
          value: function () {
            return this._uiPlatform;
          },
        },
        {
          key: 'setUIPlatform',
          value: function (e) {
            this._uiPlatform = e;
          },
        },
        {
          key: 'setUserID',
          value: function (e) {
            this._userID = e;
          },
        },
        {
          key: 'getUserID',
          value: function () {
            return this._userID;
          },
        },
        {
          key: 'setUserSig',
          value: function (e) {
            this._userSig = e;
          },
        },
        {
          key: 'getUserSig',
          value: function () {
            return this._userSig;
          },
        },
        {
          key: 'getSDKAppID',
          value: function () {
            return this._SDKAppID;
          },
        },
        {
          key: 'setTinyID',
          value: function (e) {
            (this._tinyID = e), (this._isLoggedIn = !0);
          },
        },
        {
          key: 'getTinyID',
          value: function () {
            return this._tinyID;
          },
        },
        {
          key: 'setCustomStatus',
          value: function (e) {
            this._customStatus = e;
          },
        },
        {
          key: 'getCustomStatus',
          value: function () {
            return this._customStatus;
          },
        },
        {
          key: 'getScene',
          value: function () {
            return ge
              ? window.tencent_cloud_im_csig_flutter_for_web_25F_cy
              : this._isTUIKit()
                ? 'tuikit'
                : this._scene;
          },
        },
        {
          key: 'getInstanceID',
          value: function () {
            return this._instanceID;
          },
        },
        {
          key: 'getStatusInstanceID',
          value: function () {
            return this._statusInstanceID;
          },
        },
        {
          key: 'setStatusInstanceID',
          value: function (e) {
            this._statusInstanceID = e;
          },
        },
        {
          key: 'getVersion',
          value: function () {
            return this._version;
          },
        },
        {
          key: 'getA2Key',
          value: function () {
            return this._a2Key;
          },
        },
        {
          key: 'setA2Key',
          value: function (e) {
            this._a2Key = e;
          },
        },
        {
          key: 'getContentType',
          value: function () {
            return this._contentType;
          },
        },
        {
          key: 'getProxyServer',
          value: function () {
            return this._proxyServer;
          },
        },
        {
          key: 'getFileUploadProxy',
          value: function () {
            return this._fileUploadProxy;
          },
        },
        {
          key: 'getFileDownloadProxy',
          value: function () {
            return this._fileDownloadProxy;
          },
        },
        {
          key: 'setApplicationID',
          value: function (e) {
            this._applicationID = e;
          },
        },
        {
          key: 'getApplicationID',
          value: function () {
            return this._applicationID;
          },
        },
        {
          key: 'setDowloadFileAuthKey',
          value: function (e) {
            this._authKey = e;
          },
        },
        {
          key: 'getDowloadFileAuthKey',
          value: function () {
            return this._authKey;
          },
        },
        {
          key: '_isTUIKit',
          value: function () {
            var e = !1,
              t = !1,
              n = !1,
              i = !1,
              o = [];
            Z && (o = Object.keys(te));
            for (
              var r = 0,
                a = (o = ee ? (X ? Object.keys(Yn) : Object.keys(window)) : o)
                  .length;
              r < a;
              r++
            )
              if (o[r].toLowerCase().includes('uikit')) {
                e = !0;
                break;
              }
            o = null;
            var s,
              c =
                (Z &&
                  !Ye(te.createGamePortal) &&
                  Ye(getApp) &&
                  !ut(getApp()) &&
                  ze((s = getApp().globalData)) &&
                  !0 === s.isTUIKit &&
                  (t = !0),
                !0 ===
                  this._m
                    .get(13)
                    .getStorageSync(
                      'TIM_'.concat(this._SDKAppID, '_isTUIKit')
                    ) && (n = !0),
                null);
            if (
              (B && !K && void 0 === Yn && __wxConfig && (c = __wxConfig.pages),
              j && void 0 === Yn && __qqConfig && (c = __qqConfig.pages),
              $e(c) && 0 < c.length)
            ) {
              for (var u = 0, l = c.length; u < l; u++)
                if (c[u].toLowerCase().includes('tui')) {
                  i = !0;
                  break;
                }
              c = null;
            }
            return e || t || n || i;
          },
        },
        {
          key: 'reset',
          value: function () {
            (this._isLoggedIn = !1),
              (this._userSig = ''),
              (this._a2Key = ''),
              (this._tinyID = ''),
              (this._customStatus = ''),
              (this._statusInstanceID = 0);
          },
        },
      ]),
      Uo),
    No = {
      'k-vue2-pc': 1,
      'k-vue2-h5': 2,
      'k-vue2-h5-uni': 3,
      'k-vue2-app-uni': 4,
      'k-vue2-mp-uni': 5,
      'k-vue2-pc-uni': 6,
      'k-vue3-pc': 7,
      'k-vue3-h5': 8,
      'k-vue3-h5-uni': 9,
      'k-vue3-app-uni': 10,
      'k-vue3-mp-uni': 11,
      'k-vue3-pc-uni': 12,
    },
    Po =
      (s(wo, An),
      ($i = g(wo)),
      r(wo, [
        {
          key: 'onCheckTimer',
          value: function (e) {
            this.isLoggedIn() && e % this._helloInterval == 0 && this._hello();
          },
        },
        {
          key: 'getPushModule',
          value: function () {
            var e = void 0,
              t = this.get(36),
              n = this.get(28);
            return (
              t.canIUseTIMPush() ? (e = t) : n.canIUseOfflinePush() && (e = n),
              e
            );
          },
        },
        {
          key: 'login',
          value: function (e) {
            if (this.isLoggedIn())
              return (
                (t = this.getMyUserID()),
                (t = this.getErrMsg('RepeatLogin', t)) && Ae.w(t),
                yn({
                  actionStatus: 'OK',
                  errorCode: 0,
                  errorInfo: t,
                  repeatLogin: !0,
                })
              );
            if (Date.now() - this._lastLoginTs <= 15e3)
              return (
                this.warn('LoggingIn', e.userID), In({ code: wn.REPEAT_LOGIN })
              );
            if (
              (Ae.l(''.concat(this._n, '.login userID:').concat(e.userID)),
              0 !== (t = this._checkLoginInfo(e)).code)
            )
              return In(t);
            var t = this.get(12),
              n = e.userID;
            return (
              (e = e.userSig),
              t.setUserID(n),
              t.setUserSig(e),
              this.get(20).updateProtocolConfig(),
              this._login()
            );
          },
        },
        {
          key: '_login',
          value: function () {
            var e = this,
              t = this.get(12),
              n = t.getScene(),
              i = 0,
              o = n,
              r =
                (n && n.startsWith('k-') && ((o = No[n]), (n = 'tuikit')),
                new ei('login')),
              a =
                (r
                  .setMessage(''.concat(o))
                  .setMoreMessage('identifier:'.concat(this.getMyUserID())),
                'tuikit' === n),
              s = 0,
              c =
                (X
                  ? (s = a
                      ? 3 === o || 4 === o || 5 === o || 6 === o
                        ? 31
                        : 9 === o || 10 === o || 11 === o || 12 === o
                          ? 32
                          : 4
                      : 3)
                  : Z
                    ? (s = H ? 36 : 'tuikit' === n ? 12 : 11)
                    : ee &&
                      (s = ge
                        ? 'flutter_web_uikit' === n
                          ? 21
                          : 20
                        : this._isReactUIKit()
                          ? fe
                            ? 25
                            : 24
                          : a
                            ? 1 === o || 2 === o
                              ? 29
                              : 7 === o || 8 === o
                                ? 30
                                : fe
                                  ? 17
                                  : 14
                            : fe
                              ? 16
                              : 13),
                r.setUIPlatform(s),
                t.setUIPlatform(s),
                (a = this.getPushModule()) &&
                  ((this._isWebUniapp = a.getUniAppPlatform()),
                  (o = this._getStatusInstanceID()),
                  t.setStatusInstanceID(o),
                  this.get(20).updateProtocolConfig(),
                  (i = a.getDeviceBrand())),
                ''.concat(this._n, '._login'));
            return (
              (this._lastLoginTs = Date.now()),
              this.req({
                P: Gn.LOGIN,
                data: { deviceBrand: i, isWebUniapp: this._isWebUniapp },
              })
                .then(function (i) {
                  e._lastLoginTs = 0;
                  var o = Date.now(),
                    a = null,
                    s = (g = i.data).a2Key,
                    u = g.tinyID,
                    l = g.helloInterval,
                    d = g.instanceID,
                    p = g.timeStamp,
                    h = void 0 === (h = g.customStatus) ? '' : h,
                    f = g.purchaseBits,
                    g = void 0 === (g = g.authKey) ? '' : g,
                    _ = 1e3 * p,
                    v = o - r.getStartTs();
                  if (
                    ((v = _ + parseInt(v / 2) - o),
                    (o = r.getStartTs() + v),
                    r.start(o),
                    (o = _),
                    (De = v),
                    (_ = new Date()).setTime(o),
                    Ae.i(
                      'baseTime from server:'.concat(_, ' offset:').concat(De)
                    ),
                    !u)
                  )
                    throw (
                      ((a = new Pn({ code: wn.NO_TINYID })),
                      r.setError(a).end(),
                      a)
                    );
                  if (!s)
                    throw (
                      ((a = new Pn({ code: wn.NO_A2KEY })),
                      r.setError(a).end(),
                      a)
                    );
                  return (
                    (o = e.get(21).getSocketID()),
                    (_ = zi(h)),
                    (a =
                      'socketID:'
                        .concat(o, ' scene:')
                        .concat(n, ' helloInterval:')
                        .concat(l, ' instanceID:')
                        .concat(d, ' timeStamp:')
                        .concat(p) +
                      ' offset:'.concat(v, ' customStatus:').concat(_)),
                    Ae.l(''.concat(c, ' ok. ').concat(a)),
                    (h = ''),
                    (o = ''),
                    B &&
                      Ye(te.getAccountInfoSync) &&
                      (p = te.getAccountInfoSync().miniProgram) &&
                      ((h = p.appId), (o = p.envVersion)),
                    r
                      .setMoreMessage(
                        ''
                          .concat(a, ' href:')
                          .concat(ee ? window.location.href : '', ' mpAppId:')
                          .concat(h, ' envVersion:')
                          .concat(o, ' authKey:')
                          .concat(g)
                      )
                      .end(),
                    t.setA2Key(s),
                    t.setTinyID(u),
                    t.setStatusInstanceID(d),
                    t.setCustomStatus(_),
                    t.setDowloadFileAuthKey(g),
                    f &&
                      e
                        .get(27)
                        .onPushedConfig({
                          errorCode: 0,
                          expiredTime: 0,
                          purchaseBits: f,
                        }),
                    e.get(20).updateProtocolConfig(),
                    e.emitIEvt(qi.A2KEY_AND_TINYID_UPDATED),
                    (e._helloInterval = l),
                    e.triggerReady(),
                    (v = e.getPushModule()) &&
                      (Yn.setStorageSync('timUniAppInstanceID', d), v.init()),
                    e._fetchCloudControlConfig(),
                    e.get(29).init(),
                    i
                  );
                })
                .catch(function (t) {
                  return (
                    r.setError(t).end(!0),
                    e._m.setNotReadyReason(wn.LOGIN_FAILED),
                    Ae.e(''.concat(c, ' failed. error:'), t),
                    (e._lastLoginTs = 0),
                    e._m.onLoginFailed(),
                    In(t)
                  );
                })
            );
          },
        },
        {
          key: 'logout',
          value: function () {
            var e = this,
              t =
                0 < arguments.length && void 0 !== arguments[0]
                  ? arguments[0]
                  : 0,
              n = ''.concat(this._n, '.logout'),
              i = this.isLoggedIn();
            return (
              Ae.i(''.concat(n, ' type:').concat(t, ' isLoggedIn:').concat(i)),
              i
                ? (new ei('logout')
                    .setMessage('identifier:'.concat(this.getMyUserID()))
                    .end(!0),
                  0 === t && this._m.setNotReadyReason(wn.LOGGED_OUT),
                  this.req({ P: Gn.LOGOUT, data: { type: t } })
                    .then(function () {
                      return e.resetReady(), yn({});
                    })
                    .catch(function (t) {
                      return (
                        Ae.e(''.concat(n, ' error:'), t), e.resetReady(), yn({})
                      );
                    }))
                : In({ code: wn.USER_NOT_LOGGED_IN })
            );
          },
        },
        {
          key: 'getLoginUser',
          value: function () {
            return this.isLoggedIn() ? this.getMyUserID() : '';
          },
        },
        {
          key: '_fetchCloudControlConfig',
          value: function () {
            this.get(23).fetchConfig();
          },
        },
        {
          key: '_getStatusInstanceID',
          value: function () {
            return Yn.getStorageSync('timUniAppInstanceID') || 0;
          },
        },
        {
          key: '_hello',
          value: function () {
            var e = this;
            (this._lastWsHelloTs = Date.now()),
              this.req({
                P: Gn.HELLO,
                data: { isWebUniapp: this._isWebUniapp },
              }).catch(function (t) {
                Ae.w(''.concat(e._n, '._hello error:'), t);
              });
          },
        },
        {
          key: 'getLastWsHelloTs',
          value: function () {
            return this._lastWsHelloTs;
          },
        },
        {
          key: '_checkLoginInfo',
          value: function (e) {
            var t = 0;
            return (
              Ve(this.get(12).getSDKAppID())
                ? (t = wn.NO_SDKAPPID)
                : Ve(e.userID)
                  ? (t = wn.NO_IDENTIFIER)
                  : Ve(e.userSig) && (t = wn.NO_USERSIG),
              { code: t }
            );
          },
        },
        {
          key: '_isReactUIKit',
          value: function () {
            return (
              ee && void 0 !== window.tencent_cloud_im_csig_react_uikit_23F_xa
            );
          },
        },
        {
          key: 'onMultipleAccountKickedOut',
          value: function (e) {
            var t = this;
            new ei('kickedOut')
              .setMessage(
                'type:'
                  .concat(D.KICKED_OUT_MULT_ACCOUNT, ' newInstanceInfo:')
                  .concat(JSON.stringify(e))
              )
              .end(!0),
              Ae.w(
                ''
                  .concat(this._n, '.onMultipleAccountKickedOut userID:')
                  .concat(this.getMyUserID(), ' newInstanceInfo:'),
                e
              ),
              this.logout(1).then(function () {
                t.emitOEvt(E.KICKED_OUT, { type: D.KICKED_OUT_MULT_ACCOUNT }),
                  t._m.setNotReadyReason(wn.KICKED_OUT_MULT_ACCOUNT),
                  t._m.reset();
              });
          },
        },
        {
          key: 'onMultipleDeviceKickedOut',
          value: function (e) {
            var t = this;
            new ei('kickedOut')
              .setMessage(
                'type:'
                  .concat(D.KICKED_OUT_MULT_DEVICE, ' newInstanceInfo:')
                  .concat(JSON.stringify(e))
              )
              .end(!0),
              Ae.w(
                ''
                  .concat(this._n, '.onMultipleDeviceKickedOut userID:')
                  .concat(this.getMyUserID(), ' newInstanceInfo:'),
                e
              ),
              this.logout(1).then(function () {
                t.emitOEvt(E.KICKED_OUT, { type: D.KICKED_OUT_MULT_DEVICE }),
                  t._m.setNotReadyReason(wn.KICKED_OUT_MULT_DEVICE),
                  t._m.reset();
              });
          },
        },
        {
          key: 'onUserSigExpired',
          value: function () {
            new ei('kickedOut')
              .setMessage(D.KICKED_OUT_USERSIG_EXPIRED)
              .end(!0),
              Ae.w(
                ''
                  .concat(this._n, '.onUserSigExpired userID:')
                  .concat(this.getMyUserID())
              ),
              0 !== this.get(12).getStatusInstanceID() &&
                (this.emitOEvt(E.KICKED_OUT, {
                  type: D.KICKED_OUT_USERSIG_EXPIRED,
                }),
                this._m.setNotReadyReason(wn.KICKED_OUT_USERSIG_EXPIRED),
                this._m.reset());
          },
        },
        {
          key: 'onRestApiKickedOut',
          value: function (e) {
            new ei('kickedOut')
              .setMessage(
                'type:'
                  .concat(D.KICKED_OUT_REST_API, ' newInstanceInfo:')
                  .concat(JSON.stringify(e))
              )
              .end(!0),
              Ae.w(
                ''
                  .concat(this._n, '.onRestApiKickedOut userID:')
                  .concat(this.getMyUserID(), ' newInstanceInfo:'),
                e
              ),
              0 !== this.get(12).getStatusInstanceID() &&
                (this.emitOEvt(E.KICKED_OUT, { type: D.KICKED_OUT_REST_API }),
                this._m.setNotReadyReason(wn.KICKED_OUT_REST_API),
                this._m.reset(),
                this.get(21).onRestApiKickedOut());
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this.resetReady(),
              (this._helloInterval = 120),
              (this._lastLoginTs = 0),
              (this._lastWsHelloTs = 0),
              (this._isWebUniapp = 0);
          },
        },
      ]),
      wo);
  function wo(e) {
    return (
      i(this, wo),
      ((e = $i.call(this, e))._n = 'SignModule'),
      (e._helloInterval = 120),
      (e._lastLoginTs = 0),
      (e._lastWsHelloTs = 0),
      (e._isWebUniapp = 0),
      ji.mixin(f(e)),
      e
    );
  }
  function Uo(e, t) {
    i(this, Uo),
      (this._m = e),
      (this._isLoggedIn = !1),
      (this._SDKAppID = t.SDKAppID),
      (this._userID = t.userID || ''),
      (this._userSig = t.userSig || ''),
      (this._version = '3.4.2'),
      (this._a2Key = ''),
      (this._tinyID = ''),
      (this._customStatus = ''),
      (this._contentType = 'json'),
      (this._unlimitedAVChatRoom = t.unlimitedAVChatRoom),
      (this._scene = t.scene || ''),
      (this._oversea = t.oversea),
      (this._instanceID = t.instanceID),
      (this._statusInstanceID = 0),
      (this._isDevMode = t.devMode),
      (this._isTestEnv = t.testEnv),
      (this._proxyServer = t.proxyServer),
      (this._fileUploadProxy = t.fileUploadProxy),
      (this._fileDownloadProxy = t.fileDownloadProxy),
      (this._applicationID = 0),
      (this._isPartialUpdatedConvs = t.partialUpdatedConversations),
      (this._isUsingChatCore = !1),
      (this._uiPlatform = 0),
      (this._authKey = '');
  }
  function Go(e) {
    return (
      i(this, Go),
      ((e = Yi.call(this, e))._n = 'UserModule'),
      (e._profileHandler = new ko(f(e))),
      (e._blacklistHandler = new Lo(f(e))),
      (e._userStatusHandler = new Ao(f(e))),
      e
        .getIEmitInst()
        .on(qi.A2KEY_AND_TINYID_UPDATED, e.onContextUpdated, f(e)),
      e
    );
  }
  function xo(e) {
    i(this, xo),
      (this._userM = e),
      (this._n = 'UserStatusHandler'),
      (this.MAX_QUERY_USER_COUNT = 500),
      (this.MAX_SUBSCRIBE_USER_COUNT = 100),
      (this.MAX_UNSUBSCRIBE_USER_COUNT = 100),
      this._userM.getIEmitInst().on(qi.CLOUD_CONFIG, this._onCloudConfig, this);
  }
  function Fo(e) {
    i(this, Fo),
      (this._userM = e),
      (this._n = 'BlacklistHandler'),
      (this._blacklistMap = new Map()),
      (this.startIndex = 0),
      (this.maxLimited = 100),
      (this.currentSequence = 0);
  }
  function qo(e) {
    i(this, qo),
      (this._userM = e),
      (this._n = 'ProfileHandler'),
      (this.TAG = 'profile'),
      (this.accountProfileMap = new Map()),
      (this.expirationTime = 864e5);
  }
  function Vo(e) {
    return (
      i(this, Vo),
      ((e = Ji.call(this, e))._n = 'TopicModule'),
      (e._topicMap = new Map()),
      (e._getTopicTimeMap = new Map()),
      (e.TOPIC_CACHE_TIME = 300),
      (e.TOPIC_LAST_ACTIVE_TIME = 3600),
      e.getIEmitInst().on(qi.CLOUD_CONFIG, e._onCloudConfig, f(e)),
      e
    );
  }
  function Bo(e, t) {
    i(this, Bo),
      (this.topicID = ''),
      (this.topicName = ''),
      (this.avatar = ''),
      (this.introduction = ''),
      (this.notification = ''),
      (this.unreadCount = 0),
      (this.muteAllMembers = !1),
      (this.customData = ''),
      (this.groupAtInfoList = []),
      (this.nextMessageSeq = 0),
      (this.lastMessage = Wi(e.lastMessage, t)),
      (this.selfInfo = {
        muteTime: 0,
        readedSequence: 0,
        messageRemindType: '',
        excludedUnreadSequenceList: void 0,
      }),
      this._initTopic(e);
  }
  function Ho(e) {
    return (
      i(this, Ho),
      ((e = Xi.call(this, e))._n = 'GroupModule'),
      (e._commonGroupHandler = new po(f(e))),
      (e._groupAttributesHandler = new ho(f(e))),
      (e._groupCountersHandler = new fo(f(e))),
      (e._AVChatRoomHandler = new vo(f(e))),
      (e._groupTipsHandler = new lo(f(e))),
      (e._groupSystemNoticeHandler = new Mo(f(e))),
      (e._groupMemberHandler = new yo(f(e))),
      (e.groupMap = new Map()),
      (e._unjoinedAVChatRoomList = new Map()),
      (e._receiptDetailCompleteMap = new Map()),
      (e._onlineMemberCountMap = new Map()),
      (e._timeoutIDs = []),
      e.getIEmitInst().on(qi.CLOUD_CONFIG, e._onCloudConfig, f(e)),
      e
    );
  }
  function jo(e) {
    i(this, jo),
      (this._grpM = e),
      (this._n = 'GroupSystemNoticeHandler'),
      (this.pendencyMap = new Map());
  }
  function Ko(e) {
    i(this, Ko),
      (this._grpM = e),
      (this._n = 'GroupMemberHandler'),
      (this.groupMemberListMap = new Map()),
      (this.DEFAULT_MEMBER_INFO_FILTER = [
        'Role',
        'JoinTime',
        'NameCard',
        'ShutUpUntil',
        'OnlineStatus',
      ]),
      this._grpM
        .getIEmitInst()
        .on(qi.PROFILE_UPDATED, this._onProfileUpdated, this);
  }
  function Wo(e) {
    i(this, Wo),
      (this.userID = ''),
      (this.avatar = ''),
      (this.nick = ''),
      (this.role = ''),
      (this.joinTime = ''),
      (this.lastSendMsgTime = ''),
      (this.nameCard = ''),
      (this.muteUntil = 0),
      (this.memberCustomField = []),
      (this.isOnline = !1),
      this.updateMember(e);
  }
  function zo(e) {
    i(this, zo),
      (this._grpM = e),
      (this._n = 'AVChatRoomHandler'),
      (this._joinedGroupMap = new Map()),
      (this._pollingRequestInfoMap = new Map()),
      (this._pollingInstanceMap = new Map()),
      (this._seqSll = new no(200)),
      (this._IDSll = new no(100)),
      (this._reportMessageStackedCount = 0),
      (this._onlineMemberCountMap = new Map()),
      (this.DEFAULT_EXPIRE_TIME = 60),
      (this.DEFAULT_POLLING_INTERVAL = 300),
      (this.MAX_POLLING_INTERVAL = 2e3),
      (this._pollingInterval = this.DEFAULT_POLLING_INTERVAL),
      (this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20),
      (this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3),
      (this._pollingNoMessageCount = 0),
      (this._startBroadcastSeq = 1),
      (this._broadcastMessageIDMap = new Map()),
      (this.DEFAULT_POLLING_SIMPLIFIED_MSG = 0);
  }
  function $o(e) {
    i(this, $o);
    var t = e.manager,
      n = e.groupID,
      o = e.onInit,
      r = e.onSuccess;
    (e = e.onFail),
      (this._n = 'Polling'),
      (this._manager = t),
      (this._grpM = t._grpM),
      (this._onInit = o),
      (this._onSuccess = r),
      (this._onFail = e),
      (this._groupID = n),
      (this._timeoutID = -1),
      (this._isRunning = !1),
      (this._proto = Gn.AV_POLLING);
  }
  function Yo(e) {
    i(this, Yo),
      (this._grpM = e),
      (this._n = 'GroupCountersHandler'),
      (this._groupCountersMap = new Map()),
      (this.EXPIRE_TIME = 3e4),
      this._grpM.getIEmitInst().on(qi.CLOUD_CONFIG, this._onCloudConfig, this);
  }
  function Jo(e) {
    i(this, Jo),
      (this._grpM = e),
      (this._n = 'GroupAttributesHandler'),
      (this._groupAttributesMap = new Map()),
      (this._groupAttributesCopy = {}),
      (this.CACHE_EXPIRE_TIME = 3e4),
      this._grpM.getIEmitInst().on(qi.CLOUD_CONFIG, this._onCloudConfig, this);
  }
  function Xo(e) {
    i(this, Xo),
      (this._grpM = e),
      (this._n = 'CommonGroupHandler'),
      (this.tempConversationList = null),
      (this._cachedGroupMessageMap = new Map()),
      (this._checkCountMap = new Map()),
      (this.MAX_CHECK_COUNT = 4),
      (this.PAGING_GRP_COUNT_LIMIT = 200),
      (this._pagingStatus = Dn),
      (this._pagingGetCostList = []),
      e
        .getIEmitInst()
        .on(qi.A2KEY_AND_TINYID_UPDATED, this.syncGroupList, this);
  }
  function Zo(e) {
    i(this, Zo),
      (this._grpM = e),
      (this._n = 'GroupTipsHandler'),
      (this._cachedGroupTipsMap = new Map()),
      (this._checkCountMap = new Map()),
      (this.MAX_CHECK_COUNT = 4);
  }
  function Qo(e) {
    return (
      i(this, Qo),
      ((e = Zi.call(this, e))._n = 'ConvModule'),
      ji.mixin(f(e)),
      (e._msgListHandler = new Vi(f(e))),
      (e._msgRemindHandler = new so(f(e))),
      (e._convGroupHandler = new co(f(e))),
      (e._sll = new no(100)),
      (e._pagingStatus = Dn),
      (e._pagingTs = 0),
      (e._pagingStartIdx = 0),
      (e._pagingPinnedTs = 0),
      (e._pagingPinnedStartIdx = 0),
      (e._pagingConvIDMap = new Map()),
      (e._convIDFromUnreadDBMap = new Map()),
      (e._convMap = new Map()),
      (e._tmpGroupList = []),
      (e._tmpGroupAtTipsList = []),
      (e._peerReadTimeMap = new Map()),
      (e._completedMap = new Map()),
      (e._roamingMsgKeyAndTimeMap = new Map()),
      (e._remoteGroupReadSeqMap = new Map()),
      (e._convTotalUnreadCount = 0),
      (e._pagingGetCostList = []),
      (e._convMapForDiff = new Map()),
      (e._partialUpdatedConvMap = new Map()),
      (e._everClearedMap = new Map()),
      (e._bPullOnInvite = !0),
      e._initListeners(),
      e
    );
  }
  function er(e) {
    i(this, er),
      (this._convM = e),
      (this._n = 'ConvGroupHandler'),
      (this._convGroupMap = new Map()),
      (this._startIndex = 0),
      (this._pagingStatus = Dn);
  }
  function tr(e) {
    i(this, tr), (this._convM = e), (this._n = 'MsgRemindHandler');
  }
  function nr(e, t) {
    var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2];
    i(this, nr),
      (this.conversationID = e.conversationID || ''),
      (this.unreadCount = e.unreadCount || 0),
      (this.type = e.type || ''),
      (this.lastMessage = Ki(e.lastMessage, t, n)),
      e.lastMsgTime && (this.lastMessage.lastTime = e.lastMsgTime),
      (this._isInfoCompleted = !1),
      (this.peerReadTime = e.peerReadTime || 0),
      (this.groupAtInfoList = []),
      (this.remark = ''),
      (this.isPinned = e.isPinned || !1),
      (this.messageRemindType = e.messageRemindType),
      (this.markList = e.markList || []),
      (this.customData = e.customData || ''),
      (this.conversationGroupList = e.conversationGroupList || []),
      (this.draftText = e.draftText || ''),
      this._initProfile(e),
      (this.subType = this.groupProfile ? this.groupProfile.type : '');
  }
  function ir(e) {
    i(this, ir),
      (this.groupID = ''),
      (this.name = ''),
      (this.avatar = ''),
      (this.type = ''),
      (this.introduction = ''),
      (this.notification = ''),
      (this.ownerID = ''),
      (this.createTime = ''),
      (this.infoSequence = ''),
      (this.lastInfoTime = ''),
      (this.selfInfo = {
        messageRemindType: '',
        joinTime: '',
        nameCard: '',
        role: '',
        userID: '',
        memberCustomField: void 0,
        readedSequence: 0,
        excludedUnreadSequenceList: void 0,
      }),
      (this.lastMessage = {
        lastTime: '',
        lastSequence: '',
        fromAccount: '',
        messageForShow: '',
      }),
      (this.nextMessageSeq = ''),
      (this.memberNum = ''),
      (this.memberCount = ''),
      (this.maxMemberNum = ''),
      (this.maxMemberCount = ''),
      (this.joinOption = ''),
      (this.inviteOption = ''),
      (this.groupCustomField = []),
      (this.muteAllMembers = !1),
      (this.isSupportTopic = !1),
      (this._lastRevokedTime = 0),
      this._initGroup(e);
  }
  function or(e) {
    i(this, or), (this.MAX_LENGTH = e), (this.map = new Map());
  }
  function rr(e) {
    var t = this;
    i(this, rr),
      Ve(e) ||
        ((this.userID = e.userID || ''),
        (this.nick = e.nick || ''),
        (this.gender = e.gender || ''),
        (this.birthday = e.birthday || 0),
        (this.location = e.location || ''),
        (this.selfSignature = e.selfSignature || ''),
        (this.allowType = e.allowType || D.ALLOW_TYPE_ALLOW_ANY),
        (this.language = e.language || 0),
        (this.avatar = e.avatar || ''),
        (this.messageSettings = e.messageSettings || 0),
        (this.adminForbidType = e.adminForbidType || D.FORBID_TYPE_NONE),
        (this.level = e.level || 0),
        (this.role = e.role || 0),
        (this.lastUpdatedTime = 0),
        (this.profileCustomField = []),
        Ve(e.profileCustomField) ||
          e.profileCustomField.forEach(function (e) {
            t.profileCustomField.push({ key: e.key, value: e.value });
          }));
  }
  function ar() {
    return null;
  }
  function sr(e) {
    var t = e.get(12);
    return {
      SDKType: 10,
      SDKAppID: t.getSDKAppID(),
      SDKVersion: t.getVersion(),
      tinyID: Number(t.getTinyID()),
      userID: t.getUserID(),
      platform: e.getPlatform(),
      instanceID: t.getInstanceID(),
      traceID: Se(),
    };
  }
  r(mr, [
    {
      key: '_errorTolerantHandle',
      value: function () {
        Z ||
          ('undefined' != typeof window && this._canIUseCookies()) ||
          ((this.getItem = ar),
          (this.setItem = ar),
          (this.removeItem = ar),
          (this.clear = ar));
      },
    },
    {
      key: 'onCheckTimer',
      value: function (e) {
        e % 20 == 0 && 0 !== this._storageQueue.size && this._doFlush();
      },
    },
    {
      key: '_doFlush',
      value: function () {
        try {
          var e,
            t = T(this._storageQueue);
          try {
            for (t.s(); !(e = t.n()).done; ) {
              var n = _(e.value, 2),
                i = n[0],
                o = n[1];
              this._setStorageSync(this._getKey(i), o);
            }
          } catch (r) {
            t.e(r);
          } finally {
            t.f();
          }
          this._storageQueue.clear();
        } catch (r) {
          Ae.w(''.concat(this._n, '._doFlush error:'), r);
        }
      },
    },
    {
      key: '_getPrefix',
      value: function () {
        var e = this._m.get(12);
        return 'TIM_'.concat(e.getSDKAppID(), '_').concat(e.getUserID(), '_');
      },
    },
    {
      key: '_getKey',
      value: function (e) {
        return ''.concat(this._getPrefix()).concat(e);
      },
    },
    {
      key: 'getItem',
      value: function (e) {
        var t =
          !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
        try {
          var n = t ? this._getKey(e) : e;
          return this.getStorageSync(n);
        } catch (i) {
          return Ae.w(''.concat(this._n, '.getItem error:'), i), {};
        }
      },
    },
    {
      key: 'setItem',
      value: function (e, t) {
        var n;
        2 < arguments.length && void 0 !== arguments[2] && arguments[2]
          ? ((n =
              3 < arguments.length && void 0 !== arguments[3] && !arguments[3]
                ? e
                : this._getKey(e)),
            this._setStorageSync(n, t))
          : this._storageQueue.set(e, t);
      },
    },
    {
      key: 'clear',
      value: function () {
        try {
          Z
            ? te.clearStorageSync()
            : this._canIUseCookies() && localStorage.clear();
        } catch (e) {
          Ae.w(''.concat(this._n, '.clear error:'), e);
        }
      },
    },
    {
      key: 'removeItem',
      value: function (e) {
        var t =
          !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
        try {
          var n = t ? this._getKey(e) : e;
          this._removeStorageSync(n);
        } catch (i) {
          Ae.w(''.concat(this._n, '.removeItem error:'), i);
        }
      },
    },
    {
      key: 'getSize',
      value: function (e) {
        var t = this,
          n =
            1 < arguments.length && void 0 !== arguments[1]
              ? arguments[1]
              : 'b';
        try {
          var i = { size: 0, limitSize: 5242880, unit: n };
          if (
            (Object.defineProperty(i, 'leftSize', {
              enumerable: !0,
              get: function () {
                return i.limitSize - i.size;
              },
            }),
            Z && (i.limitSize = 1024 * te.getStorageInfoSync().limitSize),
            e)
          )
            i.size =
              JSON.stringify(this.getItem(e)).length + this._getKey(e).length;
          else if (Z)
            te.getStorageInfoSync().keys.forEach(function (e) {
              i.size +=
                JSON.stringify(t.getStorageSync(e)).length +
                t._getKey(e).length;
            });
          else if (this._canIUseCookies())
            for (var o in localStorage)
              localStorage.hasOwnProperty(o) &&
                (i.size += localStorage.getItem(o).length + o.length);
          return this._convertUnit(i);
        } catch (r) {
          Ae.w(''.concat(this._n, ' error:'), r);
        }
      },
    },
    {
      key: '_convertUnit',
      value: function (e) {
        var t,
          n = {},
          i = e.unit;
        for (t in ((n.unit = i), e))
          'number' == typeof e[t] &&
            ('kb' === i.toLowerCase()
              ? (n[t] = Math.round(e[t] / 1024))
              : 'mb' === i.toLowerCase()
                ? (n[t] = Math.round(e[t] / 1024 / 1024))
                : (n[t] = e[t]));
        return n;
      },
    },
    {
      key: '_setStorageSync',
      value: function (e, t) {
        Z
          ? z
            ? my.setStorageSync({ key: e, data: t })
            : te.setStorageSync(e, t)
          : this._canIUseCookies() &&
            localStorage.setItem(e, JSON.stringify(t));
      },
    },
    {
      key: 'getStorageSync',
      value: function (e) {
        return Z
          ? z
            ? my.getStorageSync({ key: e }).data
            : te.getStorageSync(e)
          : this._canIUseCookies()
            ? JSON.parse(localStorage.getItem(e))
            : {};
      },
    },
    {
      key: '_removeStorageSync',
      value: function (e) {
        Z
          ? z
            ? my.removeStorageSync({ key: e })
            : te.removeStorageSync(e)
          : this._canIUseCookies() && localStorage.removeItem(e);
      },
    },
    {
      key: '_canIUseCookies',
      value: function () {
        return (
          'undefined' != typeof window &&
          navigator &&
          navigator.cookieEnabled &&
          localStorage
        );
      },
    },
    {
      key: 'reset',
      value: function () {
        Ae.l(''.concat(this._n, '.reset')), this._doFlush();
      },
    },
  ]);
  var cr,
    ur = mr,
    lr =
      (r(vr, [
        {
          key: 'pushIn',
          value: function (e) {
            Ae.d(''.concat(this._n, '.pushIn'), this._report.length, e),
              this._report.push(e);
          },
        },
        {
          key: 'backfill',
          value: function (e) {
            var t;
            $e(e) &&
              0 !== e.length &&
              (Ae.d(
                ''.concat(this._n, '.backfill'),
                this._report.length,
                e.length
              ),
              (t = this._report).unshift.apply(t, v(e)));
          },
        },
        {
          key: 'getLogsNumInMemory',
          value: function () {
            return this._report.length;
          },
        },
        {
          key: 'isEmpty',
          value: function () {
            return 0 === this._report.length;
          },
        },
        {
          key: '_reset',
          value: function () {
            (this._report.length = 0), (this._report = []);
          },
        },
        {
          key: 'getLogsInMemory',
          value: function () {
            var e = this._report.slice();
            return this._reset(), e;
          },
        },
      ]),
      vr),
    dr =
      (s(_r, An),
      (cr = g(_r)),
      r(_r, [
        {
          key: 'reportAtOnce',
          value: function () {
            this._report();
          },
        },
        {
          key: '_onLoginSuccess',
          value: function () {
            var e = this,
              t = this.get(13),
              n = t.getItem(this.TAG, !1);
            !Ve(n) &&
              Ye(n.forEach) &&
              (Ae.l(
                ''
                  .concat(this._n, '._onLoginSuccess. logs count:')
                  .concat(n.length)
              ),
              n.forEach(function (t) {
                e._reportBody.pushIn(t);
              }),
              t.removeItem(this.TAG, !1));
          },
        },
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this.getCloudConfig('evt_rpt_threshold'),
              t = this.getCloudConfig('evt_rpt_waiting'),
              n = this.getCloudConfig('evt_rpt_level'),
              i = this.getCloudConfig('evt_rpt_sdkappid_bl'),
              o = this.getCloudConfig('evt_rpt_tinyid_wl');
            ut(e) || (this.MIN_THRESHOLD = Number(e)),
              ut(t) || (this.WAITING_TIME = Number(t)),
              ut(n) ||
                (this.REPORT_LEVEL = n.split(',').map(function (e) {
                  return Number(e);
                })),
              ut(i) ||
                (this.REPORT_SDKAPPID_BLACKLIST = i
                  .split(',')
                  .map(function (e) {
                    return Number(e);
                  })),
              ut(o) || (this.REPORT_TINYID_WHITELIST = o.split(','));
          },
        },
        {
          key: 'pushIn',
          value: function (e) {
            e instanceof ei &&
              (e.updateTimeStamp(),
              this._reportBody.pushIn(e),
              this._reportBody.getLogsNumInMemory() >= this.MIN_THRESHOLD &&
                this._report());
          },
        },
        {
          key: 'onCheckTimer',
          value: function () {
            Date.now() < this._lastReportTime + this.WAITING_TIME ||
              this._reportBody.isEmpty() ||
              this._report();
          },
        },
        {
          key: '_filterLogs',
          value: function (e) {
            var t = this,
              n = (i = this.get(12)).getSDKAppID(),
              i = i.getTinyID();
            return wt(this.REPORT_SDKAPPID_BLACKLIST, n) &&
              !Ut(this.REPORT_TINYID_WHITELIST, i)
              ? []
              : e.filter(function (e) {
                  return t.REPORT_LEVEL.includes(e.level);
                });
          },
        },
        {
          key: '_report',
          value: function () {
            var e,
              n,
              i = this;
            this._reportBody.isEmpty() ||
              ((e = this._reportBody.getLogsInMemory()),
              0 !== (n = this._filterLogs(e)).length
                ? ((n = { header: sr(this), event: n }),
                  this.req({ P: Gn.SSO_STAT, data: t({}, n) })
                    .then(function () {
                      i._lastReportTime = Date.now();
                    })
                    .catch(function (t) {
                      Ae.w(''.concat(i._n, '._report failed. error:'), t),
                        (i._lastReportTime = Date.now()),
                        i._reportBody.backfill(e),
                        i._reportBody.getLogsNumInMemory() > i.MAX_THRESHOLD &&
                          i._flushAtOnce();
                    }))
                : (this._lastReportTime = Date.now()));
          },
        },
        {
          key: '_flushAtOnce',
          value: function () {
            var e = this.get(13),
              t = e.getItem(this.TAG, !1),
              n = this._reportBody.getLogsInMemory(),
              i = ''.concat(this._n, '._flushAtOnce');
            Ve(t)
              ? (Ae.l(''.concat(i, ' count:').concat(n.length)),
                e.setItem(this.TAG, n, !0, !1))
              : ((n = n.concat(t)).length > this.MAX_THRESHOLD &&
                  (n = n.slice(0, this.MAX_THRESHOLD)),
                Ae.l(''.concat(i, ' count:').concat(n.length)),
                e.setItem(this.TAG, n, !0, !1));
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              (this._lastReportTime = 0),
              this._report(),
              (this.REPORT_SDKAPPID_BLACKLIST = []),
              (this.REPORT_TINYID_WHITELIST = []);
          },
        },
      ]),
      _r),
    pr = 'none',
    hr = 'online',
    fr =
      (r(gr, [
        {
          key: 'start',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.start');
            Z
              ? (te.getNetworkType({
                  success: function (n) {
                    (e._networkType = n.networkType || n.subtype || ''),
                      n.networkType === pr
                        ? Ae.w(''.concat(t, ' no network, please check!'))
                        : Ae.i(
                            ''.concat(t, ' networkType:').concat(n.networkType)
                          );
                  },
                }),
                (this._mpNetworkStatusCallback =
                  this._onNetworkStatusChange.bind(this)),
                te.onNetworkStatusChange(this._mpNetworkStatusCallback))
              : ee &&
                ((this._networkType = hr),
                (this._webOnlineCallback = this._onWebOnline.bind(this)),
                (this._webOfflineCallback = this._onWebOffline.bind(this)),
                window.addEventListener('online', this._webOnlineCallback),
                window.addEventListener('offline', this._webOfflineCallback));
          },
        },
        {
          key: '_onWebOnline',
          value: function () {
            this._onNetworkStatusChange({ isConnected: !0, networkType: hr });
          },
        },
        {
          key: '_onWebOffline',
          value: function () {
            this._onNetworkStatusChange({ isConnected: !1, networkType: pr });
          },
        },
        {
          key: '_onNetworkStatusChange',
          value: function (e) {
            var t = e.isConnected,
              n =
                ((e = e.networkType),
                ''.concat(this._n, '._onNetworkStatusChange')),
              i = !1,
              o = 'previous:'.concat(this._networkType, ' current:').concat(e);
            t
              ? (Ae.i(''.concat(n, ' ').concat(o)),
                this._networkType !== e &&
                  ((i = !0),
                  (this._networkType = e),
                  this._m.get(21).reConnect(!0)))
              : this._networkType !== e &&
                ((i = !0),
                (this._networkType = e),
                Ae.w(''.concat(n, ' no network, please check!')),
                this._m.get(21).offline()),
              i &&
                new ei('networkChange')
                  .setMessage('isConnected:'.concat(t, ' ').concat(o))
                  .end();
          },
        },
        {
          key: 'isOnline',
          value: function () {
            return this._networkType !== pr;
          },
        },
        {
          key: 'getNetworkType',
          value: function () {
            return this._networkType;
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              Z
                ? null !== this._mpNetworkStatusCallback &&
                  (te.offNetworkStatusChange &&
                    te.offNetworkStatusChange(this._mpNetworkStatusCallback),
                  (this._mpNetworkStatusCallback = null))
                : ee &&
                  (null !== this._webOnlineCallback &&
                    (window.removeEventListener(
                      'online',
                      this._webOnlineCallback
                    ),
                    (this._webOnlineCallback = null)),
                  null !== this._onWebOffline &&
                    (window.removeEventListener(
                      'offline',
                      this._webOfflineCallback
                    ),
                    (this._webOfflineCallback = null)));
          },
        },
      ]),
      gr);
  function gr(e) {
    i(this, gr),
      (this._m = e),
      (this._networkType = hr),
      (this._n = 'NetMonitorModule'),
      (this._mpNetworkStatusCallback = null),
      (this._webOnlineCallback = null),
      (this._webOfflineCallback = null);
  }
  function _r(e) {
    i(this, _r),
      ((e = cr.call(this, e))._n = 'EventStatModule'),
      (e.TAG = 'im-ssolog-event'),
      (e._reportBody = new lr()),
      (e.MIN_THRESHOLD = 20),
      (e.MAX_THRESHOLD = 100),
      (e.WAITING_TIME = 6e4),
      (e.REPORT_LEVEL = [4, 5, 6]),
      (e.REPORT_SDKAPPID_BLACKLIST = []),
      (e.REPORT_TINYID_WHITELIST = []),
      (e._lastReportTime = Date.now());
    var t = e.getIEmitInst();
    return (
      t.on(qi.A2KEY_AND_TINYID_UPDATED, e._onLoginSuccess, f(e)),
      t.on(qi.CLOUD_CONFIG, e._onCloudConfig, f(e)),
      e
    );
  }
  function vr(e) {
    i(this, vr), (this._n = 'SSOLogBody'), (this._report = []);
  }
  function mr(e) {
    i(this, mr),
      (this._m = e),
      (this._n = 'StorageModule'),
      (this._storageQueue = new Map()),
      this._errorTolerantHandle();
  }
  function yr(e, t) {
    return e((t = { exports: {} }), t.exports), t.exports;
  }
  var Ir,
    Mr = yr(function (e) {
      var t = Object.prototype.hasOwnProperty,
        n = '~';
      function i() {}
      function o(e, t, n) {
        (this.fn = e), (this.context = t), (this.once = n || !1);
      }
      function r(e, t, i, r, a) {
        if ('function' != typeof i)
          throw new TypeError('The listener must be a function');
        return (
          (i = new o(i, r || e, a)),
          (r = n ? n + t : t),
          e._events[r]
            ? e._events[r].fn
              ? (e._events[r] = [e._events[r], i])
              : e._events[r].push(i)
            : ((e._events[r] = i), e._eventsCount++),
          e
        );
      }
      function a(e, t) {
        0 == --e._eventsCount ? (e._events = new i()) : delete e._events[t];
      }
      function s() {
        (this._events = new i()), (this._eventsCount = 0);
      }
      Object.create &&
        ((i.prototype = Object.create(null)), new i().__proto__ || (n = !1)),
        (s.prototype.eventNames = function () {
          var e,
            i,
            o = [];
          if (0 === this._eventsCount) return o;
          for (i in (e = this._events))
            t.call(e, i) && o.push(n ? i.slice(1) : i);
          return Object.getOwnPropertySymbols
            ? o.concat(Object.getOwnPropertySymbols(e))
            : o;
        }),
        (s.prototype.listeners = function (e) {
          e = n ? n + e : e;
          var t = this._events[e];
          if (!t) return [];
          if (t.fn) return [t.fn];
          for (var i = 0, o = t.length, r = new Array(o); i < o; i++)
            r[i] = t[i].fn;
          return r;
        }),
        (s.prototype.listenerCount = function (e) {
          return (
            (e = n ? n + e : e),
            (e = this._events[e]) ? (e.fn ? 1 : e.length) : 0
          );
        }),
        (s.prototype.emit = function (e, t, i, o, r, a) {
          var s = n ? n + e : e;
          if (!this._events[s]) return !1;
          var c,
            u = this._events[s],
            l = arguments.length;
          if (u.fn) {
            switch ((u.once && this.removeListener(e, u.fn, void 0, !0), l)) {
              case 1:
                return u.fn.call(u.context), !0;
              case 2:
                return u.fn.call(u.context, t), !0;
              case 3:
                return u.fn.call(u.context, t, i), !0;
              case 4:
                return u.fn.call(u.context, t, i, o), !0;
              case 5:
                return u.fn.call(u.context, t, i, o, r), !0;
              case 6:
                return u.fn.call(u.context, t, i, o, r, a), !0;
            }
            for (h = 1, c = new Array(l - 1); h < l; h++)
              c[h - 1] = arguments[h];
            u.fn.apply(u.context, c);
          } else
            for (var d, p = u.length, h = 0; h < p; h++)
              switch (
                (u[h].once && this.removeListener(e, u[h].fn, void 0, !0), l)
              ) {
                case 1:
                  u[h].fn.call(u[h].context);
                  break;
                case 2:
                  u[h].fn.call(u[h].context, t);
                  break;
                case 3:
                  u[h].fn.call(u[h].context, t, i);
                  break;
                case 4:
                  u[h].fn.call(u[h].context, t, i, o);
                  break;
                default:
                  if (!c)
                    for (d = 1, c = new Array(l - 1); d < l; d++)
                      c[d - 1] = arguments[d];
                  u[h].fn.apply(u[h].context, c);
              }
          return !0;
        }),
        (s.prototype.on = function (e, t, n) {
          return r(this, e, t, n, !1);
        }),
        (s.prototype.once = function (e, t, n) {
          return r(this, e, t, n, !0);
        }),
        (s.prototype.removeListener = function (e, t, i, o) {
          if (((e = n ? n + e : e), !this._events[e])) return this;
          if (!t) return a(this, e), this;
          var r = this._events[e];
          if (r.fn)
            r.fn !== t ||
              (o && !r.once) ||
              (i && r.context !== i) ||
              a(this, e);
          else {
            for (var s = 0, c = [], u = r.length; s < u; s++)
              (r[s].fn !== t ||
                (o && !r[s].once) ||
                (i && r[s].context !== i)) &&
                c.push(r[s]);
            c.length
              ? (this._events[e] = 1 === c.length ? c[0] : c)
              : a(this, e);
          }
          return this;
        }),
        (s.prototype.removeAllListeners = function (e) {
          return (
            e
              ? ((e = n ? n + e : e), this._events[e] && a(this, e))
              : ((this._events = new i()), (this._eventsCount = 0)),
            this
          );
        }),
        (s.prototype.off = s.prototype.removeListener),
        (s.prototype.addListener = s.prototype.on),
        (s.prefixed = n),
        (e.exports = s.EventEmitter = s);
    }),
    Cr = {
      CHINA: ['cn.rich.my-imcloud.com', 'cn.imrich.qcloud.com'],
      SINGAPORE: ['sgp.rich.my-imcloud.com', 'sgp.imrich.qcloud.com'],
      KOREA: ['kr.rich.my-imcloud.com', 'kr.imrich.qcloud.com'],
      GERMANY: ['ger.rich.my-imcloud.com', 'ger.imrich.qcloud.com'],
      IND: ['ind.rich.my-imcloud.com', 'ind.imrich.qcloud.com'],
      JPN: ['jpn.imrich.qcloud.com', 'jpn.rich.my-imcloud.com'],
      USA: ['usa.rich.my-imcloud.com', 'usa.imrich.qcloud.com'],
      INDONESIA: ['idn.rich.my-imcloud.com', 'idn.imrich.qcloud.com'],
    },
    Tr = ['requestSnapshotUrl'],
    Er =
      (s(Ar, An),
      (Ir = g(Ar)),
      r(Ar, [
        {
          key: '_init',
          value: function () {
            (this._fileDownloadProxy = this.getFileDownloadProxy()),
              (this._authKey = this.getDowloadFileAuthKey()),
              this._initFileDNList();
            var e = this.get(18);
            (this.TIMUploadPlugin = e.getPlugin('tim-upload-plugin')),
              this.TIMUploadPlugin
                ? this._initUploaderMethod()
                : ((this.COSSDK = e.getPlugin(
                    (e = Z ? 'cos-wx-sdk' : 'cos-js-sdk')
                  )),
                  this.COSSDK
                    ? (this._getAuthorizationKey(),
                      this.warn('CosReplacement', e))
                    : this.warn('PluginUndetected'));
          },
        },
        {
          key: '_initFileDNList',
          value: function () {
            var e = this._m.get(12);
            e.isSingaporeSite()
              ? (this._fileDNList = Cr.SINGAPORE)
              : e.isKoreaSite()
                ? (this._fileDNList = Cr.KOREA)
                : e.isGermanySite()
                  ? (this._fileDNList = Cr.GERMANY)
                  : e.isIndiaSite()
                    ? (this._fileDNList = Cr.INDIA)
                    : e.isJapanSite()
                      ? (this._fileDNList = Cr.JAPAN)
                      : e.isUSASite()
                        ? (this._fileDNList = Cr.USA)
                        : e.isIndonesiaSite()
                          ? (this._fileDNList = Cr.INDONESIA)
                          : (this._fileDNList = Cr.CHINA);
          },
        },
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '._onCloudConfig'),
              n = this.getCloudConfig('upload_size_limit'),
              i = this.getCloudConfig('simple_cos'),
              o = this.getCloudConfig('file_dn_list');
            if (
              (Ae.l(
                ''
                  .concat(t, ' uploadSizeLimit:')
                  .concat(n, ' simpleCos:')
                  .concat(i)
              ),
              !ut(n))
            )
              try {
                var r = JSON.parse(n);
                this.UPLOAD_SIZE_LIMIT = {
                  A: r.a ? 1048576 * parseInt(r.a) : this.UPLOAD_SIZE_LIMIT.A,
                  F: r.f ? 1048576 * parseInt(r.f) : this.UPLOAD_SIZE_LIMIT.F,
                  I: r.i ? 1048576 * parseInt(r.i) : this.UPLOAD_SIZE_LIMIT.I,
                  V: r.v ? 1048576 * parseInt(r.v) : this.UPLOAD_SIZE_LIMIT.V,
                };
              } catch (a) {}
            if ((ut(i) || (this.isSimpleCos = '1' === i), !ut(o)))
              try {
                JSON.parse(o).forEach(function (t) {
                  e._fileDNList.includes(t) || e._fileDNList.push(t);
                });
              } catch (a) {}
          },
        },
        {
          key: '_getAuthorizationKey',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('_getAuthorizationKey'),
              n = new ei('_getAuthorizationKey'),
              i = Math.ceil(Date.now() / 1e3);
            this.req({
              P: Gn.COS_SIGN,
              data: { duration: this.expiredTimeLimit },
            })
              .then(function (o) {
                o = o.data;
                var r =
                  (Ae.l(''.concat(t, ' ok. data:'), o), o.expiredTime - i);
                n
                  .setMessage(
                    'requestId:'
                      .concat(o.requestId, ' requestTime:')
                      .concat(i, ' expiredTime:')
                      .concat(o.expiredTime, ' diff:')
                      .concat(r, 's')
                  )
                  .end(),
                  !Z && o.region && (e.region = o.region),
                  (e.appid = o.appid),
                  (e.bucketName = o.bucketName),
                  (e.ciUrl = o.ciUrl),
                  (e.directory = o.directory),
                  (e.downloadUrl = o.downloadUrl),
                  (e.uploadUrl = o.uploadUrl),
                  (e.cosOptions = {
                    secretId: o.secretId,
                    secretKey: o.secretKey,
                    sessionToken: o.sessionToken,
                    expiredTime: o.expiredTime,
                  }),
                  Ae.l(
                    ''
                      .concat(t, ' ok. region:')
                      .concat(e.region, ' bucketName:')
                      .concat(e.bucketName)
                  ),
                  e._initUploaderMethod();
              })
              .catch(function (e) {
                n.setError(e).end(), Ae.w(''.concat(t, ' failed. error:'), e);
              });
          },
        },
        {
          key: '_getCosPreSigUrl',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('_getCosPreSigUrl'),
              i = Math.ceil(Date.now() / 1e3),
              o = new ei('_getCosPreSigUrl'),
              r = {
                uploadMethod: e.uploadMethod,
                platform: this.getPlatform(),
                SDKAppID: this.getSDKAppID(),
                userID: e.userID,
                conversationType: e.conversationType,
                uploadConfig: [
                  { fileID: 1, fileType: e.fileType, fileName: e.fileName },
                ],
              },
              a = Gn.SIMPLE_COS_PRE_SIG;
            return (
              this.isSimpleCos ||
                ((r = {
                  fileType: e.fileType,
                  fileName: e.fileName,
                  uploadMethod: e.uploadMethod,
                  duration: e.duration,
                }),
                (a = Gn.COS_PRE_SIG)),
              this.req({ P: a, data: r })
                .then(function (e) {
                  (t.tryCount = 0), (e = e.data || {});
                  var r,
                    a,
                    s =
                      (Ae.l(
                        ''
                          .concat(n, ' ok. isSimpleCos:')
                          .concat(t.isSimpleCos, ' data:'),
                        e
                      ),
                      '');
                  return (
                    (s = t.isSimpleCos
                      ? ((r = (a = e.preSig[0]).uploadUrl),
                        (a = a.fileKey),
                        'uploadIP:'
                          .concat(e.uploadIP, ' uploadUrl:')
                          .concat(r, ' fileKey:')
                          .concat(a, ' cost:')
                          .concat(Kt(i)))
                      : 'requestId:'
                          .concat(e.requestId, ' expiredTime:')
                          .concat(e.expiredTime, ' diff:')
                          .concat(e.expiredTime - i, 's')),
                    o.setMessage(s).end(),
                    e
                  );
                })
                .catch(function (i) {
                  return (
                    -1 === i.code && (i.code = wn.COS_GET_SIG_FAIL),
                    o.setError(i).end(),
                    Ae.w(''.concat(n, ' failed. error:'), i),
                    t.tryCount < 1
                      ? (t.tryCount++, t._getCosPreSigUrl(e))
                      : ((t.tryCount = 0), In({ code: wn.COS_GET_SIG_FAIL }))
                  );
                })
            );
          },
        },
        {
          key: '_initUploaderMethod',
          value: function () {
            var e = this;
            if (this.TIMUploadPlugin)
              return (
                (this.timUploadPlugin = new this.TIMUploadPlugin()),
                void (this._cosUploadMethod = function (t, n) {
                  e.timUploadPlugin.uploadFile(t, n);
                })
              );
            this.appid &&
              ((this.cos = Z
                ? new this.COSSDK({
                    ForcePathStyle: !0,
                    getAuthorization: this._getAuthorization.bind(this),
                  })
                : new this.COSSDK({
                    getAuthorization: this._getAuthorization.bind(this),
                  })),
              (this._cosUploadMethod = Z
                ? function (t, n) {
                    e.cos.postObject(t, n);
                  }
                : function (t, n) {
                    e.cos.uploadFiles(t, n);
                  }));
          },
        },
        {
          key: 'onCheckTimer',
          value: function (e) {
            this.COSSDK &&
              (this.TIMUploadPlugin ||
                (this.isLoggedIn() &&
                  e % 60 == 0 &&
                  Math.ceil(Date.now() / 1e3) >=
                    this.cosOptions.expiredTime - 120 &&
                  this._getAuthorizationKey()));
          },
        },
        {
          key: 'getFileDNList',
          value: function () {
            return this._fileDNList;
          },
        },
        {
          key: '_getAuthorization',
          value: function (e, t) {
            t({
              TmpSecretId: this.cosOptions.secretId,
              TmpSecretKey: this.cosOptions.secretKey,
              XCosSecurityToken: this.cosOptions.sessionToken,
              ExpiredTime: this.cosOptions.expiredTime,
            });
          },
        },
        {
          key: 'upload',
          value: function (e) {
            if (!0 === e._relayFlag) return Promise.resolve();
            var t = this.get(26);
            switch (e.type) {
              case D.MSG_IMAGE:
                return t.addTotalCount(jn), this._uploadImage(e);
              case D.MSG_FILE:
                return t.addTotalCount(jn), this._uploadFile(e);
              case D.MSG_AUDIO:
                return t.addTotalCount(jn), this._uploadAudio(e);
              case D.MSG_VIDEO:
                return t.addTotalCount(jn), this._uploadVideo(e);
              default:
                return Promise.resolve();
            }
          },
        },
        {
          key: '_uploadImage',
          value: function (e) {
            var n = this,
              i = this.get(2),
              o = e.getElements()[0],
              r = i.getMessageOption(e.clientSequence);
            return this.doUploadImage({
              file: r.payload.file,
              to: r.to,
              message: e,
              onProgress: function (e) {
                if ((o.updatePercent(e), Ye(r.onProgress)))
                  try {
                    r.onProgress(e);
                  } catch (t) {
                    return In({ code: wn.MSG_ONPROGRESS_ERR });
                  }
              },
            }).then(function (i) {
              var r = i.location,
                a = i.fileType,
                s = i.fileSize,
                c = i.width,
                u = i.height,
                l = i.smallImageUrl,
                d = i.smallImageWidth,
                p = i.smallImageHeight,
                h = i.largeImageUrl,
                f = i.largeImageWidth,
                g = i.largeImageHeight,
                _ = i.imageInfoArray;
              (i = n.isPrivateNetWork() ? r : rt(r)), o.updateImageFormat(a);
              var v,
                m,
                y = { size: s, url: i, width: c, height: u };
              if (_ && 0 < _.length)
                for (var I = 0; I < _.length; I++) {
                  var M = _[I];
                  1 === M.type
                    ? (v = M)
                    : 2 === M.type
                      ? (m = M)
                      : (y = t(t({}, y), M));
                }
              else
                m =
                  l && h
                    ? ((v = { url: l, width: d, height: p }),
                      { url: h, width: f, height: g })
                    : ((v = Ot({
                        originUrl: i,
                        originWidth: c,
                        originHeight: u,
                        min: 198,
                      })),
                      Ot({
                        originUrl: i,
                        originWidth: c,
                        originHeight: u,
                        min: 720,
                      }));
              return o.updateImageInfoArray([t({}, y), t({}, m), t({}, v)]), e;
            });
          },
        },
        {
          key: '_uploadFile',
          value: function (e) {
            var t = this,
              n = this.get(2),
              i = e.getElements()[0],
              o = n.getMessageOption(e.clientSequence);
            return this.doUploadFile({
              file: o.payload.file,
              to: o.to,
              message: e,
              onProgress: function (e) {
                if ((i.updatePercent(e), Ye(o.onProgress)))
                  try {
                    o.onProgress(e);
                  } catch (t) {
                    return In({ code: wn.MSG_ONPROGRESS_ERR });
                  }
              },
            }).then(function (n) {
              var o = (n = n.location);
              return (
                t.isPrivateNetWork() ||
                  (o = ai(
                    (o = rt(n)),
                    t._fileDownloadProxy,
                    t._authKey,
                    t._fileDNList
                  )),
                i.updateFileUrl(o),
                e
              );
            });
          },
        },
        {
          key: '_uploadAudio',
          value: function (e) {
            var t = this,
              n = this.get(2),
              i = e.getElements()[0],
              o = n.getMessageOption(e.clientSequence);
            return this.doUploadAudio({
              file: o.payload.file,
              to: o.to,
              message: e,
              onProgress: function (e) {
                if ((i.updatePercent(e), Ye(o.onProgress)))
                  try {
                    o.onProgress(e);
                  } catch (t) {
                    return In({ code: wn.MSG_ONPROGRESS_ERR });
                  }
              },
            }).then(function (n) {
              return (
                (n = n.location),
                (n = t.isPrivateNetWork() ? n : rt(n)),
                i.updateAudioUrl(n),
                e
              );
            });
          },
        },
        {
          key: '_uploadVideo',
          value: function (e) {
            var t = this,
              n = this.get(2),
              i = e.getElements()[0],
              o = n.getMessageOption(e.clientSequence);
            return this.doUploadVideo({
              file: o.payload.file,
              to: o.to,
              message: e,
              onProgress: function (e) {
                if ((i.updatePercent(e), Ye(o.onProgress)))
                  try {
                    o.onProgress(e);
                  } catch (t) {
                    return In({ code: wn.MSG_ONPROGRESS_ERR });
                  }
              },
            }).then(function (n) {
              var o = n.location;
              return (
                (n = n.snapshotInfo),
                (o = t.isPrivateNetWork() ? o : rt(o)),
                i.updateVideoUrl(o),
                Ve(n) || i.updateSnapshotInfo(n),
                e
              );
            });
          },
        },
        {
          key: '_checkSizeError',
          value: function (e) {
            var t = '';
            return (
              'A' === e
                ? (t = 'audio')
                : 'I' === e
                  ? (t = 'image')
                  : 'V' === e
                    ? (t = 'video')
                    : 'F' === e && (t = 'file'),
              In({
                code: wn['MSG_'.concat(e, '_SIZE_LIMIT')],
                message: this.getErrMsg(
                  'UploadSizeLimit',
                  t,
                  ''.concat(this.UPLOAD_SIZE_LIMIT[e] / 1048576, 'MB')
                ),
              })
            );
          },
        },
        {
          key: 'doUploadImage',
          value: function (e) {
            var t = this;
            if (!e.file || this._isEmptyFileList(e.file.files))
              return In({ code: wn.MSG_I_SELECT_F_FIRST });
            var n = this._checkImageType(e.file);
            if (!0 !== n) return n;
            if (!0 !== (n = this._checkImageSize(e.file))) return n;
            var i = null;
            return (
              this._setUploadFileType(1),
              this.uploadByCOS(e)
                .then(function (e) {
                  if (((i = e), t.isPrivateNetWork())) return kt(o);
                  if ($e(i.imageInfoArray)) {
                    var n = i.imageInfoArray.find(function (e) {
                      return 3 === e.type;
                    });
                    if (n) return n;
                  }
                  var o = rt(e.location);
                  return t.COSSDK
                    ? kt(o)
                    : kt(
                        (o = ai(
                          o,
                          t._fileDownloadProxy,
                          t._authKey,
                          t._fileDNList
                        ))
                      );
                })
                .then(function (e) {
                  return (
                    (i.width = e.width),
                    (i.height = e.height),
                    Promise.resolve(i)
                  );
                })
            );
          },
        },
        {
          key: '_checkImageType',
          value: function (e) {
            var t = '';
            return (
              (t = Z
                ? e.url.slice(e.url.lastIndexOf('.') + 1)
                : e.files[0].name.slice(e.files[0].name.lastIndexOf('.') + 1)),
              0 <= Qi.indexOf(t.toLowerCase()) ||
                In({ code: wn.MSG_I_TYPES_LIMIT })
            );
          },
        },
        {
          key: '_checkImageSize',
          value: function (e) {
            return 0 === (e = (Z ? e : e.files[0]).size)
              ? In({ code: wn.MSG_F_IS_EMPTY })
              : e < this.UPLOAD_SIZE_LIMIT.I || this._checkSizeError('I');
          },
        },
        {
          key: 'doUploadFile',
          value: function (e) {
            return !e.file || this._isEmptyFileList(e.file.files)
              ? In({ code: wn.MSG_F_SELECT_F_FIRST })
              : e.file.files[0].size > this.UPLOAD_SIZE_LIMIT.F
                ? this._checkSizeError('F')
                : 0 === e.file.files[0].size
                  ? In({ code: wn.MSG_F_IS_EMPTY })
                  : (this._setUploadFileType(255), this.uploadByCOS(e));
          },
        },
        {
          key: 'doUploadVideo',
          value: function (e) {
            return e.file.videoFile.size > this.UPLOAD_SIZE_LIMIT.V
              ? this._checkSizeError('V')
              : 0 === e.file.videoFile.size
                ? In({ code: wn.MSG_F_IS_EMPTY })
                : -1 === eo.indexOf(e.file.videoFile.type)
                  ? In({ code: wn.MSG_V_TYPES_LIMIT })
                  : (this._setUploadFileType(2),
                    Z
                      ? this.handleVideoUpload(
                          t(t({}, e), {}, { file: e.file.videoFile })
                        )
                      : ee
                        ? this.handleVideoUpload(e)
                        : void 0);
          },
        },
        {
          key: 'handleVideoUpload',
          value: function (e) {
            var t = this;
            return new Promise(function (n, i) {
              t.uploadByCOS(e)
                .then(function (e) {
                  n(e);
                })
                .catch(function () {
                  t.uploadByCOS(e)
                    .then(function (e) {
                      n(e);
                    })
                    .catch(function () {
                      i(new Pn({ code: wn.MSG_V_UPLOAD_FAIL }));
                    });
                });
            });
          },
        },
        {
          key: 'doUploadAudio',
          value: function (e) {
            return e.file
              ? e.file.size > this.UPLOAD_SIZE_LIMIT.A
                ? this._checkSizeError('A')
                : 0 === e.file.size
                  ? In({ code: wn.MSG_F_IS_EMPTY })
                  : (this._setUploadFileType(3), this.uploadByCOS(e))
              : In({ code: wn.MSG_A_UPLOAD_FAIL });
          },
        },
        {
          key: 'uploadByCOS',
          value: function (e) {
            var t = this;
            if (!Ye(this._cosUploadMethod))
              return (
                this.warn('PluginUndetected'), In({ code: wn.COS_UNDETECTED })
              );
            if (this.timUploadPlugin) return this._uploadWithPreSigUrl(e);
            var n = new ei('upload'),
              i = ''.concat(this._n, '.uploadByCOS'),
              o = Date.now(),
              r = this._getFile(e);
            return new Promise(function (a, s) {
              var c = Z
                  ? t._createCosOptionsWXMiniApp(e)
                  : t._createCosOptionsWeb(e),
                u = t;
              t._cosUploadMethod(c, function (e, c) {
                var l = Object.create(null);
                if (c) {
                  if (e || ($e(c.files) && c.files[0].error))
                    return (
                      (d = new Pn({ code: wn.MSG_F_UPLOAD_FAIL })),
                      n.setError(d).end(),
                      Ae.l(''.concat(i, ' failed. error:'), c.files[0].error),
                      403 === c.files[0].error.statusCode &&
                        t._getAuthorizationKey(),
                      void s(d)
                    );
                  (l.fileName = r.name),
                    (l.fileSize = r.size),
                    (l.fileType = r.type
                      .slice(r.type.indexOf('/') + 1)
                      .toLowerCase()),
                    (l.location = (Z ? c : c.files[0].data).Location);
                  var d = Date.now() - o,
                    p =
                      ((c = u._formatFileSize(r.size)),
                      u._formatSpeed((1e3 * r.size) / d));
                  return (
                    (c = 'size:'
                      .concat(c, ' time:')
                      .concat(d, 'ms speed:')
                      .concat(p)),
                    (Ae.l(
                      ''
                        .concat(i, ' success. name:')
                        .concat(r.name, ' ')
                        .concat(c)
                    ),
                    a(l),
                    (p = t.get(26))).addCost(jn, d),
                    p.addFileSize(jn, r.size),
                    void n.setMessage(c).end()
                  );
                }
                (l = new Pn({ code: wn.MSG_F_UPLOAD_FAIL })),
                  n.setError(l).end(),
                  Ae.w(''.concat(i, ' failed. error:'), e),
                  403 === e.statusCode && t._getAuthorizationKey(),
                  s(l);
              });
            });
          },
        },
        {
          key: '_uploadWithPreSigUrl',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '._uploadWithPreSigUrl'),
              i = this._getFile(e);
            return this._createCosOptionsPreSigUrl(e).then(function (e) {
              return new Promise(function (o, r) {
                var a = new ei('upload'),
                  s = e.requestSnapshotUrl,
                  c = void 0 === s ? void 0 : s,
                  u = h(e, Tr),
                  l = Date.now();
                t._cosUploadMethod(u, function (s, d) {
                  var p, h, f;
                  return s || 403 === d.statusCode
                    ? (a.setError(new Pn(s)).end(),
                      (h = {
                        HttpStatusCode: 9999,
                        CostTime: Kt(l, !1),
                        error: s,
                        url: e.url,
                      }),
                      d.data &&
                        d.data.uploadIP &&
                        (h.uploadIP = d.data.uploadIP),
                      t._uploadSSOLog(h),
                      Ae.l(''.concat(n, ' failed, error:'), s),
                      void r(new Pn({ code: wn.MSG_F_UPLOAD_FAIL })))
                    : ((p = Object.create(null)),
                      (h = d.data.location || ''),
                      t.isPrivateNetWork() ||
                        (0 !== h.indexOf('https://') &&
                          0 !== h.indexOf('http://')) ||
                        (h = h.split('//')[1]),
                      (p.fileName = i.name),
                      (p.fileSize = i.size),
                      (p.fileType = i.type
                        .slice(i.type.indexOf('/') + 1)
                        .toLowerCase()),
                      (p.location = h),
                      (s = Kt(l, !1)),
                      (h = t._formatFileSize(i.size)),
                      (f = t._formatSpeed((1e3 * i.size) / s)),
                      (h = 'size:'
                        .concat(h, ' time:')
                        .concat(s, 'ms speed:')
                        .concat(f, ' res:')
                        .concat(JSON.stringify(d.data))),
                      Ae.l(
                        ''.concat(n, ' ok. name:').concat(i.name, ' ').concat(h)
                      ),
                      a.setMessage(h).end(),
                      (f = {
                        HttpStatusCode: d.statusCode,
                        FileSize: i.size,
                        CostTime: s,
                        url: e.url,
                      }),
                      d.data &&
                        d.data.uploadIP &&
                        (f.uploadIP = d.data.uploadIP),
                      t._uploadSSOLog(f),
                      (h = t.get(26)).addCost(jn, s),
                      h.addFileSize(jn, i.size),
                      (f = []),
                      u.thumbUrl &&
                        u.largeUrl &&
                        f.push.apply(f, [
                          t._getSmallImageInfoByUrl(u.thumbUrl, p),
                          t._getLargeImageInfoByUrl(u.largeUrl, p),
                        ]),
                      1 === t.uploadFileType &&
                        t.isSimpleCos &&
                        !t.isPrivateNetWork() &&
                        (f.push(t._getImageInfoArray(u.downloadUrl, p)),
                        d.data.uploadIP &&
                          f.push(
                            t._getDownloadIP(
                              u.downloadUrl.split('//')[1].split('/')[0],
                              p
                            )
                          )),
                      c && f.push(t._getSnapshotInfoByUrl(c, p)),
                      0 < f.length
                        ? Promise.all(f).then(function () {
                            o(p);
                          })
                        : void o(p));
                });
              });
            });
          },
        },
        {
          key: '_getDownloadIP',
          value: function (e, t) {
            var n = ''.concat(this._n, '._getDownloadIP'),
              i = Date.now();
            return this.req({ P: Gn.GET_IP, data: { domainName: e } })
              .then(function (e) {
                var o;
                e.data &&
                  e.data.ip &&
                  (Ae.l(
                    ''
                      .concat(n, ' ok. downloadIP:')
                      .concat(e.data.ip, ' cost:')
                      .concat(Kt(i))
                  ),
                  ((o = t.location.split('/'))[0] = e.data.ip),
                  (t.location = o.join('/')));
              })
              .catch(function (e) {});
          },
        },
        {
          key: '_getImageInfoArray',
          value: function (e, t) {
            var n = this,
              i = ''.concat(this._n, '._getImageInfoArray'),
              o = Date.now();
            return this.req({ P: Gn.GET_IMAGE_INFO, data: { imageUrl: e } })
              .then(function (e) {
                return (
                  (e = e.data || {}),
                  Ae.l(
                    ''
                      .concat(i, ' ok. data: ')
                      .concat(JSON.stringify(e), ' cost:')
                      .concat(Kt(o))
                  ),
                  (t.imageInfoArray = e.imageInfoArray),
                  e
                );
              })
              .catch(function (i) {
                (t.imageInfoArray = void 0),
                  n._uploadSSOLog({
                    HttpStatusCode: 1e4,
                    CostTime: Kt(o, !1),
                    url: e,
                  });
              });
          },
        },
        {
          key: '_uploadSSOLog',
          value: function (e) {
            var t, n;
            this.isSimpleCos &&
              ((t = new ei()).setEventType(18),
              e.error && t.setError(new Pn(e.error)),
              (n =
                'HttpStatusCode:'
                  .concat(e.HttpStatusCode, '|CosRequestId:')
                  .concat(e.CosRequestId || '', '|') +
                'FileAlreadyExist:'
                  .concat(e.FileAlreadyExist || 0, '|FileSize:')
                  .concat(e.FileSize || 0, '|CostTime:')
                  .concat(e.CostTime)),
              e.uploadIP && (n += '|FinalIP:'.concat(e.uploadIP)),
              t.setMessage('OK').setMoreMessage(e.url).setExtension(n).end());
          },
        },
        {
          key: '_getRawOrUploadProxyUrl',
          value: function (e) {
            var t = this.get(12).getFileUploadProxy(),
              n = e;
            return t ? e.replace(/^https:\/\/[^/]+/, t) : n;
          },
        },
        {
          key: '_getFile',
          value: function (e) {
            return $e(e.file.files) || Je(e.file.files)
              ? e.file.files[0]
              : e.file;
          },
        },
        {
          key: '_formatFileSize',
          value: function (e) {
            return e < 1024
              ? e + 'B'
              : e < 1048576
                ? Math.floor(e / 1024) + 'KB'
                : Math.floor(e / 1048576) + 'MB';
          },
        },
        {
          key: '_formatSpeed',
          value: function (e) {
            return e <= 1048576
              ? Pt(e / 1024, 1) + 'KB/s'
              : Pt(e / 1048576, 1) + 'MB/s';
          },
        },
        {
          key: '_createCosOptionsWeb',
          value: function (e) {
            var t = this._getFile(e),
              n = (n = t.name).slice(n.lastIndexOf('.'));
            return (
              (n = this._genFileName(''.concat(nt(999999)).concat(n))),
              {
                files: [
                  {
                    Bucket: ''.concat(this.bucketName, '-').concat(this.appid),
                    Region: this.region,
                    Key: ''.concat(this.directory, '/').concat(n),
                    Body: t,
                  },
                ],
                SliceSize: 1048576,
                onProgress: function (t) {
                  if ('function' == typeof e.onProgress)
                    try {
                      e.onProgress(t.percent);
                    } catch (n) {
                      Ae.w('onProgress callback error:', n);
                    }
                },
                onFileFinish: function (e, t, n) {},
              }
            );
          },
        },
        {
          key: '_createCosOptionsWXMiniApp',
          value: function (e) {
            var t = this._getFile(e),
              n = this._genFileName(t.name);
            return (
              (t = t.url),
              {
                Bucket: ''.concat(this.bucketName, '-').concat(this.appid),
                Region: this.region,
                Key: ''.concat(this.directory, '/').concat(n),
                FilePath: t,
                onProgress: function (t) {
                  if (
                    (Ae.l(JSON.stringify(t)), 'function' == typeof e.onProgress)
                  )
                    try {
                      e.onProgress(t.percent);
                    } catch (n) {
                      Ae.w('onProgress callback error:', n);
                    }
                },
              }
            );
          },
        },
        {
          key: '_createCosOptionsPreSigUrl',
          value: function (e) {
            var t,
              n = this,
              i = '',
              o = '',
              r = 0,
              a = this._getFile(e);
            return (
              (r = Z
                ? ((i =
                    e.message.type === D.MSG_FILE
                      ? ((t = (t = a.name).slice(t.lastIndexOf('.'))),
                        this._genFileName(''.concat(nt(999999)).concat(t)))
                      : this._genFileName(a.name)),
                  (o = a.url),
                  1)
                : ((t = (t = a.name).slice(t.lastIndexOf('.'))),
                  (i = this._genFileName(''.concat(nt(999999)).concat(t))),
                  (o = a),
                  0)),
              this._getCosPreSigUrl({
                fileType: this.uploadFileType,
                fileName: i,
                uploadMethod: r,
                duration: this.duration,
                userID: e.message.from,
                conversationType: Tt(e.message.conversationID) ? 1 : 2,
              }).then(function (t) {
                var r = (l = n.isSimpleCos ? t.preSig[0] : t).uploadUrl,
                  a = l.downloadUrl,
                  s = void 0 === (s = l.requestSnapshotUrl) ? void 0 : s,
                  c = l.thumbUrl,
                  u = l.largeUrl,
                  l = l.fileKey;
                return (
                  (t = void 0 === (t = t.uploadIP) ? '' : t),
                  {
                    url: n._getRawOrUploadProxyUrl(r),
                    fileType: n.uploadFileType,
                    fileName: i,
                    resources: o,
                    downloadUrl: a,
                    requestSnapshotUrl: s,
                    thumbUrl: c,
                    largeUrl: u,
                    fileKey: l,
                    uploadIP: !n.isPrivateNetWork() && t,
                    onProgress: function (t) {
                      if ('function' == typeof e.onProgress)
                        try {
                          e.onProgress(t.percent);
                        } catch (n) {
                          Ae.w('onProgress callback error:', n), Ae.e(n);
                        }
                    },
                  }
                );
              })
            );
          },
        },
        {
          key: '_genFileName',
          value: function (e) {
            return ''.concat(Rt(), '-').concat(e);
          },
        },
        {
          key: '_setUploadFileType',
          value: function (e) {
            this.uploadFileType = e;
          },
        },
        {
          key: '_getSnapshotInfoByUrl',
          value: function (e, t) {
            var n = this,
              i = '_getSnapshotInfoByUrl',
              o = new ei(i);
            return this.req({
              P: Gn.VIDEO_COVER,
              data: {
                platform: this.getPlatform(),
                coverName: this._genFileName(nt(99999)),
                requestSnapshotUrl: e,
              },
            })
              .then(function (e) {
                if (
                  ((e = (e.data || {}).snapshotUrl),
                  Ae.l(
                    ''
                      .concat(n._n, '.')
                      .concat(i, ' ok. snapshotUrl:')
                      .concat(e)
                  ),
                  o.setMessage('snapshotUrl:'.concat(e)).end(),
                  Ve(e))
                )
                  return {};
                var r = ai(e, n._fileDownloadProxy, n._authKey, n._fileDNList);
                return kt(r).then(function (e) {
                  t.snapshotInfo = {
                    snapshotUrl: r,
                    snapshotWidth: e.width,
                    snapshotHeight: e.height,
                  };
                });
              })
              .catch(function (e) {
                return (
                  Ae.w(''.concat(n._n, '.').concat(i, ' failed. error:'), e),
                  o.setCode(e.errorCode).setMessage(e.errorInfo).end(),
                  {}
                );
              });
          },
        },
        {
          key: '_getSmallImageInfoByUrl',
          value: function (e, t) {
            return kt(
              ai(e, this._fileDownloadProxy, this._authKey, this._fileDNList)
            ).then(function (n) {
              (t.smallImageUrl = e),
                (t.smallImageWidth = n.width),
                (t.smallImageHeight = n.height);
            });
          },
        },
        {
          key: '_getLargeImageInfoByUrl',
          value: function (e, t) {
            return kt(
              ai(e, this._fileDownloadProxy, this._authKey, this._fileDNList)
            ).then(function (n) {
              (t.largeImageUrl = e),
                (t.largeImageWidth = n.width),
                (t.largeImageHeight = n.height);
            });
          },
        },
        {
          key: '_isEmptyFileList',
          value: function (e) {
            return !(!Je(e) || 0 !== e.length);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset'));
          },
        },
      ]),
      Ar),
    Dr = ['downloadKey', 'pbDownloadKey', 'messageList'],
    Sr =
      (r(Lr, [
        {
          key: 'uploadMergerMessage',
          value: function (e, t) {
            var n = ''.concat(this._n, '.').concat('uploadMergerMessage'),
              i = (Ae.d(
                ''.concat(n, ' message:'),
                e,
                'messageBytes:'.concat(t)
              ),
              (e = JSON.parse(JSON.stringify(e.payload)).messageList)).length,
              o = this._msgM.get(17).getFileDNList(),
              r = new ei('uploadMergerMessage');
            return (
              e.forEach(function (e) {
                si(e.messageBody[0].type, e.messageBody, o);
              }),
              this._msgM
                .req({ P: Gn.UPLOAD_MERGER_MSG, data: { messageList: e } })
                .then(function (e) {
                  Ae.d(''.concat(n, ' ok. response:'), e.data);
                  var o = {
                    pbDownloadKey: (o = (e = e.data).pbDownloadKey),
                    downloadKey: (e = e.downloadKey),
                    messageNumber: i,
                  };
                  return (
                    r
                      .setMessage(''.concat(i, '-').concat(t, '-').concat(e))
                      .end(),
                    o
                  );
                })
                .catch(function (e) {
                  throw (
                    (Ae.w(''.concat(n, ' failed. error:'), e),
                    r.setError(e).end(),
                    e)
                  );
                })
            );
          },
        },
        {
          key: 'downloadMergerMessage',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('downloadMergerMessage'),
              o = (Ae.d(''.concat(i, ' message:'), e), e.payload.downloadKey),
              r = this._msgM.getFileDownloadProxy(),
              a = this._msgM.getDowloadFileAuthKey(),
              s = new ei('downloadMergerMessage');
            return (
              s.setMessage('downloadKey:'.concat(o)),
              this._msgM
                .req({ P: Gn.DOWNLOAD_MERGER_MSG, data: { downloadKey: o } })
                .then(function (o) {
                  Ae.d(''.concat(i, ' ok. response:'), o.data);
                  var c,
                    u,
                    l = n._msgM.get(17).getFileDNList();
                  return (
                    Ye(e.clearElement)
                      ? ((c = e.payload).downloadKey,
                        c.pbDownloadKey,
                        c.messageList,
                        (c = h(c, Dr)),
                        e.clearElement(),
                        e.setElement(
                          {
                            type: e.type,
                            content: t({ messageList: o.data.messageList }, c),
                          },
                          r,
                          a,
                          l
                        ))
                      : ((u = []),
                        o.data.messageList.forEach(function (e) {
                          Ve(e) || ((e = new Mi(e, r, a, l)), u.push(e));
                        }),
                        (e.payload.messageList = u),
                        (e.payload.downloadKey = ''),
                        (e.payload.pbDownloadKey = '')),
                    s.end(),
                    e
                  );
                })
                .catch(function (e) {
                  throw (
                    (Ae.w(
                      ''.concat(i, ' failed. key:').concat(o, ' error:'),
                      e
                    ),
                    s.setError(e).end(),
                    e)
                  );
                })
            );
          },
        },
        {
          key: 'createMergerMessagePack',
          value: function (e, t, n) {
            return e.conversationType === D.CONV_C2C
              ? this._createC2CMergerMessagePack(e, t, n)
              : this._createGroupMergerMessagePack(e, t, n);
          },
        },
        {
          key: '_createC2CMergerMessagePack',
          value: function (e, t, n) {
            var i = null,
              o =
                (t &&
                  (t.offlinePushInfo && (i = t.offlinePushInfo),
                  !0 === t.onlineUserOnly &&
                    (i ? (i.disablePush = !0) : (i = { disablePush: !0 }))),
                []),
              r =
                (ze(t) &&
                  ze(t.messageControlInfo) &&
                  ((r = (s = t.messageControlInfo).excludedFromUnreadCount),
                  (a = s.excludedFromLastMessage),
                  (s = s.excludedFromContentModeration),
                  !0 === r && o.push('NoUnread'),
                  !0 === a && o.push('NoLastMsg'),
                  !0 === s && o.push('NoMsgCheck')),
                ''),
              a =
                (ct(e.cloudCustomData) &&
                  0 < e.cloudCustomData.length &&
                  (r = e.cloudCustomData),
                n.pbDownloadKey),
              s = n.downloadKey,
              c = ((n = n.messageNumber), (l = e.payload).title),
              u = l.abstractList,
              l = l.compatibleText,
              d =
                (d = this._msgM.get(6)) && d.isOnlineMessage(e, t) ? 0 : void 0;
            return {
              P: Gn.SEND_C2C_MSG,
              tjgID: this._msgM.generateTjgID(e),
              data: {
                fromAccount: this._msgM.getMyUserID(),
                toAccount: e.to,
                msgBody: [
                  {
                    msgType: e.type,
                    msgContent: {
                      pbDownloadKey: a,
                      downloadKey: s,
                      title: c,
                      abstractList: u,
                      compatibleText: l,
                      messageNumber: n,
                    },
                  },
                ],
                cloudCustomData: r,
                clientTime: e.clientTime,
                msgSeq: e.sequence,
                msgRandom: e.random,
                msgLifeTime: d,
                offlinePushInfo: Gi(i),
                messageControlInfo: 0 !== d ? o : void 0,
                isSupportExtension: !0 === e.isSupportExtension ? 1 : 0,
                isRelayMessage: !0 === e._relayFlag ? 1 : 0,
              },
            };
          },
        },
        {
          key: '_createGroupMergerMessagePack',
          value: function (e, t, n) {
            var i = null,
              o = (t && t.offlinePushInfo && (i = t.offlinePushInfo), []),
              r =
                (ze(t) &&
                  ze(t.messageControlInfo) &&
                  ((r = (s = t.messageControlInfo).excludedFromUnreadCount),
                  (a = s.excludedFromLastMessage),
                  (s = s.excludedFromContentModeration),
                  !0 === r && o.push('NoUnread'),
                  !0 === a && o.push('NoLastMsg'),
                  !0 === s && o.push('NoMsgCheck')),
                ''),
              a =
                (ct(e.cloudCustomData) &&
                  0 < e.cloudCustomData.length &&
                  (r = e.cloudCustomData),
                n.pbDownloadKey),
              s = n.downloadKey,
              c = ((n = n.messageNumber), (l = e.payload).title),
              u = l.abstractList,
              l = l.compatibleText,
              d = this._msgM.get(7);
            return (
              (t = d && d.isOnlineMessage(e, t) ? 1 : 0),
              {
                P: Gn.SEND_GRP_MSG,
                tjgID: this._msgM.generateTjgID(e),
                data: {
                  fromAccount: this._msgM.getMyUserID(),
                  groupID: e.to,
                  msgBody: [
                    {
                      msgType: e.type,
                      msgContent: {
                        pbDownloadKey: a,
                        downloadKey: s,
                        title: c,
                        abstractList: u,
                        compatibleText: l,
                        messageNumber: n,
                      },
                    },
                  ],
                  random: e.random,
                  priority: e.priority,
                  clientSequence: e.clientSequence,
                  groupAtInfo: void 0,
                  cloudCustomData: r,
                  onlineOnlyFlag: t,
                  offlinePushInfo: Gi(i),
                  clientTime: e.clientTime,
                  needReadReceipt:
                    !0 !== e.needReadReceipt ||
                    d.isMessageFromOrToAVChatroom(e.to)
                      ? 0
                      : 1,
                  messageControlInfo: 0 == t ? o : void 0,
                  isSupportExtension: !0 === e.isSupportExtension ? 1 : 0,
                  isRelayMessage: !0 === e._relayFlag ? 1 : 0,
                },
              }
            );
          },
        },
      ]),
      Lr),
    kr = {
      ERR_SVR_COMM_SENSITIVE_TEXT: 80001,
      ERR_SVR_COMM_BODY_SIZE_LIMIT: 80002,
      OPEN_SERVICE_OVERLOAD_ERROR: 60022,
      ERR_SVR_MSG_PKG_PARSE_FAILED: 20001,
      ERR_SVR_MSG_INTERNAL_AUTH_FAILED: 20002,
      ERR_SVR_MSG_INVALID_ID: 20003,
      ERR_SVR_MSG_PUSH_DENY: 20006,
      ERR_SVR_MSG_IN_PEER_BLACKLIST: 20007,
      ERR_SVR_MSG_BOTH_NOT_FRIEND: 20009,
      ERR_SVR_MSG_NOT_PEER_FRIEND: 20010,
      ERR_SVR_MSG_NOT_SELF_FRIEND: 20011,
      ERR_SVR_MSG_SHUTUP_DENY: 20012,
      ERR_SVR_GROUP_INVALID_PARAMETERS: 10004,
      ERR_SVR_GROUP_PERMISSION_DENY: 10007,
      ERR_SVR_GROUP_NOT_FOUND: 10010,
      ERR_SVR_GROUP_INVALID_GROUPID: 10015,
      ERR_SVR_GROUP_REJECT_FROM_THIRDPARTY: 10016,
      ERR_SVR_GROUP_SHUTUP_DENY: 10017,
      MSG_SEND_FAIL: 2100,
      OVER_FREQUENCY_LIMIT: 2996,
    },
    Rr = [
      wn.MSG_ONPROGRESS_ERR,
      wn.MSG_I_SELECT_F_FIRST,
      wn.MSG_I_TYPES_LIMIT,
      wn.MSG_F_IS_EMPTY,
      wn.MSG_I_SIZE_LIMIT,
      wn.MSG_F_SELECT_F_FIRST,
      wn.MSG_F_SIZE_LIMIT,
      wn.MSG_V_SIZE_LIMIT,
      wn.MSG_V_TYPES_LIMIT,
      wn.MSG_A_UPLOAD_FAIL,
      wn.MSG_A_SIZE_LIMIT,
      wn.COS_UNDETECTED,
    ];
  function Lr(e) {
    i(this, Lr), (this._n = 'MergerMessageHandler'), (this._msgM = e);
  }
  function Ar(e) {
    i(this, Ar),
      ((e = Ir.call(this, e))._n = 'UploadModule'),
      (e.TIMUploadPlugin = null),
      (e.timUploadPlugin = null),
      (e.COSSDK = null),
      (e._cosUploadMethod = null),
      (e.expiredTimeLimit = 600),
      (e.appid = 0),
      (e.bucketName = ''),
      (e.ciUrl = ''),
      (e.directory = ''),
      (e.downloadUrl = ''),
      (e.uploadUrl = ''),
      (e.region = 'ap-shanghai'),
      (e.cos = null),
      (e.cosOptions = {
        secretId: '',
        secretKey: '',
        sessionToken: '',
        expiredTime: 0,
      }),
      (e.uploadFileType = ''),
      (e.duration = 900),
      (e.tryCount = 0),
      (e.UPLOAD_SIZE_LIMIT = {
        A: 20971520,
        F: 104857600,
        I: 20971520,
        V: 104857600,
      }),
      (e.isSimpleCos = !1),
      (e._fileDownloadProxy = ''),
      (e._authKey = ''),
      (e._fileDNList = []);
    var t = e.getIEmitInst();
    return (
      t.on(qi.A2KEY_AND_TINYID_UPDATED, e._init, f(e)),
      t.on(qi.CLOUD_CONFIG, e._onCloudConfig, f(e)),
      e
    );
  }
  function Or(e) {
    var t = !1;
    return (
      Object.values(kr).includes(e) && (t = !0),
      (120001 <= e && e <= 13e4) || (10100 <= e && e <= 10200) || t
    );
  }
  var br,
    Nr,
    Pr,
    wr,
    Ur,
    Gr,
    xr = ['conversationID', 'timePosition', 'timePeriod'],
    Fr =
      (s(Xr, An),
      (Gr = g(Xr)),
      r(Xr, [
        {
          key: 'createTextMessage',
          value: function (e) {
            var t = this.getMyUserID(),
              n =
                ((e.currentUser = t),
                (e.senderTinyID = this.getMyTinyID()),
                new Ei(e));
            return (
              (e = ct(e.payload) ? e.payload : e.payload.text),
              (e = new ti({ text: e })),
              (t = this._getNickAndAvatarByUserID(t)),
              n.setElement(e),
              n.setNickAndAvatar(t),
              n.setNameCard(this._getNameCardByGroupID(n)),
              n
            );
          },
        },
        {
          key: 'createImageMessage',
          value: function (e) {
            var t = this.getMyUserID(),
              n =
                ((e.currentUser = t),
                (e.senderTinyID = this.getMyTinyID()),
                new Ei(e));
            if (Z) {
              if (je((o = e.payload.file)))
                return void this.warn(
                  'FileUnsupportedInMP',
                  'createImageMessage'
                );
              var i = o.tempFiles[0].path || o.tempFiles[0].tempFilePath,
                o = {
                  url: i,
                  name: i.slice(i.lastIndexOf('/') + 1),
                  size: (o.tempFiles && o.tempFiles[0].size) || 1,
                  type: i.slice(i.lastIndexOf('.') + 1).toLowerCase(),
                };
              e.payload.file = o;
            } else
              ee &&
                (je(e.payload.file)
                  ? ((i = e.payload.file), (e.payload.file = { files: [i] }))
                  : ze(e.payload.file) &&
                    void 0 !== Yn &&
                    ((o = e.payload.file.tempFiles[0]),
                    (e.payload.file = { files: [o] })));
            return (
              (i = new li({
                imageFormat: Oe.UNKNOWN,
                uuid: this._generateUUID(e.payload.file),
                file: e.payload.file,
              })),
              (o = this._getNickAndAvatarByUserID(t)),
              n.setElement(i),
              n.setNickAndAvatar(o),
              n.setNameCard(this._getNameCardByGroupID(n)),
              this._messageOptionsMap.set(n.clientSequence, e),
              n
            );
          },
        },
        {
          key: 'createAudioMessage',
          value: function (e) {
            var t = e.payload.file,
              n =
                (Z &&
                  ((n = {
                    url: t.tempFilePath,
                    name: t.tempFilePath.slice(
                      t.tempFilePath.lastIndexOf('/') + 1
                    ),
                    size: t.fileSize,
                    second: parseInt(t.duration) / 1e3,
                    type: t.tempFilePath
                      .slice(t.tempFilePath.lastIndexOf('.') + 1)
                      .toLowerCase(),
                  }),
                  (e.payload.file = n)),
                this.getMyUserID()),
              i =
                ((e.currentUser = n),
                (e.senderTinyID = this.getMyTinyID()),
                new Ei(e));
            return (
              (t = new pi({
                second: Math.floor(t.duration / 1e3),
                size: t.fileSize || t.size,
                url: t.tempFilePath,
                uuid: this._generateUUID(e.payload.file),
              })),
              (n = this._getNickAndAvatarByUserID(n)),
              i.setElement(t),
              i.setNickAndAvatar(n),
              i.setNameCard(this._getNameCardByGroupID(i)),
              this._messageOptionsMap.set(i.clientSequence, e),
              i
            );
          },
        },
        {
          key: 'createVideoMessage',
          value: function (e) {
            var t = this.getMyUserID(),
              n =
                ((e.currentUser = t),
                (e.senderTinyID = this.getMyTinyID()),
                (e.payload.file.thumbUrl = ''),
                (e.payload.file.thumbSize = 0),
                {});
            if (Z) {
              if (z) return void this.warn('VideoUnsupportedInAlipay');
              if (je(e.payload.file))
                return void this.warn(
                  'FileUnsupportedInMP',
                  'createVideoMessage'
                );
              var i = e.payload.file;
              $e(i.tempFiles) && (i = i.tempFiles[0]),
                (n.url = i.tempFilePath),
                (n.name = i.tempFilePath.slice(
                  i.tempFilePath.lastIndexOf('/') + 1
                )),
                (n.size = i.size || 1),
                (n.second = i.duration || 0),
                (n.type = i.tempFilePath
                  .slice(i.tempFilePath.lastIndexOf('.') + 1)
                  .toLowerCase());
            } else
              ee &&
                (je(e.payload.file)
                  ? ((i = e.payload.file), (e.payload.file.files = [i]))
                  : ze(e.payload.file) &&
                    void 0 !== Yn &&
                    ((i = e.payload.file.tempFile),
                    (e.payload.file.files = [i])),
                (i = e.payload.file),
                (n.url = window.URL.createObjectURL(i.files[0])),
                (n.name = i.files[0].name),
                (n.size = i.files[0].size || 1),
                (n.second = i.files[0].duration || 0),
                (n.type = i.files[0].type.split('/')[1]));
            return (
              (e.payload.file.videoFile = n),
              (i = new Ei(e)),
              (n = new yi({
                videoFormat: n.type,
                videoSecond: Pt(n.second, 0),
                videoSize: n.size,
                remoteVideoUrl: '',
                videoUrl: n.url,
                videoUUID: this._generateUUID(e.payload.file.videoFile),
                thumbUUID: this._generateUUID(e.payload.file.videoFile),
                thumbWidth: e.payload.file.width || 200,
                thumbHeight: e.payload.file.height || 200,
                thumbUrl: e.payload.file.thumbUrl,
                thumbSize: e.payload.file.thumbSize,
                thumbFormat: e.payload.file.thumbUrl
                  .slice(e.payload.file.thumbUrl.lastIndexOf('.') + 1)
                  .toLowerCase(),
              })),
              (t = this._getNickAndAvatarByUserID(t)),
              i.setElement(n),
              i.setNickAndAvatar(t),
              i.setNameCard(this._getNameCardByGroupID(i)),
              this._messageOptionsMap.set(i.clientSequence, e),
              i
            );
          },
        },
        {
          key: 'createCustomMessage',
          value: function (e) {
            var t = this.getMyUserID(),
              n =
                ((e.currentUser = t),
                (e.senderTinyID = this.getMyTinyID()),
                new Ei(e));
            return (
              (e = new mi({
                data: e.payload.data,
                description: e.payload.description,
                extension: e.payload.extension,
              })),
              (t = this._getNickAndAvatarByUserID(t)),
              n.setElement(e),
              n.setNickAndAvatar(t),
              n.setNameCard(this._getNameCardByGroupID(n)),
              n
            );
          },
        },
        {
          key: 'createFaceMessage',
          value: function (e) {
            var t = this.getMyUserID(),
              n =
                ((e.currentUser = t),
                (e.senderTinyID = this.getMyTinyID()),
                new Ei(e));
            return (
              (e = new di(e.payload)),
              (t = this._getNickAndAvatarByUserID(t)),
              n.setElement(e),
              n.setNickAndAvatar(t),
              n.setNameCard(this._getNameCardByGroupID(n)),
              n
            );
          },
        },
        {
          key: 'createMergerMessage',
          value: function (e) {
            var t = this.getMyUserID(),
              n =
                ((e.currentUser = t),
                (e.senderTinyID = this.getMyTinyID()),
                (t = this._getNickAndAvatarByUserID(t)),
                new Ei(e));
            return (
              (e = new Ci(e.payload)),
              n.setElement(e),
              n.setNickAndAvatar(t),
              n.setNameCard(this._getNameCardByGroupID(n)),
              n.setRelayFlag(!0),
              n
            );
          },
        },
        {
          key: 'createForwardMessage',
          value: function (e) {
            var t = e.to,
              n = e.conversationType,
              i = e.priority,
              o = e.payload,
              r = e.needReadReceipt,
              a = e.receiverList;
            if (!$e(o._elements))
              return In({ code: wn.MSG_FORWARD_INVALID_ELEMENTS });
            var s = this.getMyUserID(),
              c = this._getNickAndAvatarByUserID(s);
            return o.type === D.MSG_GRP_TIP
              ? In({ code: wn.MSG_FORWARD_TYPE_INVALID })
              : ((n = {
                  to: t,
                  conversationType: n,
                  conversationID: ''.concat(n).concat(t),
                  priority: i,
                  isPlaceMessage: 0,
                  status: Cn,
                  currentUser: s,
                  senderTinyID: this.getMyTinyID(),
                  cloudCustomData: e.cloudCustomData || o.cloudCustomData || '',
                  needReadReceipt: r,
                  receiverList: a,
                  isSupportExtension: e.isSupportExtension || !1,
                }),
                (t = new Ei(n)).setElement(o._elements[0]),
                t.setNickAndAvatar(c),
                t.setNameCard(this._getNameCardByGroupID(o)),
                t.setRelayFlag(!0),
                t);
          },
        },
        {
          key: 'downloadMergerMessage',
          value: function (e) {
            return this._mergerMessageHandler.downloadMergerMessage(e);
          },
        },
        {
          key: 'createFileMessage',
          value: function (e) {
            if (Z) {
              if (!B && !j && !Y) return;
              var n = te.getSystemInfoSync().SDKVersion;
              if (B && At(n, '2.5.0') < 0)
                return void this.warn('WXChooseMessageFile');
              if (j && At(n, '1.18.0') < 0)
                return void this.warn('QQChooseMessageFile');
            }
            ee || Y
              ? je(e.payload.file)
                ? ((n = e.payload.file), (e.payload.file = { files: [n] }))
                : ze(e.payload.file) &&
                  void 0 !== Yn &&
                  ((o = (n = e.payload.file).tempFiles),
                  (n = n.files),
                  (i = null),
                  $e(o) ? (i = o[0]) : $e(n) && (i = n[0]),
                  (e.payload.file = { files: [i] }))
              : (B || j) &&
                ((n = t(
                  t({}, (o = e.payload.file.tempFiles)[0]),
                  {},
                  { url: o[0].path }
                )),
                (e.payload.file = { files: [n] }));
            var i = this.getMyUserID(),
              o =
                ((e.currentUser = i),
                (e.senderTinyID = this.getMyTinyID()),
                new Ei(e));
            return (
              (n = new vi({
                uuid: this._generateUUID(e.payload.file),
                file: e.payload.file,
              })),
              (i = this._getNickAndAvatarByUserID(i)),
              o.setElement(n),
              o.setNickAndAvatar(i),
              o.setNameCard(this._getNameCardByGroupID(o)),
              this._messageOptionsMap.set(o.clientSequence, e),
              o
            );
          },
        },
        {
          key: 'createLocationMessage',
          value: function (e) {
            var t = this.getMyUserID(),
              n =
                ((e.currentUser = t),
                (e.senderTinyID = this.getMyTinyID()),
                new Ei(e));
            return (
              (e = new Ii(e.payload)),
              (t = this._getNickAndAvatarByUserID(t)),
              n.setElement(e),
              n.setNickAndAvatar(t),
              n.setNameCard(this._getNameCardByGroupID(n)),
              n
            );
          },
        },
        {
          key: '_onNoModule',
          value: function () {
            return In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'sendMessageInstance',
          value: function (e, t) {
            var n = this;
            if (!1 === this.get(29).filterMessage(e, t))
              return (
                (e.hasRiskContent = !0),
                this._onSendMessageFailed(
                  e,
                  new Pn({ code: wn.PROFANITY_FOUND })
                )
              );
            var i = null;
            if (e.conversationType === D.CONV_C2C) i = this.get(6);
            else {
              if (e.conversationType !== D.CONV_GROUP)
                return In({ code: wn.MSG_INVALID_CONV_TYPE });
              i = this.get(7);
            }
            if (!i) return this._onNoModule();
            var o,
              r = ''.concat(this._n, '.sendMessageInstance'),
              a = this.get(11),
              s = i.isOnlineMessage(e, t);
            return this.get(17)
              .upload(e)
              .then(function () {
                return (
                  n._getSendMessageSpecifiedKey(e) === Hn &&
                    n.get(26).addSuccessCount(jn),
                  n
                    ._guardForGroup(e)
                    .then(function () {
                      if (!e.isSendable())
                        return In({ code: wn.MSG_F_URL_IS_EMPTY });
                      n._addSendMessageTotalCount(e), (o = Date.now());
                      var r = (function (e) {
                        var t = 'utf-8';
                        ee && document && (t = document.charset.toLowerCase());
                        var n,
                          i = 0,
                          o = e.length;
                        if ('utf-8' === t || 'utf8' === t)
                          for (var r = 0; r < o; r++)
                            (n = e.codePointAt(r)) <= 127
                              ? (i += 1)
                              : n <= 2047
                                ? (i += 2)
                                : n <= 65535
                                  ? (i += 3)
                                  : ((i += 4), r++);
                        else if ('utf-16' === t || 'utf16' === t)
                          for (var a = 0; a < o; a++)
                            (n = e.codePointAt(a)) <= 65535
                              ? (i += 2)
                              : ((i += 4), a++);
                        else i = e.replace(/[^\x00-\xff]/g, 'aa').length;
                        return i;
                      })(JSON.stringify(e));
                      return e.type === D.MSG_MERGER && 11264 < r
                        ? n._mergerMessageHandler
                            .uploadMergerMessage(e, r)
                            .then(function (i) {
                              return (
                                (i =
                                  n._mergerMessageHandler.createMergerMessagePack(
                                    e,
                                    t,
                                    i
                                  )),
                                n.req(i)
                              );
                            })
                        : (a.setMessageRandom(e), i.sendMessage(e, t));
                    })
                    .then(function (i) {
                      var c,
                        u = (i = i.data).time,
                        l = i.sequence,
                        d = i.readReceiptCode;
                      return (
                        (i = i.messageDropReason),
                        Ke(d) &&
                          0 !== d &&
                          (new ei('sendMessageWithReceipt')
                            .setMessage(
                              'from:'
                                .concat(e.from, ' to:')
                                .concat(e.to, ' sequence:')
                                .concat(l, ' readReceiptCode:')
                                .concat(d)
                            )
                            .end(),
                          Ae.w(
                            ''
                              .concat(r, ' readReceiptCode:')
                              .concat(d, ' message:')
                              .concat(n.getErrMsg(d))
                          )),
                        i &&
                          ((d = new ei('messageDropReason')),
                          (i = 'from:'
                            .concat(e.from, ' to:')
                            .concat(e.to, ' sequence:')
                            .concat(l, ' messageDropReason:')
                            .concat(i)),
                          d.setMessage(i).end(),
                          Ae.w(''.concat(r, ' ').concat(i))),
                        n._addSendMessageSuccessCount(e, o),
                        n._messageOptionsMap.delete(e.clientSequence),
                        !0 === e.isResend &&
                          (c = a.findMessage(e.ID)) &&
                          (Ae.l(''.concat(r, ' resend ok. ID:').concat(c.ID)),
                          a.deleteLocalMessage(c)),
                        (e.status = Tn),
                        (e.time = u),
                        (d = !1),
                        e.conversationType === D.CONV_GROUP
                          ? (e.sequence = l)
                          : e.conversationType !== D.CONV_C2C ||
                            ((i = a.getLatestMessageSentByMe(
                              e.conversationID
                            )) &&
                              ((c = i.nick),
                              (u = i.avatar),
                              (c === e.nick && u === e.avatar) || (d = !0))),
                        d &&
                          a.modifyMessageSentByMe({
                            conversationID: e.conversationID,
                            latestNick: e.nick,
                            latestAvatar: e.avatar,
                          }),
                        !0 === s
                          ? (e._onlineOnlyFlag = !0)
                          : (a.appendToMessageList(e),
                            (l = e),
                            ze(t) &&
                              ze(t.messageControlInfo) &&
                              (!0 ===
                                t.messageControlInfo.excludedFromLastMessage &&
                                ((e._isExcludedFromLastMessage = !0), (l = '')),
                              !0 ===
                                t.messageControlInfo.excludedFromUnreadCount &&
                                (e._isExcludedFromUnreadCount = !0)),
                            (i = e.conversationType),
                            Ct(e.to) &&
                              ((i = D.CONV_TOPIC),
                              n
                                .get(10)
                                .onMessageSent({
                                  groupID: Gt(e.to),
                                  topicID: e.to,
                                  lastMessage: l,
                                })),
                            a.onMessageSent({
                              conversationOptionsList: [
                                {
                                  conversationID: e.conversationID,
                                  unreadCount: 0,
                                  type: i,
                                  subType: e.conversationSubType,
                                  lastMessage: l,
                                },
                              ],
                            })),
                        e._relayFlag ||
                          'TIMImageElem' !== e.type ||
                          bt(e.payload.imageInfoArray),
                        mn({ message: e })
                      );
                    })
                );
              })
              .catch(function (t) {
                return n._onSendMessageFailed(e, t, s);
              });
          },
        },
        {
          key: '_guardForGroup',
          value: function (e) {
            if (e.conversationType !== D.CONV_GROUP) return Promise.resolve();
            var t = this.get(7);
            if (!t) return this._onNoModule();
            if (Mt({ groupID: e.to })) {
              var n = t.getLocalGroupProfile(e.to);
              if (n && n.isSupportTopic)
                return In({ code: wn.MSG_SEND_GRP_WITH_TOPIC_FAIL });
            }
            return t.guardForAVChatRoom(e);
          },
        },
        {
          key: '_onSendMessageFailed',
          value: function (e, t) {
            var n =
                2 < arguments.length && void 0 !== arguments[2] && arguments[2],
              i = ''.concat(this._n, '._onSendMessageFailed'),
              o =
                ((e.status = En),
                (80001 !== t.code && 80004 !== t.code) ||
                  (e.hasRiskContent = !0),
                this.get(11)),
              r =
                (o.deleteMessageRandom(e),
                (10100 <= t.code && t.code <= 10200) ||
                  (120001 <= t.code && t.code <= 13e4));
            return (
              n ||
                r ||
                (!0 === o.appendToMessageList(e) &&
                  Ae.l(''.concat(i, ' message stored, ID:').concat(e.ID))),
              this._addSendMessageFailCountOnUser(e, t),
              (n = new ei('sendMessage')),
              (r = 'tjg_id:'
                .concat(this.generateTjgID(e), ' type:')
                .concat(e.type, ' from:')
                .concat(e.from, ' to:')
                .concat(e.to)),
              ee &&
                ('connection' in navigator &&
                  ((o = navigator.connection),
                  (r += ' downlink:'
                    .concat(o.downlink, ' effectiveType:')
                    .concat(o.effectiveType, ' rtt:')
                    .concat(o.rtt))),
                'memory' in window.performance &&
                  ((o = window.performance.memory),
                  (r += ' usedJSHeapSize:'
                    .concat(o.usedJSHeapSize, ' totalJSHeapSize:')
                    .concat(o.totalJSHeapSize, ' jsHeapSizeLimit:')
                    .concat(o.jsHeapSizeLimit)))),
              n.setMessage(r).setError(t).end(),
              Ae.e(''.concat(i, ' error:'), t),
              In(
                new Pn({
                  code: t && t.code ? t.code : wn.MSG_SEND_FAIL,
                  message: t && t.message ? t.message : void 0,
                  data: { message: e },
                })
              )
            );
          },
        },
        {
          key: '_getSendMessageSpecifiedKey',
          value: function (e) {
            if (
              [D.MSG_IMAGE, D.MSG_AUDIO, D.MSG_VIDEO, D.MSG_FILE].includes(
                e.type
              )
            )
              return Hn;
            if (e.conversationType === D.CONV_C2C) return qn;
            if (e.conversationType === D.CONV_GROUP) {
              var t = this.get(7);
              if (t && (t = t.getLocalGroupProfile(e.to)))
                return It((e = t.type)) ? Bn : Vn;
            }
          },
        },
        {
          key: '_addSendMessageTotalCount',
          value: function (e) {
            (e = this._getSendMessageSpecifiedKey(e)) &&
              this.get(26).addTotalCount(e);
          },
        },
        {
          key: '_addSendMessageSuccessCount',
          value: function (e, t) {
            var n;
            (e = this._getSendMessageSpecifiedKey(e)) &&
              ((n = this.get(26)).addSuccessCount(e), n.addCost(e, Kt(t, !1)));
          },
        },
        {
          key: '_addSendMessageFailCountOnUser',
          value: function (e, t) {
            t = void 0 === (t = t.code) ? -1 : t;
            var n,
              i = this.get(26);
            (e = this._getSendMessageSpecifiedKey(e)) === Hn &&
            ((n = !1), (n = !!Rr.includes(t) || n))
              ? i.addFailedCountOfUserSide(jn)
              : Or(t) && e && i.addFailedCountOfUserSide(e);
          },
        },
        {
          key: 'resendMessage',
          value: function (e, t) {
            return (
              (e.isResend = !0), (e.status = Cn), this.sendMessageInstance(e, t)
            );
          },
        },
        {
          key: 'revokeMessage',
          value: function (e) {
            var t = this,
              n = null;
            if (
              (e.conversationType === D.CONV_C2C
                ? (n = this.get(6))
                : e.conversationType === D.CONV_GROUP && (n = this.get(7)),
              !n)
            )
              return this._onNoModule();
            var i = new ei('revokeMessage'),
              o =
                (i.setMessage(
                  'tjg_id:'
                    .concat(this.generateTjgID(e), ' type:')
                    .concat(e.type, ' from:')
                    .concat(e.from, ' to:')
                    .concat(e.to)
                ),
                ''.concat(this._n, '.').concat('revokeMessage'));
            return n
              .revokeMessage(e)
              .then(function (n) {
                return Ve((n = n.data.recallRetList)) || 0 === n[0].retCode
                  ? (Ae.i(''.concat(o, ' ok. ID:').concat(e.ID)),
                    (e.isRevoked = !0),
                    i.end(),
                    t.get(11).onMessageRevoked([e]),
                    mn({ message: e }))
                  : ((n = new Pn({ code: n[0].retCode, data: { message: e } })),
                    i.setCode(n.code).setMoreMessage(n.message).end(),
                    In(n));
              })
              .catch(function (t) {
                i.setError(t).end();
                var n = new Pn({
                  code: t && t.code ? t.code : wn.MSG_REVOKE_FAIL,
                  message: t && t.message ? t.message : void 0,
                  data: { message: e },
                });
                return Ae.w(''.concat(o, ' failed. error:'), t), In(n);
              });
          },
        },
        {
          key: 'deleteMessage',
          value: function (e) {
            var t = this,
              n = null,
              i = e[0],
              o = i.conversationID,
              r = '',
              a = [],
              s = [];
            if (i.conversationType === D.CONV_C2C)
              (n = this.get(6)),
                (r = o.replace(D.CONV_C2C, '')),
                e.forEach(function (e) {
                  e &&
                    e.status === Tn &&
                    e.conversationID === o &&
                    (e._onlineOnlyFlag ||
                      a.push(
                        ''
                          .concat(e.sequence, '_')
                          .concat(e.random, '_')
                          .concat(e.time)
                      ),
                    s.push(e));
                });
            else if (i.conversationType === D.CONV_GROUP)
              (n = this.get(7)),
                (r = o.replace(D.CONV_GROUP, '')),
                e.forEach(function (e) {
                  e &&
                    e.status === Tn &&
                    e.conversationID === o &&
                    (e._onlineOnlyFlag || a.push(''.concat(e.sequence)),
                    s.push(e));
                });
            else if (i.conversationType === D.CONV_SYSTEM)
              return In({ code: wn.CANNOT_DELETE_GRP_SYSTEM_NOTICE });
            if (!n) return this._onNoModule();
            if (0 === a.length) return this._onMessageDeleted(s);
            30 < a.length && ((a = a.slice(0, 30)), (s = s.slice(0, 30)));
            var c = new ei('deleteMessage'),
              u =
                (c.setMessage('to:'.concat(r, ' count:').concat(a.length)),
                ''.concat(this._n, '.').concat('deleteMessage'));
            return n
              .deleteMessage({ to: r, keyList: a })
              .then(function (e) {
                return (
                  c.end(), Ae.i(''.concat(u, ' ok')), t._onMessageDeleted(s)
                );
              })
              .catch(function (e) {
                return (
                  c.setError(e).end(),
                  Ae.w(''.concat(u, ' failed. error:'), e),
                  In(
                    (e = new Pn({
                      code: e && e.code ? e.code : wn.MSG_DELETE_FAIL,
                      message: e && e.message ? e.message : void 0,
                    }))
                  )
                );
              });
          },
        },
        {
          key: '_onMessageDeleted',
          value: function (e) {
            return this.get(11).onMessageDeleted(e), yn({ messageList: e });
          },
        },
        {
          key: 'translateText',
          value: function (e) {
            var n = ''.concat(this._n, '.').concat('translateText'),
              i = e.sourceTextList,
              o = e.sourceLanguage,
              r = ((e = e.targetLanguage), new ei('translateText'));
            return (
              r.setMessage(
                'sourceLanguage:'.concat(o, ' targetLanguage:').concat(e)
              ),
              this.req({
                P: Gn.TRANSLATE_TEXT,
                data: {
                  sourceTextList: i,
                  source: o || 'auto',
                  target: e,
                  from: this.getMyTinyID(),
                  SDKAppID: this.getSDKAppID(),
                },
              })
                .then(function (e) {
                  var i = (e = e.data).error,
                    o = e.requestID;
                  if (((e = e.translatedTextList), 0 === i.code))
                    return (
                      r.end(),
                      Ae.i(''.concat(n, ' ok. requestID:').concat(o)),
                      mn({ translatedTextList: e })
                    );
                  throw t(t({}, i), {}, { requestID: o });
                })
                .catch(function (e) {
                  return (
                    r.setCode(e.code).setMoreMessage(e.requestID).end(),
                    Ae.w(''.concat(n, ' failed. error:'), e),
                    In({ code: wn.TRANSLATE_TEXT_FAIL })
                  );
                })
            );
          },
        },
        {
          key: 'convertVoiceToText',
          value: function (e) {
            var n = e.message,
              i = ((e = e.language), n.payload.url);
            if (
              !(n.from === this.getMyUserID() &&
                'out' === n.flow &&
                (i = n.payload.remoteAudioUrl),
              (n = /\.(wav|pcm|ogg-opus|speex|silk|mp3|m4a|aac|amr)/)).test(i)
            )
              return In({ code: wn.UNSUPPORTED_VOICE_FORMAT });
            n = n.exec(i)[1] || 'mp3';
            var o = '16k_zh-PY',
              r =
                (e
                  ? 'zh (cmn-Hans-CN)' === e
                    ? (o = '16k_zh')
                    : 'en-US' === e
                      ? (o = '16k_en')
                      : 'yue-Hant-HK' === e
                        ? (o = '16k_yue')
                        : 'ja-JP' === e && (o = '16k_ja')
                  : (o = '16k_zh-PY'),
                (e = 'serviceType:'.concat(o, ' url:').concat(i)),
                ''.concat(this._n, '.').concat('convertVoiceToText')),
              a =
                (Ae.i(''.concat(r, ' ').concat(e)),
                new ei('convertVoiceToText'));
            return (
              a.setMessage(e),
              this.req({
                P: Gn.VOICE_TO_TEXT,
                data: {
                  url: i,
                  language: o,
                  SDKAppID: this.getSDKAppID(),
                  format: n,
                },
              })
                .then(function (e) {
                  var n = (e = e.data).error,
                    i = e.requestID;
                  if (((e = e.result), 0 === n.code))
                    return (
                      a.end(),
                      Ae.i(''.concat(r, ' ok. requestID:').concat(i)),
                      mn({ result: e })
                    );
                  throw t(t({}, n), {}, { requestID: i });
                })
                .catch(function (e) {
                  return (
                    a
                      .setCode(e.code)
                      .setMoreMessage(e.requestID || '')
                      .end(),
                    Ae.w(''.concat(r, ' failed. error:'), e),
                    In({ code: wn.VOICE_TO_TEXT_FAIL })
                  );
                })
            );
          },
        },
        {
          key: 'modifyRemoteMessage',
          value: function (e) {
            var t = this,
              n = null,
              i = e.conversationType,
              o = e.to,
              r = this.get(7);
            if (!r) return this._onNoModule();
            if (r.isMessageFromOrToAVChatroom(o))
              return In({
                code: wn.MSG_MODIFY_DISABLED_IN_AV,
                data: { message: e },
              });
            if (!1 === this.get(29).filterMessage(e))
              return (
                (e.hasRiskContent = !0),
                In({ code: wn.PROFANITY_FOUND, data: { message: e } })
              );
            i === D.CONV_C2C
              ? (n = this.get(6))
              : i === D.CONV_GROUP && (n = this.get(7));
            var a = new ei('modifyMessage'),
              s =
                (a.setMessage('to:'.concat(o)),
                ''.concat(this._n, '.modifyRemoteMessage'));
            return n
              .modifyRemoteMessage(e)
              .then(function (n) {
                return (
                  a.end(),
                  Ae.i(''.concat(s, ' ok')),
                  mn({ message: (n = t._onModifyRemoteMessageResp(e, n.data)) })
                );
              })
              .catch(function (n) {
                var i;
                return (
                  a.setCode(n.code).setMoreMessage(n.message).end(),
                  Ae.w(''.concat(s, ' failed. error:'), n),
                  20027 === n.code
                    ? ((i = t._onModifyRemoteMessageResp(e, n.data)),
                      In({
                        code: wn.MSG_MODIFY_CONFLICT,
                        data: { message: i },
                      }))
                    : In({
                        code: n.code,
                        message: n.message,
                        data: { message: e },
                      })
                );
              });
          },
        },
        {
          key: '_generateSearchdata',
          value: function (e) {
            var t = e.conversationID,
              n = e.timePosition,
              i = e.timePeriod;
            return (
              (e = h(e, xr)),
              ut(t) ||
                (Tt(t) && (e.account = t.replace(D.CONV_C2C, '')),
                Et(t) && (e.groupID = t.replace(D.CONV_GROUP, ''))),
              Ke(i) &&
                0 < i &&
                (Ke(n) && 0 < n
                  ? (e.startTime = n - i)
                  : (e.startTime = Te() - i)),
              e.startTime && e.startTime < 0 && (e.startTime = void 0),
              Ke(n) && 0 < n && (e.endTime = n),
              e
            );
          },
        },
        {
          key: 'searchCloudMessages',
          value: function (e) {
            var t = this,
              n = 'searchCloudMessages',
              i = ''.concat(this._n, '.').concat(n);
            if (!e)
              return In({
                code: wn.OPTIONS_IS_EMPTY,
                message: this.getErrMsg(wn.OPTIONS_IS_EMPTY, n),
              });
            var o = e.keywordList,
              r = e.keywordListMatchType,
              a = e.conversationID,
              s = e.cursor,
              c = $e(e.senderUserIDList) && 0 < e.senderUserIDList.length,
              u = $e(e.messageTypeList) && 0 < e.messageTypeList.length;
            if (!o && !c && !u)
              throw (
                (Ae.e(
                  '['.concat(n, '] Missing required params: "keywordList".')
                ),
                new Error('Params validate failed.'))
              );
            var l = Date.now(),
              d = new ei(n),
              p =
                'keywordList:'
                  .concat(o, ' keywordListMatchType:')
                  .concat(r, ' ') + 'convID:'.concat(a, ' cursor:').concat(s);
            return (
              Ae.l(''.concat(i, ' ').concat(p)),
              this.req({
                P: Gn.MSG_CLOUD_SEARCH,
                data: this._generateSearchdata(e),
              })
                .then(function (n) {
                  var o = (r = n.data).code,
                    r = r.message;
                  if (0 !== o)
                    return (
                      (r =
                        t.getErrMsg(
                          60020 === o ? 'SearchCloudMessagesUnavailable' : o
                        ) || r),
                      (o = new Pn({ code: o, message: r })),
                      d.setMessage(p).setError(o).end(),
                      In(o)
                    );
                  t.get(27).isSearchCloudMessagesEnabled(),
                    (o = (r = n.data).cursor),
                    (n = r.totalCount),
                    (r = r.searchResult);
                  var a = 'totalCount:'.concat(n, ' cost:').concat(Kt(l));
                  return mn({
                    searchResultList:
                      (Ae.l(
                        ''.concat(i, ' ok. cursor:').concat(o, ' ').concat(a)
                      ),
                      d.setMessage(''.concat(p, ' ').concat(a)).end(),
                      (a = t._handleSearchResults(r, !e.conversationID))),
                    cursor: o,
                    totalCount: n,
                  });
                })
                .catch(function (e) {
                  return d.setMessage(p).setError(e).end(), In(e);
                })
            );
          },
        },
        {
          key: '_handleSearchResults',
          value: function (e, t) {
            var n = this.get(11);
            return $e(e) && 0 !== e.length
              ? e.map(function (e) {
                  var i = e.groupID,
                    o = e.userID,
                    r = e.messageCount,
                    a =
                      ((e = e.messageList),
                      {
                        conversationID: (o = i
                          ? ''.concat(D.CONV_GROUP).concat(i)
                          : ''.concat(D.CONV_C2C).concat(o)),
                        messageCount: r,
                        messageList: [],
                      });
                  return (
                    (t && 1 < r) ||
                      (e &&
                        0 < e.length &&
                        ((r = n.onRoamingMessage(e, o, !1)),
                        i && r.reverse(),
                        (a.messageList = r))),
                    a
                  );
                })
              : [];
          },
        },
        {
          key: '_onModifyRemoteMessageResp',
          value: function (e, t) {
            Ae.d(''.concat(this._n, '._onModifyRemoteMessageResp options:'), t);
            var n = e.conversationType,
              i = e.from,
              o = e.to,
              r = e.random,
              a = e.sequence,
              s = ((e = e.time), t.elements),
              c = t.messageVersion;
            return (
              (t = void 0 === (t = t.cloudCustomData) ? '' : t),
              this.get(11).onMessageModified({
                conversationType: n,
                from: i,
                to: o,
                time: e,
                random: r,
                sequence: a,
                elements: s,
                cloudCustomData: t,
                messageVersion: c,
              })
            );
          },
        },
        {
          key: '_generateUUID',
          value: function (e) {
            var t = this.get(12);
            return (
              (t = ''
                .concat(t.getSDKAppID(), '-')
                .concat(t.getUserID(), '-')
                .concat(it())),
              (e =
                (e = e.name || e.value || e.url || e.tempFilePath) &&
                e.slice(e.lastIndexOf('.') + 1))
                ? ''.concat(t, '.').concat(e)
                : t
            );
          },
        },
        {
          key: 'getMessageOption',
          value: function (e) {
            return this._messageOptionsMap.get(e);
          },
        },
        {
          key: '_getNickAndAvatarByUserID',
          value: function (e) {
            return this.get(4).getNickAndAvatarByUserID(e);
          },
        },
        {
          key: '_getNameCardByGroupID',
          value: function (e) {
            if (e.conversationType === D.CONV_GROUP) {
              var t = this.get(7);
              if (t) return t.getMyNameCardByGroupID(e.to);
            }
            return '';
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')), this._messageOptionsMap.clear();
          },
        },
      ]),
      Xr),
    qr =
      (s(Jr, An),
      (Ur = g(Jr)),
      r(Jr, [
        {
          key: 'onMsgExtNotify',
          value: function (e) {
            var t = this,
              n = (e = e.dataList).messageInfo,
              i = e.operateType,
              o = e.operateResultList,
              r = e.tinyID,
              a = ((e = e.globalSequence), n.clientTime),
              s = ((n = n.random), ''.concat(r, '-').concat(a, '-').concat(n)),
              c = [],
              u = [],
              l =
                (Ae.l(
                  ''
                    .concat(this._n, '.onMsgExtNotify messageID:')
                    .concat(s, ' operateType:')
                    .concat(i, ' globalSequence:')
                    .concat(e)
                ),
                this._updateGlobalSeq(s, e),
                !1),
              d = !1;
            o.forEach(function (e) {
              var n = void 0 === (n = e.extensions) ? [] : n,
                o = e.clearSequence;
              1 === i
                ? ((l = !0),
                  n.forEach(function (e) {
                    c.push({ key: e.key, value: e.value });
                  }),
                  t._updateLocalExt(s, n))
                : 2 === i
                  ? ((d = !0),
                    n.forEach(function (e) {
                      u.push(e.key);
                    }),
                    t._updateLocalExt(s, n))
                  : 3 === i &&
                    ((d = !0),
                    t._hasLocalExt(s) &&
                      t._getLocalExt(s).forEach(function (e, t) {
                        e.seq <= o && !Ve(e.value) && u.push(t);
                      }),
                    t._clearLocalExt(s, o));
            }),
              l &&
                this.emitOEvt(E.MESSAGE_EXTENSIONS_UPDATED, {
                  messageID: s,
                  extensions: c,
                }),
              d &&
                this.emitOEvt(E.MESSAGE_EXTENSIONS_DELETED, {
                  messageID: s,
                  keyList: u,
                });
          },
        },
        {
          key: 'setMessageExtensions',
          value: function (e, t) {
            var n = 'setMessageExtensions';
            if (!this.canIUse(w.MSG_EXT)) return this.noUse(n);
            var i = ''.concat(this._n, '.').concat(n),
              o = e.ID,
              r = e.conversationID,
              a = e.sequence,
              s = e.time,
              c = v(t),
              u =
                (20 < t.length &&
                  ((c = t.slice(0, 20)),
                  Ae.w(
                    ''.concat(i, '. the length of extensions cannot exceed 20.')
                  )),
                (t = 'convID:'
                  .concat(r, ' messageID:')
                  .concat(o, ' sequence:')
                  .concat(a, ' time:')
                  .concat(s, ' count:')
                  .concat(c.length)),
                new ei(n));
            return (
              u.setMessage(t),
              Ae.l(''.concat(i, ' ').concat(t)),
              this._modifyMsgExts(e, c)
                .then(function (e) {
                  var t = e.resultList,
                    n = e.successCount;
                  return (
                    (e = e.failureCount),
                    (n = 'successCount:'.concat(n, ' failCount:').concat(e)),
                    u.setMoreMessage(n).end(),
                    Ae.l(''.concat(i, ' ok. ').concat(n)),
                    mn({ extensions: t })
                  );
                })
                .catch(function (e) {
                  return (
                    u.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getMessageExtensions',
          value: function (e) {
            var t = this,
              n = 'getMessageExtensions';
            if (!this.canIUse(w.MSG_EXT)) return this.noUse(n);
            var i = ''.concat(this._n, '.').concat(n),
              o = e.ID,
              r = e.conversationID,
              a = e.sequence,
              s = e.time,
              c =
                ((r = 'convID:'
                  .concat(r, ' messageID:')
                  .concat(o, ' sequence:')
                  .concat(a, ' time:')
                  .concat(s)),
                new ei(n)),
              u = (c.setMessage(r), void Ae.l(''.concat(i, ' ').concat(r)));
            return (
              this.getMsgExtsMap.has(o) && (u = this._getGlobalSeq(o)),
              this._getMsgExts(e, u)
                .then(function (e) {
                  return (
                    c.end(),
                    Ae.l(''.concat(i, ' ok. extCount:').concat(e.length)),
                    ut(u) && 0 < e.length && t.getMsgExtsMap.set(o, 1),
                    mn({ extensions: e })
                  );
                })
                .catch(function (e) {
                  return (
                    c.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'deleteMessageExtensions',
          value: function (e, t) {
            var n = 'deleteMessageExtensions';
            if (!this.canIUse(w.MSG_EXT)) return this.noUse(n);
            var i = ''.concat(this._n, '.').concat(n),
              o = [],
              r = 3,
              a =
                (Ve(t) ||
                  ((r = 2),
                  t.forEach(function (e) {
                    o.push({ key: e, value: '', seq: 0 });
                  })),
                (t = e.ID),
                e.conversationID),
              s = e.sequence,
              c = e.time,
              u =
                ((a = 'convID:'
                  .concat(a, ' messageID:')
                  .concat(t, ' sequence:')
                  .concat(s, ' time:')
                  .concat(c, ' operateType:')
                  .concat(r)),
                new ei(n));
            return (
              u.setMessage(a),
              Ae.l(''.concat(i, ' ').concat(a)),
              this._modifyMsgExts(e, o, r)
                .then(function (e) {
                  var t = e.resultList,
                    n = e.successCount,
                    o = ((e = e.failureCount), '');
                  return (
                    2 === r &&
                      (o = 'success count:'
                        .concat(n, ' fail count:')
                        .concat(e)),
                    u.setMoreMessage(''.concat(o)).end(),
                    Ae.l(''.concat(i, ' ok. ').concat(o)),
                    mn({ extensions: t })
                  );
                })
                .catch(function (e) {
                  return (
                    u.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_modifyMsgExts',
          value: function (e, t) {
            var n = this,
              i =
                2 < arguments.length && void 0 !== arguments[2]
                  ? arguments[2]
                  : 1,
              o = Ct(e.to) ? D.CONV_TOPIC : e.conversationType,
              r = void 0,
              a = (3 !== i && (r = this._getReqExts(e, t)), null);
            switch (o) {
              case D.CONV_C2C:
                a = this.get(6);
                break;
              case D.CONV_GROUP:
                a = this.get(7);
                break;
              case D.CONV_TOPIC:
                a = this.get(10);
                break;
              default:
                return In({ code: wn.NO_MODULE });
            }
            return a
              .modifyMsgExts(e, r, i)
              .then(function (t) {
                var i = (t = t.data).extensions,
                  o = ((t = t.seq), []),
                  r = 0,
                  a = 0,
                  s = [];
                return (
                  (i = Ve(i) ? [] : i).forEach(function (e) {
                    var t = e.errorCode,
                      n = (e = e.extension).key,
                      i = e.value;
                    (e = e.seq),
                      o.push({ code: t, key: n, value: i }),
                      0 === t ? r++ : a++,
                      s.push({ key: n, value: i, seq: e });
                  }),
                  n._updateGlobalSeq(e.ID, t),
                  0 < s.length && (n._updateLocalExt(e.ID, s), (s = null)),
                  { resultList: o, successCount: r, failureCount: a }
                );
              })
              .catch(function (e) {
                return In(e);
              });
          },
        },
        {
          key: '_getReqExts',
          value: function (e, t) {
            var n,
              i = [];
            return (
              this._hasLocalExt(e.ID)
                ? ((n = this._getLocalExt(e.ID)),
                  t.forEach(function (e) {
                    var t = e.key,
                      o = ((e = e.value), 0);
                    n.has(t) && (o = n.get(t).seq),
                      i.push({ key: t, value: e, seq: o });
                  }))
                : t.forEach(function (e) {
                    var t = e.key;
                    (e = e.value), i.push({ key: t, value: e, seq: 0 });
                  }),
              i
            );
          },
        },
        {
          key: '_getMsgExts',
          value: function (e, t) {
            var n = this,
              i = ''.concat(this._n, '._getMsgExts'),
              o = e.ID,
              r = null;
            switch (Ct(e.to) ? D.CONV_TOPIC : e.conversationType) {
              case D.CONV_C2C:
                r = this.get(6);
                break;
              case D.CONV_GROUP:
                r = this.get(7);
                break;
              case D.CONV_TOPIC:
                r = this.get(10);
                break;
              default:
                return In({ code: wn.NO_MODULE });
            }
            return r
              .getMessageExtensions(e, t)
              .then(function (t) {
                var r = (t = t.data).extensions,
                  a = t.completeFlag,
                  s = t.globalSequence;
                return (
                  (t = t.clearSequence),
                  (r = Ve(r) ? [] : r),
                  Ae.l(
                    ''
                      .concat(i, ' ok. completeFlag:')
                      .concat(a, ' globalSequence:')
                      .concat(s, ' clearSequence:')
                      .concat(t, ' count:')
                      .concat(r.length)
                  ),
                  n._updateLocalExt(o, r),
                  n._clearLocalExt(o, t),
                  n._updateGlobalSeq(o, s),
                  1 !== a
                    ? ((t = r.slice(-1)[0].seq + 1), n._getMsgExts(e, t))
                    : n._getLocalExtList(o)
                );
              })
              .catch(function (e) {
                return In(e);
              });
          },
        },
        {
          key: '_hasLocalExt',
          value: function (e) {
            return this.msgExtMap.has(e);
          },
        },
        {
          key: '_getLocalExt',
          value: function (e) {
            return this.msgExtMap.get(e);
          },
        },
        {
          key: '_updateLocalExt',
          value: function (e, t) {
            this._hasLocalExt(e) || this.msgExtMap.set(e, new Map());
            var n = this._getLocalExt(e);
            t.forEach(function (e) {
              var t = e.key,
                i = e.value;
              (e = e.seq), n.set(t, { value: void 0 === i ? '' : i, seq: e });
            });
          },
        },
        {
          key: '_clearLocalExt',
          value: function (e, t) {
            var n;
            t <= 0 ||
              !this._hasLocalExt(e) ||
              (n = this._getLocalExt(e)).forEach(function (e, i) {
                e.seq <= t && n.delete(i);
              });
          },
        },
        {
          key: '_getLocalExtList',
          value: function (e) {
            var t = [];
            return (
              this._hasLocalExt(e) &&
                this._getLocalExt(e).forEach(function (e, n) {
                  Ve((e = e.value)) || t.push({ key: n, value: e });
                }),
              t
            );
          },
        },
        {
          key: '_getGlobalSeq',
          value: function (e) {
            return this.globalSeqMap.get(e);
          },
        },
        {
          key: '_updateGlobalSeq',
          value: function (e, t) {
            this.globalSeqMap.set(e, t);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this.msgExtMap.clear(),
              this.globalSeqMap.clear(),
              this.getMsgExtsMap.clear();
          },
        },
      ]),
      Jr),
    Vr =
      (s(Yr, An),
      (wr = g(Yr)),
      r(Yr, [
        {
          key: 'onReactionNotifyList',
          value: function (e) {
            var n = this;
            (void 0 === (e = (e || {}).dataList) ? [] : e).forEach(
              function (e) {
                var i = e.C2CMessageInfo,
                  o = void 0 === (o = e.groupMessageInfo) ? {} : o,
                  r =
                    ((e = void 0 === (e = e.reactionList) ? [] : e),
                    (o = (i = t(t({}, void 0 === i ? {} : i), o)).tinyID),
                    i.clientTime),
                  a =
                    ((i = i.random),
                    (o = ''.concat(o, '-').concat(r, '-').concat(i)),
                    []);
                e.forEach(function (e) {
                  ut(e.userIDList) && ((e.userIDList = []), (e.count = 0)),
                    a.push.apply(a, v(e.userIDList));
                }),
                  Ae.l(
                    ''
                      .concat(n._n, '.onReactionNotifyList messageID:')
                      .concat(o, ' reactionList:')
                      .concat(e.length)
                  ),
                  n
                    ._handleReactionSummary(
                      [{ messageID: o, reactionList: e }],
                      a
                    )
                    .then(function (e) {
                      n.emitOEvt(E.MESSAGE_REACTIONS_UPDATED, t({}, e[0]));
                    });
              }
            );
          },
        },
        {
          key: 'onReactionNotify',
          value: function (e) {
            var n = (e = e.dataList || {}).C2CMessageInfo,
              i = void 0 === (i = e.groupMessageInfo) ? {} : i,
              o = e.reactionID,
              r =
                ((e = e.operateType),
                (i = (n = t(t({}, void 0 === n ? {} : n), i)).tinyID),
                n.clientTime);
            (n = n.random),
              (i = ''.concat(i, '-').concat(r, '-').concat(n)),
              Ae.l(
                ''
                  .concat(this._n, '.onReactionNotify messageID:')
                  .concat(i, ' reactionID:')
                  .concat(o, ' operateType:')
                  .concat(e)
              ),
              1 === e
                ? this._addReactedByMyselfMap(i, o)
                : this._removeReactedByMyselfMap(i, o),
              (r = ''.concat(i, '-').concat(o)),
              this._reactionInfoMap.has(r) &&
                (((n = this._reactionInfoMap.get(r)).reactedByMyself = 1 === e),
                this.emitOEvt(E.MESSAGE_REACTIONS_UPDATED, {
                  messageID: i,
                  reactionList: [n],
                }));
          },
        },
        {
          key: 'addMessageReaction',
          value: function (e, t) {
            var n = this,
              i = 'addMessageReaction';
            if (!this.canIUse(w.MSG_REACTION)) return this.noUse(i);
            var o = ''.concat(this._n, '.').concat(i),
              r = e.ID,
              a = e.conversationID,
              s =
                ((a = 'convID:'
                  .concat(a, ' messageID:')
                  .concat(r, ' reactionID:')
                  .concat(t)),
                new ei(i));
            return (
              s.setMessage(a),
              Ae.l(''.concat(o, ' ').concat(a)),
              (r = this._createReactionOperationPack(e, t, 1)),
              this._addReactedByMyselfMap(e.ID, t),
              this.req(r)
                .then(function () {
                  return s.end(), Ae.l(''.concat(o, ' ok.')), mn();
                })
                .catch(function (i) {
                  return (
                    n._removeReactedByMyselfMap(e.ID, t),
                    s.setError(i).end(),
                    Ae.e(''.concat(o, ' failed. error:'), i),
                    In(i)
                  );
                })
            );
          },
        },
        {
          key: 'removeMessageReaction',
          value: function (e, t) {
            var n = 'removeMessageReaction';
            if (!this.canIUse(w.MSG_REACTION)) return this.noUse(n);
            var i = ''.concat(this._n, '.').concat(n),
              o = e.ID,
              r = e.conversationID,
              a =
                ((r = 'convID:'
                  .concat(r, ' messageID:')
                  .concat(o, ' reactionID:')
                  .concat(t)),
                new ei(n));
            return (
              a.setMessage(r),
              Ae.l(''.concat(i, ' ').concat(r)),
              (o = this._createReactionOperationPack(e, t, 2)),
              this._removeReactedByMyselfMap(e.ID, t),
              this.req(o)
                .then(function () {
                  return a.end(), Ae.l(''.concat(i, ' ok.')), mn();
                })
                .catch(function (e) {
                  return (
                    a.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getMessageReactions',
          value: function (e) {
            var n = this,
              i = 'getMessageReactions';
            if (!this.canIUse(w.MSG_REACTION)) return this.noUse(i);
            var o = ''.concat(this._n, '.').concat(i),
              r = e.messageList,
              a = e.maxUserCountPerReaction,
              s = r[0].conversationID,
              c =
                ((s = 'convID:'
                  .concat(s, ' maxUserCountPerReaction:')
                  .concat(a, ' msgCount:')
                  .concat(r.length)),
                new ei(i)),
              u =
                (c.setMessage(s), Ae.l(''.concat(o, ' ').concat(s)), new Map());
            return (
              (a = this._createReactionSummaryPack(
                t(t({}, e), {}, { messageIDMap: u })
              )),
              this.req(a)
                .then(function (e) {
                  e = e.data.resultList;
                  var t = [],
                    i = [];
                  return (
                    (void 0 === e ? [] : e).forEach(function (e) {
                      var n = void 0 === (n = e.messageKey) ? void 0 : n,
                        o = void 0 === (o = e.messageSequence) ? void 0 : o;
                      (e = void 0 === (e = e.reactionList) ? [] : e),
                        (o = ut(n) ? u.get(o) : u.get(n)),
                        t.push({ messageID: o, reactionList: e }),
                        e.forEach(function (e) {
                          i.push.apply(i, v(e.userIDList));
                        });
                    }),
                    n._handleReactionSummary(t, i)
                  );
                })
                .then(function (e) {
                  return (
                    c.end(),
                    Ae.l(''.concat(o, ' ok.')),
                    u.clear(),
                    mn({ resultList: e })
                  );
                })
                .catch(function (e) {
                  return (
                    c.setError(e).end(),
                    Ae.e(''.concat(o, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getAllUserListOfMessageReaction',
          value: function (e) {
            var t = this,
              n = 'getAllUserListOfMessageReaction';
            if (!this.canIUse(w.MSG_REACTION)) return this.noUse(n);
            var i = ''.concat(this._n, '.').concat(n),
              o = e.message,
              r = e.reactionID,
              a = e.nextSeq,
              s = e.count,
              c = o.ID,
              u =
                ((o = o.conversationID),
                (o = 'convID:'
                  .concat(o, ' messageID:')
                  .concat(c, ' reactionID:')
                  .concat(r, ' nextSeq:')
                  .concat(a, ' count:')
                  .concat(s)),
                new ei(n)),
              l =
                (u.setMessage(o),
                Ae.l(''.concat(i, ' ').concat(o)),
                { userList: [], nextSeq: 0, isCompleted: !1 });
            return (
              (c = this._createReactionUserListPack(e)),
              this.req(c)
                .then(function (e) {
                  var n = void 0 === (n = (e = e.data).userIDList) ? [] : n;
                  return (
                    (e = void 0 === (e = e.nextSeq) ? 0 : e),
                    (l.nextSeq = e),
                    (l.isCompleted = 0 === e),
                    t.get(4).getUserNickAndAvatar(n)
                  );
                })
                .then(function (e) {
                  return (
                    (l.userList = e), u.end(), Ae.l(''.concat(i, ' ok.')), mn(l)
                  );
                })
                .catch(function (e) {
                  return (
                    u.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_createReactionOperationPack',
          value: function (e, t, n) {
            var i,
              o,
              r = void 0;
            return (
              (t = { reactionID: t, userIDList: [this.getMyUserID()] }),
              e.conversationType === D.CONV_C2C &&
                ((i = this.get(6)),
                (r =
                  1 === n ? Gn.ADD_C2C_MSG_REACTION : Gn.RM_C2C_MSG_REACTION),
                (t.from = e.from),
                (t.to = e.to),
                (t.messageKey = i.getMessageKey(e))),
              e.conversationType === D.CONV_GROUP &&
                ((i = void 0),
                (o = e.to),
                Ct(e.to) && (o = Gt((i = e.to))),
                (r =
                  1 === n ? Gn.ADD_GRP_MSG_REACTION : Gn.RM_GRP_MSG_REACTION),
                (t.groupID = o),
                (t.topicID = i),
                (t.messageSequence = e.sequence)),
              { P: r, data: t }
            );
          },
        },
        {
          key: '_createReactionSummaryPack',
          value: function (e) {
            var t,
              n,
              i,
              o = e.messageList,
              r = void 0 === (r = e.maxUserCountPerReaction) ? 10 : r,
              a = e.messageIDMap,
              s = void 0,
              c = void 0;
            return (
              (e = o[0]).conversationType === D.CONV_C2C &&
                ((t = this.get(6)),
                (n = o.map(function (e) {
                  var n = t.getMessageKey(e);
                  return a.set(n, e.ID), n;
                })),
                (s = Gn.GET_C2C_MSG_REACTIONS),
                (c = { from: e.from, to: e.to, messageKeyList: n, count: r })),
              e.conversationType === D.CONV_GROUP &&
                ((n = void 0),
                (i = e.to),
                Ct(e.to) && (i = Gt((n = e.to))),
                (e = o.map(function (e) {
                  return a.set(e.sequence, e.ID), e.sequence;
                })),
                (s = Gn.GET_GRP_MSG_REACTIONS),
                (c = {
                  groupID: i,
                  topicID: n,
                  messageSequenceList: e,
                  count: r,
                })),
              { P: s, data: c }
            );
          },
        },
        {
          key: '_createReactionUserListPack',
          value: function (e) {
            var t = e.message,
              n = e.reactionID,
              i = e.nextSeq,
              o = void 0;
            return (
              (n = {
                reactionID: n,
                nextSeq: void 0 === i ? 0 : i,
                count: 100 < (e = void 0 === (e = e.count) ? 100 : e) ? 100 : e,
              }),
              t.conversationType === D.CONV_C2C &&
                ((i = this.get(6)),
                (o = Gn.GET_C2C_MSG_REACTION_USER_LIST),
                (n.from = t.from),
                (n.to = t.to),
                (n.messageKey = i.getMessageKey(t))),
              t.conversationType === D.CONV_GROUP &&
                ((e = void 0),
                (i = t.to),
                Ct(t.to) && (i = Gt((e = t.to))),
                (o = Gn.GET_GRP_MSG_REACTION_USER_LIST),
                (n.groupID = i),
                (n.topicID = e),
                (n.messageSequence = t.sequence)),
              { P: o, data: n }
            );
          },
        },
        {
          key: '_handleReactionSummary',
          value: function (e, t) {
            var n = this;
            return this.get(4)
              .getUserNickAndAvatar(t)
              .then(function (t) {
                var i = [];
                return (
                  e.forEach(function (e) {
                    var o = [];
                    e.reactionList.forEach(function (i) {
                      var r = i.reactionID,
                        a = i.count,
                        s = i.userIDList,
                        c =
                          ((i =
                            void 0 === (i = i.reactedByMyself) ? void 0 : i),
                          []);
                      s.forEach(function (e) {
                        t.forEach(function (t) {
                          e === t.userID && c.push(t);
                        });
                      }),
                        (s = {
                          reactionID: r,
                          totalUserCount: a,
                          partialUserList: c,
                          reactedByMyself: n._computeReactedByMyself({
                            reactedByMyself: i,
                            messageID: e.messageID,
                            reactionID: r,
                          }),
                        }),
                        o.push(s),
                        ut(i) &&
                          !n._reactedByMyselfMap.has(e.messageID) &&
                          ((a = ''.concat(e.messageID, '-').concat(r)),
                          n._reactionInfoMap.set(a, s));
                    }),
                      i.push({ messageID: e.messageID, reactionList: o });
                  }),
                  i
                );
              });
          },
        },
        {
          key: '_addReactedByMyselfMap',
          value: function (e, t) {
            this._reactedByMyselfMap.has(e) ||
              this._reactedByMyselfMap.set(e, []),
              -1 === (e = this._reactedByMyselfMap.get(e)).indexOf(t) &&
                e.push(t);
          },
        },
        {
          key: '_removeReactedByMyselfMap',
          value: function (e, t) {
            !this._reactedByMyselfMap.has(e) ||
              (-1 < (t = (e = this._reactedByMyselfMap.get(e)).indexOf(t)) &&
                e.splice(t, 1));
          },
        },
        {
          key: '_computeReactedByMyself',
          value: function (e) {
            var t = e.reactedByMyself,
              n = e.messageID;
            return (
              (e = e.reactionID),
              ut(t)
                ? !!this._reactedByMyselfMap.has(n) &&
                  this._reactedByMyselfMap.get(n).includes(e)
                : 1 === t
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._reactedByMyselfMap.clear(),
              this._reactionInfoMap.clear();
          },
        },
      ]),
      Yr),
    Br =
      (s($r, An),
      (Pr = g($r)),
      r($r, [
        {
          key: 'sendMessage',
          value: function (e) {
            var t = this,
              n = this._constructMessageInstance(e);
            if (null === n) return In({ code: wn.MSG_SEND_FAIL });
            this._addSendMessageTotalCount(n);
            var i = Date.now();
            return (
              this.get(11).setMessageRandom(n),
              this._sendComboMessage(n, e)
                .then(function (e) {
                  var o = (e = e.data).time,
                    r = e.sequence;
                  return (
                    Ke((e = e.readReceiptCode)) &&
                      0 !== e &&
                      (new ei('sendMessageWithReceipt')
                        .setMessage(
                          'from:'
                            .concat(n.from, ' to:')
                            .concat(n.to, ' sequence:')
                            .concat(r, ' readReceiptCode:')
                            .concat(e)
                        )
                        .end(),
                      Ae.w(
                        ''
                          .concat(t._n, '.sendMessage readReceiptCode:')
                          .concat(e, ' message:')
                          .concat(t.getErrMsg(e))
                      )),
                    t._addSendMessageSuccessCount(n, i),
                    (e = t.get(11)),
                    (n.status = Tn),
                    (n.time = o),
                    n.conversationType === D.CONV_GROUP && (n.sequence = r),
                    e.appendToMessageList(n),
                    (o = n),
                    !0 === n._isExcludedFromLastMessage && (o = ''),
                    e.onMessageSent({
                      conversationOptionsList: [
                        {
                          conversationID: n.conversationID,
                          unreadCount: 0,
                          type: n.conversationType,
                          subType: n.conversationSubType,
                          lastMessage: o,
                        },
                      ],
                    }),
                    mn({ message: n })
                  );
                })
                .catch(function (e) {
                  return t._onSendMessageFailed(n, e);
                })
            );
          },
        },
        {
          key: '_sendComboMessage',
          value: function (e, t) {
            var n = this._m.get(20),
              i = '';
            return (
              e.conversationType === D.CONV_C2C &&
                (i = ''.concat(P.NAME.OPEN_IM, '.').concat(Gn.SEND_C2C_MSG)),
              e.conversationType === D.CONV_GROUP &&
                (i = ''.concat(P.NAME.GROUP, '.').concat(Gn.SEND_GRP_MSG)),
              n.sendComboMessage({ servcmd: i, data: t })
            );
          },
        },
        {
          key: '_constructMessageInstance',
          value: function (e) {
            var t = ''.concat(this._n, '._constructMessageInstance'),
              n = null;
            try {
              var i,
                o = this.getMyUserID(),
                r = {};
              (r.senderTinyID = this.getMyTinyID()),
                (r.currentUser = o),
                (r.from = e.From_Account || o),
                e.GroupId
                  ? ((r.conversationID = ''
                      .concat(D.CONV_GROUP)
                      .concat(e.GroupId)),
                    (r.conversationType = D.CONV_GROUP),
                    (r.to = e.GroupId))
                  : e.To_Account &&
                    ((r.conversationID = ''
                      .concat(D.CONV_C2C)
                      .concat(e.To_Account)),
                    (r.conversationType = D.CONV_C2C),
                    (r.to = e.To_Account)),
                (r.time = e.MsgTimeStamp || 0),
                (r.random = e.Random || e.MsgRandom || 0),
                (r.priority = e.MsgPriority),
                ct(e.CloudCustomData) &&
                  0 < e.CloudCustomData.length &&
                  (r.cloudCustomData = e.CloudCustomData),
                $e(e.SendMsgControl) &&
                  ((r.messageControlInfo = {}),
                  e.SendMsgControl.includes('NoUnread') &&
                    (r.messageControlInfo.excludedFromUnreadCount = 1),
                  e.SendMsgControl.includes('NoLastMsg') &&
                    (r.messageControlInfo.excludedFromLastMessage = 1)),
                r.conversationType === D.CONV_GROUP &&
                  $e(e.To_Account) &&
                  0 < e.To_Account.length &&
                  ((i = e.To_Account),
                  50 < e.To_Account.length &&
                    ((i = e.To_Account.slice(0, 50)),
                    Ae.w(
                      ''.concat(
                        t,
                        ' To_Account must be less than or equal to 50.'
                      )
                    )),
                  (r.receiverList = v(i)),
                  (e.To_Account = v(i))),
                (1 !== e.IsNeedReadReceipt && 1 !== e.NeedReadReceipt) ||
                  (r.needReadReceipt = !0),
                1 === e.SupportMessageExtension && (r.isSupportExtension = !0),
                ((n = new Ei(r)).status = Cn),
                (e.MsgClientTime = n.clientTime),
                n.conversationType === D.CONV_C2C && (e.MsgSeq = n.sequence);
              for (var a, s = e.MsgBody.length, c = 0; c < s; c++)
                'TIMTextElem' === (a = e.MsgBody[c]).MsgType
                  ? n.setTextElement(a.MsgContent.Text)
                  : 'TIMCustomElem' === a.MsgType
                    ? n.setCustomElement({
                        data: a.MsgContent.Data || '',
                        description: a.MsgContent.Desc || '',
                        extension: a.MsgContent.Ext || '',
                      })
                    : 'TIMFaceElem' === a.MsgType &&
                      n.setFaceElement({
                        index: a.MsgContent.Index,
                        data: a.MsgContent.Data,
                      });
              var u = n.getElements();
              (n.payload = u[0].content), (n.type = u[0].type);
            } catch (l) {
              (n = null), Ae.e(''.concat(t, ' failed. error:'), l);
            }
            return n;
          },
        },
        {
          key: '_onSendMessageFailed',
          value: function (e, t) {
            return (
              (e.status = En),
              this.get(11).deleteMessageRandom(e),
              this._addSendMessageFailCountOnUser(e, t),
              new ei('sendMessage')
                .setMessage(
                  'tjg_id:'
                    .concat(this.generateTjgID(e), ' type:')
                    .concat(e.type, ' from:')
                    .concat(e.from, ' to:')
                    .concat(e.to)
                )
                .setError(t)
                .end(),
              Ae.e(''.concat(this._n, '._onSendMessageFailed error:'), t),
              In(
                new Pn({
                  code: t && t.code ? t.code : wn.MSG_SEND_FAIL,
                  message: t && t.message ? t.message : void 0,
                  data: { message: e },
                })
              )
            );
          },
        },
        {
          key: '_getSendMessageSpecifiedKey',
          value: function (e) {
            return e.conversationType === D.CONV_C2C
              ? qn
              : e.conversationType === D.CONV_GROUP &&
                  (e = this.get(7).getLocalGroupProfile(e.to))
                ? It((e = e.type))
                  ? Bn
                  : Vn
                : void 0;
          },
        },
        {
          key: '_addSendMessageTotalCount',
          value: function (e) {
            (e = this._getSendMessageSpecifiedKey(e)) &&
              this.get(26).addTotalCount(e);
          },
        },
        {
          key: '_addSendMessageSuccessCount',
          value: function (e, t) {
            var n;
            (e = this._getSendMessageSpecifiedKey(e)) &&
              ((n = this.get(26)).addSuccessCount(e), n.addCost(e, Kt(t, !1)));
          },
        },
        {
          key: '_addSendMessageFailCountOnUser',
          value: function (e, t) {
            t = void 0 === (t = t.code) ? -1 : t;
            var n = this.get(26);
            (e = this._getSendMessageSpecifiedKey(e)),
              Or(t) && e && n.addFailedCountOfUserSide(e);
          },
        },
      ]),
      $r),
    Hr =
      (s(zr, An),
      (Nr = g(zr)),
      r(zr, [
        {
          key: 'registerPlugin',
          value: function (e) {
            var t = this;
            Object.keys(e).forEach(function (n) {
              t.plugins[n] = e[n];
            }),
              new ei('registerPlugin')
                .setMessage(''.concat(Object.keys(e)))
                .end();
          },
        },
        {
          key: 'getPlugin',
          value: function (e) {
            return this.plugins[e];
          },
        },
        { key: 'reset', value: function () {} },
      ]),
      zr),
    jr =
      (s(Wr, An),
      (br = g(Wr)),
      r(Wr, [
        {
          key: '_init',
          value: function () {
            this._startSync({
              cookie: this._cookie,
              syncFlag: 0,
              isOnlineSync: 0,
            });
          },
        },
        {
          key: '_startSync',
          value: function (e) {
            var n = this,
              i = e.cookie,
              o = e.syncFlag,
              r = e.isOnlineSync,
              a = ''.concat(this._n, '._startSync');
            Ae.l(''.concat(a, ' options:'), e),
              this.req({
                P: Gn.SYNC_UNREAD_MSG,
                data: { cookie: i, syncFlag: o, isOnlineSync: r },
              })
                .then(function (e) {
                  var i = (o = e.data).cookie,
                    o = o.syncFlag;
                  Ae.l(
                    ''
                      .concat(a, ' ok. cookie:')
                      .concat(i, ' syncFlag:')
                      .concat(o)
                  ),
                    Ve((n._cookie = i)) ||
                      (0 === o || 1 === o
                        ? (n._dispatch(
                            t(t({}, e.data), {}, { isSyncingEnded: !1 })
                          ),
                          n._startSync({
                            cookie: i,
                            syncFlag: o,
                            isOnlineSync: 0,
                          }))
                        : 2 === o &&
                          n._dispatch(
                            t(t({}, e.data), {}, { isSyncingEnded: !0 })
                          ));
                })
                .catch(function (e) {
                  Ae.e(''.concat(a, ' failed. error:'), e);
                });
          },
        },
        {
          key: '_dispatch',
          value: function (e) {
            e.eventArray &&
              this.get(20).onMessage({
                head: {},
                body: {
                  eventArray: e.eventArray,
                  isInstantMessage: this._onlineSyncFlag,
                  isSyncingEnded: e.isSyncingEnded,
                },
              }),
              this.get(6).onNewMessage({
                dataList: e.messageList,
                isInstantMessage: !!e.isSyncingEnded && this._onlineSyncFlag,
                C2CRemainingUnreadList: e.C2CRemainingUnreadList,
                C2CPairUnreadList: e.C2CPairUnreadList,
                isSyncingEnded: e.isSyncingEnded,
              });
          },
        },
        {
          key: 'syncOnNeed',
          value: function () {
            Ae.l(
              ''.concat(this._n, '.syncOnNeed cookie:').concat(this._cookie)
            ),
              (this._onlineSyncFlag = !0),
              this._startSync({
                cookie: this._cookie,
                syncFlag: 0,
                isOnlineSync: 1,
              });
          },
        },
        {
          key: 'syncOnReconnected',
          value: function () {
            Ae.l(
              ''
                .concat(this._n, '.syncOnReconnected cookie:')
                .concat(this._cookie)
            ),
              (this._onlineSyncFlag = !0),
              this._startSync({
                cookie: this._cookie,
                syncFlag: 0,
                isOnlineSync: 0,
              });
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              (this._onlineSyncFlag = !1),
              (this._cookie = '');
          },
        },
      ]),
      Wr),
    Kr = {
      req: {
        toAccount: 'To_Account',
        fromAccount: 'From_Account',
        to: 'To_Account',
        from: 'From_Account',
        groupID: 'GroupId',
        groupAtUserID: 'GroupAt_Account',
        extension: 'Ext',
        data: 'Data',
        description: 'Desc',
        elements: 'MsgBody',
        sizeType: 'Type',
        downloadFlag: 'Download_Flag',
        thumbUUID: 'ThumbUUID',
        videoUUID: 'VideoUUID',
        remoteAudioUrl: 'Url',
        remoteVideoUrl: 'VideoUrl',
        videoUrl: '',
        imageUrl: 'URL',
        fileUrl: 'Url',
        uuid: 'UUID',
        priority: 'MsgPriority',
        receiverUserID: 'To_Account',
        receiverGroupID: 'GroupId',
        messageSender: 'SenderId',
        messageReceiver: 'ReceiverId',
        nick: 'From_AccountNick',
        avatar: 'From_AccountHeadurl',
        messageNumber: 'MsgNum',
        pbDownloadKey: 'PbMsgKey',
        downloadKey: 'JsonMsgKey',
        applicationType: 'PendencyType',
        userIDList: 'To_Account',
        groupNameList: 'GroupName',
        userID: 'To_Account',
        groupAttributeList: 'GroupAttr',
        mainSequence: 'AttrMainSeq',
        avChatRoomKey: 'BytesKey',
        attributeControl: 'AttrControl',
        sequence: 'seq',
        messageControlInfo: 'SendMsgControl',
        updateSequence: 'UpdateSeq',
        clientTime: 'MsgClientTime',
        sequenceList: 'MsgSeqList',
        topicID: 'TopicId',
        customData: 'CustomString',
        isSupportTopic: 'SupportTopic',
        isWebUniapp: 'is_web_uniapp',
        isSupportExtension: 'SupportMessageExtension',
        messageSequence: 'MsgSeq',
        messageKey: 'MsgKey',
        startSequence: 'startSeq',
        simplifiedMessage: 'DownsizeFlag',
        isRelayMessage: 'IsRelayMsg',
        reactionID: 'Reaction',
        messageSequenceList: 'MsgSeqList',
        messageKeyList: 'MsgKeyList',
        cmConfigID: 'CustomModerationConfigID',
      },
      res: {
        MsgPriority: 'priority',
        ThumbUUID: 'thumbUUID',
        VideoUUID: 'videoUUID',
        Download_Flag: 'downloadFlag',
        GroupId: 'groupID',
        Member_Account: 'userID',
        MsgList: 'messageList',
        SyncFlag: 'syncFlag',
        To_Account: 'to',
        From_Account: 'from',
        MsgSeq: 'sequence',
        MsgRandom: 'random',
        MsgTime: 'time',
        MsgTimeStamp: 'time',
        MsgContent: 'content',
        MsgBody: 'elements',
        From_AccountNick: 'nick',
        From_AccountHeadurl: 'avatar',
        GroupWithdrawInfoArray: 'revokedInfos',
        GroupReadInfoArray: 'groupMessageReadNotice',
        LastReadMsgSeq: 'lastMessageSeq',
        WithdrawC2cMsgNotify: 'c2cMessageRevokedNotify',
        C2cWithdrawInfoArray: 'revokedInfos',
        C2cReadedReceipt: 'c2cMessageReadReceipt',
        ReadC2cMsgNotify: 'c2cMessageReadNotice',
        LastReadTime: 'peerReadTime',
        MsgRand: 'random',
        MsgType: 'type',
        MsgShow: 'messageShow',
        NextMsgSeq: 'nextMessageSeq',
        FaceUrl: 'avatar',
        ProfileDataMod: 'profileModify',
        Profile_Account: 'userID',
        ValueBytes: 'value',
        ValueNum: 'value',
        NoticeSeq: 'noticeSequence',
        NotifySeq: 'notifySequence',
        MsgFrom_AccountExtraInfo: 'messageFromAccountExtraInformation',
        Operator_Account: 'operatorID',
        OpType: 'operationType',
        ReportType: 'operationType',
        UserId: 'userID',
        User_Account: 'userID',
        List_Account: 'userIDList',
        MsgOperatorMemberExtraInfo: 'operatorInfo',
        MsgMemberExtraInfo: 'memberInfoList',
        ImageUrl: 'avatar',
        NickName: 'nick',
        MsgGroupNewInfo: 'newGroupProfile',
        MsgAppDefinedData: 'groupCustomField',
        Owner_Account: 'ownerID',
        GroupFaceUrl: 'avatar',
        GroupIntroduction: 'introduction',
        GroupNotification: 'notification',
        GroupApplyJoinOption: 'joinOption',
        MsgKey: 'messageKey',
        GroupInfo: 'groupProfile',
        ShutupTime: 'muteTime',
        Desc: 'description',
        Ext: 'extension',
        GroupAt_Account: 'groupAtUserID',
        MsgNum: 'messageNumber',
        PbMsgKey: 'pbDownloadKey',
        JsonMsgKey: 'downloadKey',
        MsgModifiedFlag: 'isModified',
        PendencyItem: 'applicationItem',
        PendencyType: 'applicationType',
        AddTime: 'time',
        AddSource: 'source',
        AddWording: 'wording',
        ProfileImImage: 'avatar',
        PendencyAdd: 'friendApplicationAdded',
        FrienPencydDel_Account: 'friendApplicationDeletedUserIDList',
        Peer_Account: 'userID',
        GroupAttr: 'groupAttributeList',
        GroupAttrAry: 'groupAttributeList',
        AttrMainSeq: 'mainSequence',
        seq: 'sequence',
        GroupAttrOption: 'groupAttributeOption',
        BytesChangedKeys: 'changedKeyList',
        GroupAttrInfo: 'groupAttributeList',
        GroupAttrSeq: 'mainSequence',
        PushChangedAttrValFlag: 'isWithChangedAttributeInfo',
        SubKeySeq: 'sequence',
        Val: 'value',
        MsgGroupFromCardName: 'senderNameCard',
        MsgGroupFromNickName: 'senderNick',
        C2cNick: 'peerNick',
        C2cImage: 'peerAvatar',
        SendMsgControl: 'messageControlInfo',
        NoLastMsg: 'excludedFromLastMessage',
        NoUnread: 'excludedFromUnreadCount',
        UpdateSeq: 'updateSequence',
        MuteNotifications: 'muteFlag',
        MsgClientTime: 'clientTime',
        TinyId: 'tinyID',
        GroupMsgReceiptList: 'readReceiptList',
        ReadNum: 'readCount',
        UnreadNum: 'unreadCount',
        TopicId: 'topicID',
        MillionGroupFlag: 'communityType',
        SupportTopic: 'isSupportTopic',
        MsgTopicNewInfo: 'newTopicInfo',
        ShutupAll: 'muteAllMembers',
        CustomString: 'customData',
        TopicFaceUrl: 'avatar',
        TopicIntroduction: 'introduction',
        TopicNotification: 'notification',
        TopicIdArray: 'topicIDList',
        MsgVersion: 'messageVersion',
        C2cMsgModNotifys: 'c2cMessageModified',
        GroupMsgModNotifys: 'groupMessageModified',
        ApplyJoinOption: 'joinOption',
        MsgFlag: 'messageRemindType',
        AtInfoList: 'groupAtInfoList',
        AtFlagList: 'groupAtType',
        AtMsgSeq: 'sequence',
        BanDuration: 'duration',
        BanDescription: 'reason',
        NotVisible: 'invisible',
        BytesTag: 'tag',
        BytesValue: 'value',
        RptBytesValue: 'value',
        LatestSeq: 'globalSequence',
        ClearSeq: 'clearSequence',
        SupportMessageExtension: 'isSupportExtension',
        ExtensionList: 'extensions',
        GroupCounter: 'counterList',
        Revoker_Account: 'revoker',
        MsgExtensionNotify: 'messageExtensionNotify',
        ExtensionC2cMsgInfo: 'messageInfo',
        ExtensionGroupMsgInfo: 'messageInfo',
        MsgOptType: 'operateType',
        SetKVInfo: 'operateResultList',
        DeleteKVInfo: 'operateResultList',
        ClearKVInfo: 'operateResultList',
        MsgKeyValue: 'extensions',
        ClearMsgSeq: 'clearSequence',
        MsgLastSeq: 'globalSequence',
        InviteJoinOption: 'inviteOption',
        MemberList_Account: 'inviteeList',
        MsgMemberExtraInfoList: 'inviteeInfoList',
        E: 'event',
        GInf: 'groupProfile',
        MCT: 'clientTime',
        MR: 'random',
        MP: 'priority',
        MTS: 'time',
        GId: 'groupID',
        MS: 'sequence',
        CCD: 'cloudCustomData',
        F_Account: 'from',
        F_Hd: 'avatar',
        F_NN: 'nick',
        GN: 'groupName',
        GT: 'groupType',
        IsSys: 'isSystemMessage',
        OpInf: 'operatorInfo',
        Img: 'avatar',
        NN: 'nick',
        OnlineInf: 'onlineMemberInfo',
        ET: 'expireTime',
        Num: 'onlineMemberNum',
        Opt: 'operationType',
        O_Account: 'operatorID',
        RT: 'operationType',
        UDF: 'userDefinedField',
        L_Account: 'userIDList',
        IsPlaceMsg: 'isPlaceMessage',
        MsgCheckResult: 'checkResult',
        Results: 'resultList',
        Reaction: 'reactionID',
        Reaction_Account: 'userIDList',
        MsgReactionNotifyList: 'messageReactionNotifyList',
        MsgReactionNotify: 'messageReactionNotify',
        MsgReactionSummary: 'reactionList',
        C2CMsgInfo: 'C2CMessageInfo',
        GroupMsgInfo: 'groupMessageInfo',
        int32_err_code: 'errorCode',
        str_err_msg: 'errorMsg',
        MsgDropReason: 'messageDropReason',
        ReactedByMe: 'reactedByMyself',
        Level: 'messageRemindType',
        PeerReadTime: 'timestamp',
        NoUnreadSeqList: 'excludedUnreadSequenceList',
        NewMsg: 'topicLatestMessage',
      },
      ignoreKeyWord: ['C2C', 'ID', 'USP'],
    };
  function Wr(e) {
    return (
      i(this, Wr),
      ((e = br.call(this, e))._n = 'SyncUnreadMsgModule'),
      (e._cookie = ''),
      (e._onlineSyncFlag = !1),
      e.getIEmitInst().on(qi.A2KEY_AND_TINYID_UPDATED, e._init, f(e)),
      e
    );
  }
  function zr(e) {
    return (
      i(this, zr),
      ((e = Nr.call(this, e))._n = 'PluginModule'),
      (e.plugins = {}),
      e
    );
  }
  function $r(e) {
    return i(this, $r), ((e = Pr.call(this, e))._n = 'ComboMsgModule'), e;
  }
  function Yr(e) {
    return (
      i(this, Yr),
      ((e = wr.call(this, e))._n = 'MsgReactionModule'),
      (e._reactedByMyselfMap = new Map()),
      (e._reactionInfoMap = new Map()),
      e
    );
  }
  function Jr(e) {
    return (
      i(this, Jr),
      ((e = Ur.call(this, e))._n = 'MsgExtModule'),
      (e.msgExtMap = new Map()),
      (e.globalSeqMap = new Map()),
      (e.getMsgExtsMap = new Map()),
      e
    );
  }
  function Xr(e) {
    return (
      i(this, Xr),
      ((e = Gr.call(this, e))._n = 'MessageModule'),
      (e._messageOptionsMap = new Map()),
      (e._mergerMessageHandler = new Sr(f(e))),
      e
    );
  }
  function Zr(e, t) {
    if ('string' != typeof e && !Array.isArray(e))
      throw new TypeError('Expected the input to be `string | string[]`');
    return (
      (t = Object.assign({ pascalCase: !1 }, t)),
      0 ===
      (e = Array.isArray(e)
        ? e
            .map(function (e) {
              return e.trim();
            })
            .filter(function (e) {
              return e.length;
            })
            .join('-')
        : e.trim()).length
        ? ''
        : 1 === e.length
          ? t.pascalCase
            ? e.toUpperCase()
            : e.toLowerCase()
          : ((e = e =
              (e = e !== e.toLowerCase() ? Qr(e) : e)
                .replace(/^[_.\- ]+/, '')
                .toLowerCase()
                .replace(/[_.\- ]+(\w|$)/g, function (e, t) {
                  return t.toUpperCase();
                })
                .replace(/\d+(\w|$)/g, function (e) {
                  return e.toUpperCase();
                })),
            t.pascalCase ? e.charAt(0).toUpperCase() + e.slice(1) : e)
    );
  }
  var Qr = function (e) {
    for (var t = !1, n = !1, i = !1, o = 0; o < e.length; o++) {
      var r = e[o];
      t && /[a-zA-Z]/.test(r) && r.toUpperCase() === r
        ? ((e = e.slice(0, o) + '-' + e.slice(o)),
          (i = n),
          (n = !(t = !1)),
          o++)
        : n && i && /[a-zA-Z]/.test(r) && r.toLowerCase() === r
          ? ((e = e.slice(0, o - 1) + '-' + e.slice(o - 1)),
            (i = n),
            (t = !(n = !1)))
          : ((t = r.toLowerCase() === r && r.toUpperCase() !== r),
            (i = n),
            (n = r.toUpperCase() === r && r.toLowerCase() !== r));
    }
    return e;
  };
  function ea(e, t) {
    var n = 0;
    return (function e(t, i) {
      return 100 < ++n
        ? (n--, t)
        : $e(t)
          ? ((o = t.map(function (t) {
              return We(t) ? e(t, i) : t;
            })),
            n--,
            o)
          : We(t)
            ? ((r = t),
              (a = function (e, t) {
                if (!Xe(t)) return !1;
                if (t !== Zr(t))
                  for (
                    var n = 0;
                    n < Kr.ignoreKeyWord.length &&
                    !t.includes(Kr.ignoreKeyWord[n]);
                    n++
                  );
                var o;
                return ut(i[t])
                  ? 'OPPOChannelID' === (o = t)
                    ? o
                    : o[0].toUpperCase() + Zr(o).slice(1)
                  : i[t];
              }),
              (s = Object.create(null)),
              Object.keys(r).forEach(function (e) {
                var t = a(r[e], e);
                t && (s[t] = r[e]);
              }),
              (o = St((o = s), function (t, n) {
                return $e(t) || We(t) ? e(t, i) : t;
              })),
              n--,
              o)
            : void 0;
      var o, r, a, s;
    })(e, t);
  }
  for (
    var ta,
      na = String.fromCharCode,
      ia = function (e) {
        var t = 0 | e.charCodeAt(0);
        if (55296 <= t)
          if (t < 56320)
            if (56320 <= (e = 0 | e.charCodeAt(1)) && e <= 57343) {
              if (65535 < (t = ((t << 10) + e - 56613888) | 0))
                return na(
                  240 | (t >>> 18),
                  128 | ((t >>> 12) & 63),
                  128 | ((t >>> 6) & 63),
                  128 | (63 & t)
                );
            } else t = 65533;
          else t <= 57343 && (t = 65533);
        return t <= 2047
          ? na(192 | (t >>> 6), 128 | (63 & t))
          : na(224 | (t >>> 12), 128 | ((t >>> 6) & 63), 128 | (63 & t));
      },
      oa = function (e) {
        for (
          var t =
              void 0 === e
                ? ''
                : ('' + e).replace(
                    /[\x80-\uD7ff\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]?/g,
                    ia
                  ),
            n = 0 | t.length,
            i = new Uint8Array(n),
            o = 0;
          o < n;
          o = (o + 1) | 0
        )
          i[o] = 0 | t.charCodeAt(o);
        return i;
      },
      ra =
        (r(Ra, [
          {
            key: 'getID',
            value: function () {
              return this._id;
            },
          },
          {
            key: '_onOpen',
            value: function (e) {
              this._handler.onOpen({ id: this._id, res: JSON.stringify(e) });
            },
          },
          {
            key: '_onClose',
            value: function (e) {
              this._handler.onClose({ id: this._id, e: e });
            },
          },
          {
            key: '_onMessage',
            value: function (e) {
              (e = this._canIUseBinaryFrame
                ? this._isAppCompressedData(e.data)
                  ? this._handler.inflate(e.data)
                  : (function (e) {
                      for (
                        var t = new Uint8Array(e), n = '', i = 0, o = t.length;
                        i < o;

                      ) {
                        var r = t[i],
                          a = 0,
                          s = 0;
                        if (
                          (r <= 127
                            ? ((a = 0), (s = 255 & r))
                            : r <= 223
                              ? ((a = 1), (s = 31 & r))
                              : r <= 239
                                ? ((a = 2), (s = 15 & r))
                                : r <= 244 && ((a = 3), (s = 7 & r)),
                          0 < o - i - a)
                        )
                          for (var c = 0; c < a; )
                            (s = (s << 6) | (63 & (r = t[i + c + 1]))),
                              (c += 1);
                        else (s = 65533), (a = o - i);
                        (n += String.fromCodePoint(s)), (i += a + 1);
                      }
                      return n;
                    })(e.data)
                : e.data),
                this._handler.onMessage({ data: e });
            },
          },
          {
            key: '_isAppCompressedData',
            value: function (e) {
              return (
                67 === (e = new Uint8Array(e))[0] &&
                79 === e[1] &&
                77 === e[2] &&
                80 === e[3]
              );
            },
          },
          {
            key: '_onError',
            value: function (e) {
              this._handler.onError({ id: this._id, e: e });
            },
          },
          {
            key: 'setIsWorkerEnabled',
            value: function (e) {
              this._isWorkerEnabled = !0;
            },
          },
          {
            key: 'close',
            value: function (e) {
              if (
                (this._workerSocket &&
                  (this._workerSocket.postMessage({ cmd: 'stop', code: e }),
                  this._workerSocket.terminate(),
                  (this._workerSocket = null)),
                z)
              )
                return (
                  te.offSocketClose(),
                  te.offSocketMessage(),
                  te.offSocketOpen(),
                  te.offSocketError(),
                  void te.closeSocket()
                );
              this._socket &&
                (Z
                  ? (this._socket.onClose(function () {}),
                    this._socket.onOpen(function () {}),
                    this._socket.onMessage(function () {}),
                    this._socket.onError(function () {}))
                  : ((this._socket.onopen = null),
                    (this._socket.onmessage = null),
                    (this._socket.onclose = null),
                    (this._socket.onerror = null)),
                W ? this._socket.close({ code: e }) : this._socket.close(e),
                (this._socket = null));
            },
          },
          {
            key: 'send',
            value: function (e) {
              this._workerSocket
                ? this._workerSocket.postMessage({
                    cmd: 'sendMessage',
                    data: this._canIUseBinaryFrame ? oa(e.data).buffer : e.data,
                  })
                : z
                  ? te.sendSocketMessage({
                      data: e.data,
                      fail: function () {
                        e.fail && e.requestID && e.fail(e.requestID);
                      },
                    })
                  : this._socket &&
                    (Z
                      ? this._socket.send({
                          data: this._canIUseBinaryFrame
                            ? oa(e.data).buffer
                            : e.data,
                          fail: function () {
                            e.fail && e.requestID && e.fail(e.requestID);
                          },
                        })
                      : this._socket.send(
                          this._canIUseBinaryFrame ? oa(e.data) : e.data
                        ));
            },
          },
        ]),
        Ra),
      aa = ['keyMap'],
      sa = ['keyMap'],
      ca = 'connected',
      ua = 'connecting',
      la = 'disconnected',
      da =
        (r(ka, [
          {
            key: '_setWebsocketHost',
            value: function () {
              var e = this._chM.get(12);
              (this._currentSite = N),
                this._chM.isOversea() && (this._currentSite = 'OVERSEA'),
                e.isSingaporeSite()
                  ? (this._currentSite = 'SINGAPORE')
                  : e.isKoreaSite()
                    ? (this._currentSite = 'KOREA')
                    : e.isGermanySite()
                      ? (this._currentSite = 'GERMANY')
                      : e.isIndiaSite()
                        ? (this._currentSite = 'IND')
                        : e.isJapanSite()
                          ? (this._currentSite = 'JPN')
                          : e.isUSASite()
                            ? (this._currentSite = 'USA')
                            : e.isIndonesiaSite() &&
                              (this._currentSite = 'INDONESIA'),
                P.HOST.setCurrent(this._currentSite);
            },
          },
          {
            key: '_initConnection',
            value: function () {
              ut(P.HOST.CURRENT.BACKUP) || '' === this._url
                ? (this._url = P.HOST.CURRENT.DEFAULT)
                : this._url === P.HOST.CURRENT.DEFAULT
                  ? (this._url = P.HOST.CURRENT.BACKUP)
                  : this._url === P.HOST.CURRENT.BACKUP
                    ? (this._url = this._canIUseAnyCast()
                        ? P.HOST.CURRENT.ANYCAST
                        : P.HOST.CURRENT.DEFAULT)
                    : this._url === P.HOST.CURRENT.ANYCAST &&
                      ((P.HOST.CURRENT.ANYCAST = ''),
                      (this._url = P.HOST.CURRENT.DEFAULT));
              var e = this._chM.get(12),
                t = e.getProxyServer();
              Ve(t) || (this._url = t),
                e.isTestEnv() &&
                  (this._url = L.TEST[this._currentSite].DEFAULT),
                this._connect(),
                (this._nextPingTs = 0);
            },
          },
          {
            key: '_canIUseAnyCast',
            value: function () {
              return ee && P.HOST.CURRENT.ANYCAST;
            },
          },
          {
            key: 'onCheckTimer',
            value: function (e) {
              e % 1 == 0 && (this._checkPromiseMap(), this._checkNativeAppWS());
            },
          },
          {
            key: '_checkPromiseMap',
            value: function () {
              var e = this;
              0 !== this._promiseMap.size &&
                this._promiseMap.forEach(function (t, n) {
                  var i = t.reject,
                    o = ((t = t.timestamp), 15e3);
                  -1 !== n.indexOf(Gn.LOGIN)
                    ? (o = 9e4)
                    : -1 !== n.indexOf(Gn.PING) && (o = 3e3),
                    Date.now() - t >= o &&
                      (Ae.l(
                        ''
                          .concat(
                            e._n,
                            '._checkPromiseMap request timeout, delete requestID:'
                          )
                          .concat(n)
                      ),
                      e._promiseMap.delete(n),
                      i(new Pn({ code: wn.NETWORK_TIMEOUT })),
                      e._chM.onRequestTimeout());
                });
            },
          },
          {
            key: '_checkNativeAppWS',
            value: function () {
              Y && !this.isConnected() && this._reConnect();
            },
          },
          {
            key: 'onOpen',
            value: function (e) {
              var t, n;
              this._readyState !== la &&
                ((this._onOpenTs = Date.now()),
                (n = e.id),
                (e = e.res),
                (this._socketID = n),
                (t = Kt(this._startTs, !1)),
                (n = 'socketID:'.concat(n, ' res:').concat(e)),
                Ae.l(
                  ''
                    .concat(this._n, '._onOpen cost:')
                    .concat(t, ' ms. ')
                    .concat(n)
                ),
                new ei('wsOnOpen')
                  .setMessage(t)
                  .setCostTime(t)
                  .setMoreMessage(n)
                  .end(),
                (this._readyState = ca),
                (this._reConnectCount = 0),
                this._resend(),
                !0 === this._reConnectFlag &&
                  (this._chM.onReconnected(), (this._reConnectFlag = !1)),
                this._chM.onOpen());
            },
          },
          {
            key: 'onClose',
            value: function (e) {
              var t = new ei('wsOnClose'),
                n = e.id,
                i =
                  ((e = e.e),
                  'sourceSocketID:'
                    .concat(n, ' currentSocketID:')
                    .concat(this._socketID, ' code:')
                    .concat(e.code, ' reason:')
                    .concat(e.reason)),
                o = 0;
              0 !== this._onOpenTs && (o = Date.now() - this._onOpenTs),
                t
                  .setMessage(o)
                  .setCostTime(o)
                  .setMoreMessage(i)
                  .setCode(e.code)
                  .end(!0),
                Ae.l(
                  ''
                    .concat(this._n, '._onClose ')
                    .concat(i, ' onlineTime:')
                    .concat(o)
                ),
                n === this._socketID &&
                  ((this._readyState = la),
                  o < 1e3
                    ? this._chM.onReconnectFailed()
                    : this._chM.onClose());
            },
          },
          {
            key: 'onError',
            value: function (e) {
              var t = e.id,
                n =
                  ((e = e.e),
                  'sourceSocketID:'
                    .concat(t, ' currentSocketID:')
                    .concat(this._socketID));
              new ei('wsOnError')
                .setMessage(e.errMsg || ht(e))
                .setMoreMessage(n)
                .setLevel('error')
                .end(!0),
                Ae.w(''.concat(this._n, '._onError'), e, n),
                t === this._socketID &&
                  ((this._readyState = la), this._chM.onError());
            },
          },
          {
            key: 'onMessage',
            value: function (e) {
              var t;
              try {
                t = JSON.parse(e.data);
              } catch (a) {
                new ei('jsonParseError').setMessage(e.data).end();
              }
              if (t && t.head) {
                e = this._getRequestIDFromHead(t.head);
                var n,
                  i,
                  o,
                  r = t.body;
                if (
                  (this._chM.get(30).isTRTCCommand(e) ||
                    ((o = Nt(t.head)),
                    (r = (function e(t, n) {
                      return $e(t)
                        ? t.map(function (t) {
                            return We(t) ? e(t, n) : t;
                          })
                        : We(t)
                          ? ((i = t),
                            (o = function (e, t) {
                              return ut(n[t]) ? Zr(t) : n[t];
                            }),
                            (r = {}),
                            Object.keys(i).forEach(function (e) {
                              r[o(i[e], e)] = i[e];
                            }),
                            St(r, function (t) {
                              return $e(t) || We(t) ? e(t, n) : t;
                            }))
                          : void 0;
                      var i, o, r;
                    })(t.body, this._getResKeyMap(o)))),
                  Ae.d(
                    ''
                      .concat(this._n, '.onMessage ret:')
                      .concat(JSON.stringify(r), ' requestID:')
                      .concat(e, ' has:')
                      .concat(this._promiseMap.has(e))
                  ),
                  this._setNextPingTs(),
                  this._promiseMap.has(e))
                )
                  return (
                    (n = (o = this._promiseMap.get(e)).resolve),
                    (i = o.reject),
                    (o = o.timestamp),
                    this._promiseMap.delete(e),
                    this._calcRTT(o),
                    void (r.errorCode && 0 !== r.errorCode
                      ? (this._chM.onErrorCodeNotZero(r),
                        i(
                          new Pn({
                            code: r.errorCode,
                            message: r.errorInfo || '',
                            data:
                              e.includes(Gn.MODIFY_C2C_MSG) ||
                              e.includes(Gn.MODIFY_GRP_MSG)
                                ? {
                                    elements: r.elements,
                                    messageVersion: r.messageVersion,
                                    cloudCustomData: r.cloudCustomData,
                                  }
                                : void 0,
                          })
                        ))
                      : n(mn(r)))
                  );
                this._chM.onMessage({ head: t.head, body: r });
              }
            },
          },
          {
            key: '_calcRTT',
            value: function (e) {
              (e = Date.now() - e), this._chM.get(26).addRTT(e);
            },
          },
          {
            key: '_connect',
            value: function () {
              this._readyState !== ua &&
                this._readyState !== ca &&
                ((this._startTs = Date.now()),
                (this._onOpenTs = 0),
                (this._readyState = ua),
                (this._socket = new ra(this)),
                (this._socketID = this._socket.getID()),
                Ae.l(
                  ''
                    .concat(this._n, '._connect isWorkerEnabled:')
                    .concat(this.getIsWorkerEnabled(), ' socketID:')
                    .concat(this._socketID, ' url:')
                    .concat(this.getURL())
                ),
                new ei('wsConnect')
                  .setMessage(
                    'socketID:'
                      .concat(this._socketID, ' url:')
                      .concat(this.getURL())
                  )
                  .end());
            },
          },
          {
            key: 'getURL',
            value: function () {
              this._chM.isDevMode() && (this._canIUseBinaryFrame = !1);
              var e = Lt(),
                t =
                  ((z || (B && 'windows' === e) || Y) &&
                    (this._canIUseBinaryFrame = !1),
                  -1),
                n =
                  ('ios' === e
                    ? (t = re || -1)
                    : 'android' === e && (t = se || -1),
                  this._chM.get(12)),
                i = this._chM.getPlatform(),
                o = n.getSDKAppID();
              return (
                (n = n.getInstanceID()),
                (o =
                  'sdkappid='
                    .concat(o, '&instanceid=')
                    .concat(n, '&random=')
                    .concat(this._getRandom(), '&platform=')
                    .concat(i, '&host=')
                    .concat(e) +
                  '&version='.concat(t, '&sdkversion=').concat('3.4.2')),
                H && (o += '&isminigame=1'),
                this._chM.canIUseInflate() && (o += '&compress=gzip'),
                (this._canIUseBinaryFrame
                  ? ''.concat(this._url, '/binfo?')
                  : ''.concat(this._url, '/info?')
                ).concat(o)
              );
            },
          },
          {
            key: '_closeConnection',
            value: function (e) {
              Ae.l(
                ''
                  .concat(this._n, '._closeConnection socketID:')
                  .concat(this._socketID)
              ),
                this._socket &&
                  (this._socket.close(e),
                  (this._socketID = -1),
                  (this._socket = null),
                  (this._readyState = la));
            },
          },
          {
            key: '_resend',
            value: function () {
              var e = this;
              if (
                (Ae.l(
                  ''
                    .concat(this._n, '._resend reConnectFlag:')
                    .concat(this._reConnectFlag),
                  'promiseMap.size:'
                    .concat(this._promiseMap.size, ' simpleRequestMap.size:')
                    .concat(this._simpleRequestMap.size)
                ),
                0 < this._promiseMap.size &&
                  this._promiseMap.forEach(function (t, n) {
                    var i = t.uplinkData,
                      o = t.resolve;
                    (t = t.reject),
                      -1 !== n.indexOf(Gn.AV_POLLING)
                        ? e._promiseMap.delete(n)
                        : (e._promiseMap.set(n, {
                            resolve: o,
                            reject: t,
                            timestamp: Date.now(),
                            uplinkData: i,
                          }),
                          e._execute(n, i));
                  }),
                0 < this._simpleRequestMap.size)
              ) {
                var t,
                  n = T(this._simpleRequestMap);
                try {
                  for (n.s(); !(t = n.n()).done; ) {
                    var i = _(t.value, 2),
                      o = i[0],
                      r = i[1];
                    this._execute(o, r);
                  }
                } catch (a) {
                  n.e(a);
                } finally {
                  n.f();
                }
                this._simpleRequestMap.clear();
              }
            },
          },
          {
            key: 'send',
            value: function (e) {
              var t = this,
                n =
                  ((e.head.seq = this._getSequence()),
                  (e.head.reqtime = Math.floor(Date.now() / 1e3)),
                  e.keyMap,
                  h(e, aa)),
                i = this._getRequestIDFromHead(e.head),
                o = JSON.stringify(n);
              return new Promise(function (e, r) {
                t._promiseMap.set(i, {
                  resolve: e,
                  reject: r,
                  timestamp: Date.now(),
                  uplinkData: o,
                }),
                  Ae.d(
                    ''
                      .concat(t._n, '.send uplinkData:')
                      .concat(JSON.stringify(n), ' requestID:')
                      .concat(i, ' readyState:')
                      .concat(t._readyState)
                  ),
                  t._readyState !== ca
                    ? t._reConnect()
                    : (t._execute(i, o), t._chM.get(26).addRequestCount());
              });
            },
          },
          {
            key: 'simplySend',
            value: function (e) {
              (e.head.seq = this._getSequence()),
                (e.head.reqtime = Math.floor(Date.now() / 1e3)),
                e.keyMap;
              var t = h(e, sa);
              (e = this._getRequestIDFromHead(e.head)),
                (t = JSON.stringify(t)),
                this._readyState !== ca
                  ? (this._simpleRequestMap.size < this.MAX_SIZE
                      ? this._simpleRequestMap.set(e, t)
                      : Ae.l(
                          ''.concat(
                            this._n,
                            '.simplySend. simpleRequestMap is full, drop request!'
                          )
                        ),
                    this._reConnect())
                  : this._execute(e, t);
            },
          },
          {
            key: '_execute',
            value: function (e, t) {
              this._socket.send({
                data: t,
                fail: Z ? this._onSendFail.bind(this) : void 0,
                requestID: e,
              });
            },
          },
          {
            key: '_onSendFail',
            value: function (e) {
              Ae.l(''.concat(this._n, '._onSendFail requestID:').concat(e)),
                this._chM.onSendFail();
            },
          },
          {
            key: '_getSequence',
            value: function () {
              var e;
              if (this._startSequence < 2415919103)
                return (
                  (e = this._startSequence),
                  (this._startSequence += 1),
                  2415919103 === this._startSequence &&
                    (this._startSequence = nt()),
                  e
                );
            },
          },
          {
            key: '_getRequestIDFromHead',
            value: function (e) {
              return e.servcmd + e.seq;
            },
          },
          {
            key: '_getResKeyMap',
            value: function (e) {
              return (e = this._chM.getKeyMap(e)), t(t({}, Kr.res), e.res);
            },
          },
          {
            key: '_reConnect',
            value: function () {
              this._readyState !== ca &&
                this._readyState !== ua &&
                this.forcedReconnect();
            },
          },
          {
            key: 'forcedReconnect',
            value: function () {
              var e = ''.concat(this._n, '.forcedReconnect');
              Ae.l(
                ''
                  .concat(e, ' count:')
                  .concat(this._reConnectCount, ' readyState:')
                  .concat(this._readyState)
              ),
                (this._reConnectFlag = !0),
                this._resetRandom(),
                this._reConnectCount < this.MAX_RECONNECT_COUNT
                  ? ((this._reConnectCount += 1),
                    this._closeConnection(4001),
                    this._initConnection())
                  : ((this._reConnectCount = 0),
                    this._chM.get(15).isOnline()
                      ? (Ae.w(
                          ''.concat(
                            e,
                            ' disconnected from wsserver but network is ok, continue...'
                          )
                        ),
                        this._closeConnection(4001),
                        this._initConnection())
                      : this._chM.onReconnectFailed());
            },
          },
          {
            key: 'getReconnectFlag',
            value: function () {
              return this._reConnectFlag;
            },
          },
          {
            key: '_setNextPingTs',
            value: function () {
              this._nextPingTs = Y ? Date.now() + 5e3 : Date.now() + 1e4;
            },
          },
          {
            key: 'getNextPingTs',
            value: function () {
              return this._nextPingTs;
            },
          },
          {
            key: 'isConnected',
            value: function () {
              return this._readyState === ca;
            },
          },
          {
            key: 'canIUseBinaryFrame',
            value: function () {
              return this._canIUseBinaryFrame;
            },
          },
          {
            key: 'getSocketID',
            value: function () {
              return this._socketID;
            },
          },
          {
            key: 'inflate',
            value: function (e) {
              if (this._chM.canIUseInflate())
                return this._chM.get(37).inflate(e);
            },
          },
          {
            key: 'setIsWorkerEnabled',
            value: function (e) {
              Ae.l(''.concat(this._n, '.setIsWorkerEnabled flag:').concat(e)),
                (this._isWorkerEnabled = e);
            },
          },
          {
            key: 'getIsWorkerEnabled',
            value: function () {
              return this._isWorkerEnabled && he;
            },
          },
          {
            key: '_getRandom',
            value: function () {
              return (
                0 === this._random && (this._random = Math.random()),
                this._random
              );
            },
          },
          {
            key: '_resetRandom',
            value: function () {
              this._random = 0;
            },
          },
          {
            key: 'close',
            value: function () {
              Ae.l(''.concat(this._n, '.close')),
                this._closeConnection(4e3),
                this._promiseMap.clear(),
                (this._startSequence = nt()),
                (this._readyState = la),
                this._simpleRequestMap.clear(),
                (this._reConnectFlag = !1),
                (this._reConnectCount = 0),
                (this._onOpenTs = 0),
                (this._url = ''),
                (this._random = 0),
                (this._canIUseBinaryFrame = !0),
                (this._isWorkerEnabled = !0);
            },
          },
        ]),
        ka),
      pa = function (e, t, n) {
        return new Promise(function (i, o) {
          var r,
            a,
            s = 'application/x-www-form-urlencoded;charset=UTF-8';
          Z
            ? te.request({
                url: t,
                data: n,
                method: e,
                timeout: 3e3,
                header: { 'content-type': s },
                success: function (e) {
                  e &&
                    e.data &&
                    e.data.NetCheckInfo &&
                    Ae.l(
                      ''.concat('getconninfo ok in', ' miniapp. ret:'),
                      e.data
                    ),
                    i();
                },
                fail: function () {
                  o(new Pn({ code: wn.NETWORK_ERROR }));
                },
              })
            : ((r = new XMLHttpRequest()),
              (a = setTimeout(function () {
                r.abort(), o(new Pn({ code: wn.NETWORK_TIMEOUT }));
              }, 3e3)),
              (r.onreadystatechange = function () {
                4 === r.readyState &&
                  (clearTimeout(a),
                  200 === r.status || 304 === r.status
                    ? (r.responseText &&
                        -1 < r.responseText.indexOf('NetCheckInfo') &&
                        Ae.l(
                          ''.concat('getconninfo ok in', ' web. ret:'),
                          JSON.parse(r.responseText)
                        ),
                      i())
                    : o(new Pn({ code: wn.NETWORK_ERROR })));
              }),
              r.open(e, t, !0),
              r.setRequestHeader('Content-type', s),
              n ? r.send(n) : r.send());
        });
      },
      ha =
        (s(Sa, An),
        (ta = g(Sa)),
        r(Sa, [
          {
            key: 'onCheckTimer',
            value: function (e) {
              this._socketHandler &&
                (this.isLoggedIn()
                  ? (0 < this._timerForNotLoggedIn &&
                      (clearInterval(this._timerForNotLoggedIn),
                      (this._timerForNotLoggedIn = -1)),
                    this._socketHandler.onCheckTimer(e))
                  : this._socketHandler.onCheckTimer(1),
                this._checkNextPing());
            },
          },
          {
            key: 'onErrorCodeNotZero',
            value: function (e) {
              this.get(20).onErrorCodeNotZero(e);
            },
          },
          {
            key: 'onMessage',
            value: function (e) {
              this.get(20).onMessage(e);
            },
          },
          {
            key: 'send',
            value: function (e) {
              return this._socketHandler
                ? this._previousState !== D.NET_STATE_CONNECTED &&
                  e.head.servcmd.includes(Gn.SSO_STAT)
                  ? (this.reConnect(),
                    this.isPrivateNetWork()
                      ? Promise.resolve()
                      : this._sendLogViaHTTP(e))
                  : this._socketHandler.send(e)
                : Promise.reject();
            },
          },
          {
            key: '_sendLogViaHTTP',
            value: function (e) {
              var t = P.HOST.CURRENT.STAT;
              return (
                (t = ''
                  .concat(t, '/v4/imopenstat/tim_web_report_v2?sdkappid=')
                  .concat(e.head.sdkappid, '&reqtime=')
                  .concat(Date.now())),
                (e = JSON.stringify(e.body)),
                pa('POST', t, e)
              );
            },
          },
          {
            key: 'simplySend',
            value: function (e) {
              return this._socketHandler
                ? this._socketHandler.simplySend(e)
                : Promise.reject();
            },
          },
          {
            key: 'onOpen',
            value: function () {
              this._ping();
            },
          },
          {
            key: 'onClose',
            value: function () {
              this._socketHandler &&
                this._socketHandler.getReconnectFlag() &&
                this._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED),
                this.reConnect();
            },
          },
          {
            key: 'onError',
            value: function () {
              Z && !Y && this.warn('DomainNameInMP'),
                this._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
            },
          },
          {
            key: 'getKeyMap',
            value: function (e) {
              return this.get(20).getKeyMap(e);
            },
          },
          {
            key: 'onRequestTimeout',
            value: function () {
              3e4 <= Date.now() - this._lastDiagnoseTS && this.diagnose();
            },
          },
          {
            key: 'onSendFail',
            value: function () {
              this._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
            },
          },
          {
            key: 'onReconnected',
            value: function () {
              Ae.l(
                ''
                  .concat(this._n, '.onReconnected cost:')
                  .concat(Kt(this._disconnectedTS, !0, !0))
              ),
                this._m.restartTimer(),
                this.get(20).onReconnected(Kt(this._disconnectedTS, !1, !1)),
                (this._disconnectedTS = 0),
                this._emitNetStateChangeEvent(D.NET_STATE_CONNECTED);
            },
          },
          {
            key: 'onReconnectFailed',
            value: function () {
              Ae.l(''.concat(this._n, '.onReconnectFailed')),
                this._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
            },
          },
          {
            key: 'setIsWorkerEnabled',
            value: function (e) {
              this._socketHandler && this._socketHandler.setIsWorkerEnabled(!1);
            },
          },
          {
            key: 'offline',
            value: function () {
              this._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
            },
          },
          {
            key: 'reConnect',
            value: function () {
              var e =
                  0 < arguments.length &&
                  void 0 !== arguments[0] &&
                  arguments[0],
                t = !1,
                n =
                  (this._socketHandler &&
                    (t = this._socketHandler.getReconnectFlag()),
                  'forcedFlag:'
                    .concat(e, ' fatalErrorFlag:')
                    .concat(this._fatalErrorFlag, ' previousState:')
                    .concat(this._previousState, ' reconnectFlag:')
                    .concat(t));
              if (
                (Ae.l(''.concat(this._n, '.reConnect ').concat(n)),
                !this._fatalErrorFlag && this._socketHandler)
              ) {
                if (!0 === e) this._socketHandler.forcedReconnect();
                else {
                  if (this._previousState === D.NET_STATE_CONNECTING && t)
                    return;
                  this._socketHandler.forcedReconnect();
                }
                this._emitNetStateChangeEvent(D.NET_STATE_CONNECTING);
              }
            },
          },
          {
            key: '_emitNetStateChangeEvent',
            value: function (e) {
              this._previousState !== e &&
                (Ae.l(
                  ''
                    .concat(this._n, '._emitNetStateChangeEvent from ')
                    .concat(this._previousState, ' to ')
                    .concat(e)
                ),
                e === D.NET_STATE_DISCONNECTED &&
                  0 === this._disconnectedTS &&
                  ((this._disconnectedTS = Date.now()), this.diagnose()),
                (this._previousState = e),
                this.emitOEvt(E.NET_STATE_CHANGE, { state: e }));
            },
          },
          {
            key: '_ping',
            value: function () {
              var e,
                t = this;
              !0 !== this._probing &&
                ((this._probing = !0),
                (e = this.get(20).getProtocolData({ P: Gn.PING })),
                this.send(e)
                  .then(function () {
                    t._probing = !1;
                  })
                  .catch(function (e) {
                    t._probing = !1;
                    var n = t.get(15).isOnline();
                    if (
                      (Ae.w(
                        ''
                          .concat(t._n, '._ping failed. bOnline:')
                          .concat(n, ' error:'),
                        e
                      ),
                      e && 60002 === e.code)
                    )
                      return (
                        new ei('error')
                          .setMessage(
                            'code:'
                              .concat(e.code, ' message:')
                              .concat(e.message)
                          )
                          .end(),
                        (t._fatalErrorFlag = !0),
                        void t._emitNetStateChangeEvent(
                          D.NET_STATE_DISCONNECTED
                        )
                      );
                    n
                      ? t.reConnect()
                      : t._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
                  }));
            },
          },
          {
            key: '_checkNextPing',
            value: function () {
              this._socketHandler &&
                this._socketHandler.isConnected() &&
                Date.now() >= this._socketHandler.getNextPingTs() &&
                this._ping();
            },
          },
          {
            key: 'dealloc',
            value: function () {
              this._socketHandler &&
                (this._socketHandler.close(), (this._socketHandler = null)),
                -1 < this._timerForNotLoggedIn &&
                  clearInterval(this._timerForNotLoggedIn);
            },
          },
          {
            key: 'onRestApiKickedOut',
            value: function () {
              this._socketHandler &&
                (this._socketHandler.close(), this.reConnect(!0));
            },
          },
          {
            key: 'canIUseInflate',
            value: function () {
              return this._m.canIUseInflate();
            },
          },
          {
            key: 'getSocketID',
            value: function () {
              if (this._socketHandler) return this._socketHandler.getSocketID();
            },
          },
          {
            key: 'diagnose',
            value: function () {
              this.isPrivateNetWork() ||
                ((this._lastDiagnoseTS = Date.now()),
                this._diagnoseBySSO(),
                this._diagnoseByCDN());
            },
          },
          {
            key: '_diagnoseBySSO',
            value: function () {
              var e = this,
                t = this._socketHandler.getURL(),
                n = t.split('/')[2];
              n.startsWith('ws') &&
                ((t = t.slice(t.indexOf('info?') + 5)),
                (n = 'https://'
                  .concat(n, '/v3/netcheck/getconninfo?')
                  .concat(t, '&reqtime=')
                  .concat(Date.now())),
                pa('GET', n).catch(function (t) {
                  Ae.w(''.concat(e._n, '._diagnoseBySSO failed. error:'), t);
                }));
            },
          },
          {
            key: '_diagnoseByCDN',
            value: function () {
              var e = this,
                t = (t = this._socketHandler.getURL()).slice(
                  t.indexOf('info?') + 5
                );
              (t = 'https://boce-cdn.my-imcloud.com/v3/netcheck/getconninfo?'
                .concat(t, '&reqtime=')
                .concat(Date.now())),
                pa('GET', t).catch(function (t) {
                  Ae.w(''.concat(e._n, '._diagnoseByCDN failed. error:'), t);
                });
            },
          },
          {
            key: 'reset',
            value: function () {
              Ae.l(''.concat(this._n, '.reset')),
                (this._previousState = D.NET_STATE_CONNECTED),
                (this._probing = !1),
                (this._fatalErrorFlag = !1),
                (this._timerForNotLoggedIn = setInterval(
                  this.onCheckTimer.bind(this),
                  1e3
                )),
                (this._disconnectedTS = 0),
                (this._lastDiagnoseTS = 0);
            },
          },
        ]),
        Sa),
      fa = ['a2', 'tinyid'],
      ga = ['a2', 'tinyid'],
      _a =
        (r(Da, [
          {
            key: '_fillMap',
            value: function () {
              this._map.clear();
              var e = this._sessionM.genCommonHead(),
                n = this._sessionM.genCosSpecifiedHead(),
                i = this._sessionM.genSSOReportHead();
              this._map.set(Gn.LOGIN, {
                head: t(
                  t({}, e),
                  {},
                  {
                    servcmd: ''
                      .concat(P.NAME.IM_OPEN_STATUS, '.')
                      .concat(Gn.LOGIN),
                  }
                ),
                body: { state: 'Online', isWebUniapp: 0, deviceBrand: 0 },
                keyMap: {
                  req: { deviceBrand: 'InstType' },
                  res: {
                    InstId: 'instanceID',
                    HelloInterval: 'helloInterval',
                    RichMsgAuthKey: 'authKey',
                  },
                },
              }),
                this._map.set(Gn.LOGOUT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.LOGOUT),
                    }
                  ),
                  body: { type: 0 },
                  keyMap: { req: { type: 'wslogout_type' } },
                }),
                this._map.set(Gn.HELLO, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.HELLO),
                    }
                  ),
                  body: { isWebUniapp: 0 },
                  keyMap: { res: { NewInstInfo: 'newInstanceInfo' } },
                }),
                this._map.set(Gn.KICK_OTHER, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.STAT_SERVICE, '.')
                        .concat(Gn.KICK_OTHER),
                    }
                  ),
                  body: {},
                }),
                this._map.set(Gn.COS_SIGN, {
                  head: t(
                    t({}, n),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_COS_SIGN, '.')
                        .concat(Gn.COS_SIGN),
                    }
                  ),
                  body: {
                    cmd: 'open_im_cos_svc',
                    subCmd: 'get_cos_token',
                    duration: 300,
                    version: 2,
                  },
                  keyMap: {
                    req: {
                      userSig: 'usersig',
                      subCmd: 'sub_cmd',
                      cmd: 'cmd',
                      duration: 'duration',
                      version: 'version',
                    },
                    res: {
                      expired_time: 'expiredTime',
                      bucket_name: 'bucketName',
                      session_token: 'sessionToken',
                      tmp_secret_id: 'secretId',
                      tmp_secret_key: 'secretKey',
                    },
                  },
                }),
                this._map.set(Gn.COS_PRE_SIG, {
                  head: t(
                    t({}, n),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.CUSTOM_UPLOAD, '.')
                        .concat(Gn.COS_PRE_SIG),
                    }
                  ),
                  body: {
                    fileType: void 0,
                    fileName: void 0,
                    uploadMethod: 0,
                    duration: 900,
                  },
                  keyMap: {
                    req: {
                      userSig: 'usersig',
                      fileType: 'file_type',
                      fileName: 'file_name',
                      uploadMethod: 'upload_method',
                    },
                    res: {
                      expired_time: 'expiredTime',
                      request_id: 'requestId',
                      head_url: 'headUrl',
                      upload_url: 'uploadUrl',
                      download_url: 'downloadUrl',
                      ci_url: 'ciUrl',
                      snapshot_url: 'requestSnapshotUrl',
                    },
                  },
                }),
                this._map.set(Gn.SIMPLE_COS_PRE_SIG, {
                  head: t(
                    t({}, n),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.CUSTOM_UPLOAD, '.')
                        .concat(Gn.SIMPLE_COS_PRE_SIG),
                    }
                  ),
                  body: {
                    uploadMethod: 0,
                    platform: 2,
                    SDKAppID: 0,
                    userID: '',
                    conversationType: 1,
                    uploadConfig: [{ fileID: 1, fileType: 1, fileName: '' }],
                  },
                  keyMap: {
                    req: {
                      platform: 'uint32_platform',
                      SDKAppID: 'uint32_sdkappid',
                      userID: 'str_user_id',
                      uploadMethod: 'uint32_upload_method',
                      conversationType: 'uint32_scene',
                      uploadConfig: 'rpt_upload_object',
                      fileID: 'uint32_file_id',
                      fileType: 'uint32_file_type',
                      fileName: 'str_file_name',
                    },
                    res: {
                      str_final_ip: 'uploadIP',
                      rpt_pre_sig: 'preSig',
                      uint32_file_id: 'fileID',
                      uint32_exist_flag: 'existFlag',
                      str_download_url: 'downloadUrl',
                      str_upload_url: 'uploadUrl',
                      str_snapshot_url: 'requestSnapshotUrl',
                      str_file_key: 'fileKey',
                    },
                  },
                }),
                this._map.set(Gn.GET_IMAGE_INFO, {
                  head: t(
                    t({}, n),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.CUSTOM_UPLOAD, '.')
                        .concat(Gn.GET_IMAGE_INFO),
                    }
                  ),
                  body: { imageUrl: '' },
                  keyMap: {
                    req: { imageUrl: 'str_image_url' },
                    res: {
                      rpt_msg_image_info: 'imageInfoArray',
                      uint32_image_type: 'type',
                      str_url: 'url',
                      uint32_width: 'width',
                      uint32_height: 'height',
                      str_image_format: 'imageFormat',
                    },
                  },
                }),
                this._map.set(Gn.GET_IP, {
                  head: t(
                    t({}, n),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.CUSTOM_UPLOAD, '.')
                        .concat(Gn.GET_IP),
                    }
                  ),
                  body: { domainName: '' },
                  keyMap: {
                    req: { domainName: 'str_domain' },
                    res: { str_final_ip: 'ip' },
                  },
                }),
                this._map.set(Gn.VIDEO_COVER, {
                  head: t(
                    t({}, n),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.CUSTOM_UPLOAD, '.')
                        .concat(Gn.VIDEO_COVER),
                    }
                  ),
                  body: {
                    version: 1,
                    platform: void 0,
                    coverName: void 0,
                    requestSnapshotUrl: void 0,
                  },
                  keyMap: {
                    req: {
                      version: 'version',
                      platform: 'platform',
                      coverName: 'cover_name',
                      requestSnapshotUrl: 'snapshot_url',
                    },
                    res: {
                      error_code: 'errorCode',
                      error_msg: 'errorInfo',
                      download_url: 'snapshotUrl',
                    },
                  },
                }),
                this._map.set(Gn.FETCH_COMMERCIAL_CONFIG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_CONFIG_MANAGER, '.')
                        .concat(Gn.FETCH_COMMERCIAL_CONFIG),
                    }
                  ),
                  body: { SDKAppID: 0 },
                  keyMap: {
                    req: { SDKAppID: 'uint32_sdkappid' },
                    res: {
                      int32_error_code: 'errorCode',
                      str_error_message: 'errorMessage',
                      str_purchase_bits: 'purchaseBits',
                      uint32_expired_time: 'expiredTime',
                    },
                  },
                }),
                this._map.set(Gn.PUSHED_COMMERCIAL_CONFIG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_CONFIG_MANAGER, '.')
                        .concat(Gn.PUSHED_COMMERCIAL_CONFIG),
                    }
                  ),
                  body: {},
                  keyMap: {
                    res: {
                      int32_error_code: 'errorCode',
                      str_error_message: 'errorMessage',
                      str_purchase_bits: 'purchaseBits',
                      uint32_expired_time: 'expiredTime',
                    },
                  },
                }),
                this._map.set(Gn.FETCH_CLOUD_CTRL_CONFIG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_CONFIG_MANAGER, '.')
                        .concat(Gn.FETCH_CLOUD_CTRL_CONFIG),
                    }
                  ),
                  body: { SDKAppID: 0, version: 0 },
                  keyMap: {
                    req: {
                      SDKAppID: 'uint32_sdkappid',
                      version: 'uint64_version',
                    },
                    res: {
                      int32_error_code: 'errorCode',
                      str_error_message: 'errorMessage',
                      str_json_config: 'cloudControlConfig',
                      uint32_expired_time: 'expiredTime',
                      uint32_sdkappid: 'SDKAppID',
                      uint64_version: 'version',
                    },
                  },
                }),
                this._map.set(Gn.PUSHED_CLOUD_CTRL_CONFIG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_CONFIG_MANAGER, '.')
                        .concat(Gn.PUSHED_CLOUD_CTRL_CONFIG),
                    }
                  ),
                  body: {},
                  keyMap: {
                    res: {
                      int32_error_code: 'errorCode',
                      str_error_message: 'errorMessage',
                      str_json_config: 'cloudControlConfig',
                      uint32_expired_time: 'expiredTime',
                      uint32_sdkappid: 'SDKAppID',
                      uint64_version: 'version',
                    },
                  },
                }),
                this._map.set(Gn.OVERLOAD_NOTIFY, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OVERLOAD_PUSH, '.')
                        .concat(Gn.OVERLOAD_NOTIFY),
                    }
                  ),
                  body: {},
                  keyMap: {
                    res: {
                      OverLoadServCmd: 'overloadCommand',
                      DelaySecs: 'waitingTime',
                    },
                  },
                }),
                this._map.set(Gn.SYNC_UNREAD_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.SYNC_UNREAD_MSG),
                    }
                  ),
                  body: {
                    cookie: '',
                    syncFlag: 0,
                    needAbstract: 1,
                    isOnlineSync: 0,
                    needSignaling: 1,
                  },
                  keyMap: {
                    req: {
                      fromAccount: 'From_Account',
                      toAccount: 'To_Account',
                      from: 'From_Account',
                      to: 'To_Account',
                      time: 'MsgTimeStamp',
                      sequence: 'MsgSeq',
                      random: 'MsgRandom',
                      elements: 'MsgBody',
                    },
                    res: {
                      MsgList: 'messageList',
                      SyncFlag: 'syncFlag',
                      To_Account: 'to',
                      From_Account: 'from',
                      ClientSeq: 'clientSequence',
                      MsgSeq: 'sequence',
                      NoticeSeq: 'noticeSequence',
                      NotifySeq: 'notifySequence',
                      MsgRandom: 'random',
                      MsgTimeStamp: 'time',
                      MsgContent: 'content',
                      ToGroupId: 'to',
                      MsgKey: 'messageKey',
                      GroupTips: 'groupTips',
                      MsgBody: 'elements',
                      MsgType: 'type',
                      C2CRemainingUnreadCount: 'C2CRemainingUnreadList',
                      C2CPairUnreadCount: 'C2CPairUnreadList',
                    },
                  },
                }),
                this._map.set(Gn.GET_PROFANITY_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_MSG_AUDIT_MGR, '.')
                        .concat(Gn.GET_PROFANITY_LIST),
                    }
                  ),
                  body: { version: 0, deviceID: '', startIndex: void 0 },
                  keyMap: {
                    req: {
                      version: 'uint64_version',
                      deviceID: 'str_device_id',
                      startIndex: 'uint64_start_index',
                    },
                    res: {
                      msg_cmd_error_code: 'errorInfo',
                      str_err_msg: 'errorMessage',
                      uint32_code: 'errorCode',
                      msg_scene_ctl_config: 'filterConfig',
                      uint64_c2c_custom_msg_flag: 'c2c_custom_message',
                      uint64_c2c_text_msg_flag: 'c2c_text_message',
                      uint64_group_custom_msg_flag: 'group_custom_message',
                      uint64_group_text_msg_flag: 'group_text_message',
                      uint64_group_info_flag: 'group_profile',
                      uint64_group_member_info_flag: 'group_member_profile',
                      uint64_relation_chain_flag: 'sns',
                      uint64_user_info_flag: 'user_profile',
                      rpt_msg_dirty_word: 'lexicon',
                      str_dirty_word: 'profanity',
                      str_replaced_content: 'replacement',
                      uint64_filter_type: 'filterType',
                      uint64_id: 'id',
                      uint64_word_type: 'profanityType',
                      uint64_complete_flag: 'completeFlag',
                      uint64_next_start_index: 'nextStartIndex',
                      uint64_version: 'version',
                      uint64_expired_time: 'expiredTime',
                    },
                  },
                }),
                this._map.set(Gn.SEND_C2C_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.SEND_C2C_MSG),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    toAccount: '',
                    msgSeq: 0,
                    msgRandom: 0,
                    msgBody: [],
                    cloudCustomData: void 0,
                    nick: '',
                    avatar: '',
                    msgLifeTime: void 0,
                    offlinePushInfo: {
                      pushFlag: 0,
                      title: '',
                      desc: '',
                      ext: '',
                      apnsInfo: {
                        sound: '',
                        badgeMode: 0,
                        isVoipPush: void 0,
                        image: '',
                      },
                      androidInfo: {
                        sound: '',
                        XiaoMiChannelID: '',
                        OPPOChannelID: '',
                        GoogleChannelID: '',
                        VIVOClassification: 1,
                        VIVOCategory: '',
                        HuaWeiCategory: '',
                        HuaWeiImage: '',
                        HonorImage: '',
                        GoogleImage: '',
                      },
                    },
                    messageControlInfo: void 0,
                    clientTime: void 0,
                    needReadReceipt: 0,
                    isSupportExtension: 0,
                    isRelayMessage: 0,
                    cmConfigID: void 0,
                  },
                  keyMap: {
                    req: {
                      fromAccount: 'From_Account',
                      toAccount: 'To_Account',
                      msgTimeStamp: 'MsgTimeStamp',
                      msgSeq: 'MsgSeq',
                      msgRandom: 'MsgRandom',
                      msgBody: 'MsgBody',
                      count: 'MaxCnt',
                      lastMessageTime: 'LastMsgTime',
                      messageKey: 'MsgKey',
                      peerAccount: 'Peer_Account',
                      data: 'Data',
                      description: 'Desc',
                      extension: 'Ext',
                      type: 'MsgType',
                      content: 'MsgContent',
                      sizeType: 'Type',
                      uuid: 'UUID',
                      url: '',
                      imageUrl: 'URL',
                      fileUrl: 'Url',
                      remoteAudioUrl: 'Url',
                      remoteVideoUrl: 'VideoUrl',
                      thumbUUID: 'ThumbUUID',
                      videoUUID: 'VideoUUID',
                      videoUrl: '',
                      downloadFlag: 'Download_Flag',
                      nick: 'From_AccountNick',
                      avatar: 'From_AccountHeadurl',
                      from: 'From_Account',
                      time: 'MsgTimeStamp',
                      messageRandom: 'MsgRandom',
                      messageSequence: 'MsgSeq',
                      elements: 'MsgBody',
                      clientSequence: 'ClientSeq',
                      payload: 'MsgContent',
                      messageList: 'MsgList',
                      messageNumber: 'MsgNum',
                      abstractList: 'AbstractList',
                      messageBody: 'MsgBody',
                      needReadReceipt: 'IsNeedReadReceipt',
                      GoogleChannelID: 'GoogleChannelID',
                      XiaoMiChannelID: 'XiaoMiChannelID',
                    },
                  },
                }),
                this._map.set(Gn.SEND_GRP_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.SEND_GRP_MSG),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    groupID: '',
                    random: 0,
                    clientSequence: 0,
                    priority: '',
                    msgBody: [],
                    cloudCustomData: void 0,
                    onlineOnlyFlag: 0,
                    offlinePushInfo: {
                      pushFlag: 0,
                      title: '',
                      desc: '',
                      ext: '',
                      apnsInfo: {
                        sound: '',
                        badgeMode: 0,
                        isVoipPush: void 0,
                        image: '',
                      },
                      androidInfo: {
                        sound: '',
                        XiaoMiChannelID: '',
                        OPPOChannelID: '',
                        GoogleChannelID: '',
                        VIVOClassification: 1,
                        VIVOCategory: '',
                        HuaWeiCategory: '',
                        HuaWeiImage: '',
                        HonorImage: '',
                        GoogleImage: '',
                      },
                    },
                    groupAtInfo: [],
                    messageControlInfo: void 0,
                    clientTime: void 0,
                    needReadReceipt: 0,
                    topicID: void 0,
                    receiverList: void 0,
                    isSupportExtension: 0,
                    isRelayMessage: 0,
                    cmConfigID: void 0,
                  },
                  keyMap: {
                    req: {
                      to: 'GroupId',
                      extension: 'Ext',
                      data: 'Data',
                      description: 'Desc',
                      random: 'Random',
                      sequence: 'ReqMsgSeq',
                      count: 'ReqMsgNumber',
                      type: 'MsgType',
                      priority: 'MsgPriority',
                      content: 'MsgContent',
                      elements: 'MsgBody',
                      sizeType: 'Type',
                      uuid: 'UUID',
                      url: '',
                      imageUrl: 'URL',
                      fileUrl: 'Url',
                      remoteAudioUrl: 'Url',
                      remoteVideoUrl: 'VideoUrl',
                      thumbUUID: 'ThumbUUID',
                      videoUUID: 'VideoUUID',
                      videoUrl: '',
                      downloadFlag: 'Download_Flag',
                      clientSequence: 'ClientSeq',
                      from: 'From_Account',
                      time: 'MsgTimeStamp',
                      messageRandom: 'MsgRandom',
                      messageSequence: 'MsgSeq',
                      payload: 'MsgContent',
                      messageList: 'MsgList',
                      messageNumber: 'MsgNum',
                      abstractList: 'AbstractList',
                      messageBody: 'MsgBody',
                      needReadReceipt: 'NeedReadReceipt',
                      receiverList: 'To_Account',
                      GoogleChannelID: 'GoogleChannelID',
                      XiaoMiChannelID: 'XiaoMiChannelID',
                    },
                    res: { MsgTime: 'time', MsgSeq: 'sequence' },
                  },
                }),
                this._map.set(Gn.REVOKE_C2C_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.REVOKE_C2C_MSG),
                    }
                  ),
                  body: {
                    msgInfo: {
                      fromAccount: '',
                      toAccount: '',
                      msgTimeStamp: 0,
                      msgSeq: 0,
                      msgRandom: 0,
                    },
                  },
                  keyMap: {
                    req: {
                      msgInfo: 'MsgInfo',
                      msgTimeStamp: 'MsgTimeStamp',
                      msgSeq: 'MsgSeq',
                      msgRandom: 'MsgRandom',
                    },
                  },
                }),
                this._map.set(Gn.REVOKE_GRP_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.REVOKE_GRP_MSG),
                    }
                  ),
                  body: { groupID: '', msgSeqList: void 0, topicID: '' },
                  keyMap: {
                    req: { msgSeqList: 'MsgSeqList', msgSeq: 'MsgSeq' },
                  },
                }),
                this._map.set(Gn.GET_C2C_ROAMING_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.GET_C2C_ROAMING_MSG),
                    }
                  ),
                  body: {
                    peerAccount: '',
                    count: 15,
                    lastMessageTime: 0,
                    messageKey: '',
                    withRecalledMessage: 1,
                    direction: 0,
                  },
                  keyMap: {
                    req: {
                      messageKey: 'MsgKey',
                      peerAccount: 'Peer_Account',
                      count: 'MaxCnt',
                      lastMessageTime: 'LastMsgTime',
                      withRecalledMessage: 'WithRecalledMsg',
                      direction: 'GetDirection',
                    },
                    res: {
                      LastMsgTime: 'lastMessageTime',
                      IsNeedReadReceipt: 'needReadReceipt',
                      IsPeerRead: 'readReceiptSentByPeer',
                    },
                  },
                }),
                this._map.set(Gn.MODIFY_C2C_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.MODIFY_C2C_MSG),
                    }
                  ),
                  body: {
                    from: '',
                    to: '',
                    sequence: 0,
                    random: 0,
                    time: 0,
                    version: 0,
                    elements: void 0,
                    cloudCustomData: void 0,
                  },
                  keyMap: {
                    req: {
                      sequence: 'MsgSeq',
                      random: 'MsgRandom',
                      time: 'MsgTime',
                      version: 'MsgVersion',
                      type: 'MsgType',
                      content: 'MsgContent',
                    },
                  },
                }),
                this._map.set(Gn.GET_GRP_ROAMING_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_GRP_ROAMING_MSG),
                    }
                  ),
                  body: {
                    withRecalledMsg: 1,
                    groupID: '',
                    count: 15,
                    sequence: '',
                    topicID: void 0,
                  },
                  keyMap: {
                    req: {
                      sequence: 'ReqMsgSeq',
                      count: 'ReqMsgNumber',
                      withRecalledMessage: 'WithRecalledMsg',
                    },
                    res: {
                      Random: 'random',
                      MsgTime: 'time',
                      MsgSeq: 'sequence',
                      ReqMsgSeq: 'sequence',
                      RspMsgList: 'messageList',
                      IsSystemMsg: 'isSystemMessage',
                      ToGroupId: 'to',
                      EnumFrom_AccountType: 'fromAccountType',
                      EnumTo_AccountType: 'toAccountType',
                      GroupCode: 'groupCode',
                      MsgPriority: 'priority',
                      MsgBody: 'elements',
                      MsgType: 'type',
                      MsgContent: 'content',
                      IsFinished: 'complete',
                      Download_Flag: 'downloadFlag',
                      ClientSeq: 'clientSequence',
                      ThumbUUID: 'thumbUUID',
                      VideoUUID: 'videoUUID',
                      ToTopicId: 'topicID',
                      InvisibleMsgSeq: 'invisibleSequenceList',
                      NextReqMsgSeq: 'nextSequence',
                    },
                  },
                }),
                this._map.set(Gn.SET_C2C_MSG_READ, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.SET_C2C_MSG_READ),
                    }
                  ),
                  body: { C2CMsgReaded: void 0 },
                  keyMap: { req: { lastMessageTime: 'LastedMsgTime' } },
                }),
                this._map.set(Gn.SET_C2C_PEER_MUTE_NOTIFICATIONS, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.SET_C2C_PEER_MUTE_NOTIFICATIONS),
                    }
                  ),
                  body: { userIDList: void 0, muteFlag: 0 },
                  keyMap: {
                    req: {
                      userIDList: 'Peer_Account',
                      muteFlag: 'Mute_Notifications',
                    },
                  },
                }),
                this._map.set(Gn.GET_C2C_PEER_MUTE_NOTIFICATIONS, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.GET_C2C_PEER_MUTE_NOTIFICATIONS),
                    }
                  ),
                  body: { toAccount: void 0, userIDList: void 0 },
                  keyMap: {
                    req: { userIDList: 'Peer_Account' },
                    res: { MuteNotificationsList: 'muteFlagList' },
                  },
                }),
                this._map.set(Gn.SET_GRP_MSG_READ, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.SET_GRP_MSG_READ),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    messageReadSeq: void 0,
                    topicID: void 0,
                  },
                  keyMap: { req: { messageReadSeq: 'MsgReadedSeq' } },
                }),
                this._map.set(Gn.SET_ALL_MSG_READ, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.SET_ALL_MSG_READ),
                    }
                  ),
                  body: { readAllC2CMessage: 0, groupMessageReadInfoList: [] },
                  keyMap: {
                    req: {
                      readAllC2CMessage: 'C2CReadAllMsg',
                      groupMessageReadInfoList: 'GroupReadInfo',
                      messageSequence: 'MsgSeq',
                    },
                    res: {
                      C2CReadAllMsg: 'readAllC2CMessage',
                      GroupReadInfoArray: 'groupMessageReadInfoList',
                    },
                  },
                }),
                this._map.set(Gn.DEL_C2C_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.DEL_C2C_MSG),
                    }
                  ),
                  body: { fromAccount: '', to: '', keyList: void 0 },
                  keyMap: { req: { keyList: 'MsgKeyList' } },
                }),
                this._map.set(Gn.DEL_GRP_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.DEL_GRP_MSG),
                    }
                  ),
                  body: {
                    groupID: '',
                    deleter: '',
                    keyList: void 0,
                    topicID: void 0,
                  },
                  keyMap: {
                    req: { deleter: 'Deleter_Account', keyList: 'Seqs' },
                  },
                }),
                this._map.set(Gn.TRANSLATE_TEXT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_TRANSLATE, '.')
                        .concat(Gn.TRANSLATE_TEXT),
                    }
                  ),
                  body: {
                    sourceTextList: void 0,
                    SDKAppID: 0,
                    from: 0,
                    source: '',
                    target: '',
                  },
                  keyMap: {
                    req: {
                      sourceTextList: 'SourceText',
                      SDKAppID: 'SdkAppId',
                      from: 'FromAccount',
                    },
                    res: {
                      TargetText: 'translatedTextList',
                      RequestId: 'requestID',
                      CmdErrorCode: 'error',
                      ErrorCode: 'code',
                      ErrorInfo: 'message',
                    },
                  },
                }),
                this._map.set(Gn.VOICE_TO_TEXT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_SPEECH, '.')
                        .concat(Gn.VOICE_TO_TEXT),
                    }
                  ),
                  body: {
                    url: '',
                    SDKAppID: 0,
                    format: '',
                    sourceType: 0,
                    language: '',
                  },
                  keyMap: {
                    req: {
                      url: 'BytesUrl',
                      SDKAppID: 'Uint32Sdkappid',
                      format: 'BytesVoiceFormat',
                      sourceType: 'Uint64SourceType',
                      language: 'BytesEngServiceType',
                    },
                    res: {
                      BytesRequestid: 'requestID',
                      BytesResult: 'result',
                      CmdErrorCode: 'error',
                      ErrorCode: 'code',
                      ErrorInfo: 'message',
                    },
                  },
                }),
                this._map.set(Gn.MODIFY_GRP_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.MODIFY_GRP_MSG),
                    }
                  ),
                  body: {
                    groupID: '',
                    topicID: void 0,
                    sequence: 0,
                    version: 0,
                    elements: void 0,
                    cloudCustomData: void 0,
                  },
                  keyMap: {
                    req: {
                      sequence: 'MsgSeq',
                      version: 'MsgVersion',
                      type: 'MsgType',
                      content: 'MsgContent',
                    },
                  },
                }),
                this._map.set(Gn.GET_READ_RECEIPT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_READ_RECEIPT),
                    }
                  ),
                  body: { groupID: '', sequenceList: void 0 },
                  keyMap: { req: { sequence: 'MsgSeq' } },
                }),
                this._map.set(Gn.SEND_C2C_READ_RECEIPT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.SEND_C2C_READ_RECEIPT),
                    }
                  ),
                  body: { peerAccount: '', messageInfoList: void 0 },
                  keyMap: {
                    req: {
                      peerAccount: 'Peer_Account',
                      messageInfoList: 'C2CMsgInfo',
                      fromAccount: 'From_Account',
                      toAccount: 'To_Account',
                      sequence: 'MsgSeq',
                      random: 'MsgRandom',
                      time: 'MsgTime',
                      clientTime: 'MsgClientTime',
                    },
                  },
                }),
                this._map.set(Gn.SEND_READ_RECEIPT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.SEND_READ_RECEIPT),
                    }
                  ),
                  body: { groupID: '', sequenceList: void 0 },
                  keyMap: {
                    req: { sequenceList: 'MsgSeqList', sequence: 'MsgSeq' },
                  },
                }),
                this._map.set(Gn.GET_READ_RECEIPT_DETAIL, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_READ_RECEIPT_DETAIL),
                    }
                  ),
                  body: {
                    groupID: '',
                    sequence: void 0,
                    flag: 0,
                    cursor: 0,
                    count: 0,
                  },
                  keyMap: {
                    req: { sequence: 'MsgSeq', count: 'Num' },
                    res: {
                      ReadList: 'readUserIDList',
                      Read_Account: 'userID',
                      UnreadList: 'unreadUserIDList',
                      Unread_Account: 'userID',
                      IsFinish: 'isCompleted',
                    },
                  },
                }),
                this._map.set(Gn.MODIFY_C2C_MSG_EXT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.MODIFY_C2C_MSG_EXT),
                    }
                  ),
                  body: {
                    from: void 0,
                    to: void 0,
                    messageKey: void 0,
                    operateType: void 0,
                    extensionList: void 0,
                  },
                }),
                this._map.set(Gn.GET_C2C_MSG_EXT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.GET_C2C_MSG_EXT),
                    }
                  ),
                  body: {
                    from: void 0,
                    to: void 0,
                    messageKey: void 0,
                    startSequence: void 0,
                  },
                }),
                this._map.set(Gn.MODIFY_GRP_MSG_EXT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.MODIFY_GRP_MSG_EXT),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    messageSequence: void 0,
                    operateType: void 0,
                    extensionList: void 0,
                  },
                }),
                this._map.set(Gn.GET_GRP_MSG_EXT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.GET_GRP_MSG_EXT),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    messageSequence: void 0,
                    startSequence: void 0,
                  },
                }),
                this._map.set(Gn.MSG_CLOUD_SEARCH, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.MSG_SEARCH, '.')
                        .concat(Gn.MSG_CLOUD_SEARCH),
                    }
                  ),
                  body: {
                    keywordList: void 0,
                    keywordListMatchType: 'or',
                    account: void 0,
                    groupID: void 0,
                    count: 100,
                    cursor: void 0,
                    messageTypeList: void 0,
                    senderUserIDList: void 0,
                    startTime: void 0,
                    endTime: void 0,
                  },
                  keyMap: {
                    req: {
                      keywordListMatchType: 'MatchType',
                      account: 'PeerAccount',
                      groupID: 'GroupID',
                      messageTypeList: 'MsgTypeList',
                      senderUserIDList: 'SendUserIDList',
                    },
                    res: {
                      GroupID: 'groupID',
                      UserID: 'userID',
                      Count: 'messageCount',
                      LastMsgTime: 'lastMessageTime',
                      ConversationMsgs: 'searchResult',
                      IsNeedReadReceipt: 'needReadReceipt',
                      IsPeerRead: 'readReceiptSentByPeer',
                      MsgSeq: 'sequence',
                      ReqMsgSeq: 'sequence',
                      IsSystemMsg: 'isSystemMessage',
                      ToGroupId: 'to',
                      EnumFrom_AccountType: 'fromAccountType',
                      EnumTo_AccountType: 'toAccountType',
                      GroupCode: 'groupCode',
                      MsgContent: 'content',
                      ClientSeq: 'clientSequence',
                      ToTopicId: 'topicID',
                      InvisibleMsgSeq: 'invisibleSequenceList',
                      ErrorCode: 'code',
                      ErrorInfo: 'message',
                    },
                  },
                }),
                this._map.set(Gn.ADD_C2C_MSG_REACTION, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.ADD_C2C_MSG_REACTION),
                    }
                  ),
                  body: {
                    from: void 0,
                    to: void 0,
                    reactionID: void 0,
                    messageKey: void 0,
                    userIDList: void 0,
                  },
                  keyMap: { req: { userIDList: 'Add_Account' } },
                }),
                this._map.set(Gn.RM_C2C_MSG_REACTION, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.RM_C2C_MSG_REACTION),
                    }
                  ),
                  body: {
                    from: void 0,
                    to: void 0,
                    reactionID: void 0,
                    messageKey: void 0,
                    userIDList: void 0,
                  },
                  keyMap: { req: { userIDList: 'Del_Account' } },
                }),
                this._map.set(Gn.GET_C2C_MSG_REACTIONS, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.GET_C2C_MSG_REACTIONS),
                    }
                  ),
                  body: {
                    from: void 0,
                    to: void 0,
                    messageKeyList: void 0,
                    count: void 0,
                  },
                }),
                this._map.set(Gn.GET_C2C_MSG_REACTION_USER_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.GET_C2C_MSG_REACTION_USER_LIST),
                    }
                  ),
                  body: {
                    from: void 0,
                    to: void 0,
                    reactionID: void 0,
                    messageKey: void 0,
                    count: void 0,
                  },
                }),
                this._map.set(Gn.ADD_GRP_MSG_REACTION, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.ADD_GRP_MSG_REACTION),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    reactionID: void 0,
                    messageSequence: void 0,
                    userIDList: void 0,
                  },
                  keyMap: { req: { userIDList: 'Add_Account' } },
                }),
                this._map.set(Gn.RM_GRP_MSG_REACTION, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.RM_GRP_MSG_REACTION),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    reactionID: void 0,
                    messageSequence: void 0,
                    userIDList: void 0,
                  },
                  keyMap: { req: { userIDList: 'Del_Account' } },
                }),
                this._map.set(Gn.GET_GRP_MSG_REACTIONS, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.GET_GRP_MSG_REACTIONS),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    messageSequenceList: void 0,
                    count: void 0,
                  },
                  keyMap: { res: { MsgSeq: 'messageSequence' } },
                }),
                this._map.set(Gn.GET_GRP_MSG_REACTION_USER_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM_MSG_EXT, '.')
                        .concat(Gn.GET_GRP_MSG_REACTION_USER_LIST),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    reactionID: void 0,
                    messageSequence: void 0,
                    nextSeq: void 0,
                    count: void 0,
                  },
                }),
                this._map.set(Gn.GET_C2C_PEER_READ_TIME, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.GET_C2C_PEER_READ_TIME),
                    }
                  ),
                  body: { userIDList: void 0 },
                  keyMap: {
                    req: { userIDList: 'To_Account' },
                    res: { ReadTime: 'peerReadTimeList' },
                  },
                }),
                this._map.set(Gn.PAGING_GET_CONV_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.PAGING_GET_CONV_LIST),
                    }
                  ),
                  body: {
                    fromAccount: void 0,
                    timeStamp: void 0,
                    startIndex: void 0,
                    pinnedTimeStamp: void 0,
                    pinnedStartIndex: void 0,
                    orderType: void 0,
                    messageAssistFlag: 15,
                    assistFlag: 31,
                  },
                  keyMap: {
                    req: {
                      messageAssistFlag: 'MsgAssistFlags',
                      assistFlag: 'AssistFlags',
                      pinnedTimeStamp: 'TopTimeStamp',
                      pinnedStartIndex: 'TopStartIndex',
                    },
                    res: {
                      SessionItem: 'conversations',
                      ToAccount: 'groupID',
                      To_Account: 'userID',
                      UnreadMsgCount: 'unreadCount',
                      MsgGroupReadedSeq: 'messageReadSeq',
                      C2cPeerReadTime: 'c2cPeerReadTime',
                      LastMsgFlags: 'lastMessageFlag',
                      TopFlags: 'isPinned',
                      TopTimeStamp: 'pinnedTimeStamp',
                      TopStartIndex: 'pinnedStartIndex',
                      GroupId: 'convGroupID',
                      C2cRemark: 'friendRemark',
                      MsgRecvOption: 'messageRemindType',
                      GroupIgnoredUnreadSeqCount: 'noUnreadCount',
                      GroupNextMsgSeq: 'nextMessageSeq',
                    },
                  },
                }),
                this._map.set(Gn.DEL_CONV, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.DEL_CONV),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    conversationList: void 0,
                    clearHistoryMessage: void 0,
                  },
                  keyMap: {
                    req: {
                      toGroupID: 'ToGroupid',
                      clearHistoryMessage: 'ClearRamble',
                      conversationList: 'ContactItem',
                    },
                    res: {
                      ResultItem: 'resultList',
                      ToGroupid: 'groupID',
                      ResultCode: 'code',
                      ResultInfo: 'info',
                    },
                  },
                }),
                this._map.set(Gn.CLEAR_HISTORY_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.CLEAR_HISTORY_MSG),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    toAccount: void 0,
                    type: 1,
                    toGroupID: void 0,
                  },
                  keyMap: { req: { toGroupID: 'ToGroupid' } },
                }),
                this._map.set(Gn.PIN_CONV, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.PIN_CONV),
                    }
                  ),
                  body: { fromAccount: '', operationType: 1, itemList: void 0 },
                  keyMap: { req: { itemList: 'RecentContactItem' } },
                }),
                this._map.set(Gn.DEL_GROUP_AT_TIPS, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.DEL_GROUP_AT_TIPS),
                    }
                  ),
                  body: { messageListToDelete: void 0 },
                  keyMap: {
                    req: {
                      messageListToDelete: 'DelMsgList',
                      messageSeq: 'MsgSeq',
                      messageRandom: 'MsgRandom',
                    },
                  },
                }),
                this._map.set(Gn.SET_CONV_CUSTOM_DATA, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.MARK_CONV),
                    }
                  ),
                  body: { fromAccount: '', itemList: void 0 },
                  keyMap: {
                    req: {
                      itemList: 'MarkItem',
                      operationType: 'OptType',
                      groupID: 'ToGroupId',
                    },
                    res: { ToGroupId: 'groupID', OptType: 'operationType' },
                  },
                }),
                this._map.set(Gn.MARK_CONV, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.MARK_CONV),
                    }
                  ),
                  body: { fromAccount: '', itemList: void 0 },
                  keyMap: {
                    req: {
                      itemList: 'MarkItem',
                      operationType: 'OptType',
                      groupID: 'ToGroupId',
                    },
                    res: { ToGroupId: 'groupID', OptType: 'operationType' },
                  },
                }),
                this._map.set(Gn.CREATE_CONV_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.CREATE_CONV_GRP),
                    }
                  ),
                  body: { fromAccount: '', itemList: void 0 },
                  keyMap: {
                    req: { itemList: 'GroupContactItem', groupID: 'ToGroupId' },
                    res: {
                      GroupId: 'convGroupID',
                      ToGroupId: 'groupID',
                      OptType: 'operationType',
                    },
                  },
                }),
                this._map.set(Gn.DEL_CONV_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.DEL_CONV_GRP),
                    }
                  ),
                  body: { fromAccount: '', groupName: void 0 },
                  keyMap: { res: { GroupId: 'convGroupID' } },
                }),
                this._map.set(Gn.RENAME_CONV_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.RENAME_CONV_GRP),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    updateType: void 0,
                    updateGroup: void 0,
                  },
                  keyMap: {
                    req: {
                      oldName: 'OldGroupName',
                      newName: 'NewGroupName',
                      groupID: 'ToGroupId',
                      operationType: 'ContactOptType',
                      groupName: 'OldGroupName',
                      updateItem: 'ContactUpdateItem',
                    },
                    res: {
                      ContactOptType: 'operationType',
                      ToGroupId: 'groupID',
                      GroupId: 'convGroupID',
                    },
                  },
                }),
                this._map.set(Gn.ADD_CONV_TO_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.RENAME_CONV_GRP),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    updateType: void 0,
                    updateGroup: {
                      groupName: void 0,
                      updateGroupType: void 0,
                      updateItem: void 0,
                    },
                  },
                }),
                this._map.set(Gn.DEL_CONV_FROM_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.RENAME_CONV_GRP),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    updateType: void 0,
                    updateGroup: void 0,
                  },
                }),
                this._map.set(Gn.GET_CONV_GRP_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.GET_CONV_GRP_LIST),
                    }
                  ),
                  body: { fromAccount: '', startIndex: void 0 },
                  keyMap: {
                    res: {
                      GroupId: 'convGroupID',
                      ToGroupId: 'groupID',
                      OptType: 'operationType',
                      CustomMark: 'customData',
                      ContactGroupId: 'convGroupIDList',
                    },
                  },
                }),
                this._map.set(Gn.SEARCH_CONV_GRP_MARK, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.RECENT_CONTACT, '.')
                        .concat(Gn.SEARCH_CONV_GRP_MARK),
                    }
                  ),
                  body: { fromAccount: '', contactItem: void 0 },
                  keyMap: {
                    req: { groupID: 'ToGroupId' },
                    res: {
                      GroupId: 'convGroupID',
                      ToGroupId: 'groupID',
                      OptType: 'operationType',
                      CustomMark: 'customData',
                      ContactGroupId: 'convGroupIDList',
                      ContactResultItem: 'contactItem',
                    },
                  },
                }),
                this._map.set(Gn.GET_USER_PROFILE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.PROFILE, '.')
                        .concat(Gn.GET_USER_PROFILE),
                    }
                  ),
                  body: { fromAccount: '', userItem: [] },
                  keyMap: {
                    req: {
                      toAccount: 'To_Account',
                      standardSequence: 'StandardSequence',
                      customSequence: 'CustomSequence',
                    },
                  },
                }),
                this._map.set(Gn.UPDATE_MY_PROFILE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.PROFILE, '.')
                        .concat(Gn.UPDATE_MY_PROFILE),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    profileItem: [
                      { tag: be.NICK, value: '' },
                      { tag: be.GENDER, value: '' },
                      { tag: be.ALLOWTYPE, value: '' },
                      { tag: be.AVATAR, value: '' },
                    ],
                  },
                  keyMap: {
                    req: {
                      toAccount: 'To_Account',
                      standardSequence: 'StandardSequence',
                      customSequence: 'CustomSequence',
                    },
                  },
                }),
                this._map.set(Gn.GET_BL, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.FD, '.').concat(Gn.GET_BL) }
                  ),
                  body: {
                    fromAccount: '',
                    startIndex: 0,
                    maxLimited: 30,
                    lastSequence: 0,
                  },
                  keyMap: { res: { CurruentSequence: 'currentSequence' } },
                }),
                this._map.set(Gn.ADD_TO_BL, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.FD, '.').concat(Gn.ADD_TO_BL) }
                  ),
                  body: { fromAccount: '', toAccount: [] },
                }),
                this._map.set(Gn.RM_FROM_BL, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.FD, '.').concat(Gn.RM_FROM_BL) }
                  ),
                  body: { fromAccount: '', toAccount: [] },
                }),
                this._map.set(Gn.SET_SELF_STATUS, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.SET_SELF_STATUS),
                    }
                  ),
                  body: { customStatus: '' },
                }),
                this._map.set(Gn.GET_USER_STATUS, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.GET_USER_STATUS),
                    }
                  ),
                  body: { userIDList: void 0 },
                  keyMap: {
                    res: {
                      UserStatusList: 'successUserList',
                      ErrorList: 'failureUserList',
                      To_Account: 'userID',
                      Invalid_Account: 'invalidUserID',
                      Status: 'statusType',
                    },
                  },
                }),
                this._map.set(Gn.SUB_USER_STATUS, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.SUB_USER_STATUS),
                    }
                  ),
                  body: { userIDList: void 0 },
                  keyMap: {
                    res: {
                      ErrorList: 'failureUserList',
                      To_Account: 'userID',
                      Invalid_Account: 'invalidUserID',
                    },
                  },
                }),
                this._map.set(Gn.UNSUB_USER_STATUS, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.UNSUB_USER_STATUS),
                    }
                  ),
                  body: { userIDList: void 0, unsubscribeAll: void 0 },
                  keyMap: {
                    res: {
                      ErrorList: 'failureUserList',
                      To_Account: 'userID',
                      Invalid_Account: 'invalidUserID',
                    },
                  },
                }),
                this._map.set(Gn.GET_FD_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''.concat(P.NAME.FD, '.').concat(Gn.GET_FD_LIST),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    startIndex: 0,
                    standardSequence: 0,
                    customSequence: 0,
                  },
                  keyMap: {
                    res: {
                      FriendNum: 'friendCount',
                      UserDataItem: 'resultList',
                      ValueItem: 'tagValueList',
                    },
                  },
                }),
                this._map.set(Gn.ADD_FD, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.FD, '.').concat(Gn.ADD_FD) }
                  ),
                  body: { fromAccount: '', addFriendItem: [], type: '' },
                  keyMap: {
                    req: {
                      source: 'AddSource',
                      wording: 'AddWording',
                      type: 'AddType',
                    },
                    res: { ResultItem: 'resultList' },
                  },
                }),
                this._map.set(Gn.UPDATE_FD, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.FD, '.').concat(Gn.UPDATE_FD) }
                  ),
                  body: { fromAccount: '', updateItem: void 0 },
                  keyMap: {
                    req: { snsItem: 'SnsItem' },
                    res: { ResultItem: 'resultList' },
                  },
                }),
                this._map.set(Gn.DEL_FD, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.FD, '.').concat(Gn.DEL_FD) }
                  ),
                  body: { fromAccount: '', userIDList: [], type: '' },
                  keyMap: {
                    req: { type: 'DeleteType' },
                    res: { ResultItem: 'resultList' },
                  },
                }),
                this._map.set(Gn.GET_FD_PROFILE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FD, '.')
                        .concat(Gn.GET_FD_PROFILE),
                    }
                  ),
                  body: { fromAccount: '', userIDList: void 0 },
                  keyMap: {
                    res: {
                      InfoItem: 'resultList',
                      SnsProfileItem: 'tagValueList',
                    },
                  },
                }),
                this._map.set(Gn.CHECK_FD, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.FD, '.').concat(Gn.CHECK_FD) }
                  ),
                  body: { fromAccount: '', userIDList: [], type: '' },
                  keyMap: {
                    req: { type: 'CheckType' },
                    res: { InfoItem: 'resultList' },
                  },
                }),
                this._map.set(Gn.GET_FD_APPLICATION_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FD, '.')
                        .concat(Gn.GET_FD_APPLICATION_LIST),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    applicationType: '',
                    startTime: 0,
                    maxLimited: 0,
                    lastSequence: 0,
                  },
                  keyMap: {
                    res: {
                      PendencyItem: 'resultList',
                      AddSource: 'source',
                      AddTime: 'time',
                      AddWording: 'wording',
                      Image: 'avatar',
                      UnreadPendencyCount: 'unreadCount',
                      To_Account: 'userID',
                      PendencyType: 'type',
                    },
                  },
                }),
                this._map.set(Gn.RESPOND_FD_APPLICATION, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FD, '.')
                        .concat(Gn.RESPOND_FD_APPLICATION),
                    }
                  ),
                  body: { fromAccount: '', responseFriendItem: [] },
                  keyMap: {
                    req: { tag: 'TagName', action: 'ResponseAction' },
                    res: { ResultItem: 'resultList' },
                  },
                }),
                this._map.set(Gn.DEL_FD_APPLICATION, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FD, '.')
                        .concat(Gn.DEL_FD_APPLICATION),
                    }
                  ),
                  body: { fromAccount: '', type: '', userIDList: void 0 },
                  keyMap: {
                    req: { type: 'PendencyType', userIDList: 'To_Account' },
                    res: { ResultItem: 'resultList' },
                  },
                }),
                this._map.set(Gn.REPORT_FD_APPLICATION, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FD, '.')
                        .concat(Gn.REPORT_FD_APPLICATION),
                    }
                  ),
                  body: { fromAccount: '', latestTimeStamp: '' },
                  keyMap: {
                    req: { latestTimeStamp: 'LatestPendencyTimeStamp' },
                  },
                }),
                this._map.set(Gn.CREATE_FD_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FD, '.')
                        .concat(Gn.CREATE_FD_GRP),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    groupName: void 0,
                    userIDList: void 0,
                  },
                  keyMap: {
                    req: { groupName: 'GroupName', userIDList: 'To_Account' },
                    res: { ResultItem: 'resultList' },
                  },
                }),
                this._map.set(Gn.DEL_FD_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.FD, '.').concat(Gn.DEL_FD_GRP) }
                  ),
                  body: { fromAccount: '', nameList: void 0 },
                  keyMap: { req: { nameList: 'GroupName' } },
                }),
                this._map.set(Gn.GET_FD_GRP_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FD, '.')
                        .concat(Gn.GET_FD_GRP_LIST),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    lastSequence: 0,
                    needFriend: 'Need_Friend_Type_Yes',
                  },
                  keyMap: {
                    res: {
                      ResultItem: 'resultList',
                      GroupName: 'name',
                      FriendNumber: 'friendCount',
                      To_Account: 'userIDList',
                    },
                  },
                }),
                this._map.set(Gn.UPDATE_FD_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FD, '.')
                        .concat(Gn.UPDATE_FD_GRP),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    oldName: '',
                    newName: void 0,
                    updateGroupItem: void 0,
                  },
                  keyMap: {
                    req: { oldName: 'GroupOldName', newName: 'GroupNewName' },
                    res: { UpdateType: 'type', ResultItem: 'resultList' },
                  },
                }),
                this._map.set(Gn.GET_GRP_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_GRP_LIST),
                    }
                  ),
                  body: {
                    memberAccount: '',
                    limit: void 0,
                    offset: void 0,
                    groupType: void 0,
                    responseFilter: {
                      groupBaseInfoFilter: void 0,
                      selfInfoFilter: void 0,
                    },
                    isSupportTopic: 0,
                    needAppDefineData: 1,
                  },
                  keyMap: {
                    req: { memberAccount: 'Member_Account' },
                    res: {
                      GroupIdList: 'groups',
                      MsgSeq: 'readedSequence',
                      LastRecallTime: '_lastRevokedTime',
                      AppDefinedData: 'groupCustomField',
                    },
                  },
                }),
                this._map.set(Gn.GET_GRP_PROFILE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_GRP_PROFILE),
                    }
                  ),
                  body: {
                    groupIDList: void 0,
                    responseFilter: {
                      groupBaseInfoFilter: void 0,
                      groupCustomFieldFilter: void 0,
                      memberInfoFilter: void 0,
                      memberCustomFieldFilter: void 0,
                    },
                  },
                  keyMap: {
                    req: {
                      groupIDList: 'GroupIdList',
                      groupCustomField: 'AppDefinedData',
                      memberCustomField: 'AppMemberDefinedData',
                      groupCustomFieldFilter: 'AppDefinedDataFilter_Group',
                      memberCustomFieldFilter:
                        'AppDefinedDataFilter_GroupMember',
                    },
                    res: {
                      GroupIdList: 'groups',
                      AppDefinedData: 'groupCustomField',
                      AppMemberDefinedData: 'memberCustomField',
                      AppDefinedDataFilter_Group: 'groupCustomFieldFilter',
                      AppDefinedDataFilter_GroupMember:
                        'memberCustomFieldFilter',
                      InfoSeq: 'infoSequence',
                      MemberList: 'members',
                      GroupInfo: 'groups',
                      ShutUpUntil: 'muteUntil',
                      ShutUpAllMember: 'muteAllMembers',
                    },
                  },
                }),
                this._map.set(Gn.CREATE_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''.concat(P.NAME.GRP, '.').concat(Gn.CREATE_GRP),
                    }
                  ),
                  body: {
                    type: void 0,
                    name: void 0,
                    groupID: void 0,
                    ownerID: void 0,
                    introduction: void 0,
                    notification: void 0,
                    maxMemberNum: void 0,
                    joinOption: void 0,
                    memberList: void 0,
                    groupCustomField: void 0,
                    memberCustomField: void 0,
                    webPushFlag: 1,
                    avatar: '',
                    isSupportTopic: void 0,
                    inviteOption: void 0,
                  },
                  keyMap: {
                    req: {
                      ownerID: 'Owner_Account',
                      userID: 'Member_Account',
                      avatar: 'FaceUrl',
                      maxMemberNum: 'MaxMemberCount',
                      joinOption: 'ApplyJoinOption',
                      groupCustomField: 'AppDefinedData',
                      memberCustomField: 'AppMemberDefinedData',
                      inviteOption: 'InviteJoinOption',
                    },
                    res: {
                      HugeGroupFlag: 'avChatRoomFlag',
                      OverJoinedGroupLimit_Account: 'overLimitUserIDList',
                    },
                  },
                }),
                this._map.set(Gn.DISMISS_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.DISMISS_GRP),
                    }
                  ),
                  body: { groupID: void 0 },
                }),
                this._map.set(Gn.UPDATE_GRP_PROFILE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.UPDATE_GRP_PROFILE),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    name: void 0,
                    introduction: void 0,
                    notification: void 0,
                    avatar: void 0,
                    joinOption: void 0,
                    groupCustomField: void 0,
                    muteAllMembers: void 0,
                    inviteOption: void 0,
                  },
                  keyMap: {
                    req: {
                      groupCustomField: 'AppDefinedData',
                      muteAllMembers: 'ShutUpAllMember',
                      joinOption: 'ApplyJoinOption',
                      avatar: 'FaceUrl',
                      inviteOption: 'InviteJoinOption',
                    },
                    res: {
                      AppDefinedData: 'groupCustomField',
                      ShutUpAllMember: 'muteAllMembers',
                    },
                  },
                }),
                this._map.set(Gn.APPLY_JOIN_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.APPLY_JOIN_GRP),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    applyMessage: void 0,
                    userDefinedField: void 0,
                    webPushFlag: 1,
                    historyMessageFlag: void 0,
                  },
                  keyMap: {
                    req: {
                      applyMessage: 'ApplyMsg',
                      historyMessageFlag: 'HugeGroupHistoryMsgFlag',
                    },
                    res: {
                      HugeGroupFlag: 'avChatRoomFlag',
                      AVChatRoomKey: 'avChatRoomKey',
                      RspMsgList: 'messageList',
                      ToGroupId: 'to',
                    },
                  },
                }),
                this._map.set(
                  Gn.APPLY_JOIN_GRP_NOAUTH,
                  (e.a2,
                  e.tinyid,
                  {
                    head: t(
                      t({}, h(e, fa)),
                      {},
                      {
                        servcmd: ''
                          .concat(P.NAME.BIG_GRP_NO_AUTH, '.')
                          .concat(Gn.APPLY_JOIN_GRP),
                      }
                    ),
                    body: {
                      groupID: void 0,
                      applyMessage: void 0,
                      userDefinedField: void 0,
                      webPushFlag: 1,
                    },
                    keyMap: {
                      req: { applyMessage: 'ApplyMsg' },
                      res: { HugeGroupFlag: 'avChatRoomFlag' },
                    },
                  })
                ),
                this._map.set(Gn.QUIT_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.GRP, '.').concat(Gn.QUIT_GRP) }
                  ),
                  body: { groupID: void 0 },
                }),
                this._map.set(Gn.SEARCH_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''.concat(P.NAME.GRP, '.').concat(Gn.SEARCH_GRP),
                    }
                  ),
                  body: {
                    groupIDList: void 0,
                    responseFilter: {
                      groupBasePublicInfoFilter: [
                        'Type',
                        'Name',
                        'Introduction',
                        'Notification',
                        'FaceUrl',
                        'CreateTime',
                        'Owner_Account',
                        'LastInfoTime',
                        'LastMsgTime',
                        'NextMsgSeq',
                        'MemberNum',
                        'MaxMemberNum',
                        'ApplyJoinOption',
                        'InviteJoinOption',
                      ],
                    },
                  },
                }),
                this._map.set(Gn.CHANGE_GRP_OWNER, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.CHANGE_GRP_OWNER),
                    }
                  ),
                  body: { groupID: void 0, newOwnerID: void 0 },
                  keyMap: { req: { newOwnerID: 'NewOwner_Account' } },
                }),
                this._map.set(Gn.HANDLE_GRP_APPLICATION, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.HANDLE_GRP_APPLICATION),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    applicant: void 0,
                    handleAction: void 0,
                    handleMessage: void 0,
                    authentication: void 0,
                    messageKey: void 0,
                    userDefinedField: void 0,
                  },
                  keyMap: {
                    req: {
                      applicant: 'Applicant_Account',
                      handleAction: 'HandleMsg',
                      handleMessage: 'ApprovalMsg',
                      messageKey: 'MsgKey',
                    },
                  },
                }),
                this._map.set(Gn.HANDLE_INVITE_JOIN_GRP, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.HANDLE_INVITE_JOIN_GRP),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    applicant: void 0,
                    invitee: void 0,
                    handleAction: void 0,
                    handleMessage: void 0,
                    authentication: void 0,
                    userDefinedField: void 0,
                  },
                  keyMap: {
                    req: {
                      applicant: 'Applicant_Account',
                      invitee: 'Invited_Account',
                      handleAction: 'HandleMsg',
                      handleMessage: 'ApprovalMsg',
                    },
                  },
                }),
                this._map.set(Gn.HANDLE_GRP_INVITATION, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.HANDLE_GRP_INVITATION),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    inviter: void 0,
                    handleAction: void 0,
                    handleMessage: void 0,
                    authentication: void 0,
                    messageKey: void 0,
                    userDefinedField: void 0,
                  },
                  keyMap: {
                    req: {
                      inviter: 'Inviter_Account',
                      handleAction: 'HandleMsg',
                      handleMessage: 'ApprovalMsg',
                      messageKey: 'MsgKey',
                    },
                  },
                }),
                this._map.set(Gn.GET_GRP_PENDENCY, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_GRP_PENDENCY),
                    }
                  ),
                  body: {
                    startTime: void 0,
                    limit: void 0,
                    handleAccount: void 0,
                  },
                  keyMap: {
                    req: { handleAccount: 'Handle_Account' },
                    res: { To_Account: 'userID', ApplyInviteMsg: 'note' },
                  },
                }),
                this._map.set(Gn.DEL_GRP_SYSTEM_NOTICE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.DEL_GRP_SYSTEM_NOTICE),
                    }
                  ),
                  body: { messageListToDelete: void 0 },
                  keyMap: {
                    req: {
                      messageListToDelete: 'DelMsgList',
                      messageSeq: 'MsgSeq',
                      messageRandom: 'MsgRandom',
                    },
                  },
                }),
                this._map.set(Gn.AV_POLLING, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.BIG_GRP_POLLING, '.')
                        .concat(Gn.AV_POLLING),
                    }
                  ),
                  body: {
                    USP: 1,
                    startSeq: 1,
                    startBroadcastSeq: void 0,
                    holdTime: 90,
                    key: void 0,
                    simplifiedMessage: void 0,
                  },
                  keyMap: {
                    req: { USP: 'USP' },
                    res: {
                      ToGroupId: 'groupID',
                      RspBroadcastMsgList: 'broadcastMessageList',
                      IsSystemMsg: 'isSystemMessage',
                    },
                  },
                }),
                this._map.set(
                  Gn.AV_NOAUTH_POLLING,
                  (e.a2,
                  e.tinyid,
                  {
                    head: t(
                      t({}, h(e, ga)),
                      {},
                      {
                        servcmd: ''
                          .concat(P.NAME.BIG_GRP_POLLING_NO_AUTH, '.')
                          .concat(Gn.AV_POLLING),
                      }
                    ),
                    body: {
                      USP: 1,
                      startSeq: 1,
                      holdTime: 90,
                      key: void 0,
                      simplifiedMessage: void 0,
                    },
                    keyMap: {
                      req: { USP: 'USP' },
                      res: {
                        ToGroupId: 'groupID',
                        RspBroadcastMsgList: 'broadcastMessageList',
                        IsSystemMsg: 'isSystemMessage',
                      },
                    },
                  })
                ),
                this._map.set(Gn.GET_ONLINE_MBR_NUM, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_ONLINE_MBR_NUM),
                    }
                  ),
                  body: { groupID: void 0 },
                  keyMap: { res: { OnlineMemberNum: 'memberCount' } },
                }),
                this._map.set(Gn.SET_GRP_ATTR, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.SET_GRP_ATTR),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    groupAttributeList: void 0,
                    mainSequence: void 0,
                    avChatRoomKey: void 0,
                    attributeControl: ['RaceConflict'],
                  },
                  keyMap: { req: { key: 'key', value: 'value' } },
                }),
                this._map.set(Gn.MODIFY_GRP_ATTR, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.MODIFY_GRP_ATTR),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    groupAttributeList: void 0,
                    mainSequence: void 0,
                    avChatRoomKey: void 0,
                    attributeControl: ['RaceConflict'],
                  },
                  keyMap: { req: { key: 'key', value: 'value' } },
                }),
                this._map.set(Gn.DEL_GRP_ATTR, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.DEL_GRP_ATTR),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    groupAttributeList: void 0,
                    mainSequence: void 0,
                    avChatRoomKey: void 0,
                    attributeControl: ['RaceConflict'],
                  },
                  keyMap: { req: { key: 'key' } },
                }),
                this._map.set(Gn.CLEAR_GRP_ATTR, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.CLEAR_GRP_ATTR),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    mainSequence: void 0,
                    avChatRoomKey: void 0,
                    attributeControl: ['RaceConflict'],
                  },
                }),
                this._map.set(Gn.GET_GRP_ATTR, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP_ATTR, '.')
                        .concat(Gn.GET_GRP_ATTR),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    avChatRoomKey: void 0,
                    groupType: 1,
                  },
                  keyMap: {
                    req: { avChatRoomKey: 'Key', groupType: 'GroupType' },
                  },
                }),
                this._map.set(Gn.GET_GRP_NOTIFY, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_GRP_NOTIFY),
                    }
                  ),
                  body: { notifyReqList: [] },
                  keyMap: {
                    req: { notifyReqList: 'NotifyReqList' },
                    res: {
                      NextMsgTime: 'nextRevokedTime',
                      NotifyMsgList: 'notifyList',
                      NotifyRspList: 'notifyRspList',
                    },
                  },
                }),
                this._map.set(Gn.UPDATE_GRP_COUNTER, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.UPDATE_GRP_COUNTER),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    counterList: void 0,
                    avChatRoomKey: void 0,
                    mode: void 0,
                  },
                  keyMap: { req: { counterList: 'GroupCounter' } },
                }),
                this._map.set(Gn.GET_GRP_COUNTER, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_GRP_COUNTER),
                    }
                  ),
                  body: { groupID: void 0, keyList: [], avChatRoomKey: void 0 },
                  keyMap: { req: { keyList: 'GroupCounterKeys' } },
                }),
                this._map.set(Gn.CREATE_TOPIC, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP_COMMUNITY, '.')
                        .concat(Gn.CREATE_TOPIC),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicName: void 0,
                    avatar: void 0,
                    customData: void 0,
                    topicID: void 0,
                    notification: void 0,
                    introduction: void 0,
                  },
                  keyMap: { req: { avatar: 'FaceUrl' } },
                }),
                this._map.set(Gn.DEL_TOPIC, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP_COMMUNITY, '.')
                        .concat(Gn.DEL_TOPIC),
                    }
                  ),
                  body: { groupID: void 0, topicIDList: void 0 },
                  keyMap: {
                    req: { topicIDList: 'TopicIdList' },
                    res: { DestroyResultItem: 'resultList' },
                  },
                }),
                this._map.set(Gn.UPDATE_TOPIC_PROFILE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP_COMMUNITY, '.')
                        .concat(Gn.UPDATE_TOPIC_PROFILE),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    avatar: void 0,
                    customData: void 0,
                    notification: void 0,
                    introduction: void 0,
                    muteAllMembers: void 0,
                    topicName: void 0,
                  },
                  keyMap: {
                    req: {
                      avatar: 'FaceUrl',
                      muteAllMembers: 'ShutUpAllMember',
                    },
                  },
                }),
                this._map.set(Gn.GET_TOPIC_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP_COMMUNITY, '.')
                        .concat(Gn.GET_TOPIC_LIST),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicIDList: void 0,
                    MemberInfoFilter: ['NoUnreadSeqList'],
                  },
                  keyMap: {
                    req: { topicIDList: 'TopicIdList' },
                    res: {
                      TopicAndSelfInfo: 'topicInfoList',
                      TopicInfo: 'topic',
                      GroupID: 'groupID',
                      ShutUpTime: 'muteTime',
                      ShutUpAllFlag: 'muteAllMembers',
                      LastMsgTime: 'lastMessageTime',
                      MsgSeq: 'readedSequence',
                      LastMsgSeq: 'sequence',
                    },
                  },
                }),
                this._map.set(Gn.GET_GRP_MBR_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_GRP_MBR_LIST),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    limit: 0,
                    offset: void 0,
                    next: void 0,
                    memberRoleFilter: void 0,
                    memberInfoFilter: void 0,
                    memberCustomFieldFilter: void 0,
                  },
                  keyMap: {
                    req: {
                      memberCustomFieldFilter:
                        'AppDefinedDataFilter_GroupMember',
                    },
                    res: {
                      AppMemberDefinedData: 'memberCustomField',
                      AppDefinedDataFilter_GroupMember:
                        'memberCustomFieldFilter',
                      MemberList: 'members',
                      ShutUpUntil: 'muteUntil',
                    },
                  },
                }),
                this._map.set(Gn.GET_AV_MBR_LIST, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP_AV, '.')
                        .concat(Gn.GET_AV_MBR_LIST),
                    }
                  ),
                  body: { groupID: void 0, offset: void 0, filter: void 0 },
                  keyMap: {
                    req: { offset: 'Timestamp', filter: 'Mark' },
                    res: { NextTimestamp: 'offset' },
                  },
                }),
                this._map.set(Gn.GET_GRP_MBR_PROFILE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.GET_GRP_MBR_PROFILE),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    userIDList: void 0,
                    memberInfoFilter: void 0,
                    memberCustomFieldFilter: void 0,
                  },
                  keyMap: {
                    req: {
                      userIDList: 'Member_List_Account',
                      memberCustomFieldFilter:
                        'AppDefinedDataFilter_GroupMember',
                    },
                    res: {
                      MemberList: 'members',
                      ShutUpUntil: 'muteUntil',
                      AppDefinedDataFilter_GroupMember:
                        'memberCustomFieldFilter',
                      AppMemberDefinedData: 'memberCustomField',
                    },
                  },
                }),
                this._map.set(Gn.ADD_GRP_MBR, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.ADD_GRP_MBR),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    silence: void 0,
                    userIDList: void 0,
                  },
                  keyMap: {
                    req: { userID: 'Member_Account', userIDList: 'MemberList' },
                    res: { MemberList: 'members' },
                  },
                }),
                this._map.set(Gn.DEL_GRP_MBR, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.DEL_GRP_MBR),
                    }
                  ),
                  body: { groupID: void 0, userIDList: void 0, reason: void 0 },
                  keyMap: { req: { userIDList: 'MemberToDel_Account' } },
                }),
                this._map.set(Gn.BAN_AV_MBR, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''.concat(P.NAME.GRP, '.').concat(Gn.BAN_AV_MBR),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    userIDList: void 0,
                    duration: void 0,
                    reason: '',
                  },
                  keyMap: {
                    req: {
                      userIDList: 'Members_Account',
                      duration: 'Duration',
                      reason: 'Description',
                    },
                  },
                }),
                this._map.set(Gn.MODIFY_GRP_MBR_INFO, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP, '.')
                        .concat(Gn.MODIFY_GRP_MBR_INFO),
                    }
                  ),
                  body: {
                    groupID: void 0,
                    topicID: void 0,
                    userID: void 0,
                    messageRemindType: void 0,
                    nameCard: void 0,
                    role: void 0,
                    memberCustomField: void 0,
                    muteTime: void 0,
                  },
                  keyMap: {
                    req: {
                      userID: 'Member_Account',
                      memberCustomField: 'AppMemberDefinedData',
                      muteTime: 'ShutUpTime',
                      messageRemindType: 'MsgFlag',
                    },
                  },
                }),
                this._map.set(Gn.MARK_AV_MBR_INFO, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.GRP_AV, '.')
                        .concat(Gn.MARK_AV_MBR_INFO),
                    }
                  ),
                  body: { groupID: void 0, operationType: 1, memberList: [] },
                  keyMap: {
                    req: {
                      operationType: 'CommandType',
                      memberList: 'MemberList',
                      markType: 'Marks',
                      userID: 'Member_Account',
                    },
                    res: {
                      CommandType: 'operationType',
                      Marks: 'markType',
                      Member_Account: 'userID',
                    },
                  },
                }),
                this._map.set(Gn.SSO_STAT, {
                  head: t(
                    t({}, i),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STAT, '.')
                        .concat(Gn.SSO_STAT),
                    }
                  ),
                  body: { header: {}, event: [], quality: [] },
                  keyMap: {
                    req: {
                      SDKType: 'sdk_type',
                      SDKVersion: 'sdk_version',
                      deviceType: 'device_type',
                      platform: 'platform',
                      instanceID: 'instance_id',
                      traceID: 'trace_id',
                      SDKAppID: 'sdk_app_id',
                      userID: 'user_id',
                      tinyID: 'tiny_id',
                      extension: 'extension',
                      timestamp: 'timestamp',
                      networkType: 'network_type',
                      eventType: 'event_type',
                      code: 'error_code',
                      message: 'error_message',
                      moreMessage: 'more_message',
                      duplicate: 'duplicate',
                      costTime: 'cost_time',
                      level: 'level',
                      qualityType: 'quality_type',
                      reportIndex: 'report_index',
                      wholePeriod: 'whole_period',
                      totalCount: 'total_count',
                      rttCount: 'success_count_business',
                      successRateOfRequest: 'percent_business',
                      countLessThan1Second: 'success_count_business',
                      percentOfCountLessThan1Second: 'percent_business',
                      countLessThan3Second: 'success_count_platform',
                      percentOfCountLessThan3Second: 'percent_platform',
                      successCountOfBusiness: 'success_count_business',
                      successRateOfBusiness: 'percent_business',
                      successCountOfPlatform: 'success_count_platform',
                      successRateOfPlatform: 'percent_platform',
                      successCountOfMessageReceived: 'success_count_business',
                      successRateOfMessageReceived: 'percent_business',
                      avgRTT: 'average_value',
                      avgDelay: 'average_value',
                      avgValue: 'average_value',
                      uiPlatform: 'ui_platform',
                    },
                  },
                }),
                this._map.set(Gn.PING, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''.concat(P.NAME.HEARTBEAT, '.').concat(Gn.PING),
                    }
                  ),
                  body: {},
                }),
                this._map.set(Gn.MSG_PUSH, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_PUSH, '.')
                        .concat(Gn.MSG_PUSH),
                    }
                  ),
                  body: {},
                  keyMap: {
                    res: {
                      C2cMsgArray: 'C2CMessageArray',
                      GroupMsgArray: 'groupMessageArray',
                      GroupTips: 'groupTips',
                      C2cNotifyMsgArray: 'C2CNotifyMessageArray',
                      C2cMsgInfo: 'C2CReadReceiptArray',
                      ClientSeq: 'clientSequence',
                      MsgPriority: 'priority',
                      NoticeSeq: 'noticeSequence',
                      MsgContent: 'content',
                      MsgType: 'type',
                      MsgBody: 'elements',
                      ToGroupId: 'to',
                      Desc: 'description',
                      Ext: 'extension',
                      IsSyncMsg: 'isSyncMessage',
                      Flag: 'needSync',
                      NeedAck: 'needAck',
                      PendencyAdd_Account: 'userID',
                      ProfileImNick: 'nick',
                      PendencyType: 'applicationType',
                      C2CReadAllMsg: 'readAllC2CMessage',
                      IsNeedReadReceipt: 'needReadReceipt',
                      Status: 'statusType',
                      CurrFollowType: 'followType',
                      Follow_Account: 'userID',
                    },
                  },
                }),
                this._map.set(Gn.MULTI_MSG_PUSH, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_PUSH, '.')
                        .concat(Gn.MULTI_MSG_PUSH),
                    }
                  ),
                  body: {},
                  keyMap: {
                    res: {
                      GroupMsgArray: 'groupMessageArray',
                      GroupTips: 'groupTips',
                      ClientSeq: 'clientSequence',
                      MsgPriority: 'priority',
                      NoticeSeq: 'noticeSequence',
                      MsgContent: 'content',
                      MsgType: 'type',
                      MsgBody: 'elements',
                      ToGroupId: 'to',
                      Desc: 'description',
                      Ext: 'extension',
                      IsSyncMsg: 'isSyncMessage',
                      Flag: 'needSync',
                      NeedAck: 'needAck',
                      PendencyType: 'applicationType',
                    },
                  },
                }),
                this._map.set(Gn.MSG_PUSH_ACK, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OPEN_IM, '.')
                        .concat(Gn.MSG_PUSH_ACK),
                    }
                  ),
                  body: { sessionData: void 0 },
                  keyMap: { req: { sessionData: 'SessionData' } },
                }),
                this._map.set(Gn.STATUS_FORCE_OFFLINE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.STATUS_FORCE_OFFLINE),
                    }
                  ),
                  body: {},
                  keyMap: {
                    res: {
                      C2cNotifyMsgArray: 'C2CNotifyMessageArray',
                      NoticeSeq: 'noticeSequence',
                      KickoutMsgNotify: 'kickoutMsgNotify',
                      NewInstInfo: 'newInstanceInfo',
                    },
                  },
                }),
                this._map.set(Gn.DOWNLOAD_MERGER_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_LONG_MSG, '.')
                        .concat(Gn.DOWNLOAD_MERGER_MSG),
                    }
                  ),
                  body: { downloadKey: '' },
                  keyMap: {
                    res: {
                      Data: 'data',
                      Desc: 'description',
                      Ext: 'extension',
                      Download_Flag: 'downloadFlag',
                      ThumbUUID: 'thumbUUID',
                      VideoUUID: 'videoUUID',
                    },
                  },
                }),
                this._map.set(Gn.UPLOAD_MERGER_MSG, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_LONG_MSG, '.')
                        .concat(Gn.UPLOAD_MERGER_MSG),
                    }
                  ),
                  body: { messageList: [] },
                  keyMap: {
                    req: {
                      fromAccount: 'From_Account',
                      toAccount: 'To_Account',
                      msgTimeStamp: 'MsgTimeStamp',
                      msgSeq: 'MsgSeq',
                      msgRandom: 'MsgRandom',
                      msgBody: 'MsgBody',
                      type: 'MsgType',
                      content: 'MsgContent',
                      data: 'Data',
                      description: 'Desc',
                      extension: 'Ext',
                      sizeType: 'Type',
                      uuid: 'UUID',
                      url: '',
                      imageUrl: 'URL',
                      fileUrl: 'Url',
                      remoteAudioUrl: 'Url',
                      remoteVideoUrl: 'VideoUrl',
                      thumbUUID: 'ThumbUUID',
                      videoUUID: 'VideoUUID',
                      videoUrl: '',
                      downloadFlag: 'Download_Flag',
                      from: 'From_Account',
                      time: 'MsgTimeStamp',
                      messageRandom: 'MsgRandom',
                      messageSequence: 'MsgSeq',
                      elements: 'MsgBody',
                      clientSequence: 'ClientSeq',
                      payload: 'MsgContent',
                      messageList: 'MsgList',
                      messageNumber: 'MsgNum',
                      abstractList: 'AbstractList',
                      messageBody: 'MsgBody',
                    },
                  },
                }),
                this._map.set(Gn.FOLLOW, {
                  head: t(
                    t({}, e),
                    {},
                    { servcmd: ''.concat(P.NAME.FOLLOW, '.').concat(Gn.FOLLOW) }
                  ),
                  body: { fromAccount: '', userIDList: [] },
                  keyMap: {
                    req: { userIDList: 'FollowItem' },
                    res: { ResultItem: 'resultList', To_Account: 'userID' },
                  },
                }),
                this._map.set(Gn.UNFOLLOW, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FOLLOW, '.')
                        .concat(Gn.UNFOLLOW),
                    }
                  ),
                  body: { fromAccount: '', userIDList: [] },
                  keyMap: {
                    req: { userIDList: 'To_Account' },
                    res: { ResultItem: 'resultList', To_Account: 'userID' },
                  },
                }),
                this._map.set(Gn.GET_FOLLOW_INFO, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FOLLOW, '.')
                        .concat(Gn.GET_FOLLOW_INFO),
                    }
                  ),
                  body: { fromAccount: '', userIDList: [] },
                  keyMap: {
                    req: { userIDList: 'To_Account' },
                    res: {
                      FollowInfo: 'followInfoList',
                      To_Account: 'userID',
                      FollowerCount: 'followersCount',
                      FollowingCount: 'followingCount',
                      MutualFollowingCount: 'mutualFollowersCount',
                    },
                  },
                }),
                this._map.set(Gn.GET_FOLLOW, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FOLLOW, '.')
                        .concat(Gn.GET_FOLLOW),
                    }
                  ),
                  body: {
                    fromAccount: '',
                    type: 1,
                    nextCursor: '',
                    count: 500,
                  },
                  keyMap: {
                    req: {
                      type: 'FollowType',
                      nextCursor: 'StartCursor',
                      count: 'WantNum',
                    },
                    res: {
                      FollowItem: 'resultList',
                      To_Account: 'userID',
                      ProfileItem: 'profileList',
                    },
                  },
                }),
                this._map.set(Gn.CHECK_FOLLOW_TYPE, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.FOLLOW, '.')
                        .concat(Gn.CHECK_FOLLOW_TYPE),
                    }
                  ),
                  body: { fromAccount: '', userIDList: [] },
                  keyMap: {
                    req: { userIDList: 'To_Account' },
                    res: { ResultItem: 'resultList', To_Account: 'userID' },
                  },
                }),
                this._map.set(Gn.SET_TOKEN, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.SET_TOKEN),
                    }
                  ),
                  body: {
                    tokenID: '',
                    pushMsg: 0,
                    sdkAppID: 0,
                    businessID: '',
                    deviceBrand: '',
                    deviceToken: '',
                    isTpns: 0,
                    isWebUniapp: 0,
                    notificationStatus: 0,
                    deviceModel: '',
                    systemVersion: '',
                    pushVersion: '',
                  },
                  keyMap: {
                    req: {
                      tokenID: 'TokenID',
                      pushMsg: 'PushMsg',
                      sdkAppID: 'EnterVersion',
                      businessID: 'BusiID',
                      deviceBrand: 'InstType',
                      deviceToken: 'VarToken',
                      isTpns: 'IsTpns',
                      notificationStatus: 'NotificationStatus',
                      deviceModel: 'DeviceModel',
                      systemVersion: 'SystemVersion',
                      pushVersion: 'PushPluginVersion',
                    },
                  },
                }),
                this._map.set(Gn.STAT_FOREGROUND, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.STAT_FOREGROUND),
                    }
                  ),
                  body: { isWebUniapp: 0 },
                }),
                this._map.set(Gn.STAT_BACKGROUND, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_OPEN_STATUS, '.')
                        .concat(Gn.STAT_BACKGROUND),
                    }
                  ),
                  body: { C2CUnread: 0, GroupUnread: 0, isWebUniapp: 0 },
                  keyMap: {
                    req: {
                      c2cUnreadCount: 'C2cUnread',
                      groupUnreadCount: 'GrpUnread',
                    },
                  },
                }),
                this._map.set(Gn.PUSH_REPORT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.OFFLINE_PUSH_REPORT, '.')
                        .concat(Gn.PUSH_REPORT),
                    }
                  ),
                  body: { eventList: [] },
                  keyMap: {
                    req: {
                      eventList: 'UinappPushEvents',
                      type: 'EventType',
                      time: 'EventTime',
                      pushId: 'ClickExt',
                    },
                  },
                }),
                this._map.set(Gn.SET_ALL_RECEIVE_MSG_OPT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_MSG_LOGIC, '.')
                        .concat(Gn.SET_ALL_RECEIVE_MSG_OPT),
                    }
                  ),
                  body: {
                    startTime: 0,
                    endTime: 0,
                    isRepeated: 0,
                    messageRemindType: 0,
                  },
                  keyMap: { req: { messageRemindType: 'Level' } },
                }),
                this._map.set(Gn.GET_ALL_RECEIVE_MSG_OPT, {
                  head: t(
                    t({}, e),
                    {},
                    {
                      servcmd: ''
                        .concat(P.NAME.IM_MSG_LOGIC, '.')
                        .concat(Gn.GET_ALL_RECEIVE_MSG_OPT),
                    }
                  ),
                  body: { toAccount: void 0 },
                });
            },
          },
          {
            key: 'has',
            value: function (e) {
              return this._map.has(e);
            },
          },
          {
            key: 'get',
            value: function (e) {
              return this._map.get(e);
            },
          },
          {
            key: 'update',
            value: function () {
              this._fillMap();
            },
          },
          {
            key: 'getKeyMap',
            value: function (e) {
              return this.has(e)
                ? this.get(e).keyMap || {}
                : (Ae.w(''.concat(this._n, '.getKeyMap unknown P:').concat(e)),
                  {});
            },
          },
          {
            key: 'getProtocolData',
            value: function (e) {
              var t = e.P,
                n = e.data;
              if (((e = this.get(t)), (t = null), n)) {
                var i,
                  o = this._simpleDeepCopy(e),
                  r = (o = this._updateService(n, o)).body,
                  a = Object.create(null);
                for (i in r)
                  if (Object.prototype.hasOwnProperty.call(r, i)) {
                    if (((a[i] = r[i]), void 0 === n[i])) continue;
                    a[i] = n[i];
                  }
                (o.body = a), (t = this._getUplinkData(o));
              } else t = this._getUplinkData(e);
              return t;
            },
          },
          {
            key: '_getUplinkData',
            value: function (e) {
              var t = Nt((e = this._dataCleaner(e)).head);
              return (t = ea(e.body, this._getReqKeyMap(t))), (e.body = t), e;
            },
          },
          {
            key: '_updateService',
            value: function (e, t) {
              var n,
                i,
                o = Nt(t.head);
              return (
                this._isFromGroupRequest(t) &&
                  ((n = e.type),
                  (i = e.groupID),
                  (e = void 0 === (e = e.groupIDList) ? [] : e),
                  ut((i = void 0 === i ? void 0 : i)) && (i = e[0] || ''),
                  Mt({ type: n, groupID: i }) &&
                    (t.head.servcmd = ''
                      .concat(P.NAME.GRP_COMMUNITY, '.')
                      .concat(o))),
                t
              );
            },
          },
          {
            key: '_isFromGroupRequest',
            value: function (e) {
              return (
                e.head.servcmd.includes(P.NAME.GRP) ||
                e.head.servcmd.includes(P.NAME.GRP_ATTR)
              );
            },
          },
          {
            key: '_getReqKeyMap',
            value: function (e) {
              return (e = this.getKeyMap(e)), t(t({}, Kr.req), e.req);
            },
          },
          {
            key: '_dataCleaner',
            value: function (e) {
              var t,
                i = Array.isArray(e) ? [] : Object.create(null);
              for (t in e)
                Object.prototype.hasOwnProperty.call(e, t) &&
                  Xe(t) &&
                  null !== e[t] &&
                  void 0 !== e[t] &&
                  ('object' !== n(e[t])
                    ? (i[t] = e[t])
                    : (i[t] = this._dataCleaner.bind(this)(e[t])));
              return i;
            },
          },
          {
            key: '_simpleDeepCopy',
            value: function (e) {
              for (
                var t, n = Object.keys(e), i = {}, o = 0, r = n.length;
                o < r;
                o++
              )
                $e(e[(t = n[o])])
                  ? (i[t] = Array.from(e[t]))
                  : We(e[t])
                    ? (i[t] = this._simpleDeepCopy(e[t]))
                    : (i[t] = e[t]);
              return i;
            },
          },
        ]),
        Da),
      va = [Gn.MSG_PUSH_ACK],
      ma =
        (r(Ea, [
          {
            key: '_onC2CMsgArray',
            value: function (e) {
              var t = this._sessionM.get(6);
              e.dataList.forEach(function (e) {
                var t;
                1 === e.isSyncMessage &&
                  ((t = e.from), (e.from = e.to), (e.to = t));
              }),
                1 === e.needSync && this._sessionM.get(19).syncOnNeed(),
                t.onNewMessage({ dataList: e.dataList, isInstantMessage: !0 });
            },
          },
          {
            key: '_onC2CMsgModified',
            value: function (e) {
              this._sessionM.get(6).onMsgModified(e);
            },
          },
          {
            key: '_onGroupMsgArray',
            value: function (e) {
              var t = this._sessionM.get(7);
              t &&
                t.onNewMessage({
                  event: e.event,
                  dataList: e.dataList,
                  isInstantMessage: !0,
                });
            },
          },
          {
            key: '_onGroupMsgModified',
            value: function (e) {
              var t = this._sessionM.get(7);
              t && t.onMsgModified(e);
            },
          },
          {
            key: '_onGroupTips',
            value: function (e) {
              var t = this._sessionM.get(7);
              if (t) {
                var n = e.event,
                  i = e.dataList,
                  o = e.isInstantMessage,
                  r = void 0 === o || o,
                  a = e.isSyncingEnded;
                switch (n) {
                  case 4:
                  case 6:
                    t.onNewGroupTips({ event: n, dataList: i });
                    break;
                  case 5:
                    for (var s = 0; s < i.length; s++)
                      if ($e(i[s].elements.revokedInfos))
                        t.onMsgRevoked({ dataList: i });
                      else if ($e(i[s].elements.groupMessageReadNotice))
                        t.onMsgReadNotice({ dataList: i });
                      else {
                        if (!$e(i[s].elements.readReceiptList)) {
                          t.onNewGroupSystemNotice({
                            dataList: i,
                            isInstantMessage: r,
                            isSyncingEnded: a,
                          });
                          break;
                        }
                        t.onReadReceiptList({ dataList: i });
                      }
                    break;
                  case 12:
                    this._sessionM.get(11).onNewGroupAtTips({ dataList: i });
                    break;
                  default:
                    Ae.l(
                      ''
                        .concat(this._n, '._onGroupTips unknown event:')
                        .concat(n, ' dataList:'),
                      i
                    );
                }
              }
            },
          },
          {
            key: '_onC2CNotifyMsgArray',
            value: function (e) {
              var t,
                n = this,
                i = e.dataList;
              $e(i) &&
                ((t = this._sessionM.get(6)),
                i.forEach(function (e) {
                  var o, r;
                  ze(e) &&
                    (e.hasOwnProperty('kickoutMsgNotify')
                      ? ((o = (r = e.kickoutMsgNotify).kickType),
                        (r = void 0 === (r = r.newInstanceInfo) ? {} : r),
                        1 === o
                          ? n._sessionM.onMultipleAccountKickedOut(r)
                          : 2 === o
                            ? n._sessionM.onMultipleDeviceKickedOut(r)
                            : 3 === o && n._sessionM.onRestApiKickedOut(r))
                      : e.hasOwnProperty('c2cMessageRevokedNotify')
                        ? t && t.onMsgRevoked({ dataList: i })
                        : e.hasOwnProperty('c2cMessageReadReceipt')
                          ? t && t.onMsgReadReceipt({ dataList: i })
                          : e.hasOwnProperty('c2cMessageReadNotice')
                            ? t && t.onMsgReadNotice({ dataList: i })
                            : e.hasOwnProperty('muteNotificationsSync') &&
                              n._sessionM
                                .get(11)
                                .onC2CMsgRemindTypeSynced({ dataList: i }));
                }));
            },
          },
          {
            key: '_onC2CReadReceiptArray',
            value: function (e) {
              this._sessionM.get(6).onReadReceiptList(e);
            },
          },
          {
            key: '_onProfileModified',
            value: function (e) {
              this._sessionM.get(4).onProfileModified({ dataList: e.dataList });
              var t = this._sessionM.get(8);
              t && t.onFriendProfileModified({ dataList: e.dataList });
            },
          },
          {
            key: '_onRelationChainModified',
            value: function (e) {
              this._sessionM
                .get(4)
                .onRelationChainModified({ dataList: e.dataList });
              var t = this._sessionM.get(8);
              t && t.onRelationChainModified({ dataList: e.dataList });
            },
          },
          {
            key: '_onRecentContact',
            value: function (e) {
              var t;
              !$e((e = e.dataList)) ||
                ((t = this._sessionM.get(11)) &&
                  e.forEach(function (e) {
                    var n,
                      i,
                      o = e.pushType;
                    1 === o
                      ? ((n = e.recentContactDeleteItem),
                        t.onConvDeleted(n.recentContactList))
                      : 2 === o
                        ? ((n = e.recentContactTopItem),
                          t.onConvPinnedStatus(n.recentContactList, !0))
                        : 3 === o
                          ? ((n = e.recentContactTopItem),
                            t.onConvPinnedStatus(n.recentContactList, !1))
                          : 4 === o
                            ? ((n = e.recentContactMarkContact),
                              t.onConvMarkUpdated(
                                n.recentContactMarkContactItem
                              ))
                            : 5 === o
                              ? ((n = e.recentContactCreateContactGroup),
                                t.onConvGroupCreated(
                                  n.msgContactGroupContactItem
                                ))
                              : 6 === o
                                ? ((n = e.recentContactDelContactGroup),
                                  t.onConvGroupDeleted(n.msgGroupItem))
                                : 7 === o &&
                                  ((o = (n = e.recentContactUpdateContactGroup)
                                    .updateType),
                                  (e = n.msgUpdateGroup),
                                  (n = n.msgUpdateContact),
                                  1 === o
                                    ? 1 === (i = e.updateGroupType)
                                      ? t.onConvGroupNameUpdated(e)
                                      : 2 === i && t.onConvInGroupUpdated(e)
                                    : 2 === o &&
                                      t.onConvAddedToOrDeletedFromGroup(n));
                  }));
            },
          },
          {
            key: '_onAllMsgRead',
            value: function (e) {
              e = e.dataList;
              var t = this._sessionM.get(11);
              t && t.onPushedAllMessageRead(e);
            },
          },
          {
            key: '_onUserStatusList',
            value: function (e) {
              this._sessionM.get(4).onUserStatusUpdated(e);
            },
          },
          {
            key: '_onMsgExtNotify',
            value: function (e) {
              this._sessionM.get(3).onMsgExtNotify(e);
            },
          },
          {
            key: '_onMsgReactionNotifyList',
            value: function (e) {
              this._sessionM.get(34).onReactionNotifyList(e);
            },
          },
          {
            key: '_onMsgReactionNotify',
            value: function (e) {
              this._sessionM.get(34).onReactionNotify(e);
            },
          },
          {
            key: '_onFollowInfo',
            value: function (e) {
              this._sessionM.get(35).onFollowInfoNotify(e);
            },
          },
          {
            key: '_onTopicLatestMsg',
            value: function (e) {
              this._sessionM.get(10).onTopicLatestMsg(e);
            },
          },
          {
            key: 'onMessage',
            value: function (e) {
              var t = this,
                n = e.body;
              if (this._filterMsgFromIMOpenPush(e)) {
                var i,
                  o = n.eventArray,
                  r = n.isInstantMessage,
                  a = n.isSyncingEnded,
                  s = n.needSync;
                if ($e(o))
                  for (var c, u, l, d = 0, p = o.length; d < p; d++)
                    100 !== (l = (c = o[d]).event)
                      ? 24 !== l
                        ? 26 !== l
                          ? (i = Object.keys(c).find(function (e) {
                              return -1 !== t._keys.indexOf(e);
                            }))
                            ? ((u =
                                14 === l
                                  ? {
                                      readAllC2CMessage: c[i],
                                      groupMessageReadInfoList:
                                        c.groupMessageReadNotice || [],
                                    }
                                  : 16 === l
                                    ? {
                                        userID: c.userID,
                                        timestamp: c.timestamp,
                                        readReceiptList: c[i],
                                      }
                                    : c[i]),
                              this._eventHandlerMap.get(i)({
                                event: l,
                                dataList: u,
                                isInstantMessage: r,
                                isSyncingEnded: a,
                                needSync: s,
                              }))
                            : Ae.l(
                                ''
                                  .concat(
                                    this._n,
                                    '.onMessage unknown eventItem:'
                                  )
                                  .concat(c)
                              )
                          : this._onTopicLatestMsg(c)
                        : this._onAllRcvMsgOptNotify(c)
                      : this._onRoomCustomData(c.content);
              }
            },
          },
          {
            key: '_onRoomCustomData',
            value: function (e) {
              this._sessionM.get(30).onRoomCustomDataReceived(e),
                Ae.l(''.concat(this._n, '._onRoomCustomData data:').concat(e));
            },
          },
          {
            key: '_onAllRcvMsgOptNotify',
            value: function (e) {
              this._sessionM.get(11).onAllRcvMsgOptNotify(e);
            },
          },
          {
            key: '_filterMsgFromIMOpenPush',
            value: function (e) {
              var t = e.head,
                n = ((e = e.body), (t = t.servcmd), !1);
              return (
                !(n = ut(t)
                  ? n
                  : t.includes(P.NAME.IM_CONFIG_MANAGER) ||
                    t.includes(P.NAME.OVERLOAD_PUSH) ||
                    t.includes(P.NAME.STAT_SERVICE)) ||
                (t.includes(Gn.PUSHED_CLOUD_CTRL_CONFIG)
                  ? this._sessionM.get(23).onPushedConfig(e)
                  : t.includes(Gn.PUSHED_COMMERCIAL_CONFIG)
                    ? this._sessionM.get(27).onPushedConfig(e)
                    : t.includes(Gn.OVERLOAD_NOTIFY)
                      ? this._sessionM.onPushedServerOverload(e)
                      : t.includes(Gn.KICK_OTHER) &&
                        ((n = Date.now()),
                        this._sessionM.reLoginOnKickOther(),
                        (e = new ei('kickOther')),
                        (n -= t = this._sessionM.get(1).getLastWsHelloTs()),
                        e
                          .setMessage(
                            'last wshello time:'
                              .concat(t, ' diff:')
                              .concat(n, 'ms')
                          )
                          .end()),
                !1)
              );
            },
          },
        ]),
        Ea),
      ya = [
        { cmd: Gn.GET_GRP_PROFILE, interval: 1, count: 8 },
        { cmd: Gn.UPDATE_GRP_PROFILE, interval: 1, count: 8 },
        { cmd: Gn.GET_AV_MBR_LIST, interval: 3, count: 1 },
        { cmd: Gn.GET_GRP_PENDENCY, interval: 1, count: 15 },
        { cmd: Gn.GET_TOPIC_LIST, interval: 1, count: 10 },
        { cmd: Gn.SET_GRP_ATTR, interval: 5, count: 10 },
        { cmd: Gn.MODIFY_GRP_ATTR, interval: 5, count: 10 },
        { cmd: Gn.DEL_GRP_ATTR, interval: 5, count: 10 },
        { cmd: Gn.CLEAR_GRP_ATTR, interval: 5, count: 10 },
        { cmd: Gn.GET_GRP_ATTR, interval: 5, count: 20 },
        { cmd: Gn.UPDATE_GRP_COUNTER, interval: 5, count: 20 },
        { cmd: Gn.GET_GRP_COUNTER, interval: 5, count: 20 },
        { cmd: Gn.SET_ALL_MSG_READ, interval: 1, count: 1 },
        { cmd: Gn.GET_USER_STATUS, interval: 5, count: 20 },
        { cmd: Gn.SUB_USER_STATUS, interval: 5, count: 20 },
        { cmd: Gn.UNSUB_USER_STATUS, interval: 5, count: 20 },
        { cmd: Gn.MSG_CLOUD_SEARCH, interval: 1, count: 2 },
        { cmd: Gn.CHECK_FOLLOW_TYPE, interval: 5, count: 20 },
        { cmd: Gn.GET_GRP_ROAMING_MSG, interval: 1, count: 20 },
        { cmd: Gn.GET_C2C_ROAMING_MSG, interval: 1, count: 20 },
      ],
      Ia = new Map(),
      Ma = [
        '0',
        '1',
        '2',
        '3',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        'A',
        'B',
        'C',
        'D',
        'E',
        'F',
      ],
      Ca = 0,
      Ta = Ma.length;
    Ca < Ta;
    Ca++
  )
    Ia.set(Ca, Ma[Ca]);
  function Ea(e) {
    i(this, Ea),
      (this._sessionM = e),
      (this._n = 'MsgDispatcher'),
      (this._eventHandlerMap = new Map()),
      this._eventHandlerMap.set(
        'C2CMessageArray',
        this._onC2CMsgArray.bind(this)
      ),
      this._eventHandlerMap.set(
        'groupMessageArray',
        this._onGroupMsgArray.bind(this)
      ),
      this._eventHandlerMap.set('groupTips', this._onGroupTips.bind(this)),
      this._eventHandlerMap.set(
        'C2CNotifyMessageArray',
        this._onC2CNotifyMsgArray.bind(this)
      ),
      this._eventHandlerMap.set(
        'C2CReadReceiptArray',
        this._onC2CReadReceiptArray.bind(this)
      ),
      this._eventHandlerMap.set(
        'profileModify',
        this._onProfileModified.bind(this)
      ),
      this._eventHandlerMap.set(
        'friendListMod',
        this._onRelationChainModified.bind(this)
      ),
      this._eventHandlerMap.set(
        'recentContactMod',
        this._onRecentContact.bind(this)
      ),
      this._eventHandlerMap.set(
        'readAllC2CMessage',
        this._onAllMsgRead.bind(this)
      ),
      this._eventHandlerMap.set(
        'c2cMessageModified',
        this._onC2CMsgModified.bind(this)
      ),
      this._eventHandlerMap.set(
        'groupMessageModified',
        this._onGroupMsgModified.bind(this)
      ),
      this._eventHandlerMap.set(
        'userStatusList',
        this._onUserStatusList.bind(this)
      ),
      this._eventHandlerMap.set(
        'messageExtensionNotify',
        this._onMsgExtNotify.bind(this)
      ),
      this._eventHandlerMap.set(
        'messageReactionNotifyList',
        this._onMsgReactionNotifyList.bind(this)
      ),
      this._eventHandlerMap.set(
        'messageReactionNotify',
        this._onMsgReactionNotify.bind(this)
      ),
      this._eventHandlerMap.set('follow', this._onFollowInfo.bind(this)),
      (this._keys = v(this._eventHandlerMap.keys()));
  }
  function Da(e) {
    i(this, Da),
      (this._n = 'PHandler'),
      (this._sessionM = e),
      (this._map = new Map()),
      this._fillMap();
  }
  function Sa(e) {
    return (
      i(this, Sa),
      ((e = ta.call(this, e))._n = 'ChannelModule'),
      (e._socketHandler = new da(f(e))),
      (e._probing = !1),
      (e._isAppShowing = !0),
      (e._previousState = D.NET_STATE_CONNECTED),
      (e._timerForNotLoggedIn = -1),
      (e._timerForNotLoggedIn = setInterval(e.onCheckTimer.bind(f(e)), 1e3)),
      (e._fatalErrorFlag = !1),
      (e._disconnectedTS = 0),
      (e._lastDiagnoseTS = 0),
      e
    );
  }
  function ka(e) {
    i(this, ka),
      (this._chM = e),
      (this._n = 'SocketHandler'),
      (this._promiseMap = new Map()),
      (this._readyState = la),
      (this._simpleRequestMap = new Map()),
      (this.MAX_SIZE = 100),
      (this._startSequence = nt()),
      (this._startTs = 0),
      (this._reConnectFlag = !1),
      (this._nextPingTs = 0),
      (this._reConnectCount = 0),
      (this.MAX_RECONNECT_COUNT = 3),
      (this._socketID = -1),
      (this._random = 0),
      (this._socket = null),
      (this._url = ''),
      (this._onOpenTs = 0),
      (this._canIUseBinaryFrame = !0),
      (this._isWorkerEnabled = !0),
      (this._currentSite = N),
      this._setWebsocketHost(),
      this._initConnection();
  }
  function Ra(e) {
    i(this, Ra);
    var t,
      n,
      o = (this._handler = e).getURL();
    (this._socket = null),
      (this._workerSocket = null),
      (this._id = nt()),
      this._handler.getIsWorkerEnabled()
        ? ((t = URL.createObjectURL(
            new Blob(
              [
                ';let _socket = null;onmessage = function(event) {  if (event.data.cmd === "start") {    const url = event.data.url;    _socket = new WebSocket(url);    _socket.binaryType = "arraybuffer";    _socket.onopen = function() {      postMessage({ callback: "onOpen", extensions: _socket.extensions });    };    _socket.onclose = function(e) {      postMessage({ callback: "onOpen", e: { code: e.code, reason: e.reason } });    };    _socket.onmessage = function(e) {      postMessage({ callback: "onMessage", data: e.data });    };    _socket.onerror = function(e) {      postMessage({ callback: "onError", e: { isTrusted: "true" } });    };  } else if (event.data.cmd === "sendMessage") {    if (_socket !== null) {      _socket.send(event.data.data);    }  } else if (event.data.cmd === "stop") {    if (_socket !== null) {      _socket.close(event.data.code);      _socket = null;    }  }};',
              ],
              { type: 'application/javascript; charset=utf-8' }
            )
          )),
          (this._workerSocket = new Worker(t)),
          ((n = this)._workerSocket.onmessage = function (e) {
            var t = (o = e.data).callback,
              i = o.e,
              o = o.extensions;
            'onOpen' === t
              ? n._onOpen(o)
              : 'onClose' === t
                ? n._onClose(i)
                : 'onError' === t
                  ? n._onError(i)
                  : 'onMessage' === t && n._onMessage(e.data);
          }),
          this._workerSocket.postMessage({
            cmd: 'start',
            id: this._id,
            url: o,
          }))
        : Z
          ? z
            ? (te.connectSocket({
                url: o,
                header: { 'content-type': 'application/json' },
              }),
              te.onSocketClose(this._onClose.bind(this)),
              te.onSocketOpen(this._onOpen.bind(this)),
              te.onSocketMessage(this._onMessage.bind(this)),
              te.onSocketError(this._onError.bind(this)))
            : ((this._socket = te.connectSocket({
                url: o,
                header: { 'content-type': 'application/json' },
                complete: function () {},
              })),
              this._socket.onClose(this._onClose.bind(this)),
              this._socket.onOpen(this._onOpen.bind(this)),
              this._socket.onMessage(this._onMessage.bind(this)),
              this._socket.onError(this._onError.bind(this)))
          : ((this._socket = new WebSocket(o)),
            (this._socket.binaryType = 'arraybuffer'),
            (this._socket.onopen = this._onOpen.bind(
              this,
              this._socket.extensions
            )),
            (this._socket.onmessage = this._onMessage.bind(this)),
            (this._socket.onclose = this._onClose.bind(this)),
            (this._socket.onerror = this._onError.bind(this))),
      (this._canIUseBinaryFrame = e.canIUseBinaryFrame());
  }
  function La(e) {
    for (
      var t,
        n,
        i = e,
        o = '',
        r = 0,
        a = (i = e.length % 8 != 0 ? '0'.repeat(8 - (e.length % 8)) + e : i)
          .length;
      r < a;
      r += 8
    )
      (t = parseInt(i.slice(r, r + 4), 2)),
        (n = parseInt(i.slice(r + 4, r + 8), 2)),
        (o += Ia.get(t) + Ia.get(n));
    return o;
  }
  function Aa(e) {
    if (e < 0 || 53 < e) return NaN;
    var t = 0 | (1073741824 * Math.random());
    return 30 < e
      ? t + 1073741824 * (0 | (Math.random() * (1 << (e - 30))))
      : t >>> (30 - e);
  }
  function Oa(e, t) {
    for (
      var n = e.toString(16), i = t - n.length, o = '0';
      0 < i;
      i >>>= 1, o += o
    )
      1 & i && (n = o + n);
    return n;
  }
  s(Ys, An),
    (Ba = g(Ys)),
    r(Ys, [
      {
        key: '_init',
        value: function () {
          this._updateCmdFreqLimitMap(ya);
        },
      },
      {
        key: '_onCloudConfig',
        value: function () {
          var e = this.getCloudConfig('cmd_frequency_limit');
          ut(e) || ((e = JSON.parse(e)), this._updateCmdFreqLimitMap(e));
        },
      },
      {
        key: '_updateCmdFreqLimitMap',
        value: function (e) {
          var t = this;
          e.forEach(function (e) {
            t._cmdFreqLimitMap.set(e.cmd, {
              interval: e.interval,
              count: e.count,
            });
          });
        },
      },
      {
        key: 'updateProtocolConfig',
        value: function () {
          this._pHandler.update();
        },
      },
      {
        key: 'req',
        value: function (e) {
          Ae.d(''.concat(this._n, '.req options:'), e);
          var t = e.P,
            n = e.tjgID;
          if (!this._pHandler.has(t))
            return (
              Ae.w(''.concat(this._n, '.req unknown P:').concat(t)),
              In({ code: wn.NO_PROTOCOL })
            );
          var i = (e = this.getProtocolData(e)).head.servcmd;
          if (this._isFreqOverLimit(i))
            return In({
              code: (o = wn.OVER_FREQUENCY_LIMIT),
              message: this.getErrMsg(o, this._getCmd(i)),
            });
          if (this._isServerOverload(i))
            return In({
              code: (o = wn.OPEN_SERVICE_OVERLOAD_ERROR),
              message: this.getErrMsg(o, this._getCmd(i)),
            });
          Ve(n) || (e.head.tjgID = n);
          var o = this.get(21);
          return va.includes(t) ? o.simplySend(e) : o.send(e);
        },
      },
      {
        key: 'getKeyMap',
        value: function (e) {
          return this._pHandler.getKeyMap(e);
        },
      },
      {
        key: 'genCommonHead',
        value: function () {
          var e = this.get(12);
          return {
            ver: 'v4',
            platform: this._platform,
            websdkappid: b,
            websdkversion: O,
            a2: e.getA2Key() || void 0,
            tinyid: e.getTinyID() || void 0,
            status_instid: e.getStatusInstanceID(),
            sdkappid: e.getSDKAppID(),
            contenttype: e.getContentType(),
            reqtime: 0,
            identifier: e.getA2Key() ? void 0 : e.getUserID(),
            usersig: e.getA2Key() ? void 0 : e.getUserSig(),
            sdkability: 2289523,
            sdkability_ext: La(''),
            cappid: e.getApplicationID(),
            tjgID: '',
          };
        },
      },
      {
        key: 'genCosSpecifiedHead',
        value: function () {
          var e = this.get(12);
          return {
            ver: 'v4',
            platform: this._platform,
            websdkappid: b,
            websdkversion: O,
            sdkappid: e.getSDKAppID(),
            contenttype: e.getContentType(),
            reqtime: 0,
            identifier: e.getUserID(),
            usersig: e.getUserSig(),
            status_instid: e.getStatusInstanceID(),
            sdkability: 2289523,
            sdkability_ext: La(''),
            cappid: e.getApplicationID(),
          };
        },
      },
      {
        key: 'genSSOReportHead',
        value: function () {
          var e = this.get(12);
          return {
            ver: 'v4',
            platform: this._platform,
            websdkappid: b,
            websdkversion: O,
            sdkappid: e.getSDKAppID(),
            contenttype: '',
            reqtime: 0,
            identifier: '',
            usersig: '',
            status_instid: e.getStatusInstanceID(),
            sdkability: 2289523,
            sdkability_ext: La(''),
            cappid: e.getApplicationID(),
          };
        },
      },
      {
        key: 'getProtocolData',
        value: function (e) {
          return this._pHandler.getProtocolData(e);
        },
      },
      {
        key: 'trans',
        value: function (e) {
          var n = e.servcmd;
          return (
            (e = e.data),
            (n = {
              head: t(t({}, this.genCommonHead()), {}, { servcmd: n }),
              body: e,
            }),
            this.get(21).send(n)
          );
        },
      },
      {
        key: 'sendComboMessage',
        value: function (e) {
          var n = e.servcmd;
          return (
            (e = e.data),
            (n = {
              head: t(t({}, this.genCommonHead()), {}, { servcmd: n }),
              body: e,
            }),
            this.get(21).send(n)
          );
        },
      },
      {
        key: 'onErrorCodeNotZero',
        value: function (e) {
          var t,
            n = e.errorCode;
          n === wn.HELLO_ANSWER_KICKED_OUT &&
            ((t = e.kickType),
            (e = void 0 === (e = e.newInstanceInfo) ? {} : e),
            1 === t
              ? this.onMultipleAccountKickedOut(e)
              : 2 === t
                ? this.onMultipleDeviceKickedOut(e)
                : 3 === t && this.onRestApiKickedOut(e)),
            (n !== wn.MSG_A2KEY_EXPIRED && n !== wn.ACCOUNT_A2KEY_EXPIRED) ||
              (this._onUserSigExpired(), this.get(21).reConnect());
        },
      },
      {
        key: 'onMessage',
        value: function (e) {
          var t = (n = e.body).needAck,
            n = n.sessionData;
          1 === (void 0 === t ? 0 : t) && this._sendACK(n),
            this._msgDispatcher.onMessage(e);
        },
      },
      {
        key: 'onReconnected',
        value: function (e) {
          (this._incrementalPullContactFlag = e <= 300),
            this._reLoginOnReconnected();
        },
      },
      {
        key: 'reLoginOnKickOther',
        value: function () {
          Ae.l(''.concat(this._n, '.reLoginOnKickOther')), this._reLogin();
        },
      },
      {
        key: '_reLoginOnReconnected',
        value: function () {
          Ae.l(''.concat(this._n, '._reLoginOnReconnected')), this._reLogin();
        },
      },
      {
        key: '_reLogin',
        value: function () {
          var e,
            t,
            n,
            i = this,
            o = ''.concat(this._n, '._reLogin');
          this.isLoggedIn() &&
            ((e = 0),
            (t = this.get(1).getPushModule()) && (e = t.getUniAppPlatform()),
            (n = new ei('reLogin')),
            this.req({ P: Gn.LOGIN, data: { isWebUniapp: e } }).then(
              function (e) {
                var t = (e = e.data).instanceID,
                  r = ((e = e.customStatus), i.get(12)),
                  a = zi(e),
                  s = (r.setStatusInstanceID(t), i.get(21)),
                  c = s.getSocketID();
                (c = 'socketID:'
                  .concat(c, ' instanceID:')
                  .concat(t, ' customStatus:')
                  .concat(a)),
                  n.setMessage(c).end(!0),
                  Ae.l(''.concat(o, ' ok. ').concat(c)),
                  r.getCustomStatus() !== a &&
                    i
                      .get(4)
                      .onUserStatusUpdated({
                        dataList: [
                          {
                            to: i.getMyUserID(),
                            statusType: D.USER_STATUS_ONLINE,
                            customStatus: e,
                          },
                        ],
                      }),
                  s.diagnose(),
                  i
                    .get(11)
                    .syncConvList(i._incrementalPullContactFlag)
                    .then(function () {
                      Ae.l(''.concat(o, ', sync conv list ok.')),
                        i.get(25).start();
                    }),
                  ((t = i.get(7)) && t.updateLocalMainSequenceOnReconnected(),
                  (c = i.get(10))).resetGetTopicTime(),
                  c.getTopicListOnReconnected(),
                  (r = i.get(35)) && r.clearCacheOnReconnected();
              }
            ));
        },
      },
      {
        key: 'onMultipleAccountKickedOut',
        value: function (e) {
          this.get(1).onMultipleAccountKickedOut(e);
        },
      },
      {
        key: 'onMultipleDeviceKickedOut',
        value: function (e) {
          this.get(1).onMultipleDeviceKickedOut(e);
        },
      },
      {
        key: '_onUserSigExpired',
        value: function () {
          this.get(1).onUserSigExpired();
        },
      },
      {
        key: 'onRestApiKickedOut',
        value: function (e) {
          this.get(1).onRestApiKickedOut(e);
        },
      },
      {
        key: '_sendACK',
        value: function (e) {
          this.req({ P: Gn.MSG_PUSH_ACK, data: { sessionData: e } });
        },
      },
      {
        key: '_isFreqOverLimit',
        value: function (e) {
          if (((e = e.split('.')[1]), !this._cmdFreqLimitMap.has(e))) return !1;
          if (!this._cmdReqInfoMap.has(e))
            return (
              this._cmdReqInfoMap.set(e, {
                startTime: Date.now(),
                requestCount: 1,
              }),
              !1
            );
          var t = (n = this._cmdFreqLimitMap.get(e)).count,
            n = n.interval,
            i = (o = this._cmdReqInfoMap.get(e)).startTime,
            o = o.requestCount;
          return Date.now() - i > 1e3 * n
            ? (this._cmdReqInfoMap.set(e, {
                startTime: Date.now(),
                requestCount: 1,
              }),
              !1)
            : (this._cmdReqInfoMap.set(e, {
                startTime: i,
                requestCount: (o += 1),
              }),
              t < o);
        },
      },
      {
        key: '_isServerOverload',
        value: function (e) {
          if (!this._serverOverloadInfoMap.has(e)) return !1;
          var t = (n = this._serverOverloadInfoMap.get(e)).overloadTime,
            n = n.waitingTime;
          return (
            Date.now() - t <= 1e3 * n ||
            (this._serverOverloadInfoMap.delete(e), !1)
          );
        },
      },
      {
        key: '_getCmd',
        value: function (e) {
          var t = '';
          if (!e.includes('.')) return t;
          var n,
            i = e.split('.')[1];
          for (n in Gn)
            if (Gn[n] === i) {
              t = n;
              break;
            }
          return t;
        },
      },
      {
        key: 'onPushedServerOverload',
        value: function (e) {
          var t = e.overloadCommand;
          (e = e.waitingTime),
            this._serverOverloadInfoMap.set(t, {
              overloadTime: Date.now(),
              waitingTime: e,
            }),
            Ae.w(
              ''
                .concat(this._n, '.onPushedServerOverload waitingTime:')
                .concat(e, 's cmd:')
                .concat(this._getCmd(t))
            );
        },
      },
      {
        key: 'reset',
        value: function () {
          Ae.l(''.concat(this._n, '.reset')),
            this._updateCmdFreqLimitMap(ya),
            this._cmdReqInfoMap.clear(),
            this._serverOverloadInfoMap.clear(),
            (this._incrementalPullContactFlag = !0);
        },
      },
    ]);
  var ba,
    Na,
    Pa,
    wa,
    Ua,
    Ga,
    xa,
    Fa,
    qa,
    Va,
    Ba,
    Ha = Ys,
    ja =
      (s($s, An),
      (Va = g($s)),
      r($s, [
        {
          key: 'getCloudConfig',
          value: function (e) {
            return ut(e)
              ? this._cloudConfig
              : this._cloudConfig.has(e)
                ? this._cloudConfig.get(e)
                : void 0;
          },
        },
        {
          key: 'getServerConfig',
          value: function (e) {
            var t = { code: 0, data: '' };
            return (
              !ut(e) &&
                this._cloudConfig.has(e) &&
                (t.data = this._cloudConfig.get(e)),
              Promise.resolve(t)
            );
          },
        },
        {
          key: '_canFetch',
          value: function () {
            return (
              this.isLoggedIn() &&
              !this._isFetching &&
              Date.now() >= this._expiredTime
            );
          },
        },
        {
          key: 'fetchConfig',
          value: function () {
            var e,
              t = this,
              n = ''.concat(this._n, '.fetchConfig'),
              i = this._canFetch();
            Ae.l(''.concat(n, ' canFetch:').concat(i)),
              i &&
                ((e = new ei('fetchCloudCtrlConfig')),
                (i = this.get(12).getSDKAppID()),
                (this._isFetching = !0),
                this.req({
                  P: Gn.FETCH_CLOUD_CTRL_CONFIG,
                  data: { SDKAppID: i, version: this._version },
                })
                  .then(function (i) {
                    t._isFetching = !1;
                    var o = (r = i.data).version,
                      r = r.cloudControlConfig;
                    e
                      .setMessage(
                        'version:'
                          .concat(t._version, ' newVersion:')
                          .concat(o, ' config:')
                          .concat(r)
                      )
                      .end(),
                      Ae.l(''.concat(n, ' ok')),
                      t._parse(i.data);
                  })
                  .catch(function (i) {
                    (t._isFetching = !1),
                      e.setError(i).end(),
                      Ae.l(''.concat(n, ' failed. error:'), i),
                      t._setExpiredTime(12e4);
                  }));
          },
        },
        {
          key: 'onPushedConfig',
          value: function (e) {
            Ae.l(''.concat(this._n, '.onPushedConfig config:'), e),
              new ei('pushedCloudCtrlConfig')
                .setMessage(
                  'newVersion:'
                    .concat(e.version, ' config:')
                    .concat(e.cloudControlConfig)
                )
                .end(),
              this._parse(e);
          },
        },
        {
          key: 'onCheckTimer',
          value: function (e) {
            this._canFetch() && this.fetchConfig();
          },
        },
        {
          key: '_parse',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '._parse'),
              i = e.errorCode,
              o = e.errorMessage,
              r = e.cloudControlConfig,
              a = e.version,
              s = e.expiredTime;
            if (0 === i) {
              if (this._version !== a) {
                var c = null;
                try {
                  c = JSON.parse(r);
                } catch (u) {
                  this.isPrivateNetWork() ||
                    Ae.e(''.concat(n, ' failed. config:'), r);
                }
                c &&
                  (this._cloudConfig.clear(),
                  Object.keys(c).forEach(function (e) {
                    t._cloudConfig.set(e, c[e]);
                  }),
                  (this._version = a),
                  this.emitIEvt(qi.CLOUD_CONFIG));
              }
              this._setExpiredTime(1e3 * s);
            } else
              ut(i)
                ? (Ae.l(''.concat(n, ' failed. Invalid message format:'), e),
                  this._setExpiredTime(36e5))
                : (Ae.e(
                    ''
                      .concat(n, ' errorCode:')
                      .concat(i, ' errorMessage:')
                      .concat(o)
                  ),
                  this._setExpiredTime(12e4));
          },
        },
        {
          key: '_setExpiredTime',
          value: function (e) {
            this._expiredTime = Date.now() + e;
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._cloudConfig.clear(),
              (this._expiredTime = 0),
              (this._version = 0),
              (this._isFetching = !1);
          },
        },
      ]),
      $s),
    Ka =
      (s(zs, An),
      (qa = g(zs)),
      r(zs, [
        {
          key: 'start',
          value: function () {
            this._recoverGroupChat(), this._recoverC2CChat();
          },
        },
        {
          key: '_recoverGroupChat',
          value: function () {
            var e,
              t,
              n,
              i,
              o = this,
              r = this._getLocalConvList().filter(function (e) {
                return (
                  e.type === D.CONV_GROUP &&
                  e.groupProfile.type !== D.GRP_AVCHATROOM
                );
              }),
              a = this.get(11),
              s = [];
            r.forEach(function (r) {
              var c = r.conversationID;
              (r = r.lastMessage),
                (e = c.replace(D.CONV_GROUP, '')),
                (t = a.getLocalLastMessage(c)),
                r && 0 !== r.lastSequence && t
                  ? ((n = r.lastSequence),
                    (t = t.sequence),
                    (i = n - t),
                    0 < t && 1 <= i && i < 300
                      ? o._recoverGroupMsg({
                          groupID: e,
                          localLastMessageSequence: t,
                          remoteLastMessageSequence: n,
                        })
                      : s.push(e))
                  : s.push(e);
            }),
              this._getGroupNotice(s);
          },
        },
        {
          key: '_recoverC2CChat',
          value: function () {
            var e,
              t,
              n,
              i = this,
              o = this._getLocalConvList().filter(function (e) {
                return e.type === D.CONV_C2C;
              }),
              r = this.get(11),
              a = [Promise.resolve()];
            o.forEach(function (o) {
              var s = o.conversationID;
              (o = o.lastMessage),
                (e = r.getLocalLastMessage(s)),
                o &&
                  0 !== o.lastTime &&
                  e &&
                  ((t = o.lastTime),
                  (e = e.time),
                  (n = t - e),
                  0 < e &&
                    1 <= n &&
                    n <= 600 &&
                    a.push(
                      i._recoverC2CMsg({
                        conversationID: s,
                        localLastMessageTime: e,
                        remoteLastMessageTime: t,
                      })
                    ));
            }),
              Promise.all(a).then(function () {
                Ae.l(''.concat(i._n, '._recoverC2CChat all done')),
                  i.get(19).syncOnReconnected();
              });
          },
        },
        {
          key: '_getLocalConvList',
          value: function () {
            return this.get(11).getLocalConvList();
          },
        },
        {
          key: '_recoverGroupMsg',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('_recoverGroupMsg'),
              i = (Ae.l(''.concat(n, ' options:'), e), e.groupID),
              o = e.localLastMessageSequence,
              r = e.remoteLastMessageSequence,
              a = JSON.stringify(e),
              s = new ei('_recoverGroupMsg');
            s.setMessage(a),
              this._getGroupRoamingMsg({ groupID: i, sequence: o })
                .then(function (e) {
                  var c = (e = e.data).complete,
                    u = e.messageList;
                  if (!ut(u)) {
                    e = u[0].sequence;
                    var l = u.map(function (e) {
                        return e.sequence;
                      }),
                      d =
                        ((l = ''
                          .concat(a, ' complete:')
                          .concat(c, ' sequenceList:')
                          .concat(l)),
                        Ae.l(''.concat(n, ' ').concat(l)),
                        e !== o &&
                          e < r &&
                          2 !== c &&
                          t._recoverGroupMsg({
                            groupID: i,
                            localLastMessageSequence: e,
                            remoteLastMessageSequence: r,
                          }),
                        s.setMessage(l).end(),
                        t.get(7));
                    1 < u.length &&
                      u.sort(function (e, t) {
                        return e.sequence - t.sequence;
                      });
                    for (var p = !1, h = 0, f = u.length; h < f; h++)
                      if (u[h].from === D.CONV_SYSTEM) {
                        p = !0;
                        break;
                      }
                    if (p)
                      for (var g = 0, _ = u.length; g < _; g++) {
                        var v = u[g];
                        v.from !== D.CONV_SYSTEM
                          ? d.onNewMessage({
                              dataList: [v],
                              isInstantMessage: !1,
                              updateUnreadCount: !1,
                            })
                          : d.onNewGroupTips({ event: v.event, dataList: [v] });
                      }
                    else
                      d.onNewMessage({
                        dataList: u,
                        isInstantMessage: !1,
                        updateUnreadCount: !1,
                      });
                  }
                })
                .catch(function (e) {
                  s.setError(e).end(), Ae.w(''.concat(n, ' failed. error:'), e);
                });
          },
        },
        {
          key: '_getGroupNotice',
          value: function (e) {
            var t = e.length;
            if (
              (Ae.l(''.concat(this._n, '._getGroupNotice length:').concat(t)),
              0 !== t)
            ) {
              var n = this.get(7);
              if (t <= 10) n.getNotice(e);
              else {
                var i = Math.floor(t / 10);
                5 <= i && (i = 5);
                for (var o = 0; o <= i; o++)
                  n.getNotice(e.slice(10 * o, 10 * (o + 1)));
              }
            }
          },
        },
        {
          key: '_getGroupRoamingMsg',
          value: function (e) {
            var t = e.groupID;
            return (
              (e = e.sequence),
              this.req({
                P: Gn.GET_GRP_ROAMING_MSG,
                data: {
                  groupID: t,
                  count: this.PULL_LIMIT_COUNT,
                  sequence: e + this.PULL_LIMIT_COUNT - 1,
                },
              })
            );
          },
        },
        {
          key: '_recoverC2CMsg',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('_recoverC2CMsg'),
              i = (Ae.l(''.concat(n, ' options:'), e), e.conversationID),
              o = e.localLastMessageTime,
              r = e.remoteLastMessageTime,
              a = JSON.stringify(e),
              s = new ei('_recoverC2CMsg');
            return (
              s.setMessage(a),
              this._getC2CRoamingMsg({ conversationID: i, time: o })
                .then(function (e) {
                  var o = (e = e.data).complete;
                  if (((e = e.messageList), !ut(e))) {
                    var c = e.length;
                    if (
                      (t
                        .get(6)
                        .onNewMessage({ dataList: e, isInstantMessage: !0 }),
                      (c = e[c - 1].time),
                      (e = e.map(function (e) {
                        return e.random;
                      })),
                      (e = ''
                        .concat(a, ' complete:')
                        .concat(o, ' randomList:')
                        .concat(e)),
                      Ae.l(''.concat(n, ' ').concat(e)),
                      s.setMessage(e).end(),
                      c < r && 1 !== o)
                    )
                      return t._recoverC2CMsg({
                        conversationID: i,
                        localLastMessageTime: c,
                        remoteLastMessageTime: r,
                      });
                  }
                })
                .catch(function (e) {
                  s.setError(e).end(), Ae.w(''.concat(n, ' failed. error:'), e);
                })
            );
          },
        },
        {
          key: '_getC2CRoamingMsg',
          value: function (e) {
            var t = e.conversationID;
            return (
              (e = e.time),
              this.req({
                P: Gn.GET_C2C_ROAMING_MSG,
                data: {
                  peerAccount: t.replace(D.CONV_C2C, ''),
                  count: this.PULL_LIMIT_COUNT + 1,
                  lastMessageTime: e,
                  direction: 1,
                },
              })
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset'));
          },
        },
      ]),
      zs),
    Wa =
      (r(Ws, [
        {
          key: 'addMessageDelay',
          value: function (e) {
            0 <= (e = Te() - e) && this._e2eDelayArray.push(e);
          },
        },
        {
          key: '_calcAvg',
          value: function (e, t) {
            if (0 === t) return 0;
            var n = 0;
            return (
              e.forEach(function (e) {
                n += e;
              }),
              Pt(n / t, 1)
            );
          },
        },
        {
          key: '_calcCountWithLimit',
          value: function (e) {
            var t = e.e2eDelayArray,
              n = e.min,
              i = e.max;
            return t.filter(function (e) {
              return n <= e && e < i;
            }).length;
          },
        },
        {
          key: '_calcPercent',
          value: function (e, t) {
            return 100 < (e = Pt((e / t) * 100, 2)) ? 100 : e;
          },
        },
        {
          key: '_checkE2EDelayException',
          value: function (e, t) {
            var n,
              i,
              o,
              r = e.filter(function (e) {
                return t < e;
              });
            0 < r.length &&
              ((n = r.length),
              (i = Math.min.apply(Math, v(r))),
              (o = Math.max.apply(Math, v(r))),
              (r = this._calcAvg(r, n)),
              50 < (e = Pt((n / e.length) * 100, 2)) &&
                new ei('messageE2EDelayException')
                  .setMessage(
                    'count:'
                      .concat(n, ' min:')
                      .concat(i, ' max:')
                      .concat(o, ' avg:')
                      .concat(r, ' percent:')
                      .concat(e)
                  )
                  .setLevel('warning')
                  .end());
          },
        },
        {
          key: 'getStatResult',
          value: function () {
            var e = this._e2eDelayArray.length;
            if (0 === e) return null;
            var t = v(this._e2eDelayArray),
              n = this._calcCountWithLimit({
                e2eDelayArray: t,
                min: 0,
                max: 1,
              }),
              i = this._calcCountWithLimit({
                e2eDelayArray: t,
                min: 1,
                max: 3,
              }),
              o = this._calcPercent(n, e),
              r = this._calcPercent(i, e),
              a = this._calcAvg(t, e);
            return (
              this._checkE2EDelayException(t, 3),
              (t.length = 0),
              this.reset(),
              {
                totalCount: e,
                countLessThan1Second: n,
                percentOfCountLessThan1Second: o,
                countLessThan3Second: i,
                percentOfCountLessThan3Second: r,
                avgDelay: a,
              }
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            this._e2eDelayArray.length = 0;
          },
        },
      ]),
      Ws),
    za =
      (r(Ks, [
        {
          key: 'addRequestCount',
          value: function () {
            this._requestCount += 1;
          },
        },
        {
          key: 'addRTT',
          value: function (e) {
            this._rttArray.push(e);
          },
        },
        {
          key: '_calcTotalCount',
          value: function () {
            return this._requestCount;
          },
        },
        {
          key: '_calcRTTCount',
          value: function (e) {
            return e.length;
          },
        },
        {
          key: '_calcSuccessRateOfRequest',
          value: function (e, t) {
            return 0 === t ? 0 : 100 < (e = Pt((e / t) * 100, 2)) ? 100 : e;
          },
        },
        {
          key: '_calcAvg',
          value: function (e, t) {
            if (0 === t) return 0;
            var n = 0;
            return (
              e.forEach(function (e) {
                n += e;
              }),
              parseInt(n / t)
            );
          },
        },
        {
          key: '_calcMax',
          value: function () {
            return Math.max.apply(Math, v(this._rttArray));
          },
        },
        {
          key: '_calcMin',
          value: function () {
            return Math.min.apply(Math, v(this._rttArray));
          },
        },
        {
          key: 'getStatResult',
          value: function () {
            var e = this._calcTotalCount(),
              t = v(this._rttArray);
            if (0 === e) return null;
            var n = this._calcRTTCount(t),
              i = this._calcSuccessRateOfRequest(n, e);
            return (
              (t = this._calcAvg(t, n)),
              Ae.l(
                ''
                  .concat(this._n, '.getStatResult max:')
                  .concat(this._calcMax(), ' min:')
                  .concat(this._calcMin(), ' avg:')
                  .concat(t)
              ),
              this.reset(),
              { totalCount: e, rttCount: n, successRateOfRequest: i, avgRTT: t }
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            (this._requestCount = 0), (this._rttArray.length = 0);
          },
        },
      ]),
      Ks),
    $a =
      (r(js, [
        {
          key: 'initMap',
          value: function (e) {
            var t = this;
            e.forEach(function (e) {
              t._map.set(e, {
                totalCount: 0,
                successCount: 0,
                failedCountOfUserSide: 0,
                costArray: [],
                fileSizeArray: [],
              });
            });
          },
        },
        {
          key: 'addTotalCount',
          value: function (e) {
            return !(
              ut(e) ||
              !this._map.has(e) ||
              ((this._map.get(e).totalCount += 1), 0)
            );
          },
        },
        {
          key: 'addSuccessCount',
          value: function (e) {
            return !(
              ut(e) ||
              !this._map.has(e) ||
              ((this._map.get(e).successCount += 1), 0)
            );
          },
        },
        {
          key: 'addFailedCountOfUserSide',
          value: function (e) {
            return !(
              ut(e) ||
              !this._map.has(e) ||
              ((this._map.get(e).failedCountOfUserSide += 1), 0)
            );
          },
        },
        {
          key: 'addCost',
          value: function (e, t) {
            return !(
              ut(e) ||
              !this._map.has(e) ||
              (this._map.get(e).costArray.push(t), 0)
            );
          },
        },
        {
          key: 'addFileSize',
          value: function (e, t) {
            return !(
              ut(e) ||
              !this._map.has(e) ||
              (this._map.get(e).fileSizeArray.push(t), 0)
            );
          },
        },
        {
          key: '_calcSuccessRateOfBusiness',
          value: function (e) {
            return ut(e) || !this._map.has(e)
              ? -1
              : 100 <
                  (e = Pt(
                    ((e = this._map.get(e)).successCount / e.totalCount) * 100,
                    2
                  ))
                ? 100
                : e;
          },
        },
        {
          key: '_calcSuccessRateOfPlatform',
          value: function (e) {
            if (ut(e) || !this._map.has(e)) return -1;
            var t = this._map.get(e);
            return 100 <
              (e = Pt(
                (e =
                  (this._calcSuccessCountOfPlatform(e) / t.totalCount) * 100),
                2
              ))
              ? 100
              : e;
          },
        },
        {
          key: '_calcTotalCount',
          value: function (e) {
            return ut(e) || !this._map.has(e)
              ? -1
              : this._map.get(e).totalCount;
          },
        },
        {
          key: '_calcSuccessCountOfBusiness',
          value: function (e) {
            return ut(e) || !this._map.has(e)
              ? -1
              : this._map.get(e).successCount;
          },
        },
        {
          key: '_calcSuccessCountOfPlatform',
          value: function (e) {
            return ut(e) || !this._map.has(e)
              ? -1
              : (e = this._map.get(e)).successCount + e.failedCountOfUserSide;
          },
        },
        {
          key: '_calcAvg',
          value: function (e) {
            return ut(e) || !this._map.has(e)
              ? -1
              : e === jn
                ? this._calcAvgSpeed(e)
                : this._calcAvgCost(e);
          },
        },
        {
          key: '_calcAvgCost',
          value: function (e) {
            var t = this._map.get(e).costArray.length;
            if (0 === t) return 0;
            var n = 0;
            return (
              this._map.get(e).costArray.forEach(function (e) {
                n += e;
              }),
              parseInt(n / t)
            );
          },
        },
        {
          key: '_calcAvgSpeed',
          value: function (e) {
            var t = 0,
              n = 0;
            return (
              this._map.get(e).costArray.forEach(function (e) {
                t += e;
              }),
              this._map.get(e).fileSizeArray.forEach(function (e) {
                n += e;
              }),
              parseInt((1e3 * n) / t)
            );
          },
        },
        {
          key: 'getStatResult',
          value: function (e) {
            var t = this._calcTotalCount(e);
            if (0 === t) return null;
            var n = this._calcSuccessCountOfBusiness(e),
              i = this._calcSuccessRateOfBusiness(e),
              o = this._calcSuccessCountOfPlatform(e),
              r = this._calcSuccessRateOfPlatform(e),
              a = this._calcAvg(e);
            return (
              this.reset(e),
              {
                totalCount: t,
                successCountOfBusiness: n,
                successRateOfBusiness: i,
                successCountOfPlatform: o,
                successRateOfPlatform: r,
                avgValue: a,
              }
            );
          },
        },
        {
          key: 'reset',
          value: function (e) {
            ut(e)
              ? this._map.clear()
              : this._map.set(e, {
                  totalCount: 0,
                  successCount: 0,
                  failedCountOfUserSide: 0,
                  costArray: [],
                  fileSizeArray: [],
                });
          },
        },
      ]),
      js),
    Ya =
      (r(Hs, [
        {
          key: 'initMap',
          value: function (e) {
            var t = this;
            e.forEach(function (e) {
              t._lastMap.set(e, new Map()), t._currentMap.set(e, new Map());
            });
          },
        },
        {
          key: 'addMessageSequence',
          value: function (e) {
            var t = e.key,
              n = e.message;
            if (ut(t) || !this._lastMap.has(t) || !this._currentMap.has(t))
              return !1;
            var i,
              o,
              r = n.conversationID;
            return (
              (n = n.sequence),
              (r = r.replace(D.CONV_GROUP, '')),
              0 !== this._lastMap.get(t).size && this._lastMap.get(t).has(r)
                ? ((o = (i = this._lastMap.get(t).get(r)).length - 1),
                  n > i[0] && n < i[o]
                    ? (i.push(n), i.sort(), this._lastMap.get(t).set(r, i))
                    : this._addCurrentMap(e))
                : this._addCurrentMap(e),
              !0
            );
          },
        },
        {
          key: '_addCurrentMap',
          value: function (e) {
            var t = e.key,
              n = (e = e.message).conversationID;
            (e = e.sequence),
              (n = n.replace(D.CONV_GROUP, '')),
              this._currentMap.get(t).has(n) ||
                this._currentMap.get(t).set(n, []),
              this._currentMap.get(t).get(n).push(e);
          },
        },
        {
          key: '_copyData',
          value: function (e) {
            if (!ut(e)) {
              this._lastMap.set(e, new Map());
              var t,
                n = this._lastMap.get(e),
                i = T(this._currentMap.get(e));
              try {
                for (i.s(); !(t = i.n()).done; ) {
                  var o = _(t.value, 2),
                    r = o[0],
                    a = o[1];
                  n.set(r, a);
                }
              } catch (s) {
                i.e(s);
              } finally {
                i.f();
              }
              (n = null), this._currentMap.set(e, new Map());
            }
          },
        },
        {
          key: 'getStatResult',
          value: function (e) {
            if (ut(this._currentMap.get(e)) || ut(this._lastMap.get(e)))
              return null;
            if (0 === this._lastMap.get(e).size) return this._copyData(e), null;
            var t = 0,
              n = 0;
            if (
              (this._lastMap.get(e).forEach(function (e, i) {
                var o = (e = v(e.values())).length;
                (e = e[o - 1] - e[0] + 1), (t += e), (n += o);
              }),
              0 === t)
            )
              return null;
            var i = Pt((n / t) * 100, 2);
            return (
              100 < i && (i = 100),
              this._copyData(e),
              {
                totalCount: t,
                successCountOfMessageReceived: n,
                successRateOfMessageReceived: i,
              }
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            this._currentMap.clear(), this._lastMap.clear();
          },
        },
      ]),
      Hs),
    Ja =
      (s(Bs, An),
      (Fa = g(Bs)),
      r(Bs, [
        {
          key: '_onLoginSuccess',
          value: function () {
            var e = this,
              t =
                (this._rateMessageSent.initMap(this._messageSentItems),
                this._rateMessageReceived.initMap(this._messageReceivedItems),
                this.get(13)),
              n = t.getItem(this.TAG, !1);
            !Ve(n) &&
              Ye(n.forEach) &&
              (Ae.l(
                ''
                  .concat(this._n, '._onLoginSuccess. logs count:')
                  .concat(n.length)
              ),
              n.forEach(function (t) {
                e._statInfoArr.push(t);
              }),
              t.removeItem(this.TAG, !1));
          },
        },
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this.getCloudConfig('q_rpt_interval'),
              t = this.getCloudConfig('q_rpt_sdkappid_bl'),
              n = this.getCloudConfig('q_rpt_tinyid_wl');
            ut(e) || (this.REPORT_INTERVAL = Number(e)),
              ut(t) ||
                (this.REPORT_SDKAPPID_BLACKLIST = t
                  .split(',')
                  .map(function (e) {
                    return Number(e);
                  })),
              ut(n) || (this.REPORT_TINYID_WHITELIST = n.split(','));
          },
        },
        {
          key: 'onCheckTimer',
          value: function (e) {
            this.isLoggedIn() &&
              e % this.REPORT_INTERVAL == 0 &&
              ((this.wholePeriod = !0), this._report());
          },
        },
        {
          key: 'addRequestCount',
          value: function () {
            this._avgRTT.addRequestCount();
          },
        },
        {
          key: 'addRTT',
          value: function (e) {
            this._avgRTT.addRTT(e);
          },
        },
        {
          key: 'addMessageDelay',
          value: function (e) {
            this._avgE2EDelay.addMessageDelay(e);
          },
        },
        {
          key: 'addTotalCount',
          value: function (e) {
            this._rateMessageSent.addTotalCount(e) ||
              Ae.w(''.concat(this._n, '.addTotalCount invalid key:'), e);
          },
        },
        {
          key: 'addSuccessCount',
          value: function (e) {
            this._rateMessageSent.addSuccessCount(e) ||
              Ae.w(''.concat(this._n, '.addSuccessCount invalid key:'), e);
          },
        },
        {
          key: 'addFailedCountOfUserSide',
          value: function (e) {
            this._rateMessageSent.addFailedCountOfUserSide(e) ||
              Ae.w(
                ''.concat(this._n, '.addFailedCountOfUserSide invalid key:'),
                e
              );
          },
        },
        {
          key: 'addCost',
          value: function (e, t) {
            this._rateMessageSent.addCost(e, t) ||
              Ae.w(''.concat(this._n, '.addCost invalid key or cost:'), e, t);
          },
        },
        {
          key: 'addFileSize',
          value: function (e, t) {
            this._rateMessageSent.addFileSize(e, t) ||
              Ae.w(
                ''.concat(this._n, '.addFileSize invalid key or size:'),
                e,
                t
              );
          },
        },
        {
          key: 'addMessageSequence',
          value: function (e) {
            this._rateMessageReceived.addMessageSequence(e) ||
              Ae.w(
                ''.concat(this._n, '.addMessageSequence invalid key:'),
                e.key
              );
          },
        },
        {
          key: '_getQualityItem',
          value: function (e) {
            var n = {},
              i = Zn[this.get(15).getNetworkType()];
            switch (
              (ut(i) && (i = 8),
              (i = {
                qualityType: Jn[e],
                timestamp: Se(),
                networkType: i,
                extension: '',
              }),
              e)
            ) {
              case xn:
                n = this._avgRTT.getStatResult();
                break;
              case Fn:
                n = this._avgE2EDelay.getStatResult();
                break;
              case qn:
              case Vn:
              case Bn:
              case Hn:
              case jn:
                n = this._rateMessageSent.getStatResult(e);
                break;
              case Kn:
              case Wn:
              case zn:
                n = this._rateMessageReceived.getStatResult(e);
            }
            return null === n ? null : t(t({}, i), n);
          },
        },
        {
          key: '_report',
          value: function (e) {
            var t = this,
              n = [],
              i = null,
              o = (ut(e)
                ? this._qualityItems.forEach(function (e) {
                    null !== (i = t._getQualityItem(e)) &&
                      ((i.reportIndex = t.reportIndex),
                      (i.wholePeriod = t.wholePeriod),
                      n.push(i));
                  })
                : null !== (i = this._getQualityItem(e)) &&
                  ((i.reportIndex = this.reportIndex),
                  (i.wholePeriod = this.wholePeriod),
                  n.push(i)),
              Ae.d(''.concat(this._n, '._report'), n),
              0 < this._statInfoArr.length &&
                ((n = n.concat(this._statInfoArr)), (this._statInfoArr = [])),
              (e = this.get(12))).getSDKAppID();
            (e = e.getTinyID()),
              0 <
                (n =
                  wt(this.REPORT_SDKAPPID_BLACKLIST, o) &&
                  !Ut(this.REPORT_TINYID_WHITELIST, e)
                    ? []
                    : n).length && this._doReport(n);
          },
        },
        {
          key: '_doReport',
          value: function (e) {
            var n = this,
              i = { header: sr(this), quality: e };
            this.req({ P: Gn.SSO_STAT, data: t({}, i) })
              .then(function () {
                n.reportIndex++, (n.wholePeriod = !1);
              })
              .catch(function (t) {
                Ae.w(''.concat(n._n, '._doReport failed. error:'), t),
                  (n._statInfoArr = n._statInfoArr.concat(e)),
                  n._flushAtOnce();
              });
          },
        },
        {
          key: '_flushAtOnce',
          value: function () {
            var e = this.get(13),
              t = e.getItem(this.TAG, !1),
              n = this._statInfoArr,
              i = ''.concat(this._n, '._flushAtOnce');
            Ve(t)
              ? (Ae.l(''.concat(i, ' count:').concat(n.length)),
                e.setItem(this.TAG, n, !0, !1))
              : (10 < (n = n.concat(t)).length && (n = n.slice(0, 10)),
                Ae.l(''.concat(i, ' count:').concat(n.length)),
                e.setItem(this.TAG, n, !0, !1)),
              (this._statInfoArr = []);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._report(),
              (this.reportIndex = 0),
              (this.wholePeriod = !1),
              (this.REPORT_SDKAPPID_BLACKLIST = []),
              (this.REPORT_TINYID_WHITELIST = []),
              this._avgRTT.reset(),
              this._avgE2EDelay.reset(),
              this._rateMessageSent.reset(),
              this._rateMessageReceived.reset();
          },
        },
      ]),
      Bs),
    Xa = r(function e(t) {
      i(this, e),
        Ve(t) ||
          ((this.userID = t.userID || ''),
          (this.nick = t.nick || ''),
          (this.avatar = t.avatar || ''),
          (this.time = t.time || 0),
          (this.source = t.source || ''),
          (this.wording = t.wording || ''),
          (this.type = t.type || ''));
    }),
    Za =
      (r(Vs, [
        {
          key: 'getLocalApplicationList',
          value: function () {
            return {
              friendApplicationList: v(this._map.values()),
              unreadCount: this._unreadCount,
            };
          },
        },
        {
          key: '_onApplicationListUpdated',
          value: function () {
            this._snsM.emitOEvt(E.FRIEND_APPLICATION_LIST_UPDATED, {
              friendApplicationList: v(this._map.values()),
              unreadCount: this._unreadCount,
            });
          },
        },
        {
          key: 'onApplicationRead',
          value: function () {
            (this._unreadCount = 0), this._onApplicationListUpdated();
          },
        },
        {
          key: 'onApplicationAdded',
          value: function (e, n) {
            var i,
              o,
              r = this;
            Ve(e) ||
              ((i = ''),
              (i =
                n === this._snsM.getMyUserID()
                  ? D.SNS_APPLICATION_SENT_BY_ME
                  : D.SNS_APPLICATION_SENT_TO_ME),
              (o = !1),
              e.forEach(function (e) {
                var n = ''.concat(e.userID, '_').concat(i);
                i !== D.SNS_APPLICATION_SENT_TO_ME ||
                  r._map.has(n) ||
                  (r._unreadCount += 1),
                  r._map.set(n, new Xa(t(t({}, e), {}, { type: i }))),
                  (o = !0);
              }),
              o && this._onApplicationListUpdated());
          },
        },
        {
          key: 'onApplicationDeleted',
          value: function (e) {
            Ve(e) ||
              ((this._startTime = 0),
              (this._currentSeq = 0),
              this.getApplicationList());
          },
        },
        {
          key: 'getApplicationList',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('getApplicationList'),
              n = new ei('getApplicationList');
            return this._snsM
              .req({
                P: Gn.GET_FD_APPLICATION_LIST,
                data: {
                  applicationType: D.SNS_APPLICATION_TYPE_BOTH,
                  fromAccount: this._snsM.getMyUserID(),
                  maxLimited: this._maxLimited,
                  startTime: this._startTime,
                  lastSequence: this._currentSeq,
                },
              })
              .then(function (i) {
                var o = (i = i.data).resultList,
                  r = i.unreadCount,
                  a = i.startTime,
                  s =
                    ((i = i.currentSequence),
                    (e._startTime = a),
                    (e._currentSeq = i),
                    (e._unreadCount = r),
                    $e(o) ? o.length : 0);
                (s = 'applicationCount:'
                  .concat(s, ' unreadCount:')
                  .concat(r, ' startTime:')
                  .concat(a, ' currentSequence:')
                  .concat(i)),
                  n.setMessage(s).end(),
                  Ae.i(''.concat(t, ' ok. ').concat(s)),
                  e._map.clear(),
                  $e(o) &&
                    o.forEach(function (t) {
                      var n = t.userID,
                        i = t.type;
                      (t = new Xa(t)),
                        e._map.set(''.concat(n, '_').concat(i), t);
                    }),
                  e._onApplicationListUpdated();
              })
              .catch(function (e) {
                return (
                  n.setError(e).end(),
                  Ae.w(''.concat(t, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: 'deleteApplication',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('deleteApplication'),
              n = e.userID,
              i = e.type;
            if (
              ((i &&
                (i === D.SNS_APPLICATION_SENT_BY_ME ||
                  i === D.SNS_APPLICATION_SENT_TO_ME)) ||
                (i = D.SNS_APPLICATION_SENT_TO_ME),
              !this._map.has(''.concat(n, '_').concat(i)))
            )
              return In({ code: wn.FRIEND_APPLICATION_NOT_EXIST });
            var o = new ei('deleteApplication');
            return (
              o.setMessage('userID:'.concat(n, ' type:').concat(i)),
              this._snsM
                .req({
                  P: Gn.DEL_FD_APPLICATION,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    userIDList: [n],
                    type: i,
                  },
                })
                .then(function (e) {
                  var r = (s = (e = e.data.resultList)[0]).to,
                    a = s.resultCode,
                    s = s.resultInfo;
                  return (
                    o
                      .setMoreMessage('resultList:'.concat(JSON.stringify(e)))
                      .end(),
                    Ae.i(
                      ''.concat(t, ' ok. userID:').concat(n, ' type:').concat(i)
                    ),
                    0 === a ? mn() : In({ userID: r, code: a, message: s })
                  );
                })
                .catch(function (e) {
                  return (
                    o.setError(e).end(),
                    Ae.w(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'acceptApplication',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('acceptApplication'),
              n = e.userID,
              i = e.remark,
              o = e.tag,
              r = e.type,
              a =
                ((r &&
                  (r === D.SNS_APPLICATION_AGREE ||
                    r === D.SNS_APPLICATION_AGREE_AND_ADD)) ||
                  (r = D.SNS_APPLICATION_AGREE_AND_ADD),
                new ei('acceptApplication'));
            return (
              a.setMessage('userID:'.concat(n, ' type:').concat(r)),
              this._snsM
                .req({
                  P: Gn.RESPOND_FD_APPLICATION,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    responseFriendItem: [
                      { userID: n, remark: i, tag: o, action: r },
                    ],
                  },
                })
                .then(function (e) {
                  a.end();
                  var i = (e = e.data.resultList[0]).resultCode;
                  if (((e = e.resultInfo), 0 !== i))
                    return In({ code: i, message: e });
                  Ae.i(
                    ''.concat(t, ' ok. userID:').concat(n, ' type:').concat(r)
                  );
                })
                .catch(function (e) {
                  return (
                    a.setError(e).end(),
                    Ae.w(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'refuseApplication',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('refuseApplication'),
              n = e.userID,
              i = new ei('refuseApplication');
            return (
              i.setMessage('userID:'.concat(n)),
              this._snsM
                .req({
                  P: Gn.RESPOND_FD_APPLICATION,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    responseFriendItem: [
                      { userID: n, action: 'Response_Action_Reject' },
                    ],
                  },
                })
                .then(function (e) {
                  i.end();
                  var o = (e = e.data.resultList[0]).resultCode;
                  if (((e = e.resultInfo), 0 !== o))
                    return In({ code: o, message: e });
                  Ae.i(''.concat(t, ' ok. userID:').concat(n));
                })
                .catch(function (e) {
                  return (
                    i.setError(e).end(),
                    Ae.w(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'setApplicationRead',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('setApplicationRead'),
              n = new ei('setApplicationRead');
            return this._snsM
              .req({
                P: Gn.REPORT_FD_APPLICATION,
                data: {
                  fromAccount: this._snsM.getMyUserID(),
                  latestTimeStamp: Pt(Se() / 1e3, 0),
                },
              })
              .then(function (i) {
                n.end(), Ae.i(''.concat(t, ' ok')), (e._unreadCount = 0);
              })
              .catch(function (e) {
                return (
                  n.setError(e).end(),
                  Ae.w(''.concat(t, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: 'reset',
          value: function () {
            (this._maxLimited = 100),
              (this._currentSeq = 0),
              (this._unreadCount = 0),
              this._map.clear();
          },
        },
      ]),
      Vs),
    Qa =
      (r(qs, [
        {
          key: 'validate',
          value: function (e) {
            var t,
              n = !0,
              i = '';
            if (Ve(e)) return { valid: !1, tips: 'empty options' };
            if (e.profileCustomField)
              for (
                var o = e.profileCustomField.length, r = null, a = 0;
                a < o;
                a++
              ) {
                if (
                  ((r = e.profileCustomField[a]),
                  !ct(r.key) || -1 === r.key.indexOf('Tag_Profile_Custom'))
                )
                  return {
                    valid: !1,
                    tips: 'The prefix of keys of the custom profile key-value pairs (which is profileCustomField) must be Tag_Profile_Custom',
                  };
                if (!ct(r.value))
                  return {
                    valid: !1,
                    tips: 'The type of values of the custom profile key-value pairs (which is profileCustomField) must be String',
                  };
              }
            for (t in e)
              if (Object.prototype.hasOwnProperty.call(e, t)) {
                if ('profileCustomField' === t) continue;
                if (Ve(e[t]) && !ct(e[t]) && !Ke(e[t])) {
                  (i = 'key:' + t + ', invalid value:' + e[t]), (n = !1);
                  continue;
                }
                switch (t) {
                  case 'nick':
                    ct(e[t]) || (n = !(i = 'nick must be a string')),
                      500 < et(e[t]) &&
                        ((i = 'nick name limited: must less than or equal to '
                          .concat(500, ' bytes, current size: ')
                          .concat(et(e[t]), ' bytes')),
                        (n = !1));
                    break;
                  case 'gender':
                    ot(Pe, e.gender) ||
                      ((i = 'key:gender, invalid value:' + e.gender), (n = !1));
                    break;
                  case 'birthday':
                    Ke(e.birthday) || (n = !(i = 'birthday must be a number'));
                    break;
                  case 'location':
                    ct(e.location) || (n = !(i = 'location must be a string'));
                    break;
                  case 'selfSignature':
                    ct(e.selfSignature) ||
                      (n = !(i = 'selfSignature must be a string'));
                    break;
                  case 'allowType':
                    ot(Ue, e.allowType) ||
                      ((i = 'key:allowType, invalid value:' + e.allowType),
                      (n = !1));
                    break;
                  case 'language':
                    Ke(e.language) || (n = !(i = 'language must be a number'));
                    break;
                  case 'avatar':
                    ct(e.avatar) || (n = !(i = 'avatar must be a string'));
                    break;
                  case 'messageSettings':
                    0 !== e.messageSettings &&
                      1 !== e.messageSettings &&
                      (n = !(i = 'messageSettings must be 0 or 1'));
                    break;
                  case 'adminForbidType':
                    ot(we, e.adminForbidType) ||
                      ((i =
                        'key:adminForbidType, invalid value:' +
                        e.adminForbidType),
                      (n = !1));
                    break;
                  case 'level':
                    Ke(e.level) || (n = !(i = 'level must be a number'));
                    break;
                  case 'role':
                    Ke(e.role) || (n = !(i = 'role must be a number'));
                    break;
                  default:
                    (i = 'unknown key:' + t + '  ' + e[t]), (n = !1);
                }
              }
            return { valid: n, tips: i };
          },
        },
        {
          key: 'update',
          value: function (e) {
            var t,
              n = '',
              i = [];
            this.friendCustomField.forEach(function (e) {
              i.push(e.key);
            });
            for (var o = 0, r = e.length; o < r; o++)
              if (
                ((n = e[o].tag),
                (t = e[o].value),
                -1 < n.indexOf('Tag_SNS_Custom'))
              )
                -1 < i.indexOf(n)
                  ? this.friendCustomField.forEach(function (e) {
                      e.key === n && (e.value = t);
                    })
                  : this.friendCustomField.push({ key: n, value: t });
              else if (-1 < n.indexOf('Tag_Profile_Custom')) {
                var a = !1;
                this.profile.profileCustomField.forEach(function (e) {
                  e.key === n && ((e.value = t), (a = !0));
                }),
                  a ||
                    this.profile.profileCustomField.push({ key: n, value: t });
              } else
                switch (n) {
                  case be.NICK:
                    this.profile.nick = t;
                    break;
                  case be.GENDER:
                    this.profile.gender = t;
                    break;
                  case be.BIRTHDAY:
                    this.profile.birthday = t;
                    break;
                  case be.LOCATION:
                    this.profile.location = t;
                    break;
                  case be.SELFSIGNATURE:
                    this.profile.selfSignature = t;
                    break;
                  case be.ALLOWTYPE:
                    this.profile.allowType = t;
                    break;
                  case be.LANGUAGE:
                    this.profile.language = t;
                    break;
                  case be.AVATAR:
                    this.profile.avatar = t;
                    break;
                  case be.MESSAGESETTINGS:
                    this.profile.messageSettings = t;
                    break;
                  case be.ADMINFORBIDTYPE:
                    this.profile.adminForbidType = t;
                    break;
                  case be.LEVEL:
                    this.profile.level = t;
                    break;
                  case be.ROLE:
                    this.profile.role = t;
                    break;
                  case Ne.REMARK:
                    this.remark = t;
                    break;
                  case Ne.ADDTIME:
                    this.addTime = t;
                    break;
                  case Ne.GROUP:
                    this.groupList = JSON.parse(JSON.stringify(t));
                    break;
                  case Ne.ADDSOURCE:
                    this.source = t;
                    break;
                  case Ne.ADDWORDING:
                    break;
                  default:
                    Ae.d('snsProfileItem unkown tag->', e[o].tag);
                }
            (this.timestamp = Date.now()), (i.length = 0);
          },
        },
        {
          key: 'updateProfile',
          value: function (e) {
            (this.profile = JSON.parse(JSON.stringify(e))),
              (this.timestamp = Date.now());
          },
        },
        {
          key: 'addToGroupList',
          value: function (e) {
            -1 === this.groupList.indexOf(e) &&
              (this.groupList.push(e), (this.count = this.groupList.length));
          },
        },
        {
          key: 'removeFromGroupList',
          value: function (e) {
            -1 < (e = this.groupList.indexOf(e)) &&
              (this.groupList.splice(e, 1),
              (this.count = this.groupList.length));
          },
        },
      ]),
      qs),
    es =
      (r(Fs, [
        {
          key: 'getLocalFriendList',
          value: function () {
            return v(this._map.values());
          },
        },
        {
          key: 'getFriendRemark',
          value: function (e) {
            return this._map.has(e) ? this._map.get(e).remark : '';
          },
        },
        {
          key: 'onFriendProfileModified',
          value: function (e) {
            var t,
              n = this;
            Ve((e = e.dataList)) ||
              ((t = this._snsM.get(11)),
              e.forEach(function (e) {
                var i,
                  o = e.userID;
                (e = e.profileList),
                  n.isMyFriend(o) &&
                    (Ae.l(
                      ''
                        .concat(
                          n._n,
                          '.onFriendProfileModified. friend account:'
                        )
                        .concat(o, ', profileList:')
                        .concat(JSON.stringify(e))
                    ),
                    (i = n._map.get(o)).update(e),
                    t.modifyMessageSentByPeer({
                      conversationID: ''.concat(D.CONV_C2C).concat(o),
                      latestNick: i.profile.nick,
                      latestAvatar: i.profile.avatar,
                    }));
              }),
              this._onFriendListUpdated());
          },
        },
        {
          key: 'onFriendAdded',
          value: function (e) {
            var t = this;
            0 !== e.length &&
              (Ae.l(''.concat(this._n, '.onFriendAdded userIDList:').concat(e)),
              e.forEach(function (e) {
                t._map.set(e, new Qa(e));
              }),
              this.getFriendProfile({ userIDList: e }).then(function (n) {
                e.forEach(function (e) {
                  var n = t._map.get(e);
                  0 < n.groupList.length &&
                    t._snsM.updateWhenFriendAdded({
                      nameList: n.groupList,
                      userID: e,
                    });
                }),
                  t._onFriendListUpdated();
              }));
          },
        },
        {
          key: 'onFriendDeleted',
          value: function (e) {
            var t = this;
            0 !== e.length &&
              (Ae.l(
                ''.concat(this._n, '.onFriendDeleted userIDList:').concat(e)
              ),
              e.forEach(function (e) {
                var n = t._map.get(e);
                0 < n.groupList.length &&
                  t._snsM.updateWhenFriendDeleted({
                    nameList: n.groupList,
                    userID: e,
                  }),
                  t._map.delete(e);
              }),
              this._onFriendListUpdated());
          },
        },
        {
          key: '_onFriendListUpdated',
          value: function () {
            this._snsM.emitOEvt(E.FRIEND_LIST_UPDATED),
              this._snsM.get(11).checkAndPatchRemark();
          },
        },
        {
          key: 'getFriendProfile',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('getFriendProfile'),
              i = ((e = e.userIDList), []),
              o = [],
              r = [];
            if (
              (e.forEach(function (e) {
                var n;
                t._map.has(e)
                  ? ((n = t._map.get(e)),
                    Date.now() - n.timestamp < t._expirationTime
                      ? o.push(n)
                      : r.push(e))
                  : i.push({
                      userID: e,
                      code: wn.NOT_MY_FRIEND,
                      message: t._snsM.getErrMsg(wn.NOT_MY_FRIEND),
                    });
              }),
              0 === r.length)
            )
              return (
                Ae.i(''.concat(n, ' newUserIDList is empty')),
                yn({ friendList: o, failureUserIDList: i })
              );
            var a = new ei('getFriendProfile');
            return (
              a.setMessage('userIDList:'.concat(r)),
              Ae.i(''.concat(n, ' userIDList:').concat(r)),
              this._snsM
                .req({
                  P: Gn.GET_FD_PROFILE,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    userIDList: r,
                  },
                })
                .then(function (e) {
                  return (
                    a.end(),
                    Ae.i(''.concat(n, ' ok')),
                    e.data.resultList.forEach(function (e) {
                      var n,
                        r = e.to,
                        a = e.resultCode,
                        s = e.resultInfo;
                      (e = e.tagValueList),
                        ut(a) || 0 === a
                          ? (t._map.has(r)
                              ? (n = t._map.get(r)).update(e)
                              : ((n = new Qa(r, e)), t._map.set(r, n)),
                            o.push(n))
                          : i.push({ userID: r, code: a, message: s });
                    }),
                    mn({ friendList: o, failureUserIDList: i })
                  );
                })
                .catch(function (e) {
                  return (
                    a.setError(e).end(),
                    Ae.w(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'isMyFriend',
          value: function (e) {
            return this._map.has(e);
          },
        },
        {
          key: 'pagingGetFriendList',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('getFriendList'),
              n = new ei('getFriendList'),
              i = Date.now();
            this._snsM
              .req({
                P: Gn.GET_FD_LIST,
                data: {
                  fromAccount: this._snsM.getMyUserID(),
                  startIndex: this._startIdx,
                  standardSequence: this._standardSeq,
                  customSequence: this._customSeq,
                },
              })
              .then(function (o) {
                var r = (o = o.data).friendCount,
                  a = o.resultList,
                  s = o.nextStartIndex,
                  c = o.standardSequence,
                  u = o.customSequence;
                (o = o.completeFlag),
                  (e._startIdx = s),
                  (e._standardSeq = c),
                  (e._customSeq = u),
                  (r =
                    'friendCount:'
                      .concat(r, ' nextStartIndex:')
                      .concat(s, ' standardSequence:')
                      .concat(c, ' ') +
                    'customSequence:'
                      .concat(u, ' completeFlag:')
                      .concat(o, ' cost:')
                      .concat(Kt(i))),
                  n.setMessage(r).end(),
                  Ae.i(''.concat(t, ' ok.'), r),
                  Ve(a) ||
                    a.forEach(function (t) {
                      var n = t.to;
                      (t = t.tagValueList), e._map.set(n, new Qa(n, t));
                    }),
                  0 === o
                    ? e.pagingGetFriendList()
                    : (e._snsM.emitOEvt(E.FRIEND_LIST_UPDATED),
                      e._pagingGetFriendProfile());
              })
              .catch(function (e) {
                return (
                  n.setError(e).end(),
                  Ae.w(''.concat(t, ' failed. error:'), e),
                  In(e)
                );
              });
          },
        },
        {
          key: '_pagingGetFriendProfile',
          value: function () {
            var e = this,
              t = v(this._map.keys()),
              n = this._snsM.get(4),
              i = t.length,
              o = i <= 100 ? 1 : Math.ceil(i / 100);
            Ae.l(
              ''
                .concat(this._n, '._pagingGetFriendProfile friendCount:')
                .concat(i, ' pageCount:')
                .concat(o)
            );
            for (var r = 0; r < o; r++)
              n.getUserProfile({
                userIDList: t.slice(100 * r, 100 * (r + 1)),
              }).then(function (t) {
                t.data.forEach(function (t) {
                  var n = e._map.get(t.userID);
                  n && n.updateProfile(t);
                }),
                  e._onFriendListUpdated();
              });
          },
        },
        {
          key: 'addFriend',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('addFriend');
            if (this._map.has(e.to)) return In({ code: wn.ALREADY_MY_FRIEND });
            if (e.wording && !1 === this._snsM.filterProfanity('wording', e))
              return In({ code: wn.PROFANITY_FOUND });
            var i = e.to,
              o = e.source,
              r = e.type,
              a = e.wording,
              s = e.remark,
              c = ((e = e.groupName), r),
              u =
                ((c &&
                  (c === D.SNS_ADD_TYPE_SINGLE || c === D.SNS_ADD_TYPE_BOTH)) ||
                  (c = D.SNS_ADD_TYPE_BOTH),
                new ei('addFriend'));
            return (
              u.setMessage(
                'to:'.concat(i, ' source:').concat(o, ' type:').concat(c)
              ),
              this._snsM
                .req({
                  P: Gn.ADD_FD,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    addFriendItem: [
                      { to: i, source: o, wording: a, remark: s, groupName: e },
                    ],
                    type: c,
                  },
                })
                .then(function (e) {
                  e = e.data.resultList;
                  var i = (u
                      .setMoreMessage('resultList:'.concat(JSON.stringify(e)))
                      .end(),
                    (e = e[0])).to,
                    o = e.resultCode;
                  return (
                    (e = e.resultInfo),
                    Ae.i(
                      ''
                        .concat(n, ' ok. to:')
                        .concat(i, ' type:')
                        .concat(c, ' code:')
                        .concat(o)
                    ),
                    ut(o) || 0 === o
                      ? mn({ userID: i, code: 0 })
                      : 30539 === o
                        ? mn({
                            userID: i,
                            code: o,
                            message: t._snsM.getErrMsg(o),
                          })
                        : In({
                            userID: i,
                            code: o,
                            message: t._snsM.getErrMsg(o) || e,
                          })
                  );
                })
                .catch(function (e) {
                  return (
                    u.setError(e).end(),
                    Ae.w(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'deleteFriend',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('deleteFriend'),
              i = e.userIDList,
              o =
                ((e = e.type),
                1e3 < i.length &&
                  (Ae.w(''.concat(n, ' ').concat(Bt(1e3))), (i.length = 1e3)),
                []),
              r = [],
              a = [];
            if (
              (i.forEach(function (e) {
                t._map.has(e)
                  ? a.push(e)
                  : o.push({
                      userID: e,
                      code: wn.NOT_MY_FRIEND,
                      message: t._snsM.getErrMsg(wn.NOT_MY_FRIEND),
                    });
              }),
              0 === a.length)
            )
              return yn({ successUserIDList: r, failureUserIDList: o });
            var s =
              (((i = e) &&
                (i === D.SNS_DELETE_TYPE_SINGLE ||
                  i === D.SNS_DELETE_TYPE_BOTH)) ||
                (i = D.SNS_DELETE_TYPE_BOTH),
              new ei('deleteFriend'));
            return (
              s.setMessage('userIDList:'.concat(a, ' type:').concat(i)),
              this._snsM
                .req({
                  P: Gn.DEL_FD,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    userIDList: a,
                    type: i,
                  },
                })
                .then(function (e) {
                  return (
                    s.end(),
                    Ae.i(''.concat(n, ' ok')),
                    Ve((e = e.data.resultList)) ||
                      e.forEach(function (e) {
                        var t = e.to,
                          n = e.resultCode;
                        (e = e.resultInfo),
                          ut(n) || 0 === n
                            ? r.push({ userID: t })
                            : o.push({ userID: t, code: n, message: e });
                      }),
                    mn({ successUserIDList: r, failureUserIDList: o })
                  );
                })
                .catch(function (e) {
                  return (
                    s.setError(e).end(), Ae.w(''.concat(n, ' error:'), e), In(e)
                  );
                })
            );
          },
        },
        {
          key: 'updateFriend',
          value: function (e) {
            var t = this,
              n = e.userID,
              i = e.remark,
              o = e.friendCustomField;
            if (!this._map.has(n)) return In({ code: wn.NOT_MY_FRIEND });
            var r = ''.concat(this._n, '.').concat('updateFriend'),
              a = new ei('updateFriend'),
              s =
                (a.setMessage(
                  'userID:'
                    .concat(n, ' remark:')
                    .concat(i, ' friendCustomField:')
                    .concat(o)
                ),
                []);
            return (
              ut(i) || s.push({ tag: Ne.REMARK, value: i }),
              $e(o) &&
                0 < o.length &&
                o.forEach(function (e) {
                  s.push({ tag: e.key, value: e.value });
                }),
              this._snsM
                .req({
                  P: Gn.UPDATE_FD,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    updateItem: [{ to: n, snsItem: s }],
                  },
                })
                .then(function (e) {
                  a.end(), Ae.i(''.concat(r, ' ok'));
                  var n = (e = e.data.resultList[0]).to,
                    s = e.resultCode;
                  return (
                    (e = e.resultInfo),
                    ut(s) || 0 === s
                      ? ((n = t._map.get(n)) &&
                          (ut(i) || (n.remark = i),
                          $e(o) && 0 < o.length && vt(n.friendCustomField, o),
                          t._onFriendListUpdated()),
                        mn(n))
                      : In({ code: s, message: e })
                  );
                })
                .catch(function (e) {
                  return (
                    a.setError(e).end(),
                    Ae.w(''.concat(r, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'checkFriend',
          value: function (e) {
            var t = ''.concat(this._n, '.').concat('checkFriend'),
              n = e.userIDList,
              i = e.type,
              o =
                ((i &&
                  (i === D.SNS_CHECK_TYPE_SINGLE ||
                    i === D.SNS_CHECK_TYPE_BOTH)) ||
                  (i = D.SNS_CHECK_TYPE_BOTH),
                new ei('checkFriend'));
            return (
              o.setMessage('userIDList:'.concat(n, ' type:').concat(i)),
              this._snsM
                .req({
                  P: Gn.CHECK_FD,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    userIDList: n,
                    type: i,
                  },
                })
                .then(function (e) {
                  o.end(),
                    Ae.i(
                      ''
                        .concat(t, ' ok. userIDList:')
                        .concat(n, ' type:')
                        .concat(i)
                    );
                  var r = [],
                    a = [];
                  return (
                    $e((e = e.data.resultList)) &&
                      e.forEach(function (e) {
                        var t = e.to,
                          n = e.relation,
                          i = e.resultCode;
                        (e = e.resultInfo),
                          ut(i) || 0 === i
                            ? r.push({ userID: t, code: 0, relation: n })
                            : a.push({ userID: t, code: i, message: e });
                      }),
                    mn({ successUserIDList: r, failureUserIDList: a })
                  );
                })
                .catch(function (e) {
                  return (
                    o.setError(e).end(),
                    Ae.w(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'onAddedToFriendGroup',
          value: function (e) {
            var t = this,
              n = e.name;
            (e = e.userIDList),
              Ae.l(
                ''
                  .concat(this._n, '.onAddedToFriendGroup groupName:')
                  .concat(n, ' userIDList:')
                  .concat(e)
              ),
              n &&
                !Ve(e) &&
                e.forEach(function (e) {
                  t._map.has(e) && t._map.get(e).addToGroupList(n);
                });
          },
        },
        {
          key: 'onRemovedFromFriendGroup',
          value: function (e) {
            var t = this,
              n = e.name;
            (e = e.userIDList),
              Ae.l(
                ''
                  .concat(this._n, '.onRemovedFromFriendGroup groupName:')
                  .concat(n, ' userIDList:')
                  .concat(e)
              ),
              n &&
                !Ve(e) &&
                e.forEach(function (e) {
                  t._map.has(e) && t._map.get(e).removeFromGroupList(n);
                });
          },
        },
        {
          key: 'reset',
          value: function () {
            this._map.clear(),
              (this._startIdx = 0),
              (this._standardSeq = 0),
              (this._customSeq = 0);
          },
        },
      ]),
      Fs),
    ts =
      (r(xs, [
        {
          key: 'addToUserIDList',
          value: function (e) {
            -1 === this.userIDList.indexOf(e) &&
              (this.userIDList.push(e), (this.count = this.userIDList.length));
          },
        },
        {
          key: 'removeFromUserIDList',
          value: function (e) {
            -1 < (e = this.userIDList.indexOf(e)) &&
              (this.userIDList.splice(e, 1),
              (this.count = this.userIDList.length));
          },
        },
      ]),
      xs),
    ns =
      (r(Gs, [
        {
          key: 'getLocalGroupList',
          value: function () {
            return v(this._map.values());
          },
        },
        {
          key: '_onGroupListUpdated',
          value: function () {
            var e = v(this._map.values());
            this._snsM.emitOEvt(E.FRIEND_GROUP_LIST_UPDATED, e);
          },
        },
        {
          key: 'getGroupList',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('getGroupList'),
              n = new ei('getGroupList');
            return this._snsM
              .req({
                P: Gn.GET_FD_GRP_LIST,
                data: { fromAccount: this._snsM.getMyUserID() },
              })
              .then(function (i) {
                n.end(),
                  Ve((i = i.data.resultList))
                    ? Ae.i(''.concat(t, ' ok. count:0'))
                    : (Ae.i(''.concat(t, ' ok. count:').concat(i.length)),
                      e._map.clear(),
                      i.forEach(function (t) {
                        var n = new ts(t);
                        e._map.set(t.name, n);
                      }),
                      e._onGroupListUpdated());
              })
              .catch(function (e) {
                return (
                  n.setError(e).end(), Ae.w(''.concat(t, ' error:'), e), In(e)
                );
              });
          },
        },
        {
          key: 'createGroup',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('createGroup'),
              i = e.name;
            if (((e = e.userIDList), this._map.has(i)))
              return In({ code: wn.FRIEND_GRP_EXISTED });
            var o = 'name:'.concat(i, ' userIDList:').concat(e),
              r = new ei('createGroup');
            return (
              r.setMessage(o),
              this._snsM
                .req({
                  P: Gn.CREATE_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    groupName: [i],
                    userIDList: $e(e) ? e : void 0,
                  },
                })
                .then(function (e) {
                  r.end(),
                    Ae.l(''.concat(n, ' ok. ').concat(o)),
                    (e = e.data.resultList);
                  var a = [],
                    s = [];
                  return (
                    e &&
                      e.forEach(function (e) {
                        var t = e.to,
                          n = e.resultCode,
                          i = e.resultInfo;
                        ut(n) || 0 === n
                          ? a.push(t)
                          : ((t = { userID: e.to, code: n, message: i }),
                            s.push(t));
                      }),
                    (e = new ts({ name: i, userIDList: a })),
                    t._map.set(i, e),
                    t._snsM.onAddedToFriendGroup({ name: i, userIDList: a }),
                    t._onGroupListUpdated(),
                    mn({ friendGroup: e, failureUserIDList: s })
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.w(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'deleteGroup',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('deleteGroup'),
              i = e.name;
            if (!this._map.has(i)) return this._onGroupNotExist();
            var o = 'name:'.concat(i),
              r = new ei('deleteGroup');
            return (
              r.setMessage(o),
              this._snsM
                .req({
                  P: Gn.DEL_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    nameList: [i],
                  },
                })
                .then(function (e) {
                  r.end(), Ae.l(''.concat(n, ' ok. ').concat(o));
                  var a = t._map.get(i);
                  return (
                    a &&
                      (t._snsM.onRemovedFromFriendGroup({
                        name: i,
                        userIDList: a.userIDList,
                      }),
                      t._map.delete(i),
                      (a.userIDList.length = 0)),
                    t._onGroupListUpdated(),
                    mn(a)
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.w(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'renameGroup',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('renameGroup'),
              i = e.oldName,
              o = e.newName;
            if (!this._map.has(i)) return this._onGroupNotExist();
            var r = 'oldName:'.concat(i, ' newName:').concat(o),
              a = new ei('renameGroup');
            return (
              a.setMessage(r),
              this._snsM
                .req({
                  P: Gn.UPDATE_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    oldName: i,
                    newName: o,
                  },
                })
                .then(function () {
                  var e;
                  return (
                    a.end(),
                    Ae.l(''.concat(n, ' ok. ').concat(r)),
                    t._map.has(i)
                      ? (((e = t._map.get(i)).name = o),
                        t._map.delete(i),
                        t._map.set(o, e),
                        t._snsM.onRemovedFromFriendGroup({
                          name: i,
                          userIDList: e.userIDList,
                        }),
                        t._snsM.onAddedToFriendGroup({
                          name: o,
                          userIDList: e.userIDList,
                        }),
                        t._onGroupListUpdated(),
                        mn(e))
                      : mn()
                  );
                })
                .catch(function (e) {
                  return (
                    a.setError(e).end(),
                    Ae.w(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'addToGroup',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('addToGroup'),
              i = e.name;
            if (((e = e.userIDList), !this._map.has(i)))
              return this._onGroupNotExist();
            var o = 'name:'.concat(i, ' userIDList:').concat(e),
              r = new ei('addToGroup');
            return (
              r.setMessage(o),
              this._snsM
                .req({
                  P: Gn.UPDATE_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    oldName: i,
                    updateGroupItem: e
                      .filter(function (e) {
                        return t._snsM.isMyFriend(e);
                      })
                      .map(function (e) {
                        return { to: e, updateType: 'Update_Type_Add' };
                      }),
                  },
                })
                .then(function (e) {
                  return (
                    r.end(),
                    Ae.l(''.concat(n, ' ok. ').concat(o)),
                    t._onGroupUpdated(i, e)
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.w(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'removeFromGroup',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('removeFromGroup'),
              i = e.name;
            if (((e = e.userIDList), !this._map.has(i)))
              return this._onGroupNotExist();
            var o = 'name:'.concat(i, ' userIDList:').concat(e),
              r = new ei('removeFromGroup');
            return (
              r.setMessage(o),
              this._snsM
                .req({
                  P: Gn.UPDATE_FD_GRP,
                  data: {
                    fromAccount: this._snsM.getMyUserID(),
                    oldName: i,
                    updateGroupItem: e
                      .filter(function (e) {
                        return t._snsM.isMyFriend(e);
                      })
                      .map(function (e) {
                        return { to: e, updateType: 'Update_Type_Delete' };
                      }),
                  },
                })
                .then(function (e) {
                  return (
                    r.end(),
                    Ae.l(''.concat(n, ' ok. ').concat(o)),
                    t._onGroupUpdated(i, e)
                  );
                })
                .catch(function (e) {
                  return (
                    r.setError(e).end(),
                    Ae.w(''.concat(n, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_onGroupUpdated',
          value: function (e, t) {
            t = t.data.resultList;
            var n = this._map.get(e),
              i = [],
              o = [],
              r = [];
            return (
              $e(t) &&
                t.forEach(function (e) {
                  var t = e.to,
                    a = e.resultCode,
                    s = e.resultInfo,
                    c = e.type;
                  0 === a
                    ? 'Update_Type_Add' === c
                      ? n && (n.addToUserIDList(t), o.push(t))
                      : 'Update_Type_Delete' === c &&
                        n &&
                        (n.removeFromUserIDList(t), r.push(t))
                    : i.push({ to: e.to, code: a, message: s });
                }),
              Ae.l(
                ''
                  .concat(this._n, '._onGroupUpdated name:')
                  .concat(e, ' userIDList:')
                  .concat(n.userIDList)
              ),
              0 < o.length &&
                this._snsM.onAddedToFriendGroup({ name: e, userIDList: o }),
              0 < r.length &&
                this._snsM.onRemovedFromFriendGroup({ name: e, userIDList: r }),
              mn({ friendGroup: n, failureUserIDList: i })
            );
          },
        },
        {
          key: 'updateWhenFriendAdded',
          value: function (e) {
            var t = this,
              n = e.nameList,
              i = e.userID;
            Ae.l(
              ''
                .concat(this._n, '.updateWhenFriendAdded userID:')
                .concat(i, ' nameList:')
                .concat(n)
            ),
              Ve(n) ||
                n.forEach(function (e) {
                  t._map.has(e) && t._map.get(e).addToUserIDList(i);
                });
          },
        },
        {
          key: 'updateWhenFriendDeleted',
          value: function (e) {
            var t = this,
              n = e.nameList,
              i = e.userID;
            Ae.l(
              ''
                .concat(this._n, '.updateWhenFriendDeleted userID:')
                .concat(i, ' nameList:')
                .concat(n)
            ),
              Ve(n) ||
                n.forEach(function (e) {
                  t._map.has(e) && t._map.get(e).removeFromUserIDList(i);
                });
          },
        },
        {
          key: '_onGroupNotExist',
          value: function (e) {
            return In({ code: wn.FRIEND_GRP_NOT_EXIST });
          },
        },
        {
          key: 'reset',
          value: function () {
            this._map.clear();
          },
        },
      ]),
      Gs),
    is =
      (s(Us, An),
      (xa = g(Us)),
      r(Us, [
        {
          key: 'onContextUpdated',
          value: function (e) {
            this._friendHandler.pagingGetFriendList(),
              this._friendGroupHandler.getGroupList(),
              this._friendApplicationHandler.getApplicationList();
          },
        },
        {
          key: 'onRelationChainModified',
          value: function (e) {
            var t,
              n,
              i,
              o,
              r,
              a,
              s = this;
            Ve((e = e.dataList)) ||
              ((t = []),
              (n = []),
              (i = []),
              (r = !(o = [])),
              (a = ''),
              e.forEach(function (e) {
                var c;
                (3 !== e.pushType && 4 !== e.pushType) ||
                  !e.from ||
                  (a = e.from),
                  e.friendAddAccount &&
                    (t.push.apply(t, v(e.friendAddAccount)),
                    o.push.apply(o, v(e.friendAddAccount))),
                  e.friendDelAccount && n.push.apply(n, v(e.friendDelAccount)),
                  e.friendApplicationAdded &&
                    i.push.apply(i, v(e.friendApplicationAdded)),
                  e.friendApplicationDeletedUserIDList &&
                    o.push.apply(o, v(e.friendApplicationDeletedUserIDList)),
                  e.reportTime && 7 === e.pushType && (r = !0),
                  e.friendUpInfo &&
                    ((c = { dataList: [] }),
                    e.friendUpInfo.forEach(function (e) {
                      c.dataList.push({
                        userID: e.friendAccount,
                        profileList: v(e.sns),
                      });
                    }),
                    s.onFriendProfileModified(c));
              }),
              r && this._friendApplicationHandler.onApplicationRead(),
              this._friendApplicationHandler.onApplicationAdded(i, a),
              this._friendApplicationHandler.onApplicationDeleted(o),
              this._friendHandler.onFriendAdded(t),
              this._friendHandler.onFriendDeleted(n));
          },
        },
        {
          key: 'isMyFriend',
          value: function (e) {
            return this._friendHandler.isMyFriend(e);
          },
        },
        {
          key: 'filterProfanity',
          value: function (e, t) {
            if (!(i = this.get(29))) return !0;
            var n = (i = i.filterText(t[e], 'sns')).isAllowedToSend,
              i = i.modifiedText;
            return !0 === n && ((t[e] = i), !0);
          },
        },
        {
          key: 'onFriendProfileModified',
          value: function (e) {
            this._friendHandler.onFriendProfileModified(e);
          },
        },
        {
          key: 'getLocalFriendList',
          value: function () {
            var e =
                !(0 < arguments.length && void 0 !== arguments[0]) ||
                arguments[0],
              t = this._friendHandler.getLocalFriendList();
            return e ? yn(t) : t;
          },
        },
        {
          key: 'getFriendRemark',
          value: function (e) {
            return this._friendHandler.getFriendRemark(e);
          },
        },
        {
          key: 'getFriendList',
          value: function () {
            return this._friendHandler.pagingGetFriendList();
          },
        },
        {
          key: 'addFriend',
          value: function (e) {
            return this._friendHandler.addFriend(e);
          },
        },
        {
          key: 'deleteFriend',
          value: function (e) {
            return this._friendHandler.deleteFriend(e);
          },
        },
        {
          key: 'checkFriend',
          value: function (e) {
            return this._friendHandler.checkFriend(e);
          },
        },
        {
          key: 'getFriendProfile',
          value: function (e) {
            return this._friendHandler.getFriendProfile(e);
          },
        },
        {
          key: 'updateFriend',
          value: function (e) {
            return this._friendHandler.updateFriend(e);
          },
        },
        {
          key: 'onAddedToFriendGroup',
          value: function (e) {
            this._friendHandler.onAddedToFriendGroup(e);
          },
        },
        {
          key: 'onRemovedFromFriendGroup',
          value: function (e) {
            this._friendHandler.onRemovedFromFriendGroup(e);
          },
        },
        {
          key: 'getLocalFriendApplicationList',
          value: function () {
            return yn(this._friendApplicationHandler.getLocalApplicationList());
          },
        },
        {
          key: 'deleteFriendApplication',
          value: function (e) {
            return this._friendApplicationHandler.deleteApplication(e);
          },
        },
        {
          key: 'refuseFriendApplication',
          value: function (e) {
            return this._friendApplicationHandler.refuseApplication(e);
          },
        },
        {
          key: 'acceptFriendApplication',
          value: function (e) {
            return this._friendApplicationHandler.acceptApplication(e);
          },
        },
        {
          key: 'setFriendApplicationRead',
          value: function (e) {
            return this._friendApplicationHandler.setApplicationRead(e);
          },
        },
        {
          key: 'getLocalFriendGroupList',
          value: function () {
            return yn(this._friendGroupHandler.getLocalGroupList());
          },
        },
        {
          key: 'createFriendGroup',
          value: function (e) {
            return this._friendGroupHandler.createGroup(e);
          },
        },
        {
          key: 'deleteFriendGroup',
          value: function (e) {
            return this._friendGroupHandler.deleteGroup(e);
          },
        },
        {
          key: 'addToFriendGroup',
          value: function (e) {
            return this._friendGroupHandler.addToGroup(e);
          },
        },
        {
          key: 'removeFromFriendGroup',
          value: function (e) {
            return this._friendGroupHandler.removeFromGroup(e);
          },
        },
        {
          key: 'renameFriendGroup',
          value: function (e) {
            return this._friendGroupHandler.renameGroup(e);
          },
        },
        {
          key: 'updateWhenFriendAdded',
          value: function (e) {
            this._friendGroupHandler.updateWhenFriendAdded(e);
          },
        },
        {
          key: 'updateWhenFriendDeleted',
          value: function (e) {
            this._friendGroupHandler.updateWhenFriendDeleted(e);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._friendHandler.reset(),
              this._friendGroupHandler.reset(),
              this._friendApplicationHandler.reset();
          },
        },
      ]),
      Us),
    os =
      (s(ws, An),
      (Ga = g(ws)),
      r(ws, [
        {
          key: 'isWorkerEnabled',
          value: function () {
            return this._isWorkerEnabled && he;
          },
        },
        {
          key: 'startWorkerTimer',
          value: function () {
            Ae.l(''.concat(this._n, '.startWorkerTimer')),
              this._workerTimer && this._workerTimer.postMessage('start');
          },
        },
        {
          key: 'stopWorkerTimer',
          value: function () {
            Ae.l(''.concat(this._n, '.stopWorkerTimer')),
              this._workerTimer && this._workerTimer.postMessage('stop');
          },
        },
        {
          key: '_init',
          value: function () {
            var e, t;
            he &&
              ((e = URL.createObjectURL(
                new Blob(
                  [
                    'let interval = -1;onmessage = function(event) {  if (event.data === "start") {    if (interval > 0) {      clearInterval(interval);    }    interval = setInterval(() => {      postMessage("");    }, 1000);    postMessage(interval);  } else if (event.data === "stop") {    clearInterval(interval);    interval = -1;  }};',
                  ],
                  { type: 'application/javascript; charset=utf-8' }
                )
              )),
              (this._workerTimer = new Worker(e)),
              ((t = this)._workerTimer.onmessage = function (e) {
                e.data
                  ? ((t._timerID = e.data),
                    Ae.l(''.concat(t._n, '._init seed:').concat(t._timerID)))
                  : t._m.onCheckTimer();
              }));
          },
        },
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this.getCloudConfig('enable_worker');
            Ae.l(''.concat(this._n, '._onCloudConfig enableWorker:').concat(e)),
              ut(e) || '1' === e
                ? !this._isWorkerEnabled &&
                  he &&
                  ((this._isWorkerEnabled = !0),
                  this.startWorkerTimer(),
                  this._m.onWorkerTimerEnabled())
                : this._isWorkerEnabled &&
                  he &&
                  ((this._isWorkerEnabled = !1),
                  this.stopWorkerTimer(),
                  this._m.onWorkerTimerDisabled());
          },
        },
        {
          key: 'terminate',
          value: function () {
            Ae.l(''.concat(this._n, '.terminate')),
              this._workerTimer &&
                (this._workerTimer.terminate(),
                (this._workerTimer = null),
                (this._timerID = -1));
          },
        },
        {
          key: 'getTimerID',
          value: function () {
            return this._timerID;
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset'));
          },
        },
      ]),
      ws),
    rs =
      (r(Ps, [
        {
          key: 'isValidPurchaseBits',
          value: function (e) {
            return (
              e &&
              'string' == typeof e &&
              1 <= e.length &&
              e.length <= 64 &&
              /[01]{1,64}/.test(e)
            );
          },
        },
        {
          key: 'parsePurchaseBits',
          value: function (e) {
            if (this.isValidPurchaseBits(e)) {
              this._featureMap.clear();
              for (var t, n = e.length - 1, i = 0; 0 <= n; n--, i++)
                (t = (
                  i < 32
                    ? new R(0, Math.pow(2, i))
                    : new R(Math.pow(2, i - 32), 0)
                ).toString()),
                  '1' === e[n]
                    ? this._featureMap.set(t, !0)
                    : this._featureMap.set(t, !1);
            } else
              Ae.w(
                ''
                  .concat(this._n, '.parsePurchaseBits invalid purchasebits:')
                  .concat(e)
              );
          },
        },
        {
          key: 'hasPurchasedFeature',
          value: function (e) {
            return !!this._featureMap.get(e);
          },
        },
        {
          key: 'isFeatureEnabled',
          value: function (e) {
            for (
              var t = parseInt(e).toString(2),
                n = void 0,
                i = !0,
                o = t.length - 1,
                r = 0;
              0 <= o;
              o--, r++
            )
              if (
                '1' === t.charAt(o) &&
                ((n = (
                  r < 32
                    ? new R(0, Math.pow(2, r))
                    : new R(Math.pow(2, r - 32), 0)
                ).toString()),
                !this._featureMap.get(n))
              ) {
                i = !1;
                break;
              }
            return (
              Ae.l(
                ''
                  .concat(this._n, '.isFeatureEnabled decimalNumber:')
                  .concat(e, ' key:')
                  .concat(n, ' ret:')
                  .concat(i)
              ),
              yn({ enabled: i })
            );
          },
        },
        {
          key: 'isFeatureEnabledForStat',
          value: function (e) {
            for (
              var t = parseInt(e).toString(2), n = t.length - 1, i = 0;
              0 <= n;
              n--, i++
            )
              if ('1' === t.charAt(n)) {
                if (
                  ((o = (
                    i < 32
                      ? new R(0, Math.pow(2, i))
                      : new R(Math.pow(2, i - 32), 0)
                  ).toString()),
                  !this._featureMap.get(o))
                )
                  break;
                var o,
                  r = '',
                  a = 0;
                o === w.PLUGIN_TRANSLATE
                  ? ((r = 'plugin_translate'), (a = 16))
                  : o === w.PLUGIN_VOICE_TO_TEXT
                    ? ((r = 'plugin_voice_to_text'), (a = 17))
                    : o === w.PLUGIN_CS
                      ? ((r = 'plugin_cs'), (a = 14))
                      : o === w.PLUGIN_PUSH
                        ? ((r = 'plugin_push'), (a = 13))
                        : o === w.PLUGIN_BOT
                          ? ((r = 'plugin_bot'), (a = 15))
                          : o === w.MSG_REACTION &&
                            ((r = 'plugin_emoji_reaction'), (a = 18)),
                  '' !== r &&
                    ((o = this._commercialConfigM.get(12).getUIPlatform()),
                    new ei(r).setCode(a).setUIPlatform(o).end(),
                    Ae.l(
                      ''
                        .concat(this._n, '.isFeatureEnabledForStat ')
                        .concat(r, ' code:')
                        .concat(a, ' uiPlatform:')
                        .concat(o)
                    ));
              }
          },
        },
        {
          key: 'isSearchCloudMessagesEnabled',
          value: function () {
            var e;
            this._isSCMReported ||
              ((e = this._commercialConfigM.get(12).getUIPlatform()),
              new ei('plugin_search').setCode(6).setUIPlatform(e).end(),
              (this._isSCMReported = !0));
          },
        },
        {
          key: 'clear',
          value: function () {
            this._featureMap.clear(), (this._isSCMReported = !1);
          },
        },
      ]),
      Ps),
    as =
      (r(Ns, [
        {
          key: '_canFetch',
          value: function () {
            return this.get(12).isLoggedIn()
              ? !this._isFetching && Date.now() >= this._expiredTime
              : ((this._expiredTime = Date.now() + 2e3), !1);
          },
        },
        {
          key: 'onCheckTimer',
          value: function (e) {
            this._canFetch() && this.fetchConfig();
          },
        },
        {
          key: 'fetchConfig',
          value: function () {
            var e,
              t,
              n = this,
              i = this._canFetch(),
              o = ''.concat(this._n, '.fetchConfig');
            Ae.l(''.concat(o, ' canFetch:').concat(i)),
              i &&
                ((e = new ei('fetchCommercialConfig')),
                (i = this.get(12).getSDKAppID()),
                (t = this.get(20)),
                (this._isFetching = !0),
                t
                  .req({ P: Gn.FETCH_COMMERCIAL_CONFIG, data: { SDKAppID: i } })
                  .then(function (t) {
                    e
                      .setMessage('purchaseBits:'.concat(t.data.purchaseBits))
                      .end(),
                      Ae.l(''.concat(o, ' ok.')),
                      n._parseConfig(t.data),
                      (n._isFetching = !1);
                  })
                  .catch(function (t) {
                    e.setError(t).end(), (n._isFetching = !1);
                  }));
          },
        },
        {
          key: 'onPushedConfig',
          value: function (e) {
            var t = ''
              .concat(this._n, '.onPushedConfig data:')
              .concat(JSON.stringify(e));
            Ae.l(''.concat(t)),
              new ei('pushedCommercialConfig')
                .setMessage('purchaseBits:'.concat(e.purchaseBits))
                .end(),
              this._parseConfig(e);
          },
        },
        {
          key: '_parseConfig',
          value: function (e) {
            var t = ''.concat(this._n, '._parseConfig'),
              n = e.errorCode,
              i = e.errorMessage,
              o = e.purchaseBits,
              r = e.expiredTime;
            0 === n
              ? (this._purchasedFeatureHandler.parsePurchaseBits(o),
                (this._expiredTime = Date.now() + 1e3 * r))
              : ut(n)
                ? (Ae.l(''.concat(t, ' failed. Invalid message format:'), e),
                  this._setExpiredTimeOnResponseError(36e5))
                : (Ae.e(
                    ''
                      .concat(t, ' errorCode:')
                      .concat(n, ' errorMessage:')
                      .concat(i)
                  ),
                  this._setExpiredTimeOnResponseError(12e4));
          },
        },
        {
          key: '_setExpiredTimeOnResponseError',
          value: function (e) {
            this._expiredTime = Date.now() + e;
          },
        },
        {
          key: 'canIUse',
          value: function (e) {
            return this._purchasedFeatureHandler.hasPurchasedFeature(e);
          },
        },
        {
          key: 'isFeatureEnabled',
          value: function (e) {
            return this._purchasedFeatureHandler.isFeatureEnabled(e);
          },
        },
        {
          key: 'isFeatureEnabledForStat',
          value: function (e) {
            this._purchasedFeatureHandler.isFeatureEnabledForStat(e);
          },
        },
        {
          key: 'isSearchCloudMessagesEnabled',
          value: function () {
            this._purchasedFeatureHandler.isSearchCloudMessagesEnabled();
          },
        },
        {
          key: 'get',
          value: function (e) {
            return this._m.get(e);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              (this._expiredTime = 0),
              (this._isFetching = !1),
              this._purchasedFeatureHandler.clear();
          },
        },
      ]),
      Ns),
    ss =
      (s(bs, An),
      (Ua = g(bs)),
      r(bs, [
        {
          key: 'registerPlugin',
          value: function (e) {
            var t, n, i, o, r, a, s, c, u, l, d, p, h;
            Y
              ? ((this._offlinePushPlugin = e['tim-offline-push-plugin']),
                (t = (h = e.offlinePushConfig || {}).huaweiBusinessID),
                (n = h.xiaomiBusinessID),
                (i = h.xiaomiAppID),
                (o = h.xiaomiAppKey),
                (r = h.meizuBusinessID),
                (a = h.meizuAppID),
                (s = h.meizuAppKey),
                (c = h.vivoBusinessID),
                (u = h.oppoBusinessID),
                (l = h.oppoAppKey),
                (d = h.oppoAppSecret),
                (p = h.honorBusinessID),
                (h = h.iosBusinessID),
                (this._androidPushConfig.huaweiPushBussinessId = t),
                (this._androidPushConfig.xiaomiPushBussinessId = n),
                (this._androidPushConfig.xiaomiPushAppId = i),
                (this._androidPushConfig.xiaomiPushAppKey = o),
                (this._androidPushConfig.meizuPushBussinessId = r),
                (this._androidPushConfig.meizuPushAppId = a),
                (this._androidPushConfig.meizuPushAppKey = s),
                (this._androidPushConfig.vivoPushBussinessId = c),
                (this._androidPushConfig.oppoPushBussinessId = u),
                (this._androidPushConfig.oppoPushAppKey = l),
                (this._androidPushConfig.oppoPushAppSecret = d),
                (this._androidPushConfig.honorPushBussinessId = p),
                new ei('registerPlugin')
                  .setMessage('tim-offline-push-plugin')
                  .setMoreMessage(
                    'isExist:'.concat(!ut(this._offlinePushPlugin))
                  )
                  .end(!0),
                Ae.l(
                  ''
                    .concat(this._n, '.')
                    .concat('registerPlugin', ' ok. offlinePushConfig:')
                    .concat(JSON.stringify(e.offlinePushConfig))
                ),
                (this._iosBusinessID = h),
                this._setAppShowListener())
              : this.warn('OfflinePushInUniapp');
          },
        },
        {
          key: 'init',
          value: function () {
            (this._isWebUniapp = this.getUniAppPlatform()),
              this._getDeviceToken();
          },
        },
        {
          key: '_getDeviceToken',
          value: function () {
            var e,
              t = this,
              n = ''.concat(this._n, '.').concat('_getDeviceToken');
            Ye(this._offlinePushPlugin.getDeviceToken)
              ? ((e = 'androidPushConfig:'
                  .concat(
                    JSON.stringify(this._androidPushConfig),
                    ', iosBusinessID:'
                  )
                  .concat(this._iosBusinessID)),
                Ae.l(''.concat(n, ' start. ').concat(e)),
                new ei('_getDeviceToken').setMessage(''.concat(e)).end(!0),
                this._offlinePushPlugin.getDeviceToken(
                  this._androidPushConfig,
                  function (i) {
                    var o,
                      r,
                      a,
                      s,
                      c = new ei('getDeviceTokenRes'),
                      u = i.code,
                      l = i.msg;
                    0 === u
                      ? ((o = (s = i.data).deviceToken),
                        (r = s.deviceBrand),
                        (a = s.deviceType),
                        (s = s.bussinessId),
                        (t._deviceToken = o),
                        (t._businessID = s || t._iosBusinessID),
                        (e = 'deviceToken:'
                          .concat(o, ', deviceBrand:')
                          .concat(r || a, ', businessID:')
                          .concat(t._businessID)),
                        Ae.l(''.concat(n, ' ok. ').concat(e)),
                        c.setMessage(e).end(!0),
                        t._setToken())
                      : (c
                          .setMessage('code:'.concat(u, ', msg:').concat(l))
                          .end(!0),
                        Ae.e(''.concat(n, ' failed. error:'), i));
                  }
                ))
              : Ae.e(''.concat(n, ' getDeviceToken is not a function'));
          },
        },
        {
          key: 'canIUseOfflinePush',
          value: function () {
            return Y && !ut(this._offlinePushPlugin);
          },
        },
        {
          key: '_setAppShowListener',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('_setAppShowListener');
            ut(this._offlinePushPlugin)
              ? Ae.e(''.concat(t, ' offlinePushPlugin is undefined'))
              : Ye(this._offlinePushPlugin.setAppShowListener)
                ? (new ei('_setAppShowListener').end(!0),
                  Ae.l(''.concat(t, ' start')),
                  this._offlinePushPlugin.setAppShowListener(function (n) {
                    (n = (n || {}).appShow),
                      new ei('setAppShowListenerRes')
                        .setMessage('appShow:'.concat(n))
                        .end(!0),
                      Ae.l(''.concat(t, ' ok. appShow:').concat(n)),
                      e._m.isReady() &&
                        (0 === n
                          ? (e._getConvUnreadCount(), e._onBackground())
                          : 1 === n && e._onForeground());
                  }))
                : Ae.e(''.concat(t, ' setAppShowListener is not a function'));
          },
        },
        {
          key: 'getDeviceBrand',
          value: function () {
            var e;
            if (
              !ut(this._offlinePushPlugin) &&
              Ye(this._offlinePushPlugin.getDeviceType)
            )
              return (
                (e = (this._offlinePushPlugin.getDeviceType() || {})
                  .deviceType),
                Ae.l(
                  ''
                    .concat(this._n, '.getDeviceBrand ok. deviceType:')
                    .concat(e)
                ),
                e
              );
          },
        },
        {
          key: '_setToken',
          value: function () {
            var e = ''.concat(this._n, '._setToken'),
              t = this.get(12),
              n = 1,
              i = '',
              o = '',
              r = (Ve(this._deviceToken) && (n = 0), this.getUniAppPlatform()),
              a = this.getDeviceBrand(),
              s =
                (r === A.IOS || r === A.IPAD || r === A.MAC
                  ? (o = this._deviceToken)
                  : r === A.ANDROID && (i = this._deviceToken),
                new ei('offlinePushSetToken'));
            return (
              (r =
                'deviceToken:'
                  .concat(o || i, ', businessID:')
                  .concat(this._businessID, ', ') +
                'deviceBrand:'
                  .concat(a, ', isWebUniapp:')
                  .concat(this._isWebUniapp, ', pushMsg:')
                  .concat(n, ', platform:')
                  .concat(r)),
              s.setMessage(''.concat(r)),
              Ae.l(''.concat(e, ' ').concat(r)),
              this.req({
                P: Gn.SET_TOKEN,
                data: {
                  tokenID: i,
                  pushMsg: n,
                  sdkAppID: t.getSDKAppID(),
                  businessID: parseInt(this._businessID),
                  deviceBrand: a,
                  deviceToken: o,
                  isWebUniapp: this._isWebUniapp,
                },
              })
                .then(function (t) {
                  return s.end(), Ae.l(''.concat(e, ' ok')), t;
                })
                .catch(function (t) {
                  return (
                    s.setError(t).end(),
                    Ae.e(''.concat(e, ' failed. error:'), t),
                    In(t)
                  );
                })
            );
          },
        },
        {
          key: '_getConvUnreadCount',
          value: function () {
            var e = this;
            (this._c2cUnreadCount = 0),
              (this._groupUnreadCount = 0),
              this.get(11)
                .getLocalConvList()
                .forEach(function (t) {
                  t.type === D.CONV_C2C && (e._c2cUnreadCount += t.unreadCount),
                    t.type === D.CONV_GROUP &&
                      (e._groupUnreadCount += t.unreadCount);
                });
          },
        },
        {
          key: '_onBackground',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('_onBackground'),
              n = new ei('_onBackground');
            this.req({
              P: Gn.STAT_BACKGROUND,
              data: {
                c2cUnreadCount: this._c2cUnreadCount,
                groupUnreadCount: this._groupUnreadCount,
                isWebUniapp: this._isWebUniapp,
              },
            })
              .then(function (i) {
                return (
                  n
                    .setMessage(
                      'c2cUnreadCount: '
                        .concat(e._c2cUnreadCount, ', groupUnreadCount: ')
                        .concat(e._groupUnreadCount)
                    )
                    .end(),
                  Ae.l(''.concat(t, ' ok')),
                  i
                );
              })
              .catch(function (e) {
                n.setError(e).end(), Ae.e(''.concat(t, ' failed. error:'), e);
              });
          },
        },
        {
          key: '_onForeground',
          value: function () {
            var e = ''.concat(this._n, '.').concat('_onForeground'),
              t = new ei('_onForeground');
            this.req({
              P: Gn.STAT_FOREGROUND,
              data: { isWebUniapp: this._isWebUniapp },
            })
              .then(function (n) {
                return t.end(), Ae.l(''.concat(e, ' ok')), n;
              })
              .catch(function (n) {
                t.setError(n).end(), Ae.e(''.concat(e, ' failed. error:'), n);
              });
          },
        },
        {
          key: 'getUniAppPlatform',
          value: function () {
            var e = Yn.getSystemInfoSync().platform,
              t = this.getDeviceBrand();
            return 'ios' === e
              ? A.IOS
              : 'android' === e
                ? A.ANDROID
                : 1002 === t
                  ? A.IPAD
                  : 1001 === t
                    ? A.MAC
                    : void 0;
          },
        },
        {
          key: 'reset',
          value: function () {
            (this._deviceToken = ''),
              (this._businessID = 0),
              (this._c2cUnreadCount = 0),
              (this._groupUnreadCount = 0),
              (this._isWebUniapp = 0),
              Ae.l(''.concat(this._n, '.reset'));
          },
        },
      ]),
      bs),
    cs =
      (s(Os, An),
      (wa = g(Os)),
      r(Os, [
        {
          key: 'registerPlugin',
          value: function (e) {
            var t, n, i;
            Y
              ? ((t = ''.concat(this._n, '.').concat('registerPlugin')),
                (this._pushPlugin = e['tim-push']),
                this._getDeviceInfo(),
                (n = (i = e.pushConfig || {}).androidConfig),
                (i = i.iOSConfig),
                We(n) &&
                  (this._androidPushConfig = n[this._deviceInfo.packageName]),
                (n = (i || {}).iOSBusinessID),
                (this._iOSBusinessID = n),
                (i = !ut(this._pushPlugin)),
                new ei('registerPlugin')
                  .setMessage(this._pluginName)
                  .setMoreMessage('isExisted:'.concat(i))
                  .end(!0),
                Ae.l(
                  ''
                    .concat(t, ' ok. pushConfig:')
                    .concat(JSON.stringify(e.pushConfig))
                ),
                i
                  ? (this._setAppShowListener(),
                    this._setPushEventReportListener())
                  : Ae.e(
                      ''
                        .concat(t, ' ')
                        .concat(this._pluginName, ' is undefined')
                    ))
              : this.warn('TIMPushInUniapp');
          },
        },
        {
          key: 'init',
          value: function () {
            (this._isWebUniapp = this.getUniAppPlatform()),
              this._reportEventCacheList(),
              this._getDeviceToken(),
              this.get(27).isFeatureEnabledForStat(Math.pow(2, 41));
          },
        },
        {
          key: '_reportEventCacheList',
          value: function () {
            var e = this,
              n = ''.concat(this._n, '.').concat('_reportEventCacheList');
            Ye(this._pushPlugin.getPushEventCacheList)
              ? (new ei('_reportEventCacheList').end(!0),
                this._pushPlugin.getPushEventCacheList(function (i) {
                  var o = i.code,
                    r = i.data.eventList,
                    a = new ei('getPushEventCacheListRes');
                  if ((a.setCode(o), 0 !== o))
                    a.setMessage('res:'.concat(JSON.stringify(i))).end(!0),
                      Ae.e(
                        ''
                          .concat(n, ' failed. error:')
                          .concat(JSON.stringify(i))
                      );
                  else {
                    (o =
                      r.length < 10
                        ? 'eventList:'.concat(JSON.stringify(r))
                        : 'eventList.length:'.concat(r.length)),
                      Ae.l(''.concat(n, ' ok. ').concat(o)),
                      a.setMessage(o).end(!0);
                    for (
                      var s = t(t({}, i.data), {}, { eventList: [] });
                      0 < r.length;

                    )
                      (s.eventList = r.splice(0, 40)), e._pushReport(s);
                  }
                }))
              : Ae.e(
                  ''.concat(
                    this._pluginName,
                    '.getPushEventCacheList is not a function'
                  )
                );
          },
        },
        {
          key: '_getDeviceToken',
          value: function () {
            var e,
              t = this,
              n = ''.concat(this._n, '.').concat('_getDeviceToken');
            Ye(this._pushPlugin.getDeviceToken)
              ? ((e = 'androidPushConfig:'
                  .concat(
                    JSON.stringify(this._androidPushConfig),
                    ' iOSBusinessID:'
                  )
                  .concat(this._iOSBusinessID)),
                Ae.l(''.concat(n, ' start. ').concat(e)),
                new ei('_getDeviceToken').setMessage(''.concat(e)).end(!0),
                this._pushPlugin.getDeviceToken(
                  this._androidPushConfig,
                  function (i) {
                    var o,
                      r,
                      a,
                      s = i.code,
                      c = i.msg,
                      u = new ei('getDeviceTokenRes');
                    if ((u.setCode(s), 0 === s))
                      return (
                        (o = (s = i.data).deviceToken),
                        (r = s.deviceBrand),
                        (a = s.deviceType),
                        (s = s.bussinessId),
                        (t._deviceToken = o),
                        (t._businessID = s || t._iOSBusinessID),
                        (e = 'deviceToken:'
                          .concat(o, ' deviceBrand:')
                          .concat(r || a, ' businessID:')
                          .concat(t._businessID)),
                        Ae.l(''.concat(n, ' ok. ').concat(e)),
                        u.setMessage(e).end(!0),
                        void t._setToken()
                      );
                    u.setMessage(c).end(!0),
                      Ae.e(
                        ''
                          .concat(n, ' failed. error:')
                          .concat(JSON.stringify(i))
                      );
                  }
                ))
              : Ae.e(
                  ''.concat(
                    this._pluginName,
                    '.getDeviceToken is not a function'
                  )
                );
          },
        },
        {
          key: '_getDeviceInfo',
          value: function () {
            var e = ''.concat(this._n, '.').concat('_getDeviceInfo');
            if (Ye(this._pushPlugin.getDeviceInfo)) {
              var n = this._pushPlugin.getDeviceInfo(),
                i = n.code,
                o = n.data,
                r = new ei('_getDeviceInfo');
              if ((r.setCode(i), 0 === i))
                return (
                  (this._deviceInfo = t(t({}, this._deviceInfo), o)),
                  this._deviceInfo.pushVersion ||
                    (this._deviceInfo.pushVersion = '1.0.1'),
                  (i = 'deviceInfo:'.concat(JSON.stringify(this._deviceInfo))),
                  Ae.l(''.concat(e, ' ok. ').concat(i)),
                  void r.setMessage(i).end(!0)
                );
              r.setMessage('deviceInfoRes:'.concat(JSON.stringify(n))).end(!0),
                Ae.e(''.concat(e, ' failed. error:').concat(JSON.stringify(n)));
            } else
              Ae.e(
                ''.concat(this._pluginName, '.getDeviceInfo is not a function')
              );
          },
        },
        {
          key: 'canIUseTIMPush',
          value: function () {
            return Y && !ut(this._pushPlugin);
          },
        },
        {
          key: '_setAppShowListener',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('_setAppShowListener');
            Ye(this._pushPlugin.setAppShowListener)
              ? (new ei('_setAppShowListener').end(!0),
                Ae.l(''.concat(t, ' start')),
                this._pushPlugin.setAppShowListener(function (n) {
                  (n = (n || {}).appShow),
                    new ei('setAppShowListenerRes')
                      .setMessage('appShow:'.concat(n))
                      .end(!0),
                    Ae.l(''.concat(t, ' ok. appShow:').concat(n)),
                    e._m.isReady() &&
                      (0 === n
                        ? (e._getConvUnreadCount(), e._onBackground())
                        : 1 === n && e._onForeground());
                }))
              : Ae.e(
                  ''.concat(
                    this._pluginName,
                    '.setAppShowListener is not a function'
                  )
                );
          },
        },
        {
          key: '_setPushEventReportListener',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('_setPushEventReportListener');
            Ye(this._pushPlugin.setPushEventReportListener)
              ? (new ei('_setPushEventReportListener').end(!0),
                this._pushPlugin.setPushEventReportListener(function (n) {
                  var i = n.code,
                    o = n.data,
                    r = o.eventList,
                    a = new ei('setPushEventReportListenerRes');
                  if ((a.setCode(i), 0 === i))
                    return (
                      (i = 'eventList:'.concat(JSON.stringify(r))),
                      Ae.l(''.concat(t, ' ok. ').concat(i)),
                      a.setMessage(i).end(!0),
                      void (
                        e._m.isReady() &&
                        $e(r) &&
                        0 < r.length &&
                        e._pushReport(o)
                      )
                    );
                  a.setMessage('res:'.concat(JSON.stringify(n))).end(!0),
                    Ae.e(
                      ''.concat(t, ' failed. error:').concat(JSON.stringify(n))
                    );
                }))
              : Ae.e(
                  ''.concat(
                    this._pluginName,
                    '.setPushEventReportListener is not a function'
                  )
                );
          },
        },
        {
          key: 'getDeviceBrand',
          value: function () {
            var e;
            if (!ut(this._pushPlugin) && Ye(this._pushPlugin.getDeviceType))
              return (
                (e = (this._pushPlugin.getDeviceType() || {}).deviceType),
                Ae.l(
                  ''
                    .concat(this._n, '.getDeviceBrand ok. deviceType:')
                    .concat(e)
                ),
                e
              );
          },
        },
        {
          key: '_setToken',
          value: function () {
            var e = ''.concat(this._n, '.').concat('_setToken'),
              n = this.get(12),
              i = 1,
              o = '',
              r = '',
              a = (Ve(this._deviceToken) && (i = 0), this.getUniAppPlatform()),
              s = this.getDeviceBrand(),
              c =
                (a === A.IOS || a === A.IPAD || a === A.MAC
                  ? (r = this._deviceToken)
                  : a === A.ANDROID && (o = this._deviceToken),
                (a = t(
                  {
                    tokenID: o,
                    pushMsg: i,
                    sdkAppID: n.getSDKAppID(),
                    businessID: parseInt(this._businessID),
                    deviceBrand: s,
                    deviceToken: r,
                    isWebUniapp: this._isWebUniapp,
                  },
                  this._deviceInfo
                )),
                new ei('_setToken'));
            (o = 'data:'.concat(JSON.stringify(a))),
              c.setMessage(''.concat(o)),
              Ae.l(''.concat(e, ' ').concat(o)),
              this.req({ P: Gn.SET_TOKEN, data: a })
                .then(function () {
                  c.end(), Ae.w(''.concat(e, ' ok'));
                })
                .catch(function (t) {
                  c.setError(t).end(),
                    Ae.e(''.concat(e, ' failed. error:'), t),
                    In(t);
                });
          },
        },
        {
          key: '_getConvUnreadCount',
          value: function () {
            var e = this;
            (this._c2cUnreadCount = 0),
              (this._groupUnreadCount = 0),
              this.get(11)
                .getLocalConvList()
                .forEach(function (t) {
                  t.type === D.CONV_C2C && (e._c2cUnreadCount += t.unreadCount),
                    t.type === D.CONV_GROUP &&
                      (e._groupUnreadCount += t.unreadCount);
                });
          },
        },
        {
          key: '_onBackground',
          value: function () {
            var e = this,
              t = ''.concat(this._n, '.').concat('_onBackground'),
              n = new ei('_onBackground');
            this.req({
              P: Gn.STAT_BACKGROUND,
              data: {
                c2cUnreadCount: this._c2cUnreadCount,
                groupUnreadCount: this._groupUnreadCount,
                isWebUniapp: this._isWebUniapp,
              },
            })
              .then(function () {
                n
                  .setMessage(
                    'c2cUnreadCount:'
                      .concat(e._c2cUnreadCount, ' groupUnreadCount:')
                      .concat(e._groupUnreadCount)
                  )
                  .end(),
                  Ae.l(''.concat(t, ' ok'));
              })
              .catch(function (e) {
                n.setError(e).end(), Ae.e(''.concat(t, ' failed. error:'), e);
              });
          },
        },
        {
          key: '_onForeground',
          value: function () {
            var e = ''.concat(this._n, '.').concat('_onForeground'),
              t = new ei('_onForeground');
            this.req({
              P: Gn.STAT_FOREGROUND,
              data: { isWebUniapp: this._isWebUniapp },
            })
              .then(function () {
                t.end(), Ae.l(''.concat(e, ' ok'));
              })
              .catch(function (n) {
                t.setError(n).end(), Ae.e(''.concat(e, ' failed. error:'), n);
              });
          },
        },
        {
          key: '_pushReport',
          value: function (e) {
            var t = this,
              n = ''.concat(this._n, '.').concat('_pushReport'),
              i = new ei('_pushReport');
            this.req({ P: Gn.PUSH_REPORT, data: { eventList: e.eventList } })
              .then(function () {
                i.end(), t._notifyReportSuccess(e);
              })
              .catch(function (e) {
                i.setError(e).end(), Ae.e(''.concat(n, ' failed. error:'), e);
              });
          },
        },
        {
          key: '_notifyReportSuccess',
          value: function (e) {
            !ut(this._pushPlugin) &&
              Ye(this._pushPlugin.notifyReportSuccess) &&
              (this._pushPlugin.notifyReportSuccess(e),
              Ae.l(''.concat(this._n, '._notifyReportSuccess ok')));
          },
        },
        {
          key: 'getUniAppPlatform',
          value: function () {
            var e = Yn.getSystemInfoSync().platform,
              t = this.getDeviceBrand();
            return 'ios' === e
              ? A.IOS
              : 'android' === e
                ? A.ANDROID
                : 1002 === t
                  ? A.IPAD
                  : 1001 === t
                    ? A.MAC
                    : void 0;
          },
        },
        {
          key: 'reset',
          value: function () {
            (this._deviceToken = ''),
              (this._businessID = 0),
              (this._c2cUnreadCount = 0),
              (this._groupUnreadCount = 0),
              (this._isWebUniapp = 0),
              Ae.l(''.concat(this._n, '.reset'));
          },
        },
      ]),
      Os),
    us =
      (s(As, An),
      (Pa = g(As)),
      r(As, [
        {
          key: 'init',
          value: function () {
            var e = this.get(18).getPlugin('tim-profanity-filter-plugin');
            e &&
              ((this._plugin = new e({
                logger: Ae,
                isArray: $e,
                isMap: Be,
                isDevMode: this.isDevMode(),
              })),
              this._getLexicon());
          },
        },
        {
          key: 'onCheckTimer',
          value: function () {
            this._plugin &&
              this._canIUseLexicon &&
              this.isLoggedIn() &&
              !this._isFetching &&
              Date.now() >= this._expiredTime &&
              this._getLexicon();
          },
        },
        {
          key: 'filterMessage',
          value: function (e, t) {
            var n = !0;
            if (!this._plugin || !this._canIUseLexicon) return n;
            if (
              t &&
              t.messageControlInfo &&
              !0 === t.messageControlInfo.excludedFromContentModeration
            )
              return n;
            t = e.type;
            var i = e.conversationType;
            if (t !== D.MSG_TEXT && t !== D.MSG_CUSTOM) return n;
            var o,
              r = ''.concat(this._n, '.filterMessage');
            if ((Ae.l(''.concat(r)), t === D.MSG_TEXT)) {
              if (
                (i === D.CONV_C2C
                  ? (o = 'c2c_text_message')
                  : i === D.CONV_GROUP && (o = 'group_text_message'),
                !this._isConfigOn(o))
              )
                return n;
              var a = (s = this._plugin.filter(e.payload.text)).type,
                s = s.modifiedText;
              1 === a ? (n = !1) : 2 === a && (e.payload.text = s);
            } else if (t === D.MSG_CUSTOM) {
              if (
                (i === D.CONV_C2C
                  ? (o = 'c2c_custom_message')
                  : i === D.CONV_GROUP && (o = 'group_custom_message'),
                !this._isConfigOn(o))
              )
                return n;
              (a = this._plugin.filter(e.payload.data)),
                (s = this._plugin.filter(e.payload.description)),
                (t = this._plugin.filter(e.payload.extension)),
                1 === a.type || 1 === s.type || 1 === t.type
                  ? (n = !1)
                  : (2 === a.type && (e.payload.data = a.modifiedText),
                    2 === s.type && (e.payload.description = s.modifiedText),
                    2 === t.type && (e.payload.extension = t.modifiedText));
            }
            return Ae.l(''.concat(r, ' done. isAllowedToSend:').concat(n)), n;
          },
        },
        {
          key: 'filterText',
          value: function (e, t) {
            var n = ''.concat(this._n, '.filterText'),
              i = { isAllowedToSend: !0, modifiedText: e };
            return this._plugin && this._canIUseLexicon && this._isConfigOn(t)
              ? (Ae.l(''.concat(n)),
                (e = (t = this._plugin.filter(e)).type),
                (t = t.modifiedText),
                1 === e
                  ? (i.isAllowedToSend = !1)
                  : 2 === e && (i.modifiedText = t),
                Ae.l(''.concat(n, ' done. ret:'), i),
                i)
              : i;
          },
        },
        {
          key: '_getLexicon',
          value: function () {
            var e = this,
              t = new ei('profanityFilter'),
              n = ''.concat(this._n, '._getLexicon');
            (this._isFetching = !0),
              this.req({
                P: Gn.GET_PROFANITY_LIST,
                data: { startIndex: this._startIndex, version: this._version },
              })
                .then(function (i) {
                  var o = (i = i.data).errorInfo,
                    r = i.filterConfig,
                    a = i.lexicon,
                    s = i.strToken,
                    c = i.completeFlag,
                    u = i.nextStartIndex,
                    l = i.version,
                    d = ((i = i.expiredTime), o.errorCode),
                    p = o.errorMessage;
                  return 0 !== d
                    ? ((e._isFetching = !1),
                      Ae.w(''.concat(n, ' failed. error:'), o),
                      void t.setCode(d).setMessage(p).end())
                    : (e._onFilterConfig(r),
                      e._getToken(s),
                      1 === c
                        ? (Ae.l(
                            ''
                              .concat(n, ' done. version:')
                              .concat(l, ' expiredTime:')
                              .concat(i)
                          ),
                          (e._version = l),
                          (e._canIUseLexicon = !0),
                          (e._isFetching = !1),
                          (e._expiredTime = Date.now() + 1e3 * i),
                          void e._plugin.onLexiconCompleted(a))
                        : ((e._startIndex = u),
                          e._plugin.onLexiconSliced(a),
                          void e._getLexicon()));
                })
                .catch(function (i) {
                  t.setError(i).end(),
                    (e._isFetching = !1),
                    Ae.l(''.concat(n, ' failed. error:'), i);
                });
          },
        },
        {
          key: '_onFilterConfig',
          value: function (e) {
            var t = this;
            Ve(e) ||
              (this._filterConfigMap.clear(),
              Object.keys(e).forEach(function (n) {
                t._filterConfigMap.set(n, e[n]);
              }),
              Ae.l(
                ''
                  .concat(this._n, '._onFilterConfig. keys:')
                  .concat(Array.from(this._filterConfigMap.keys()), ' values:')
                  .concat(Array.from(this._filterConfigMap.values()))
              ));
          },
        },
        {
          key: '_isConfigOn',
          value: function (e) {
            return 1 === this._filterConfigMap.get(e);
          },
        },
        {
          key: '_getToken',
          value: function (e) {
            if (ct(e)) {
              var t = e.length,
                n = '';
              if (t % 2 == 0)
                for (var i = 0; i <= t - 1; i += 2) n = (n += e[i + 1]) + e[i];
              else {
                for (var o = 0; o < t - 1; o += 2) n = (n += e[o + 1]) + e[o];
                n += e[t - 1];
              }
              this._plugin.onToken(n);
            }
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._plugin && (this._plugin.reset(), (this._plugin = null)),
              this._filterConfigMap.clear(),
              (this._startIndex = 0),
              (this._version = 0),
              (this._canIUseLexicon = !1),
              (this._isFetching = !1),
              (this._expiredTime = 0);
          },
        },
      ]),
      As),
    ls =
      (r(Ls, [
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this,
              t = this._m.get(23).getCloudConfig('rtc_cmd');
            ut(t) ||
              ((t = JSON.parse(t)).forEach(function (t) {
                e._TRTCCommandList.includes(t) || e._TRTCCommandList.push(t);
              }),
              this._setTRTCCommandMap());
          },
        },
        {
          key: '_setTRTCCommandMap',
          value: function () {
            for (var e, t = 0, n = this._TRTCCommandList.length; t < n; t++)
              (e = this._TRTCCommandList[t].split('.')[0]),
                this._TRTCCommandMap.set(e, 1);
          },
        },
        {
          key: 'onRoomCustomDataReceived',
          value: function (e) {
            this._m.getOEmitInst().emit(E.ROOM_CUSTOM_DATA_RECEIVED, e);
          },
        },
        {
          key: 'sendTRTCCustomData',
          value: function (e) {
            var t = e.serviceCommand,
              n = ((e = e.data), ''.concat(P.NAME.TUIROOM_SVR, '.*'));
            return (
              ut(t) || (n = t),
              this._isValidServiceCommand(n)
                ? this._trans({ servcmd: n, data: e })
                : In({ code: wn.INVALID_TRTC_CMD })
            );
          },
        },
        {
          key: '_trans',
          value: function (e) {
            Ae.d(
              ''.concat(this._n, '._trans. options:').concat(JSON.stringify(e))
            );
            var t = e.servcmd;
            return (
              (e = e.data),
              this._m
                .get(20)
                .trans({ servcmd: t, data: ct(e) ? JSON.parse(e) : e })
            );
          },
        },
        {
          key: '_isValidServiceCommand',
          value: function (e) {
            return e.endsWith('.*')
              ? this._TRTCCommandList.includes(e)
              : ((e = e.split('.')[0]), this._TRTCCommandMap.has(e));
          },
        },
        {
          key: 'isTRTCCommand',
          value: function (e) {
            return (e = e.split('.')[0]), this._TRTCCommandMap.has(e);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset'));
          },
        },
      ]),
      Ls),
    ds =
      (r(Rs, [
        {
          key: '_init',
          value: function () {
            var e,
              t = this._getStorageModule().getItem(
                this.TIM_ERROR_ASSISTANCE,
                !1
              );
            if (t) {
              try {
                e = JSON.parse(t);
              } catch (n) {
                this._getStorageModule().removeItem(
                  this.TIM_ERROR_ASSISTANCE,
                  !1
                ),
                  Ae.w(''.concat(this._n, '._init error:'), n);
              }
              e &&
                (this._needToUpdate(e)
                  ? this._fetch()
                  : this._fillMap(e.message));
            } else this._fetch();
          },
        },
        {
          key: '_needToUpdate',
          value: function (e) {
            var t = e.localSavedTime;
            return (
              (e = e.localSavedVersion),
              (t = t && new Date().getTime() - t >= this.STORAGE_EXPIRES_TIME),
              (e = !e || '3.4.2' !== e),
              Ae.l(
                ''
                  .concat(this._n, '._needToUpdate isTimeout:')
                  .concat(t, ' isDifferentVersion:')
                  .concat(e)
              ),
              t || e
            );
          },
        },
        {
          key: '_fetch',
          value: function () {
            var e, t, n, i, o, r;
            this._m.get(12).isPrivateNetWork() ||
              ((e =
                'https://web.sdk.qcloud.com/im/download/error-message/v3/0.0.5/tim-error-message.txt'),
              (t = 'application/x-www-form-urlencoded;charset=UTF-8'),
              (n = ''.concat(this._n, '._fetch ok in')),
              (i = this),
              Z
                ? te.request({
                    url: e,
                    method: 'GET',
                    timeout: 3e3,
                    header: { 'content-type': t },
                    dataType: 'text',
                    success: function (e) {
                      i._fillAndSave(e.data),
                        Ae.l(''.concat(n, ' mini program'));
                    },
                    fail: function () {},
                  })
                : ((o = new XMLHttpRequest()),
                  (r = setTimeout(function () {
                    o.abort();
                  }, 3e3)),
                  (o.onreadystatechange = function () {
                    4 === o.readyState &&
                      (clearTimeout(r),
                      (200 !== o.status && 304 !== o.status) ||
                        (Ae.l(''.concat(n, ' browser')),
                        i._fillAndSave(o.responseText)));
                  }),
                  o.open('GET', e, !0),
                  o.setRequestHeader('Content-type', t),
                  o.send()));
          },
        },
        {
          key: '_fillAndSave',
          value: function (e) {
            this._fillMap(e),
              this._getStorageModule().setItem(
                this.TIM_ERROR_ASSISTANCE,
                JSON.stringify({
                  message: e,
                  localSavedTime: new Date().getTime(),
                  localSavedVersion: '3.4.2',
                }),
                !0,
                !1
              );
          },
        },
        {
          key: '_getStorageModule',
          value: function () {
            return this._m.get(13);
          },
        },
        {
          key: '_fillMap',
          value: function (e) {
            this._map.clear();
            for (
              var t,
                n,
                i = e.split(';\n'),
                o = i.length,
                r = new RegExp(/'/g),
                a = 0;
              a < o;
              a++
            )
              if (
                ((n = i[a].indexOf(':')),
                (t = i[a].slice(0, n)),
                (n = i[a].slice(n + 1, i[a].length)),
                !t.startsWith('//'))
              ) {
                if (ut(n)) continue;
                this._map.set(t, n.replace(r, ''));
              }
          },
        },
        {
          key: 'get',
          value: function (e) {
            var t = e.isIntl,
              n = e.key,
              i = e.replacement1;
            return (
              (e = e.replacement2),
              (t = ''.concat(n, t ? '_en' : '_cn')),
              !this._map.has(t) && this._map.has(n) && (t = n),
              (n = ''),
              this._map.has(t) &&
                ((n = this._map.get(t)),
                ut(i) || (n = n.replace('$replacement1', i)),
                ut(e) || (n = n.replace('$replacement2', e))),
              n
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset'));
          },
        },
      ]),
      Rs),
    ps =
      (r(ks, [
        {
          key: 'onNewMessageList',
          value: function (e) {
            var t = this;
            e.forEach(function (e) {
              var n = t.getPayloadData(e);
              n && t._handleActionType(n, e);
            });
          },
        },
        {
          key: 'onMessageModified',
          value: function (e) {
            var t = this;
            e.forEach(function (e) {
              var n = t.getPayloadData(e);
              n && t._onInvitationModified(n, e);
            });
          },
        },
        {
          key: 'getPayloadData',
          value: function (e) {
            var t = ''.concat(this._n, '.getPayloadData');
            e = e.payload.data;
            try {
              return JSON.parse(e);
            } catch (n) {
              return (
                Ae.e(
                  ''.concat(t, ' JSON parse error. signalingData:').concat(e)
                ),
                null
              );
            }
          },
        },
        {
          key: '_handleActionType',
          value: function (e, t) {
            switch (e.actionType) {
              case S.ACTION_TYPE_INVITE:
                this._onNewInvitationReceived(e, t);
                break;
              case S.ACTION_TYPE_REJECT_INVITE:
                this._onInviteeRejected(e);
                break;
              case S.ACTION_TYPE_ACCEPT_INVITE:
                this._onInviteeAccepted(e);
                break;
              case S.ACTION_TYPE_CANCEL_INVITE:
                this._onInvitationCancelled(e);
                break;
              case S.ACTION_TYPE_INVITE_TIMEOUT:
                this._onInvitationTimeout(e);
            }
          },
        },
        {
          key: '_genBaseEmitData',
          value: function (e) {
            return {
              inviteID: e.inviteID,
              inviter: e.inviter,
              groupID: e.groupID,
              data: e.data || '',
            };
          },
        },
        {
          key: '_onNewInvitationReceived',
          value: function (e, n) {
            var i = ''.concat(this._n, '._onNewInvitationReceived'),
              o = e.inviteID,
              r = e.inviteeList,
              a = e.groupID,
              s = e.inviter,
              c = this._sigM.getMyUserID(),
              u = r.includes(c),
              l = e.timeout,
              d = (Me().getTime() - 1e3 * n.time) / 1e3;
            0 < l && 0 < d && d < l && (l -= d),
              (i = ''
                .concat(i, ' myselfIncluded:')
                .concat(u, ' groupID:')
                .concat(a, ' signalObj:')
                .concat(JSON.stringify(e))),
              Ae.l(
                ''.concat(i, ' timeout:').concat(l, 's delta:').concat(d, 's')
              ),
              ((a && u) || !a) &&
                (((i = this._sigM.getInviteInfo(o)) && i === e) ||
                  (i ||
                    this._sigM.setInviteInfo(
                      o,
                      t(t({}, e), {}, { message: n })
                    ),
                  this._sigM.emitEvent(
                    S.NEW_INVITATION_RECEIVED,
                    t(t({}, this._genBaseEmitData(e)), {}, { inviteeList: r })
                  ),
                  s !== c &&
                    this._sigM.startTimer(t(t({}, e), {}, { timeout: l }))));
          },
        },
        {
          key: '_onInviteeRejected',
          value: function (e) {
            var n = ''.concat(this._n, '._onInviteeRejected'),
              i = e.inviteID,
              o = e.inviter,
              r = e.groupID,
              a = this._sigM.hasInviteInfo(i);
            Ae.l(
              ''
                .concat(n, ' inviteID:')
                .concat(i, ' hasInviteID:')
                .concat(a, ' inviter:')
                .concat(o, ' groupID:')
                .concat(r)
            ),
              a &&
                (this._sigM.updateInviteInfo(e),
                this._sigM.emitEvent(
                  S.INVITEE_REJECTED,
                  t(
                    t({}, this._genBaseEmitData(e)),
                    {},
                    { invitee: e.inviteeList[0] }
                  )
                ));
          },
        },
        {
          key: '_onInviteeAccepted',
          value: function (e) {
            var n = ''.concat(this._n, '._onInviteeAccepted'),
              i = e.inviteID,
              o = e.inviter,
              r = e.groupID,
              a = this._sigM.hasInviteInfo(i);
            Ae.l(
              ''
                .concat(n, ' inviteID:')
                .concat(i, ' hasInviteID:')
                .concat(a, ' inviter:')
                .concat(o, ' groupID:')
                .concat(r)
            ),
              a &&
                (this._sigM.updateInviteInfo(e),
                this._sigM.emitEvent(
                  S.INVITEE_ACCEPTED,
                  t(
                    t({}, this._genBaseEmitData(e)),
                    {},
                    { invitee: e.inviteeList[0] }
                  )
                ));
          },
        },
        {
          key: '_onInvitationCancelled',
          value: function (e) {
            var t = ''.concat(this._n, '._onInvitationCancelled'),
              n = e.inviteID,
              i = e.inviter,
              o = e.groupID,
              r = this._sigM.hasInviteInfo(n);
            Ae.l(
              ''
                .concat(t, ' inviteID:')
                .concat(n, ' hasInviteID:')
                .concat(r, ' inviter:')
                .concat(i, ' groupID:')
                .concat(o)
            ),
              r &&
                (this._sigM.deleteInviteInfo(n),
                this._sigM.emitEvent(
                  S.INVITATION_CANCELLED,
                  this._genBaseEmitData(e)
                ));
          },
        },
        {
          key: '_onInvitationTimeout',
          value: function (e) {
            var n = ''.concat(this._n, '._onInvitationTimeout'),
              i = e.inviteID,
              o = e.inviter,
              r = e.groupID,
              a = e.inviteeList,
              s = this._sigM.hasInviteInfo(i);
            Ae.l(
              ''
                .concat(n, ' inviteID:')
                .concat(i, ' hasInviteID:')
                .concat(s, ' inviter:')
                .concat(o, ' groupID:')
                .concat(r, '  data:')
                .concat(e.data)
            ),
              s &&
                (this._sigM.updateInviteInfo(e),
                this._sigM.emitEvent(
                  S.INVITATION_TIMEOUT,
                  t(
                    t({}, this._genBaseEmitData(e)),
                    {},
                    { inviteeList: a, isSelfTimeout: !1 }
                  )
                ));
          },
        },
        {
          key: '_onInvitationModified',
          value: function (e, n) {
            var i = ''.concat(this._n, '._onInvitationModified'),
              o = e.inviteID,
              r = e.data;
            Ae.l(''.concat(i, ' inviteID:').concat(o, ' data:').concat(r)),
              this._sigM.setInviteInfo(o, t(t({}, e), {}, { message: n })),
              this._sigM.emitEvent(S.INVITATION_MODIFIED, {
                inviteID: o,
                data: r,
              });
          },
        },
      ]),
      ks),
    hs =
      (r(Ss, [
        {
          key: 'generateInviteID',
          value: function () {
            var e,
              t =
                (t = Oa)((e = Aa)(32), 8) +
                '-' +
                t(e(16), 4) +
                '-' +
                t(16384 | e(12), 4) +
                '-' +
                t(32768 | e(14), 4) +
                '-' +
                t(e(48), 12);
            return (
              Ae.l(''.concat(this._n, '.generateInviteID inviteID:').concat(t)),
              t
            );
          },
        },
        {
          key: 'createInviteInfo',
          value: function (e) {
            var n = this.generateInviteID(),
              i = (e = this.createInviteCustomData(
                t(t({}, e), {}, { inviteID: n })
              )).groupID,
              o = e.inviteeList;
            return (
              (i = i || o[0]),
              {
                customData: e,
                message: this._sigM.createSignaling(e, i),
                inviteID: n,
              }
            );
          },
        },
        {
          key: '_genBaseCustomData',
          value: function (e) {
            var t = e.data,
              n = e.inviteID;
            return {
              businessID: 1,
              timeout: 0,
              data: void 0 === t ? '' : t,
              inviteID: void 0 === n ? '' : n,
              groupID: void 0 === (e = e.groupID) ? '' : e,
            };
          },
        },
        {
          key: 'createInviteCustomData',
          value: function (e) {
            var n = e.userID,
              i = void 0 === (i = e.timeout) ? 0 : i,
              o = void 0 === (o = e.groupID) ? '' : o,
              r = this._sigM.getMyUserID();
            return (
              (r = t(
                t({}, this._genBaseCustomData(e)),
                {},
                {
                  actionType: S.ACTION_TYPE_INVITE,
                  inviter: r,
                  inviteeList: o ? e.inviteeList : [n],
                  timeout: i,
                }
              )),
              Ae.l(
                ''.concat(this._n, '.createInviteCustomData customData:'),
                r
              ),
              r
            );
          },
        },
        {
          key: 'createCancelCustomData',
          value: function (e) {
            var n,
              i = ''.concat(this._n, '.createCancelCustomData'),
              o = e.inviteID,
              r = this._sigM.getMyUserID(),
              a = (o = this._sigM.getInviteInfo(o)).inviteeList,
              s = o.groupID;
            return (
              (o = o.inviter) === r
                ? (n = t(
                    t({}, this._genBaseCustomData(e)),
                    {},
                    {
                      actionType: S.ACTION_TYPE_CANCEL_INVITE,
                      groupID: s,
                      inviter: r,
                      inviteeList: a,
                    }
                  ))
                : Ae.e(
                    ''
                      .concat(i, ' unmatched inviter:')
                      .concat(o, ' and my userID:')
                      .concat(r)
                  ),
              Ae.l(''.concat(i, ' customData:'), n),
              n
            );
          },
        },
        {
          key: 'createAcceptCustomData',
          value: function (e) {
            var n,
              i = ''.concat(this._n, '.createAcceptCustomData'),
              o = e.inviteID,
              r = this._sigM.getMyUserID(),
              a = this._sigM.getInviteInfo(o),
              s = a.inviter,
              c = a.groupID;
            return (
              a.inviteeList.includes(r)
                ? (n = t(
                    t({}, this._genBaseCustomData(e)),
                    {},
                    {
                      actionType: S.ACTION_TYPE_ACCEPT_INVITE,
                      groupID: c,
                      inviter: s,
                      inviteeList: [r],
                    }
                  ))
                : Ae.e(
                    ''
                      .concat(i, ' userID:')
                      .concat(r, ' not in inviteeList. inviteID:')
                      .concat(o, ' groupID:')
                      .concat(c)
                  ),
              Ae.l(''.concat(i, ' customData:'), n),
              n
            );
          },
        },
        {
          key: 'createRejectCustomData',
          value: function (e) {
            var n,
              i = ''.concat(this._n, '.createRejectCustomData'),
              o = e.inviteID,
              r = this._sigM.getMyUserID(),
              a = this._sigM.getInviteInfo(o),
              s = a.inviter,
              c = a.groupID;
            return (
              a.inviteeList.includes(r)
                ? (n = t(
                    t({}, this._genBaseCustomData(e)),
                    {},
                    {
                      actionType: S.ACTION_TYPE_REJECT_INVITE,
                      groupID: c,
                      inviter: s,
                      inviteeList: [r],
                    }
                  ))
                : Ae.e(
                    ''
                      .concat(i, ' userID:')
                      .concat(r, ' not in inviteeList. inviteID:')
                      .concat(o, ' groupID:')
                      .concat(c)
                  ),
              Ae.l(''.concat(i, ' customData:'), n),
              n
            );
          },
        },
        {
          key: 'createTimeoutCustomData',
          value: function (e) {
            var n = ''.concat(this._n, '.createTimeoutCustomData'),
              i = e.inviteeList,
              o = e.inviter,
              r = void 0 !== (r = e.isInviter) && r,
              a = this._sigM.getMyUserID();
            return (
              (e = t(
                t({}, this._genBaseCustomData(e)),
                {},
                {
                  actionType: S.ACTION_TYPE_INVITE_TIMEOUT,
                  inviter: o,
                  inviteeList: r ? i : [a],
                }
              )),
              Ae.l(''.concat(n, ' customData:'), e),
              e
            );
          },
        },
      ]),
      Ss),
    fs =
      (r(Ds, [
        {
          key: 'setCloudConfig',
          value: function () {
            var e =
                0 < arguments.length && void 0 !== arguments[0]
                  ? arguments[0]
                  : 20,
              t =
                1 < arguments.length && void 0 !== arguments[1]
                  ? arguments[1]
                  : 300;
            (this.COUNT = e),
              (this.EXPIRED_TIME = t),
              Ae.l(
                ''
                  .concat(this._n, '.setCloudConfig count:')
                  .concat(e, ', time:')
                  .concat(t)
              );
          },
        },
        {
          key: 'getHistorySignaling',
          value: function () {
            var e = this,
              t = this._sigM.get(11).getLocalConvList();
            Ve(t) ||
              (this._getC2CSignalingList(),
              (t = this._getValidGroupConvList(t)),
              this._getGroupSignalingList(t).then(function (t) {
                e._handleSignalingList(t);
              }));
          },
        },
        {
          key: '_getC2CSignalingList',
          value: function () {
            var e = this._sigM.get(6).getMessageListFromUnreadDB();
            (e = this._sigM.filterMessageList(e)), this._getRelatedToMeMap(e);
          },
        },
        {
          key: '_getGroupSignalingList',
          value: function (e) {
            var t = this;
            return 0 === (e = this._createPromiseList(e)).length
              ? Promise.resolve(this._sortSignaling(this._relatedToMeMap))
              : this._concurrentGetMessageList(e).then(function (e) {
                  var n = new Map();
                  return (
                    e.forEach(function (e) {
                      (e = e.list),
                        (e = t._getRelatedToMeMap(e)),
                        (n = new Map([].concat(v(n), v(e))));
                    }),
                    t._sortSignaling(n)
                  );
                });
          },
        },
        {
          key: '_handleSignalingList',
          value: function (e) {
            Ve(e) || this._sigM.onNewMessageList(e);
          },
        },
        {
          key: '_getValidGroupConvList',
          value: function (e) {
            for (var t = [], n = 0, i = e.length; n < i; n++) {
              var o = (a = e[n]).type,
                r = a.unreadCount,
                a = a.lastMessage;
              (o = o === D.CONV_GROUP),
                (a = this._isNotExpired(a)),
                o && r && a && t.push(e[n]);
            }
            return t;
          },
        },
        {
          key: '_isNotExpired',
          value: function (e) {
            return (
              !(!e || !e.lastTime) && e.lastTime > Te() - this.EXPIRED_TIME
            );
          },
        },
        {
          key: '_createPromiseList',
          value: function (e) {
            for (var t = [], n = 0; n < e.length; n++) {
              var i = (o = e[n]).conversationID,
                o = (o = o.unreadCount) < this.COUNT ? o : this.COUNT;
              this._map.set(i, { msgCount: o, list: [] }),
                (o = this._sigM.get(11).getMessageList({ conversationID: i })),
                t.push(o);
            }
            return t;
          },
        },
        {
          key: '_concurrentGetMessageList',
          value: function (e) {
            var t = this,
              n = [];
            return Promise.all(e).then(function (e) {
              for (var i = 0; i < e.length; i++) {
                var o = (r = e[i]).code,
                  r = r.data;
                0 === o &&
                  0 !== r.messageList.length &&
                  (t._handleMessageList(r.messageList),
                  (o = t._relayGetMessageList(r)) && n.push(o));
              }
              return 0 < n.length ? t._concurrentGetMessageList(n) : t._map;
            });
          },
        },
        {
          key: '_relayGetMessageList',
          value: function (e) {
            var t = e.messageList,
              n = e.nextReqMessageID;
            if (((e = e.isCompleted), 0 === t.length)) return null;
            t = t[0].conversationID;
            var i = this._map.get(t).msgCount;
            return 0 === i || e
              ? null
              : this._sigM
                  .get(11)
                  .getMessageList({
                    conversationID: t,
                    nextReqMessageID: n,
                    count: i,
                  });
          },
        },
        {
          key: '_handleMessageList',
          value: function (e) {
            var t = e.length,
              n = e[0].conversationID,
              i = (o = this._map.get(n)).msgCount,
              o = o.list;
            this._map.set(n, {
              msgCount: 0 < i - t ? i - t : 0,
              list: o.concat(this._sigM.filterMessageList(e)),
            });
          },
        },
        {
          key: '_getRelatedToMeMap',
          value: function (e) {
            for (var t = 0; t < e.length; t++) {
              var n = e[t];
              this._saveRelatedToMe(n);
            }
            return this._relatedToMeMap;
          },
        },
        {
          key: '_saveRelatedToMe',
          value: function (e) {
            var t,
              n = (t = this._sigM.getPayloadData(e) || {}).actionType,
              i = void 0 === (t = t.inviteID) ? '' : t;
            switch (void 0 === n ? '' : n) {
              case S.ACTION_TYPE_INVITE:
                this._setHistoryInvite(e);
                break;
              case S.ACTION_TYPE_REJECT_INVITE:
              case S.ACTION_TYPE_ACCEPT_INVITE:
                this._updateHistoryInvite(e);
                break;
              case S.ACTION_TYPE_CANCEL_INVITE:
                this._delHistoryInvite(i);
                break;
              case S.ACTION_TYPE_INVITE_TIMEOUT:
                this._updateHistoryInvite(e);
            }
          },
        },
        {
          key: '_setHistoryInvite',
          value: function (e) {
            var n = this._sigM.getPayloadData(e) || {},
              i = void 0 === (i = n.inviteID) ? '' : i,
              o = void 0 === (o = n.inviteeList) ? [] : o,
              r = void 0 === (r = n.timeout) ? 0 : r,
              a = this._sigM.getMyUserID();
            o.includes(a) &&
              ((o = Te() - e.time),
              (0 < r && r < o && 0 !== r) ||
                this._relatedToMeMap.set(
                  i,
                  t(t({}, n), {}, { messageList: [e] })
                ));
          },
        },
        {
          key: '_delHistoryInvite',
          value: function (e) {
            this._relatedToMeMap.has(e) && this._relatedToMeMap.delete(e);
          },
        },
        {
          key: '_updateHistoryInvite',
          value: function (e) {
            var t =
                void 0 ===
                (t = (o = this._sigM.getPayloadData(e) || {}).inviteID)
                  ? ''
                  : t,
              n = void 0 === (o = o.inviteeList) ? [] : o;
            if (this._relatedToMeMap.has(t)) {
              for (
                var i = (o = this._relatedToMeMap.get(t)).inviteeList,
                  o = o.messageList,
                  r = 0;
                r < n.length;
                r++
              ) {
                var a = n[r];
                i.includes(a) && i.splice(i.indexOf(a), 1);
              }
              0 === i.length ? this._delHistoryInvite(t) : o.push(e);
            } else this._delHistoryInvite(t);
          },
        },
        {
          key: '_sortSignaling',
          value: function (e) {
            var t = [];
            return (
              e.forEach(function (e) {
                t = [].concat(v(t), v(e.messageList));
              }),
              t.sort(function (e, t) {
                return e.time - t.time;
              })
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            this._map.clear(), this._relatedToMeMap.clear();
          },
        },
      ]),
      Ds),
    gs = r(function e(t, n) {
      i(this, e),
        (this.businessID = t.businessID || 1),
        (this.inviteID = t.inviteID),
        (this.groupID = t.groupID || ''),
        (this.inviter = t.inviter || ''),
        (this.inviteeList = t.inviteeList || []),
        (this.data = t.data || ''),
        (this.actionType = t.actionType || S.ACTION_TYPE_INVITE),
        (this.timeout = t.timeout || 0);
    }),
    _s = ['message'],
    vs = ['message'],
    ms =
      (s(Es, An),
      (Na = g(Es)),
      r(Es, [
        {
          key: 'onC2CUnreadHandleCompleted',
          value: function () {
            (this._isC2CUnreadHandleCompleted = !0),
              this._isCloudConfigCompleted &&
                this._isConvSyncCompleted &&
                !this._isSyncCompleted &&
                this.onReady();
          },
        },
        {
          key: 'onConvSyncCompleted',
          value: function () {
            (this._isConvSyncCompleted = !0),
              this._isC2CUnreadHandleCompleted &&
                this._isCloudConfigCompleted &&
                !this._isSyncCompleted &&
                this.onReady();
          },
        },
        {
          key: 'onCloudConfig',
          value: function () {
            this._isCloudConfigCompleted = !0;
            var e = this.getCloudConfig('history_s_count'),
              t = this.getCloudConfig('history_s_time');
            ut(e) || (e = Number(e)),
              ut(t) || (t = Number(t)),
              this._historySignalingHandler.setCloudConfig(e, t),
              this._isC2CUnreadHandleCompleted &&
                this._isConvSyncCompleted &&
                !this._isSyncCompleted &&
                this.onReady();
          },
        },
        {
          key: '_isListenerExisted',
          value: function () {
            return (
              -1 <
              this._m
                .getOEmitInst()
                .eventNames()
                .indexOf(S.NEW_INVITATION_RECEIVED)
            );
          },
        },
        {
          key: 'onReady',
          value: function () {
            this._isSyncCompleted = !0;
            var e = this._isListenerExisted();
            Ae.l(''.concat(this._n, '.onReady. isListenerExisted: ').concat(e)),
              e && this._historySignalingHandler.getHistorySignaling();
          },
        },
        {
          key: 'onNewMessageList',
          value: function (e) {
            if (0 < (e = this.filterMessageList(e)).length)
              return this._remoteSignalingHandler.onNewMessageList(e);
          },
        },
        {
          key: 'onMessageModified',
          value: function (e) {
            if (0 < (e = this.filterMessageList(e)).length)
              return this._remoteSignalingHandler.onMessageModified(e);
          },
        },
        {
          key: 'hasInviteInfo',
          value: function (e) {
            return this._inviteInfoMap.has(e);
          },
        },
        {
          key: 'getInviteInfo',
          value: function (e) {
            return this._inviteInfoMap.get(e);
          },
        },
        {
          key: 'setInviteInfo',
          value: function (e, n) {
            var i = n.message;
            (n = h(n, _s)),
              Ae.l(
                ''
                  .concat(this._n, '.setInviteInfo inviteID:')
                  .concat(e, ' data:'),
                n
              ),
              this._inviteInfoMap.set(e, t(t({}, n), {}, { message: i }));
          },
        },
        {
          key: 'deleteInviteInfo',
          value: function (e) {
            this.hasInviteInfo(e) &&
              (Ae.l(
                ''.concat(this._n, '.deleteInviteInfo inviteID:').concat(e, '.')
              ),
              this._inviteInfoMap.delete(e));
          },
        },
        {
          key: 'updateInviteInfo',
          value: function (e) {
            var t = ''.concat(this._n, '.updateInviteInfo'),
              n = e.inviteID,
              i = e.inviter,
              o = e.inviteeList;
            (e = e.groupID),
              Ae.l(
                ''
                  .concat(t, ' inviteID:')
                  .concat(n, ' inviter:')
                  .concat(i, ' groupID:')
                  .concat(e)
              ),
              e && this.hasInviteInfo(n)
                ? ((i = o[0]),
                  (e = this.getInviteInfo(n).inviteeList).includes(i) &&
                    (e.splice(e.indexOf(i), 1),
                    Ae.l(
                      ''
                        .concat(t, ' remove ')
                        .concat(i, '. localInviteeList.length:')
                        .concat(e.length)
                    )),
                  0 === e.length && this.deleteInviteInfo(n))
                : this.deleteInviteInfo(n);
          },
        },
        {
          key: 'canIUseSignaling',
          value: function () {
            return this._canIUseSignaling;
          },
        },
        {
          key: 'emitEvent',
          value: function (e, t) {
            this.emitOEvt(e, t);
          },
        },
        {
          key: 'addSignalingListener',
          value: function (e, t, n) {
            this._canIUseSignaling || (this._canIUseSignaling = !0),
              this._m.getOEmitInst().on(e, t, n);
          },
        },
        {
          key: 'removeSignalingListener',
          value: function (e, t, n) {
            this._m.getOEmitInst().off(e, t, n),
              this._isListenerExisted() || (this._canIUseSignaling = !1);
          },
        },
        {
          key: 'invite',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('invite'),
              o = this._localSignalingHandler.createInviteInfo(e),
              r = o.message,
              a = o.customData,
              s = o.inviteID;
            return (
              Ae.l(
                ''
                  .concat(i, ' options:')
                  .concat(JSON.stringify(e), ' inviteID:')
                  .concat(s)
              ),
              this.sendSignaling(r, e)
                .then(function (e) {
                  return e && 0 === e.code
                    ? (n.setInviteInfo(s, t(t({}, a), {}, { message: r })),
                      n.startTimer(t(t({}, a), {}, { inviteID: s })),
                      t(t({}, e), {}, { inviteID: s }))
                    : e;
                })
                .catch(function (e) {
                  return In(e);
                })
            );
          },
        },
        {
          key: 'inviteSync',
          value: function (e, n, i) {
            var o = this,
              r = ''.concat(this._n, '.').concat('inviteSync'),
              a = this._localSignalingHandler.createInviteInfo(e),
              s = a.message,
              c = a.customData,
              u = a.inviteID;
            return (
              Ae.l(
                ''
                  .concat(r, ' options:')
                  .concat(JSON.stringify(e), ' inviteID:')
                  .concat(u)
              ),
              this.sendSignaling(s, e)
                .then(function (e) {
                  if (e && 0 === e.code)
                    return (
                      o.setInviteInfo(u, t(t({}, c), {}, { message: s })),
                      o.startTimer(t(t({}, c), {}, { inviteID: u })),
                      n && n({ inviteID: u }),
                      { inviteID: u }
                    );
                  i && i(0 === e.code, e.message || '');
                })
                .catch(function (e) {
                  return i && i(e.code, e.message), In(e);
                }),
              u
            );
          },
        },
        {
          key: '_handleImResponse',
          value: function (e, t, n) {
            t &&
              0 === t.code &&
              ((this._isHandling = !1),
              n ? this.deleteInviteInfo(e.inviteID) : this.updateInviteInfo(e));
          },
        },
        {
          key: 'cancel',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('cancel');
            if (
              (Ae.l(''.concat(i, ' options:').concat(JSON.stringify(e))),
              !this.hasInviteInfo(e.inviteID) || this._isHandling)
            )
              return In({ code: wn.INVALID_CANCEL_MESSAGE });
            this._isHandling = !0;
            var o = this._localSignalingHandler.createCancelCustomData(e);
            if (!o)
              return (
                (this._isHandling = !1),
                In({ code: wn.SIGNALING_NO_PERMISSION })
              );
            i = o.groupID;
            var r = o.inviteeList;
            return (
              (i = i || r[0]),
              (r = this.createSignaling(o, i)),
              this.sendSignaling(r, e)
                .then(function (i) {
                  return (
                    n._handleImResponse(o, i, !0),
                    0 === i.code ? t(t({}, i), {}, { inviteID: e.inviteID }) : i
                  );
                })
                .catch(function (e) {
                  return In(e);
                })
            );
          },
        },
        {
          key: 'accept',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('accept');
            if (
              (Ae.l(''.concat(i, ' options:').concat(JSON.stringify(e))),
              !this.hasInviteInfo(e.inviteID) || this._isHandling)
            )
              return In({ code: wn.SIGNALING_INVALID_INVITE_ID });
            this._isHandling = !0;
            var o = this._localSignalingHandler.createAcceptCustomData(e);
            return o
              ? ((i = this.createSignaling(o)),
                this.sendSignaling(i, e)
                  .then(function (i) {
                    return (
                      n._handleImResponse(o, i),
                      0 === i.code
                        ? t(t({}, i), {}, { inviteID: e.inviteID })
                        : i
                    );
                  })
                  .catch(function (e) {
                    return In(e);
                  }))
              : ((this._isHandling = !1),
                In({ code: wn.SIGNALING_NO_PERMISSION }));
          },
        },
        {
          key: 'reject',
          value: function (e) {
            var n = this,
              i = ''.concat(this._n, '.').concat('reject');
            if (
              (Ae.l(''.concat(i, ' options:').concat(JSON.stringify(e))),
              !this.hasInviteInfo(e.inviteID) || this._isHandling)
            )
              return In({ code: wn.SIGNALING_INVALID_INVITE_ID });
            this._isHandling = !0;
            var o = this._localSignalingHandler.createRejectCustomData(e);
            return o
              ? ((i = this.createSignaling(o)),
                this.sendSignaling(i, e)
                  .then(function (i) {
                    return (
                      n._handleImResponse(o, i, !0),
                      0 === i.code
                        ? t(t({}, i), {}, { inviteID: e.inviteID })
                        : i
                    );
                  })
                  .catch(function (e) {
                    return In(e);
                  }))
              : ((this._isHandling = !1),
                In({ code: wn.SIGNALING_NO_PERMISSION }));
          },
        },
        {
          key: 'getSignalingInfo',
          value: function (e) {
            var t = ''.concat(this._n, '.getSignalingInfo'),
              n = e.ID,
              i = e.from,
              o = e.to,
              r = this._filterSignaling(e),
              a = null;
            return (
              r && ((e = this.getPayloadData(e)), (a = new gs(e))),
              (e = r ? 'actionType:'.concat(a.actionType) : ''),
              Ae.l(
                ''
                  .concat(t, ' messageID:')
                  .concat(n, ' from:')
                  .concat(i, ' to:')
                  .concat(o, ' ') + ''.concat(e, ' isSignaling:').concat(r)
              ),
              a
            );
          },
        },
        {
          key: 'modifyInvitation',
          value: function (e) {
            var n = this,
              i = e.inviteID,
              o = e.data;
            if (!this.hasInviteInfo(e.inviteID) || this._isHandling)
              return In({ code: wn.SIGNALING_INVALID_INVITE_ID });
            this._isHandling = !0;
            var r = (e = this.getInviteInfo(i)).message,
              a = h(e, vs),
              s = r.payload.data;
            return (
              (a.data = o),
              (r.payload.data = JSON.stringify(a)),
              this.get(2)
                .modifyRemoteMessage(r)
                .then(function (e) {
                  return (
                    n.setInviteInfo(i, t(t({}, a), {}, { message: r })),
                    (n._isHandling = !1),
                    e
                  );
                })
                .catch(function (e) {
                  return (n._isHandling = !1), (r.payload.data = s), In(e);
                })
            );
          },
        },
        {
          key: '_genMsgCtrlInfo',
          value: function () {
            var e =
                void 0 ===
                (e = (o =
                  0 < arguments.length && void 0 !== arguments[0]
                    ? arguments[0]
                    : {}).data)
                  ? ''
                  : e,
              t = o.onlineUserOnly,
              n = void 0 === (n = o.inviteID) ? '' : n,
              i = o.offlinePushInfo,
              o = o.actionType,
              r = { _onlineOnlyFlag: !1 };
            return (
              (n = {
                onlineUserOnly:
                  (r =
                    n && this.getInviteInfo(n)
                      ? this.getInviteInfo(n).message
                      : r)._onlineOnlyFlag ||
                  t ||
                  !1,
                offlinePushInfo: i,
                messageControlInfo: {
                  excludedFromContentModeration: !0,
                  excludedFromUnreadCount: !1,
                  excludedFromLastMessage: !1,
                },
              }),
              o === S.ACTION_TYPE_INVITE_TIMEOUT
                ? ((r = !!e.match(/excludeTimeoutSignalingFromHistoryMessage/)),
                  (n.messageControlInfo.excludedFromUnreadCount = r),
                  (n.messageControlInfo.excludedFromLastMessage = r),
                  n)
                : ((t = !!e.match(/excludeFromHistoryMessage/)),
                  (i = !!e.match(/excludeOriginalSignalingFromHistoryMessage/)),
                  (n.messageControlInfo.excludedFromUnreadCount = t || i),
                  (n.messageControlInfo.excludedFromLastMessage = t || i),
                  n)
            );
          },
        },
        {
          key: 'sendSignaling',
          value: function (e, t) {
            var n = this;
            return this.get(2)
              .sendMessageInstance(e, this._genMsgCtrlInfo(t))
              .catch(function (e) {
                return (n._isHandling = !1), In(e);
              });
          },
        },
        {
          key: 'filterMessageList',
          value: function (e) {
            var t = this;
            return e.filter(function (e) {
              return t._filterSignaling(e);
            });
          },
        },
        {
          key: 'getPayloadData',
          value: function (e) {
            return this._remoteSignalingHandler.getPayloadData(e);
          },
        },
        {
          key: 'createSignaling',
          value: function (e, t) {
            var n = e.groupID,
              i = e.inviter;
            return (
              (t = {
                to: t || n || i,
                conversationType: n ? D.CONV_GROUP : D.CONV_C2C,
                priority: D.MSG_PRIORITY_HIGH,
                payload: { data: JSON.stringify(e) },
              }),
              (i = this.get(2).createCustomMessage(t)),
              Ae.l(''.concat(this._n, '.createSignaling. message:'), i),
              i
            );
          },
        },
        {
          key: '_filterSignaling',
          value: function (e) {
            var t,
              n,
              i = !1;
            return (
              e.type &&
                e.type === D.MSG_CUSTOM &&
                ((t = e.cloudCustomData),
                (e = void 0 === (e = e.payload.data) ? '' : e),
                (t = (void 0 === t ? '' : t).match(/"type":"tsignaling"/)),
                (n = e.match(/inviteID/)),
                (e = e.match(/actionType/)),
                (i = t || (n && e))),
              !!i
            );
          },
        },
        {
          key: 'startTimer',
          value: function (e) {
            var t,
              n,
              i,
              o = this,
              r = ''.concat(this._n, '.startTimer'),
              a = e.timeout,
              s = e.inviteID,
              c = e.inviter,
              u = e.groupID,
              l = c === this.getMyUserID();
            Ae.l(
              ''
                .concat(r, ' timeout:')
                .concat(a, ' isInviter:')
                .concat(l, ' groupID:')
                .concat(u)
            ),
              a <= 0 ||
                ((t = l ? a + 5 : a),
                (n = 1),
                (i = setInterval(function () {
                  var a = o._hasLocalInviteInfo(e, l);
                  n < t && a
                    ? ++n
                    : (a && o._sendTimeoutNotice(s, l),
                      Ae.l(''.concat(r, ' end.')),
                      clearInterval(i));
                }, 1e3)));
          },
        },
        {
          key: '_hasLocalInviteInfo',
          value: function (e, t) {
            var n = e.inviteID;
            if (((e = e.groupID), !this.hasInviteInfo(n))) return !1;
            var i = ''.concat(this._n, '._hasLocalInviteInfo'),
              o = this.getInviteInfo(n).inviteeList;
            return (
              Ae.l(
                ''
                  .concat(i, ' inviteID:')
                  .concat(n, ' inviteeList:')
                  .concat(o, ' groupID:')
                  .concat(e)
              ),
              !e ||
                (t
                  ? 0 < o.length
                  : 0 < o.length && o.includes(this.getMyUserID()))
            );
          },
        },
        {
          key: '_getReceiver',
          value: function (e, t) {
            var n = t.groupID,
              i = t.inviteeList;
            return (t = t.inviter), e ? n || i[0] : n || t;
          },
        },
        {
          key: '_sendTimeoutNotice',
          value: function (e, n) {
            var i = this,
              o = this.getInviteInfo(e),
              r = this._getReceiver(n, o),
              a =
                (Ae.l(
                  ''
                    .concat(this._n, '._sendTimeoutNotice inviteID:')
                    .concat(e, ' to:')
                    .concat(r, ' isInviter:')
                    .concat(n)
                ),
                this._localSignalingHandler.createTimeoutCustomData(
                  t(t({}, o), {}, { isInviter: n })
                )),
              s = this.createSignaling(a, r);
            return this.sendSignaling(s, a).then(function (t) {
              var o, r, c;
              t &&
                0 === t.code &&
                ((t = a.data),
                (o = a.groupID),
                (r = a.inviteeList),
                (c = a.inviter),
                i.emitEvent(S.INVITATION_TIMEOUT, {
                  data: t,
                  groupID: o,
                  inviteID: e,
                  inviteeList: r,
                  inviter: c,
                  isSelfTimeout: !0,
                  message: s,
                }),
                n ? i.deleteInviteInfo(e) : i.updateInviteInfo(a));
            });
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._inviteInfoMap.clear(),
              (this._canIUseSignaling = !1),
              (this._isHandling = !1),
              this._historySignalingHandler.reset(),
              (this._isC2CUnreadHandleCompleted = !1),
              (this._isConvSyncCompleted = !1),
              (this._isSyncCompleted = !1),
              (this._isCloudConfigCompleted = !1);
          },
        },
      ]),
      Es),
    ys = ['followTypeList'],
    Is = { NONE: 0, FOLLOWERS: 1, FOLLOWING: 2, MUTUAL: 3 },
    Ms =
      (s(Ts, An),
      (ba = g(Ts)),
      r(Ts, [
        {
          key: '_onCloudConfig',
          value: function () {
            var e = this.getCloudConfig('follow_req_count');
            ut(e) ||
              ((e = Number(e)),
              (this.DEFAULT_COUNT = e > this.MAX_COUNT ? this.MAX_COUNT : e),
              this._clearFollowList());
          },
        },
        {
          key: 'clearCacheOnReconnected',
          value: function () {
            this._clearFollowList(), this._followType.clear();
          },
        },
        {
          key: 'onFollowInfoNotify',
          value: function (e) {
            var t =
                void 0 === (t = (e = e.dataList || {}).followAddList) ? [] : t,
              n = void 0 === (n = e.followDeleteList) ? [] : n,
              i = ((e = e.pushType), this._initFollowInfo());
            1 === e
              ? this._handleFollowAddList({ followAddList: t, followInfo: i })
              : this._handleFollowDeleteList({
                  followDeleteList: n,
                  followInfo: i,
                }),
              this._emitEvent(i),
              Ae.l(
                ''
                  .concat(this._n, '.onFollowInfoNotify pushType:')
                  .concat(e, ' followAddList:')
                  .concat(t.length, ' followDeleteList:')
                  .concat(n.length)
              );
          },
        },
        {
          key: '_initFollowInfo',
          value: function () {
            var e = {};
            return (
              Object.values(Is).forEach(function (t) {
                t !== Is.NONE && (e[t] = { userInfoList: [], isAdd: !1 });
              }),
              e
            );
          },
        },
        {
          key: '_handleFollowAddList',
          value: function (e) {
            var t = this,
              n = e.followAddList,
              i = e.followInfo;
            n.forEach(function (e) {
              var n = void 0 === (n = e.followTypeList) ? [] : n,
                o = h(e, ys);
              n.forEach(function (e) {
                i[e].userInfoList.push(o), (i[e].isAdd = !0);
              }),
                t._setFollowType(e.userID, e.followType);
            });
          },
        },
        {
          key: '_handleFollowDeleteList',
          value: function (e) {
            var t = this,
              n = e.followDeleteList,
              i = e.followInfo;
            n.forEach(function (e) {
              var n = void 0 === (n = e.followTypeList) ? [] : n,
                o = e.userID;
              n.forEach(function (e) {
                i[e].userInfoList.push(o), (i[e].isAdd = !1);
              }),
                t._setFollowType(e.userID, e.followType);
            });
          },
        },
        {
          key: '_emitEvent',
          value: function (e) {
            var t = this;
            Object.keys(e).forEach(function (n) {
              n = Number(n);
              var i = e[n];
              0 < i.userInfoList.length &&
                (n === Is.FOLLOWERS &&
                  (t._clearFollowList(Is.FOLLOWERS),
                  t.emitOEvt(E.MY_FOLLOWERS_LIST_UPDATED, i)),
                n === Is.FOLLOWING &&
                  (t._clearFollowList(Is.FOLLOWING),
                  t.emitOEvt(E.MY_FOLLOWING_LIST_UPDATED, i)),
                n === Is.MUTUAL &&
                  (t._clearFollowList(Is.MUTUAL),
                  t.emitOEvt(E.MUTUAL_FOLLOWERS_LIST_UPDATED, i)));
            });
          },
        },
        {
          key: 'followUser',
          value: function (e) {
            if (!this.canIUse(w.FOLLOW)) return this.noUse('followUser');
            var t = ''.concat(this._n, '.').concat('followUser'),
              n = 'userIDList:'.concat(e.length),
              i = new ei('followUser');
            return (
              i.setMessage(n),
              Ae.l(''.concat(t, ' ').concat(n)),
              this.req({
                P: Gn.FOLLOW,
                data: {
                  fromAccount: this.getMyUserID(),
                  userIDList: e.map(function (e) {
                    return { userID: e };
                  }),
                },
              })
                .then(function (e) {
                  return (
                    i.end(), Ae.l(''.concat(t, ' ok.')), mn(e.data.resultList)
                  );
                })
                .catch(function (e) {
                  return (
                    i.setError(e).end(),
                    Ae.e(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'unfollowUser',
          value: function (e) {
            if (!this.canIUse(w.FOLLOW)) return this.noUse('unfollowUser');
            var t = ''.concat(this._n, '.').concat('unfollowUser'),
              n = 'userIDList:'.concat(e.length),
              i = new ei('unfollowUser');
            return (
              i.setMessage(n),
              Ae.l(''.concat(t, ' ').concat(n)),
              this.req({
                P: Gn.UNFOLLOW,
                data: { fromAccount: this.getMyUserID(), userIDList: e },
              })
                .then(function (e) {
                  return (
                    i.end(), Ae.l(''.concat(t, ' ok.')), mn(e.data.resultList)
                  );
                })
                .catch(function (e) {
                  return (
                    i.setError(e).end(),
                    Ae.e(''.concat(t, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'getMyFollowersList',
          value: function () {
            var e = this,
              n =
                0 < arguments.length && void 0 !== arguments[0]
                  ? arguments[0]
                  : '',
              i = 'getMyFollowersList';
            if (!this.canIUse(w.FOLLOW)) return this.noUse(i);
            var o = n || this.FIRST_PAGE_INDEX;
            if (this._myFollowersList.has(o)) {
              var r = (s = this._myFollowersList.get(o)).resultList,
                a = s.nextCursor,
                s = s.lastUpdateTime;
              if (Date.now() - s < this.MAX_CATCH_TIME && 0 < r.length)
                return (
                  Ae.l(
                    ''
                      .concat(this._n, '.')
                      .concat(i, ' nextCursor:')
                      .concat(n, ' from local.')
                  ),
                  yn({ resultList: r, nextCursor: a })
                );
            }
            return this._getFollowList(n, Is.FOLLOWERS).then(function (r) {
              return (
                e._myFollowersList.set(
                  o,
                  t(t({}, r), {}, { lastUpdateTime: Date.now() })
                ),
                Ae.l(
                  ''
                    .concat(e._n, '.')
                    .concat(i, ' nextCursor:')
                    .concat(n, ' from remote.')
                ),
                mn(r)
              );
            });
          },
        },
        {
          key: 'getMyFollowingList',
          value: function () {
            var e = this,
              n =
                0 < arguments.length && void 0 !== arguments[0]
                  ? arguments[0]
                  : '',
              i = 'getMyFollowingList';
            if (!this.canIUse(w.FOLLOW)) return this.noUse(i);
            var o = n || this.FIRST_PAGE_INDEX;
            if (this._myFollowingList.has(o)) {
              var r = (s = this._myFollowingList.get(o)).resultList,
                a = s.nextCursor,
                s = s.lastUpdateTime;
              if (Date.now() - s < this.MAX_CATCH_TIME && 0 < r.length)
                return (
                  Ae.l(
                    ''
                      .concat(this._n, '.')
                      .concat(i, ' nextCursor:')
                      .concat(n, ' from local.')
                  ),
                  yn({ resultList: r, nextCursor: a })
                );
            }
            return this._getFollowList(n, Is.FOLLOWING).then(function (r) {
              return (
                e._myFollowingList.set(
                  o,
                  t(t({}, r), {}, { lastUpdateTime: Date.now() })
                ),
                Ae.l(
                  ''
                    .concat(e._n, '.')
                    .concat(i, ' nextCursor:')
                    .concat(n, ' from remote.')
                ),
                mn(r)
              );
            });
          },
        },
        {
          key: 'getMutualFollowersList',
          value: function () {
            var e = this,
              n =
                0 < arguments.length && void 0 !== arguments[0]
                  ? arguments[0]
                  : '',
              i = 'getMutualFollowersList';
            if (!this.canIUse(w.FOLLOW)) return this.noUse(i);
            var o = n || this.FIRST_PAGE_INDEX;
            if (this._myMutualFollowersList.has(o)) {
              var r = (s = this._myMutualFollowersList.get(o)).resultList,
                a = s.nextCursor,
                s = s.lastUpdateTime;
              if (Date.now() - s < this.MAX_CATCH_TIME && 0 < r.length)
                return (
                  Ae.l(
                    ''
                      .concat(this._n, '.')
                      .concat(i, ' nextCursor:')
                      .concat(n, ' from local.')
                  ),
                  yn({ resultList: r, nextCursor: a })
                );
            }
            return this._getFollowList(n, Is.MUTUAL).then(function (r) {
              return (
                e._myMutualFollowersList.set(
                  o,
                  t(t({}, r), {}, { lastUpdateTime: Date.now() })
                ),
                Ae.l(
                  ''
                    .concat(e._n, '.')
                    .concat(i, ' nextCursor:')
                    .concat(n, ' from remote.')
                ),
                mn(r)
              );
            });
          },
        },
        {
          key: '_getFollowList',
          value: function (e, n) {
            var i = this,
              o = new ei('_getFollowList');
            return (
              o.setMessage('nextCursor:'.concat(e, ' type:').concat(n)),
              this.req({
                P: Gn.GET_FOLLOW,
                data: {
                  fromAccount: this.getMyUserID(),
                  count: this.DEFAULT_COUNT,
                  nextCursor: e,
                  type: n,
                },
              })
                .then(function (e) {
                  o.end();
                  var n = void 0 === (n = (e = e.data).resultList) ? [] : n,
                    r = ((e = void 0 === (e = e.nextCursor) ? '' : e), []);
                  return (
                    n.forEach(function (e) {
                      var n = e.userID,
                        o = e.followTime;
                      (e = e.profileList),
                        r.push(
                          t(
                            { userID: n, followTime: o },
                            i._handleProfileItem(void 0 === e ? [] : e)
                          )
                        );
                    }),
                    { resultList: r, nextCursor: e }
                  );
                })
                .catch(function (e) {
                  return (
                    o.setError(e).end(),
                    Ae.e(''.concat(i._n, '._getFollowList failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: '_handleProfileItem',
          value: function (e) {
            var t = {};
            return (
              e.forEach(function (e) {
                switch (e.tag) {
                  case be.NICK:
                    t.nick = e.value;
                    break;
                  case be.GENDER:
                    t.gender = e.value;
                    break;
                  case be.BIRTHDAY:
                    t.birthday = e.value;
                    break;
                  case be.LOCATION:
                    t.location = e.value;
                    break;
                  case be.SELFSIGNATURE:
                    t.selfSignature = e.value;
                    break;
                  case be.ALLOWTYPE:
                    t.allowType = e.value;
                    break;
                  case be.LANGUAGE:
                    t.language = e.value;
                    break;
                  case be.AVATAR:
                    t.avatar = e.value;
                    break;
                  case be.MESSAGESETTINGS:
                    t.messageSettings = e.value;
                    break;
                  case be.ADMINFORBIDTYPE:
                    t.adminForbidType = e.value;
                    break;
                  case be.LEVEL:
                    t.level = e.value;
                    break;
                  case be.ROLE:
                    t.role = e.value;
                    break;
                  default:
                    t[e.tag] = e.value;
                }
              }),
              t
            );
          },
        },
        {
          key: 'getUserFollowInfo',
          value: function (e) {
            if (!this.canIUse(w.FOLLOW)) return this.noUse('getUserFollowInfo');
            var t = e,
              n = !1,
              i =
                (ut(e) && ((t = [this.getMyUserID()]), (n = !0)),
                ''.concat(this._n, '.').concat('getUserFollowInfo')),
              o =
                ((e = 'userIDList:'
                  .concat(t.length, ' isGetMyFollowInfo:')
                  .concat(n)),
                new ei('getUserFollowInfo'));
            return (
              o.setMessage(e),
              Ae.l(''.concat(i, ' ').concat(e)),
              this.req({
                P: Gn.GET_FOLLOW_INFO,
                data: { fromAccount: this.getMyUserID(), userIDList: t },
              })
                .then(function (e) {
                  o.end(),
                    Ae.l(''.concat(i, ' ok.')),
                    (e = e.data.followInfoList);
                  var t = [];
                  return (
                    (void 0 === e ? [] : e).forEach(function (e) {
                      var n = e.followersCount,
                        i = e.followingCount;
                      (e = e.mutualFollowersCount),
                        t.push({
                          followersCount: n,
                          followingCount: i,
                          mutualFollowersCount: e,
                        });
                    }),
                    mn(t)
                  );
                })
                .catch(function (e) {
                  return (
                    o.setError(e).end(),
                    Ae.e(''.concat(i, ' failed. error:'), e),
                    In(e)
                  );
                })
            );
          },
        },
        {
          key: 'checkFollowType',
          value: function (e) {
            var t = this;
            if (!this.canIUse(w.FOLLOW)) return this.noUse('checkFollowType');
            100 < e.length &&
              ((e = e.slice(0, 100)), Ae.w(''.concat(n, ' ').concat(Bt(100))));
            var n = ''.concat(this._n, '.').concat('checkFollowType'),
              i = 'userIDList length:'.concat(e.length, ' '),
              o = new ei('checkFollowType'),
              r = (o.setMessage(i), Ae.l(''.concat(n, ' ').concat(i)), []),
              a = [];
            return (
              e.forEach(function (e) {
                var n;
                t._followType.has(e)
                  ? ((n = t._followType.get(e)),
                    r.push({ userID: e, followType: n }))
                  : a.push(e);
              }),
              Ae.l(
                ''
                  .concat(n, ' from local count:')
                  .concat(r.length, ', from remote count:')
                  .concat(a.length, '.')
              ),
              0 === a.length
                ? yn(r)
                : this.req({
                    P: Gn.CHECK_FOLLOW_TYPE,
                    data: { fromAccount: this.getMyUserID(), userIDList: a },
                  })
                    .then(function (e) {
                      return (
                        o.end(),
                        Ae.l(''.concat(n, ' ok.')),
                        (void 0 === (e = e.data.resultList) ? [] : e).forEach(
                          function (e) {
                            var n = e.userID;
                            (e = e.followType),
                              t._setFollowType(n, e),
                              r.push({ userID: n, followType: e });
                          }
                        ),
                        mn(r)
                      );
                    })
                    .catch(function (e) {
                      return (
                        o.setError(e).end(),
                        Ae.e(''.concat(n, ' failed. error:'), e),
                        In(e)
                      );
                    })
            );
          },
        },
        {
          key: '_setFollowType',
          value: function (e, t) {
            this._followType.set(e, t);
          },
        },
        {
          key: '_clearFollowList',
          value: function (e) {
            if (ut(e))
              return (
                this._myFollowersList.clear(),
                this._myFollowingList.clear(),
                void this._myMutualFollowersList.clear()
              );
            e !== Is.FOLLOWERS
              ? e !== Is.FOLLOWING
                ? e !== Is.MUTUAL || this._myMutualFollowersList.clear()
                : this._myFollowingList.clear()
              : this._myFollowersList.clear();
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              this._clearFollowList(),
              this._followType.clear();
          },
        },
      ]),
      Ts),
    Cs = yr(function (e, t) {
      var i =
        'undefined' != typeof Uint8Array &&
        'undefined' != typeof Uint16Array &&
        'undefined' != typeof Int32Array;
      (t.assign = function (e) {
        for (
          var t, i, o = Array.prototype.slice.call(arguments, 1);
          o.length;

        ) {
          var r = o.shift();
          if (r) {
            if ('object' !== n(r))
              throw new TypeError(r + 'must be non-object');
            for (var a in r)
              (t = r),
                (i = a),
                Object.prototype.hasOwnProperty.call(t, i) && (e[a] = r[a]);
          }
        }
        return e;
      }),
        (t.shrinkBuf = function (e, t) {
          return e.length === t
            ? e
            : e.subarray
              ? e.subarray(0, t)
              : ((e.length = t), e);
        });
      var o = {
          arraySet: function (e, t, n, i, o) {
            if (t.subarray && e.subarray) e.set(t.subarray(n, n + i), o);
            else for (var r = 0; r < i; r++) e[o + r] = t[n + r];
          },
          flattenChunks: function (e) {
            for (var t, n, i, o = 0, r = 0, a = e.length; r < a; r++)
              o += e[r].length;
            for (i = new Uint8Array(o), r = t = 0, a = e.length; r < a; r++)
              (n = e[r]), i.set(n, t), (t += n.length);
            return i;
          },
        },
        r = {
          arraySet: function (e, t, n, i, o) {
            for (var r = 0; r < i; r++) e[o + r] = t[n + r];
          },
          flattenChunks: function (e) {
            return [].concat.apply([], e);
          },
        };
      (t.setTyped = function (e) {
        e
          ? ((t.Buf8 = Uint8Array),
            (t.Buf16 = Uint16Array),
            (t.Buf32 = Int32Array),
            t.assign(t, o))
          : ((t.Buf8 = Array),
            (t.Buf16 = Array),
            (t.Buf32 = Array),
            t.assign(t, r));
      }),
        t.setTyped(i);
    });
  function Ts(e) {
    return (
      i(this, Ts),
      ((e = ba.call(this, e))._n = 'FollowModule'),
      (e._myFollowersList = new Map()),
      (e._myFollowingList = new Map()),
      (e._myMutualFollowersList = new Map()),
      (e._followType = new Map()),
      (e.MAX_CATCH_TIME = 6e5),
      (e.FIRST_PAGE_INDEX = it()),
      (e.DEFAULT_COUNT = 500),
      (e.MAX_COUNT = 1e3),
      e.getIEmitInst().on(qi.CLOUD_CONFIG, e._onCloudConfig, f(e)),
      e
    );
  }
  function Es(e) {
    i(this, Es),
      ((e = Na.call(this, e))._n = 'SignalingModule'),
      (e._inviteInfoMap = new Map()),
      (e._canIUseSignaling = !1),
      (e._isHandling = !1),
      (e._remoteSignalingHandler = new ps(f(e))),
      (e._localSignalingHandler = new hs(f(e))),
      (e._historySignalingHandler = new fs(f(e))),
      (e._isC2CUnreadHandleCompleted = !1),
      (e._isConvSyncCompleted = !1),
      (e._isSyncCompleted = !1),
      (e._isCloudConfigCompleted = !1);
    var t = e.getIEmitInst();
    return (
      t.on(qi.C2C_UNREAD_HANDLE_COMPLETED, e.onC2CUnreadHandleCompleted, f(e)),
      t.on(qi.CONV_SYNC_COMPLETED, e.onConvSyncCompleted, f(e)),
      t.on(qi.CLOUD_CONFIG, e.onCloudConfig, f(e)),
      e
    );
  }
  function Ds(e) {
    i(this, Ds),
      (this._n = 'HistorySignalingHandler'),
      (this._sigM = e),
      (this.COUNT = 20),
      (this.EXPIRED_TIME = 300),
      (this._map = new Map()),
      (this._relatedToMeMap = new Map());
  }
  function Ss(e) {
    i(this, Ss), (this._n = 'LocalSignalingHandler'), (this._sigM = e);
  }
  function ks(e) {
    i(this, ks), (this._n = 'RemoteSignalingHandler'), (this._sigM = e);
  }
  function Rs(e) {
    i(this, Rs),
      (this._m = e),
      (this._n = 'ErrMsgModule'),
      (this.TIM_ERROR_ASSISTANCE = 'tim_error_assistance'),
      (this.STORAGE_EXPIRES_TIME = 6048e5),
      (this._map = new Map()),
      this._init();
  }
  function Ls(e) {
    i(this, Ls),
      (this._m = e),
      (this._n = 'TransCmdModule'),
      (this._TRTCCommandList = [
        'tui_room_svr.*',
        'callkit_records_svr.*',
        'room_engine_srv.*',
        'room_engine_http_srv.*',
        'room_engine_mic.*',
        'live_engine_srv.*',
        'live_engine_http_srv.*',
      ]),
      (this._TRTCCommandMap = new Map()),
      this._setTRTCCommandMap(),
      this._m.getIEmitInst().on(qi.CLOUD_CONFIG, this._onCloudConfig, this);
  }
  function As(e) {
    return (
      i(this, As),
      ((e = Pa.call(this, e))._n = 'ProfanityFilterModule'),
      (e._plugin = null),
      (e._filterConfigMap = new Map()),
      (e._startIndex = 0),
      (e._version = 0),
      (e._canIUseLexicon = !1),
      (e._isFetching = !1),
      (e._expiredTime = 0),
      e
    );
  }
  function Os(e) {
    var t;
    return (
      i(this, Os),
      ((t = wa.call(this, e))._m = e),
      (t._n = 'TIMPushModule'),
      (t._pluginName = 'TIMPush'),
      (t._pushPlugin = void 0),
      (t._androidPushConfig = {}),
      (t._deviceToken = ''),
      (t._businessID = 0),
      (t._iOSBusinessID = 0),
      (t._c2cUnreadCount = 0),
      (t._groupUnreadCount = 0),
      (t._isWebUniapp = 0),
      (t._deviceInfo = {
        notificationStatus: 0,
        deviceModel: '',
        systemVersion: '',
        pushVersion: '1.0.1',
        packageName: '',
      }),
      t
    );
  }
  function bs(e) {
    var t;
    return (
      i(this, bs),
      ((t = Ua.call(this, e))._m = e),
      (t._n = 'OfflinePushModule'),
      (t._offlinePushPlugin = void 0),
      (t._androidPushConfig = {
        huaweiPushBussinessId: '',
        xiaomiPushBussinessId: '',
        xiaomiPushAppId: '',
        xiaomiPushAppKey: '',
        meizuPushBussinessId: '',
        meizuPushAppId: '',
        meizuPushAppKey: '',
        vivoPushBussinessId: '',
        fcmPushBussinessId: '',
        oppoPushBussinessId: '',
        oppoPushAppKey: '',
        oppoPushAppSecret: '',
        honorPushBussinessId: '',
      }),
      (t._deviceToken = ''),
      (t._businessID = 0),
      (t._iosBusinessID = 0),
      (t._c2cUnreadCount = 0),
      (t._groupUnreadCount = 0),
      (t._isWebUniapp = 0),
      t
    );
  }
  function Ns(e) {
    i(this, Ns),
      (this._m = e),
      (this._n = 'CommercialConfigModule'),
      (this._expiredTime = 0),
      (this._isFetching = !1),
      (this._purchasedFeatureHandler = new rs(this));
  }
  function Ps(e) {
    i(this, Ps),
      (this._commercialConfigM = e),
      (this._n = 'PurchasedFeatureHandler'),
      (this._isSCMReported = !1),
      (this._featureMap = new Map());
  }
  function ws(e) {
    return (
      i(this, ws),
      ((e = Ga.call(this, e))._n = 'WorkerTimerModule'),
      (e._isWorkerEnabled = !0),
      (e._workerTimer = null),
      (e._timerID = -1),
      e._init(),
      e.getIEmitInst().on(qi.CLOUD_CONFIG, e._onCloudConfig, f(e)),
      e
    );
  }
  function Us(e) {
    return (
      i(this, Us),
      ((e = xa.call(this, e))._n = 'SnsModule'),
      (e._friendHandler = new es(f(e))),
      (e._friendApplicationHandler = new Za(f(e))),
      (e._friendGroupHandler = new ns(f(e))),
      e
        .getIEmitInst()
        .on(qi.A2KEY_AND_TINYID_UPDATED, e.onContextUpdated, f(e)),
      e
    );
  }
  function Gs(e) {
    i(this, Gs),
      (this._snsM = e),
      (this._n = 'FriendGroupHandler'),
      (this._map = new Map());
  }
  function xs(e) {
    i(this, xs),
      Ve(e) ||
        ((this.name = e.name || ''),
        (this.userIDList = e.userIDList || []),
        (this.count = this.userIDList.length || 0));
  }
  function Fs(e) {
    i(this, Fs),
      (this._snsM = e),
      (this._n = 'FriendHandler'),
      (this._map = new Map()),
      (this._startIdx = 0),
      (this._standardSeq = 0),
      (this._customSeq = 0),
      (this._expirationTime = 18e4);
  }
  function qs(e, n) {
    i(this, qs),
      (this.userID = e),
      (this.remark = ''),
      (this.groupList = []),
      (this.source = ''),
      (this.addTime = 0),
      (this.friendCustomField = []),
      (this.timestamp = 0);
    var o = {},
      r = [];
    if (((o.userID = e), !Ve(n)))
      for (var a, s = '', c = 0, u = n.length; c < u; c++)
        if (
          ((s = n[c].tag), (a = n[c].value), -1 < s.indexOf('Tag_SNS_Custom'))
        )
          this.friendCustomField.push({ key: s, value: a });
        else if (-1 < s.indexOf('Tag_Profile_Custom'))
          r.push({ key: s, value: a });
        else
          switch (s) {
            case be.NICK:
              o.nick = a;
              break;
            case be.GENDER:
              o.gender = a;
              break;
            case be.BIRTHDAY:
              o.birthday = a;
              break;
            case be.LOCATION:
              o.location = a;
              break;
            case be.SELFSIGNATURE:
              o.selfSignature = a;
              break;
            case be.ALLOWTYPE:
              o.allowType = a;
              break;
            case be.LANGUAGE:
              o.language = a;
              break;
            case be.AVATAR:
              o.avatar = a;
              break;
            case be.MESSAGESETTINGS:
              o.messageSettings = a;
              break;
            case be.ADMINFORBIDTYPE:
              o.adminForbidType = a;
              break;
            case be.LEVEL:
              o.level = a;
              break;
            case be.ROLE:
              o.role = a;
              break;
            case Ne.REMARK:
              this.remark = a;
              break;
            case Ne.ADDTIME:
              this.addTime = a;
              break;
            case Ne.GROUP:
              this.groupList = JSON.parse(JSON.stringify(a));
              break;
            case Ne.ADDSOURCE:
              this.source = a;
              break;
            case Ne.ADDWORDING:
              break;
            default:
              Ae.l('snsProfileItem unknown tag->', n[c].tag);
          }
    this.profile = new to(t(t({}, o), {}, { profileCustomField: r }));
  }
  function Vs(e) {
    i(this, Vs),
      (this._snsM = e),
      (this._n = 'FriendApplicationHandler'),
      (this._startTime = 0),
      (this._maxLimited = 100),
      (this._currentSeq = 0),
      (this._map = new Map()),
      (this._unreadCount = 0);
  }
  function Bs(e) {
    i(this, Bs),
      ((e = Fa.call(this, e))._n = 'QualityStatModule'),
      (e.TAG = 'im-ssolog-quality-stat'),
      (e.reportIndex = 0),
      (e.wholePeriod = !1),
      (e._qualityItems = [xn, Fn, qn, Vn, Bn, Hn, jn, Kn, Wn, zn]),
      (e._messageSentItems = [qn, Vn, Bn, Hn, jn]),
      (e._messageReceivedItems = [Kn, Wn, zn]),
      (e.REPORT_INTERVAL = 120),
      (e.REPORT_SDKAPPID_BLACKLIST = []),
      (e.REPORT_TINYID_WHITELIST = []),
      (e._statInfoArr = []),
      (e._avgRTT = new za()),
      (e._avgE2EDelay = new Wa()),
      (e._rateMessageSent = new $a()),
      (e._rateMessageReceived = new Ya());
    var t = e.getIEmitInst();
    return (
      t.on(qi.A2KEY_AND_TINYID_UPDATED, e._onLoginSuccess, f(e)),
      t.on(qi.CLOUD_CONFIG, e._onCloudConfig, f(e)),
      e
    );
  }
  function Hs() {
    i(this, Hs), (this._lastMap = new Map()), (this._currentMap = new Map());
  }
  function js() {
    i(this, js), (this._map = new Map());
  }
  function Ks() {
    i(this, Ks),
      (this._n = 'AvgRTT'),
      (this._requestCount = 0),
      (this._rttArray = []);
  }
  function Ws() {
    i(this, Ws), (this._n = 'AvgE2EDelay'), (this._e2eDelayArray = []);
  }
  function zs(e) {
    return (
      i(this, zs),
      ((e = qa.call(this, e))._n = 'RecoverMsgModule'),
      (e.PULL_LIMIT_COUNT = 15),
      e
    );
  }
  function $s(e) {
    return (
      i(this, $s),
      ((e = Va.call(this, e))._n = 'CloudControlModule'),
      (e._cloudConfig = new Map()),
      (e._expiredTime = 0),
      (e._version = 0),
      (e._isFetching = !1),
      e
    );
  }
  function Ys(e) {
    return (
      i(this, Ys),
      ((e = Ba.call(this, e))._n = 'SessionModule'),
      (e._platform = e.getPlatform()),
      (e._pHandler = new _a(f(e))),
      (e._msgDispatcher = new ma(f(e))),
      (e._cmdFreqLimitMap = new Map()),
      (e._cmdReqInfoMap = new Map()),
      (e._serverOverloadInfoMap = new Map()),
      (e._incrementalPullContactFlag = !0),
      e._init(),
      e.getIEmitInst().on(qi.CLOUD_CONFIG, e._onCloudConfig, f(e)),
      e
    );
  }
  function Js(e, t, n, i) {
    for (var o = 65535 & e, r = (e >>> 16) & 65535, a = 0; 0 !== n; ) {
      for (
        n -= a = 2e3 < n ? 2e3 : n;
        (r = (r + (o = (o + t[i++]) | 0)) | 0), --a;

      );
      (o %= 65521), (r %= 65521);
    }
    return o | (r << 16);
  }
  function Xs(e, t, n, i) {
    var o = ec,
      r = i + n;
    e ^= -1;
    for (var a = i; a < r; a++) e = (e >>> 8) ^ o[255 & (e ^ t[a])];
    return ~e;
  }
  function Qs(e, t, n, i, o, r, a, s) {
    var c,
      u,
      l,
      d,
      p,
      h,
      f,
      g,
      _,
      v = s.bits,
      m = 0,
      y = 0,
      I = 0,
      M = 0,
      C = 0,
      T = 0,
      E = 0,
      D = 0,
      S = 0,
      k = 0,
      R = null,
      L = 0,
      A = new Cs.Buf16(16),
      O = new Cs.Buf16(16),
      b = null,
      N = 0;
    for (m = 0; m <= 15; m++) A[m] = 0;
    for (y = 0; y < i; y++) A[t[n + y]]++;
    for (C = v, M = 15; 1 <= M && 0 === A[M]; M--);
    if ((M < C && (C = M), 0 === M))
      return (o[r++] = 20971520), (o[r++] = 20971520), (s.bits = 1), 0;
    for (I = 1; I < M && 0 === A[I]; I++);
    for (C < I && (C = I), m = D = 1; m <= 15; m++)
      if ((D = (D << 1) - A[m]) < 0) return -1;
    if (0 < D && (0 === e || 1 !== M)) return -1;
    for (O[1] = 0, m = 1; m < 15; m++) O[m + 1] = O[m] + A[m];
    for (y = 0; y < i; y++) 0 !== t[n + y] && (a[O[t[n + y]]++] = y);
    if (
      ((h =
        0 === e
          ? ((R = b = a), 19)
          : 1 === e
            ? ((R = tc), (L -= 257), (b = nc), (N -= 257), 256)
            : ((R = ic), (b = oc), -1)),
      (m = I),
      (p = r),
      (E = y = k = 0),
      (l = -1),
      (d = (S = 1 << (T = C)) - 1),
      (1 === e && 852 < S) || (2 === e && 592 < S))
    )
      return 1;
    for (;;) {
      for (
        _ =
          a[y] < h
            ? ((g = 0), a[y])
            : a[y] > h
              ? ((g = b[N + a[y]]), R[L + a[y]])
              : ((g = 96), 0),
          c = 1 << (f = m - E),
          I = u = 1 << T;
        (o[p + (k >> E) + (u -= c)] = (f << 24) | (g << 16) | _), 0 !== u;

      );
      for (c = 1 << (m - 1); k & c; ) c >>= 1;
      if (((k = 0 !== c ? (k & (c - 1)) + c : 0), y++, 0 == --A[m])) {
        if (m === M) break;
        m = t[n + a[y]];
      }
      if (C < m && (k & d) !== l) {
        for (
          p += I, D = 1 << (T = m - (E = 0 === E ? C : E));
          T + E < M && !((D -= A[T + E]) <= 0);

        )
          T++, (D <<= 1);
        if (((S += 1 << T), (1 === e && 852 < S) || (2 === e && 592 < S)))
          return 1;
        o[(l = k & d)] = (C << 24) | (T << 16) | (p - r);
      }
    }
    return (
      0 !== k && (o[p + k] = ((m - E) << 24) | (64 << 16)), (s.bits = C), 0
    );
  }
  Cs.assign, Cs.shrinkBuf, Cs.setTyped, Cs.Buf8, Cs.Buf16, Cs.Buf32;
  var ec = (function () {
      for (var e = [], t = 0; t < 256; t++) {
        for (var n = t, i = 0; i < 8; i++)
          n = 1 & n ? 3988292384 ^ (n >>> 1) : n >>> 1;
        e[t] = n;
      }
      return e;
    })(),
    tc = [
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59,
      67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0,
    ],
    nc = [
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,
      19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78,
    ],
    ic = [
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513,
      769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0,
    ],
    oc = [
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23,
      24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64,
    ];
  function rc(e) {
    return (
      ((e >>> 24) & 255) +
      ((e >>> 8) & 65280) +
      ((65280 & e) << 8) +
      ((255 & e) << 24)
    );
  }
  function ac() {
    (this.mode = 0),
      (this.last = !1),
      (this.wrap = 0),
      (this.havedict = !1),
      (this.flags = 0),
      (this.dmax = 0),
      (this.check = 0),
      (this.total = 0),
      (this.head = null),
      (this.wbits = 0),
      (this.wsize = 0),
      (this.whave = 0),
      (this.wnext = 0),
      (this.window = null),
      (this.hold = 0),
      (this.bits = 0),
      (this.length = 0),
      (this.offset = 0),
      (this.extra = 0),
      (this.lencode = null),
      (this.distcode = null),
      (this.lenbits = 0),
      (this.distbits = 0),
      (this.ncode = 0),
      (this.nlen = 0),
      (this.ndist = 0),
      (this.have = 0),
      (this.next = null),
      (this.lens = new Cs.Buf16(320)),
      (this.work = new Cs.Buf16(288)),
      (this.lendyn = null),
      (this.distdyn = null),
      (this.sane = 0),
      (this.back = 0),
      (this.was = 0);
  }
  function sc(e) {
    var t;
    return e && e.state
      ? ((t = e.state),
        (e.total_in = e.total_out = t.total = 0),
        (e.msg = ''),
        t.wrap && (e.adler = 1 & t.wrap),
        (t.mode = 1),
        (t.last = 0),
        (t.havedict = 0),
        (t.dmax = 32768),
        (t.head = null),
        (t.hold = 0),
        (t.bits = 0),
        (t.lencode = t.lendyn = new Cs.Buf32(852)),
        (t.distcode = t.distdyn = new Cs.Buf32(592)),
        (t.sane = 1),
        (t.back = -1),
        0)
      : -2;
  }
  function cc(e) {
    var t;
    return e && e.state
      ? (((t = e.state).wsize = 0), (t.whave = 0), (t.wnext = 0), sc(e))
      : -2;
  }
  function uc(e, t) {
    var n, i;
    return e && e.state
      ? ((i = e.state),
        t < 0 ? ((n = 0), (t = -t)) : ((n = 1 + (t >> 4)), t < 48 && (t &= 15)),
        t && (t < 8 || 15 < t)
          ? -2
          : (null !== i.window && i.wbits !== t && (i.window = null),
            (i.wrap = n),
            (i.wbits = t),
            cc(e)))
      : -2;
  }
  function lc(e, t) {
    var n;
    return e
      ? ((n = new ac()),
        ((e.state = n).window = null),
        0 !== (n = uc(e, t)) && (e.state = null),
        n)
      : -2;
  }
  var dc,
    pc,
    hc = !0;
  function fc(e, t, n, i) {
    var o;
    return (
      null === (e = e.state).window &&
        ((e.wsize = 1 << e.wbits),
        (e.wnext = 0),
        (e.whave = 0),
        (e.window = new Cs.Buf8(e.wsize))),
      i >= e.wsize
        ? (Cs.arraySet(e.window, t, n - e.wsize, e.wsize, 0),
          (e.wnext = 0),
          (e.whave = e.wsize))
        : ((o = e.wsize - e.wnext) > i && (o = i),
          Cs.arraySet(e.window, t, n - i, o, e.wnext),
          (i -= o)
            ? (Cs.arraySet(e.window, t, n - i, i, 0),
              (e.wnext = i),
              (e.whave = e.wsize))
            : ((e.wnext += o),
              e.wnext === e.wsize && (e.wnext = 0),
              e.whave < e.wsize && (e.whave += o))),
      0
    );
  }
  var gc = {
      inflateReset: cc,
      inflateReset2: uc,
      inflateResetKeep: sc,
      inflateInit: function (e) {
        return lc(e, 15);
      },
      inflateInit2: lc,
      inflate: function (e, t) {
        var n,
          i,
          o,
          r,
          a,
          s,
          c,
          u,
          l,
          d,
          p,
          h,
          f,
          g,
          _,
          v,
          m,
          y,
          I,
          M,
          C,
          T,
          E,
          D,
          S = 0,
          k = new Cs.Buf8(4),
          R = [
            16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
          ];
        if (!e || !e.state || !e.output || (!e.input && 0 !== e.avail_in))
          return -2;
        12 === (n = e.state).mode && (n.mode = 13),
          (a = e.next_out),
          (o = e.output),
          (c = e.avail_out),
          (r = e.next_in),
          (i = e.input),
          (s = e.avail_in),
          (u = n.hold),
          (l = n.bits),
          (d = s),
          (p = c),
          (T = 0);
        e: for (;;)
          switch (n.mode) {
            case 1:
              if (0 === n.wrap) {
                n.mode = 13;
                break;
              }
              for (; l < 16; ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              if (2 & n.wrap && 35615 === u) {
                (k[(n.check = 0)] = 255 & u),
                  (k[1] = (u >>> 8) & 255),
                  (n.check = Xs(n.check, k, 2, 0)),
                  (l = u = 0),
                  (n.mode = 2);
                break;
              }
              if (
                ((n.flags = 0),
                n.head && (n.head.done = !1),
                !(1 & n.wrap) || (((255 & u) << 8) + (u >> 8)) % 31)
              ) {
                (e.msg = 'incorrect header check'), (n.mode = 30);
                break;
              }
              if (8 != (15 & u)) {
                (e.msg = 'unknown compression method'), (n.mode = 30);
                break;
              }
              if (((l -= 4), (C = 8 + (15 & (u >>>= 4))), 0 === n.wbits))
                n.wbits = C;
              else if (C > n.wbits) {
                (e.msg = 'invalid window size'), (n.mode = 30);
                break;
              }
              (n.dmax = 1 << C),
                (e.adler = n.check = 1),
                (n.mode = 512 & u ? 10 : 12),
                (l = u = 0);
              break;
            case 2:
              for (; l < 16; ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              if (((n.flags = u), 8 != (255 & n.flags))) {
                (e.msg = 'unknown compression method'), (n.mode = 30);
                break;
              }
              if (57344 & n.flags) {
                (e.msg = 'unknown header flags set'), (n.mode = 30);
                break;
              }
              n.head && (n.head.text = (u >> 8) & 1),
                512 & n.flags &&
                  ((k[0] = 255 & u),
                  (k[1] = (u >>> 8) & 255),
                  (n.check = Xs(n.check, k, 2, 0))),
                (l = u = 0),
                (n.mode = 3);
            case 3:
              for (; l < 32; ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              n.head && (n.head.time = u),
                512 & n.flags &&
                  ((k[0] = 255 & u),
                  (k[1] = (u >>> 8) & 255),
                  (k[2] = (u >>> 16) & 255),
                  (k[3] = (u >>> 24) & 255),
                  (n.check = Xs(n.check, k, 4, 0))),
                (l = u = 0),
                (n.mode = 4);
            case 4:
              for (; l < 16; ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              n.head && ((n.head.xflags = 255 & u), (n.head.os = u >> 8)),
                512 & n.flags &&
                  ((k[0] = 255 & u),
                  (k[1] = (u >>> 8) & 255),
                  (n.check = Xs(n.check, k, 2, 0))),
                (l = u = 0),
                (n.mode = 5);
            case 5:
              if (1024 & n.flags) {
                for (; l < 16; ) {
                  if (0 === s) break e;
                  s--, (u += i[r++] << l), (l += 8);
                }
                (n.length = u),
                  n.head && (n.head.extra_len = u),
                  512 & n.flags &&
                    ((k[0] = 255 & u),
                    (k[1] = (u >>> 8) & 255),
                    (n.check = Xs(n.check, k, 2, 0))),
                  (l = u = 0);
              } else n.head && (n.head.extra = null);
              n.mode = 6;
            case 6:
              if (
                1024 & n.flags &&
                ((h = (h = n.length) > s ? s : h) &&
                  (n.head &&
                    ((C = n.head.extra_len - n.length),
                    n.head.extra ||
                      (n.head.extra = new Array(n.head.extra_len)),
                    Cs.arraySet(n.head.extra, i, r, h, C)),
                  512 & n.flags && (n.check = Xs(n.check, i, h, r)),
                  (s -= h),
                  (r += h),
                  (n.length -= h)),
                n.length)
              )
                break e;
              (n.length = 0), (n.mode = 7);
            case 7:
              if (2048 & n.flags) {
                if (0 === s) break e;
                for (
                  h = 0;
                  (C = i[r + h++]),
                    n.head &&
                      C &&
                      n.length < 65536 &&
                      (n.head.name += String.fromCharCode(C)),
                    C && h < s;

                );
                if (
                  (512 & n.flags && (n.check = Xs(n.check, i, h, r)),
                  (s -= h),
                  (r += h),
                  C)
                )
                  break e;
              } else n.head && (n.head.name = null);
              (n.length = 0), (n.mode = 8);
            case 8:
              if (4096 & n.flags) {
                if (0 === s) break e;
                for (
                  h = 0;
                  (C = i[r + h++]),
                    n.head &&
                      C &&
                      n.length < 65536 &&
                      (n.head.comment += String.fromCharCode(C)),
                    C && h < s;

                );
                if (
                  (512 & n.flags && (n.check = Xs(n.check, i, h, r)),
                  (s -= h),
                  (r += h),
                  C)
                )
                  break e;
              } else n.head && (n.head.comment = null);
              n.mode = 9;
            case 9:
              if (512 & n.flags) {
                for (; l < 16; ) {
                  if (0 === s) break e;
                  s--, (u += i[r++] << l), (l += 8);
                }
                if (u !== (65535 & n.check)) {
                  (e.msg = 'header crc mismatch'), (n.mode = 30);
                  break;
                }
                l = u = 0;
              }
              n.head &&
                ((n.head.hcrc = (n.flags >> 9) & 1), (n.head.done = !0)),
                (e.adler = n.check = 0),
                (n.mode = 12);
              break;
            case 10:
              for (; l < 32; ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              (e.adler = n.check = rc(u)), (l = u = 0), (n.mode = 11);
            case 11:
              if (0 === n.havedict)
                return (
                  (e.next_out = a),
                  (e.avail_out = c),
                  (e.next_in = r),
                  (e.avail_in = s),
                  (n.hold = u),
                  (n.bits = l),
                  2
                );
              (e.adler = n.check = 1), (n.mode = 12);
            case 12:
              if (5 === t || 6 === t) break e;
            case 13:
              if (n.last) {
                (u >>>= 7 & l), (l -= 7 & l), (n.mode = 27);
                break;
              }
              for (; l < 3; ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              switch (((n.last = 1 & u), --l, 3 & (u >>>= 1))) {
                case 0:
                  n.mode = 14;
                  break;
                case 1:
                  L = A = void 0;
                  var L,
                    A = n;
                  if (hc) {
                    for (
                      dc = new Cs.Buf32(512), pc = new Cs.Buf32(32), L = 0;
                      L < 144;

                    )
                      A.lens[L++] = 8;
                    for (; L < 256; ) A.lens[L++] = 9;
                    for (; L < 280; ) A.lens[L++] = 7;
                    for (; L < 288; ) A.lens[L++] = 8;
                    for (
                      Qs(1, A.lens, 0, 288, dc, 0, A.work, { bits: 9 }), L = 0;
                      L < 32;

                    )
                      A.lens[L++] = 5;
                    Qs(2, A.lens, 0, 32, pc, 0, A.work, { bits: 5 }), (hc = !1);
                  }
                  if (
                    ((A.lencode = dc),
                    (A.lenbits = 9),
                    (A.distcode = pc),
                    (A.distbits = 5),
                    (n.mode = 20),
                    6 !== t)
                  )
                    break;
                  (u >>>= 2), (l -= 2);
                  break e;
                case 2:
                  n.mode = 17;
                  break;
                case 3:
                  (e.msg = 'invalid block type'), (n.mode = 30);
              }
              (u >>>= 2), (l -= 2);
              break;
            case 14:
              for (u >>>= 7 & l, l -= 7 & l; l < 32; ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              if ((65535 & u) != ((u >>> 16) ^ 65535)) {
                (e.msg = 'invalid stored block lengths'), (n.mode = 30);
                break;
              }
              if (((n.length = 65535 & u), (l = u = 0), (n.mode = 15), 6 === t))
                break e;
            case 15:
              n.mode = 16;
            case 16:
              if ((h = n.length)) {
                if (0 === (h = c < (h = s < h ? s : h) ? c : h)) break e;
                Cs.arraySet(o, i, r, h, a),
                  (s -= h),
                  (r += h),
                  (c -= h),
                  (a += h),
                  (n.length -= h);
                break;
              }
              n.mode = 12;
              break;
            case 17:
              for (; l < 14; ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              if (
                ((n.nlen = 257 + (31 & u)),
                (u >>>= 5),
                (l -= 5),
                (n.ndist = 1 + (31 & u)),
                (u >>>= 5),
                (l -= 5),
                (n.ncode = 4 + (15 & u)),
                (u >>>= 4),
                (l -= 4),
                286 < n.nlen || 30 < n.ndist)
              ) {
                (e.msg = 'too many length or distance symbols'), (n.mode = 30);
                break;
              }
              (n.have = 0), (n.mode = 18);
            case 18:
              for (; n.have < n.ncode; ) {
                for (; l < 3; ) {
                  if (0 === s) break e;
                  s--, (u += i[r++] << l), (l += 8);
                }
                (n.lens[R[n.have++]] = 7 & u), (u >>>= 3), (l -= 3);
              }
              for (; n.have < 19; ) n.lens[R[n.have++]] = 0;
              if (
                ((n.lencode = n.lendyn),
                (n.lenbits = 7),
                (E = { bits: n.lenbits }),
                (T = Qs(0, n.lens, 0, 19, n.lencode, 0, n.work, E)),
                (n.lenbits = E.bits),
                T)
              ) {
                (e.msg = 'invalid code lengths set'), (n.mode = 30);
                break;
              }
              (n.have = 0), (n.mode = 19);
            case 19:
              for (; n.have < n.nlen + n.ndist; ) {
                for (
                  ;
                  (v =
                    ((S = n.lencode[u & ((1 << n.lenbits) - 1)]) >>> 16) & 255),
                    (m = 65535 & S),
                    !((_ = S >>> 24) <= l);

                ) {
                  if (0 === s) break e;
                  s--, (u += i[r++] << l), (l += 8);
                }
                if (m < 16) (u >>>= _), (l -= _), (n.lens[n.have++] = m);
                else {
                  if (16 === m) {
                    for (D = _ + 2; l < D; ) {
                      if (0 === s) break e;
                      s--, (u += i[r++] << l), (l += 8);
                    }
                    if (((u >>>= _), (l -= _), 0 === n.have)) {
                      (e.msg = 'invalid bit length repeat'), (n.mode = 30);
                      break;
                    }
                    (C = n.lens[n.have - 1]),
                      (h = 3 + (3 & u)),
                      (u >>>= 2),
                      (l -= 2);
                  } else if (17 === m) {
                    for (D = _ + 3; l < D; ) {
                      if (0 === s) break e;
                      s--, (u += i[r++] << l), (l += 8);
                    }
                    (C = 0),
                      (h = 3 + (7 & (u >>>= _))),
                      (u >>>= 3),
                      (l = l - _ - 3);
                  } else {
                    for (D = _ + 7; l < D; ) {
                      if (0 === s) break e;
                      s--, (u += i[r++] << l), (l += 8);
                    }
                    (C = 0),
                      (h = 11 + (127 & (u >>>= _))),
                      (u >>>= 7),
                      (l = l - _ - 7);
                  }
                  if (n.have + h > n.nlen + n.ndist) {
                    (e.msg = 'invalid bit length repeat'), (n.mode = 30);
                    break;
                  }
                  for (; h--; ) n.lens[n.have++] = C;
                }
              }
              if (30 === n.mode) break;
              if (0 === n.lens[256]) {
                (e.msg = 'invalid code -- missing end-of-block'), (n.mode = 30);
                break;
              }
              if (
                ((n.lenbits = 9),
                (E = { bits: n.lenbits }),
                (T = Qs(1, n.lens, 0, n.nlen, n.lencode, 0, n.work, E)),
                (n.lenbits = E.bits),
                T)
              ) {
                (e.msg = 'invalid literal/lengths set'), (n.mode = 30);
                break;
              }
              if (
                ((n.distbits = 6),
                (n.distcode = n.distdyn),
                (E = { bits: n.distbits }),
                (T = Qs(2, n.lens, n.nlen, n.ndist, n.distcode, 0, n.work, E)),
                (n.distbits = E.bits),
                T)
              ) {
                (e.msg = 'invalid distances set'), (n.mode = 30);
                break;
              }
              if (((n.mode = 20), 6 === t)) break e;
            case 20:
              n.mode = 21;
            case 21:
              if (6 <= s && 258 <= c) {
                (e.next_out = a),
                  (e.avail_out = c),
                  (e.next_in = r),
                  (e.avail_in = s),
                  (n.hold = u),
                  (n.bits = l),
                  (j =
                    V =
                    U =
                    w =
                    P =
                    N =
                    b =
                    O =
                    ie =
                    ne =
                    te =
                    ee =
                    Q =
                    Z =
                    X =
                    J =
                    Y =
                    $ =
                    z =
                    W =
                    K =
                    H =
                    B =
                    q =
                    F =
                      void 0);
                var O,
                  b,
                  N,
                  P,
                  w,
                  U,
                  G = e,
                  x = p,
                  F = G.state,
                  q = G.next_in,
                  V = G.input,
                  B = q + (G.avail_in - 5),
                  H = G.next_out,
                  j = G.output,
                  K = H - (x - G.avail_out),
                  W = H + (G.avail_out - 257),
                  z = F.dmax,
                  $ = F.wsize,
                  Y = F.whave,
                  J = F.wnext,
                  X = F.window,
                  Z = F.hold,
                  Q = F.bits,
                  ee = F.lencode,
                  te = F.distcode,
                  ne = (1 << F.lenbits) - 1,
                  ie = (1 << F.distbits) - 1;
                t: do {
                  for (
                    Q < 15 &&
                      ((Z += V[q++] << Q),
                      (Q += 8),
                      (Z += V[q++] << Q),
                      (Q += 8)),
                      O = ee[Z & ne];
                    ;

                  ) {
                    if (
                      ((Z >>>= b = O >>> 24),
                      (Q -= b),
                      0 == (b = (O >>> 16) & 255))
                    )
                      j[H++] = 65535 & O;
                    else {
                      if (!(16 & b)) {
                        if (!(64 & b)) {
                          O = ee[(65535 & O) + (Z & ((1 << b) - 1))];
                          continue;
                        }
                        if (32 & b) {
                          F.mode = 12;
                          break t;
                        }
                        (G.msg = 'invalid literal/length code'), (F.mode = 30);
                        break t;
                      }
                      for (
                        N = 65535 & O,
                          (b &= 15) &&
                            (Q < b && ((Z += V[q++] << Q), (Q += 8)),
                            (N += Z & ((1 << b) - 1)),
                            (Z >>>= b),
                            (Q -= b)),
                          Q < 15 &&
                            ((Z += V[q++] << Q),
                            (Q += 8),
                            (Z += V[q++] << Q),
                            (Q += 8)),
                          O = te[Z & ie];
                        ;

                      ) {
                        if (
                          ((Z >>>= b = O >>> 24),
                          (Q -= b),
                          !(16 & (b = (O >>> 16) & 255)))
                        ) {
                          if (!(64 & b)) {
                            O = te[(65535 & O) + (Z & ((1 << b) - 1))];
                            continue;
                          }
                          (G.msg = 'invalid distance code'), (F.mode = 30);
                          break t;
                        }
                        if (
                          ((P = 65535 & O),
                          Q < (b &= 15) &&
                            ((Z += V[q++] << Q),
                            (Q += 8) < b && ((Z += V[q++] << Q), (Q += 8))),
                          (P += Z & ((1 << b) - 1)) > z)
                        ) {
                          (G.msg = 'invalid distance too far back'),
                            (F.mode = 30);
                          break t;
                        }
                        if (((Z >>>= b), (Q -= b), P > (b = H - K))) {
                          if ((b = P - b) > Y && F.sane) {
                            (G.msg = 'invalid distance too far back'),
                              (F.mode = 30);
                            break t;
                          }
                          if (((U = X), (w = 0) === J)) {
                            if (((w += $ - b), b < N)) {
                              for (N -= b; (j[H++] = X[w++]), --b; );
                              (w = H - P), (U = j);
                            }
                          } else if (J < b) {
                            if (((w += $ + J - b), (b -= J) < N)) {
                              for (N -= b; (j[H++] = X[w++]), --b; );
                              if (((w = 0), J < N)) {
                                for (N -= b = J; (j[H++] = X[w++]), --b; );
                                (w = H - P), (U = j);
                              }
                            }
                          } else if (((w += J - b), b < N)) {
                            for (N -= b; (j[H++] = X[w++]), --b; );
                            (w = H - P), (U = j);
                          }
                          for (; 2 < N; )
                            (j[H++] = U[w++]),
                              (j[H++] = U[w++]),
                              (j[H++] = U[w++]),
                              (N -= 3);
                          N && ((j[H++] = U[w++]), 1 < N && (j[H++] = U[w++]));
                        } else {
                          for (
                            w = H - P;
                            (j[H++] = j[w++]),
                              (j[H++] = j[w++]),
                              (j[H++] = j[w++]),
                              2 < (N -= 3);

                          );
                          N && ((j[H++] = j[w++]), 1 < N && (j[H++] = j[w++]));
                        }
                        break;
                      }
                    }
                    break;
                  }
                } while (q < B && H < W);
                (q -= N = Q >> 3),
                  (Z &= (1 << (Q -= N << 3)) - 1),
                  (G.next_in = q),
                  (G.next_out = H),
                  (G.avail_in = q < B ? B - q + 5 : 5 - (q - B)),
                  (G.avail_out = H < W ? W - H + 257 : 257 - (H - W)),
                  (F.hold = Z),
                  (F.bits = Q),
                  (a = e.next_out),
                  (o = e.output),
                  (c = e.avail_out),
                  (r = e.next_in),
                  (i = e.input),
                  (s = e.avail_in),
                  (u = n.hold),
                  (l = n.bits),
                  12 === n.mode && (n.back = -1);
                break;
              }
              for (
                n.back = 0;
                (v =
                  ((S = n.lencode[u & ((1 << n.lenbits) - 1)]) >>> 16) & 255),
                  (m = 65535 & S),
                  !((_ = S >>> 24) <= l);

              ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              if (v && !(240 & v)) {
                for (
                  y = _, I = v, M = m;
                  (v =
                    ((S = n.lencode[M + ((u & ((1 << (y + I)) - 1)) >> y)]) >>>
                      16) &
                    255),
                    (m = 65535 & S),
                    !(y + (_ = S >>> 24) <= l);

                ) {
                  if (0 === s) break e;
                  s--, (u += i[r++] << l), (l += 8);
                }
                (u >>>= y), (l -= y), (n.back += y);
              }
              if (
                ((u >>>= _), (l -= _), (n.back += _), (n.length = m), 0 === v)
              ) {
                n.mode = 26;
                break;
              }
              if (32 & v) {
                (n.back = -1), (n.mode = 12);
                break;
              }
              if (64 & v) {
                (e.msg = 'invalid literal/length code'), (n.mode = 30);
                break;
              }
              (n.extra = 15 & v), (n.mode = 22);
            case 22:
              if (n.extra) {
                for (D = n.extra; l < D; ) {
                  if (0 === s) break e;
                  s--, (u += i[r++] << l), (l += 8);
                }
                (n.length += u & ((1 << n.extra) - 1)),
                  (u >>>= n.extra),
                  (l -= n.extra),
                  (n.back += n.extra);
              }
              (n.was = n.length), (n.mode = 23);
            case 23:
              for (
                ;
                (v =
                  ((S = n.distcode[u & ((1 << n.distbits) - 1)]) >>> 16) & 255),
                  (m = 65535 & S),
                  !((_ = S >>> 24) <= l);

              ) {
                if (0 === s) break e;
                s--, (u += i[r++] << l), (l += 8);
              }
              if (!(240 & v)) {
                for (
                  y = _, I = v, M = m;
                  (v =
                    ((S = n.distcode[M + ((u & ((1 << (y + I)) - 1)) >> y)]) >>>
                      16) &
                    255),
                    (m = 65535 & S),
                    !(y + (_ = S >>> 24) <= l);

                ) {
                  if (0 === s) break e;
                  s--, (u += i[r++] << l), (l += 8);
                }
                (u >>>= y), (l -= y), (n.back += y);
              }
              if (((u >>>= _), (l -= _), (n.back += _), 64 & v)) {
                (e.msg = 'invalid distance code'), (n.mode = 30);
                break;
              }
              (n.offset = m), (n.extra = 15 & v), (n.mode = 24);
            case 24:
              if (n.extra) {
                for (D = n.extra; l < D; ) {
                  if (0 === s) break e;
                  s--, (u += i[r++] << l), (l += 8);
                }
                (n.offset += u & ((1 << n.extra) - 1)),
                  (u >>>= n.extra),
                  (l -= n.extra),
                  (n.back += n.extra);
              }
              if (n.offset > n.dmax) {
                (e.msg = 'invalid distance too far back'), (n.mode = 30);
                break;
              }
              n.mode = 25;
            case 25:
              if (0 === c) break e;
              if (n.offset > (h = p - c)) {
                if ((h = n.offset - h) > n.whave && n.sane) {
                  (e.msg = 'invalid distance too far back'), (n.mode = 30);
                  break;
                }
                (f = h > n.wnext ? ((h -= n.wnext), n.wsize - h) : n.wnext - h),
                  h > n.length && (h = n.length),
                  (g = n.window);
              } else (g = o), (f = a - n.offset), (h = n.length);
              for (
                c -= h = c < h ? c : h, n.length -= h;
                (o[a++] = g[f++]), --h;

              );
              0 === n.length && (n.mode = 21);
              break;
            case 26:
              if (0 === c) break e;
              (o[a++] = n.length), c--, (n.mode = 21);
              break;
            case 27:
              if (n.wrap) {
                for (; l < 32; ) {
                  if (0 === s) break e;
                  s--, (u |= i[r++] << l), (l += 8);
                }
                if (
                  ((p -= c),
                  (e.total_out += p),
                  (n.total += p),
                  p &&
                    (e.adler = n.check =
                      (n.flags ? Xs : Js)(n.check, o, p, a - p)),
                  (p = c),
                  (n.flags ? u : rc(u)) !== n.check)
                ) {
                  (e.msg = 'incorrect data check'), (n.mode = 30);
                  break;
                }
                l = u = 0;
              }
              n.mode = 28;
            case 28:
              if (n.wrap && n.flags) {
                for (; l < 32; ) {
                  if (0 === s) break e;
                  s--, (u += i[r++] << l), (l += 8);
                }
                if (u !== (4294967295 & n.total)) {
                  (e.msg = 'incorrect length check'), (n.mode = 30);
                  break;
                }
                l = u = 0;
              }
              n.mode = 29;
            case 29:
              T = 1;
              break e;
            case 30:
              T = -3;
              break e;
            case 31:
              return -4;
            default:
              return -2;
          }
        return (
          (e.next_out = a),
          (e.avail_out = c),
          (e.next_in = r),
          (e.avail_in = s),
          (n.hold = u),
          (n.bits = l),
          (n.wsize ||
            (p !== e.avail_out && n.mode < 30 && (n.mode < 27 || 4 !== t))) &&
            fc(e, e.output, e.next_out, p - e.avail_out),
          (d -= e.avail_in),
          (p -= e.avail_out),
          (e.total_in += d),
          (e.total_out += p),
          (n.total += p),
          n.wrap &&
            p &&
            (e.adler = n.check =
              (n.flags ? Xs : Js)(n.check, o, p, e.next_out - p)),
          (e.data_type =
            n.bits +
            (n.last ? 64 : 0) +
            (12 === n.mode ? 128 : 0) +
            (20 === n.mode || 15 === n.mode ? 256 : 0)),
          ((0 == d && 0 === p) || 4 === t) && 0 === T ? -5 : T
        );
      },
      inflateEnd: function (e) {
        if (!e || !e.state) return -2;
        var t = e.state;
        return t.window && (t.window = null), (e.state = null), 0;
      },
      inflateGetHeader: function (e, t) {
        var n;
        return e && e.state && 2 & (n = e.state).wrap
          ? (((n.head = t).done = !1), 0)
          : -2;
      },
      inflateSetDictionary: function (e, t) {
        var n,
          i = t.length;
        return !e || !e.state || (0 !== (n = e.state).wrap && 11 !== n.mode)
          ? -2
          : 11 === n.mode && Js(1, t, i, 0) !== n.check
            ? -3
            : fc(e, t, i, i)
              ? ((n.mode = 31), -4)
              : ((n.havedict = 1), 0);
      },
      inflateInfo: 'pako inflate (from Nodeca project)',
    },
    _c = !0,
    vc = !0;
  try {
    String.fromCharCode.apply(null, [0]);
  } catch (Fc) {
    _c = !1;
  }
  try {
    String.fromCharCode.apply(null, new Uint8Array(1));
  } catch (Fc) {
    vc = !1;
  }
  for (var mc = new Cs.Buf8(256), yc = 0; yc < 256; yc++)
    mc[yc] =
      252 <= yc
        ? 6
        : 248 <= yc
          ? 5
          : 240 <= yc
            ? 4
            : 224 <= yc
              ? 3
              : 192 <= yc
                ? 2
                : 1;
  function Ic(e, t) {
    for (
      var n, i, o = t || e.length, r = new Array(2 * o), a = 0, s = 0;
      s < o;

    )
      if ((n = e[s++]) < 128) r[a++] = n;
      else if (4 < (i = mc[n])) (r[a++] = 65533), (s += i - 1);
      else {
        for (n &= 2 === i ? 31 : 3 === i ? 15 : 7; 1 < i && s < o; )
          (n = (n << 6) | (63 & e[s++])), i--;
        1 < i
          ? (r[a++] = 65533)
          : n < 65536
            ? (r[a++] = n)
            : ((n -= 65536),
              (r[a++] = 55296 | ((n >> 10) & 1023)),
              (r[a++] = 56320 | (1023 & n)));
      }
    var c = r,
      u = a;
    if (u < 65534 && ((c.subarray && vc) || (!c.subarray && _c)))
      return String.fromCharCode.apply(null, Cs.shrinkBuf(c, u));
    for (var l = '', d = 0; d < u; d++) l += String.fromCharCode(c[d]);
    return l;
  }
  function Mc() {
    (this.input = null),
      (this.next_in = 0),
      (this.avail_in = 0),
      (this.total_in = 0),
      (this.output = null),
      (this.next_out = 0),
      (this.avail_out = 0),
      (this.total_out = 0),
      (this.msg = ''),
      (this.state = null),
      (this.data_type = 2),
      (this.adler = 0);
  }
  function Cc() {
    (this.text = 0),
      (this.time = 0),
      (this.xflags = 0),
      (this.os = 0),
      (this.extra = null),
      (this.extra_len = 0),
      (this.name = ''),
      (this.comment = ''),
      (this.hcrc = 0),
      (this.done = !1);
  }
  mc[254] = mc[254] = 1;
  var Tc = {
      Z_NO_FLUSH: 0,
      Z_PARTIAL_FLUSH: 1,
      Z_SYNC_FLUSH: 2,
      Z_FULL_FLUSH: 3,
      Z_FINISH: 4,
      Z_BLOCK: 5,
      Z_TREES: 6,
      Z_OK: 0,
      Z_STREAM_END: 1,
      Z_NEED_DICT: 2,
      Z_ERRNO: -1,
      Z_STREAM_ERROR: -2,
      Z_DATA_ERROR: -3,
      Z_BUF_ERROR: -5,
      Z_NO_COMPRESSION: 0,
      Z_BEST_SPEED: 1,
      Z_BEST_COMPRESSION: 9,
      Z_DEFAULT_COMPRESSION: -1,
      Z_FILTERED: 1,
      Z_HUFFMAN_ONLY: 2,
      Z_RLE: 3,
      Z_FIXED: 4,
      Z_DEFAULT_STRATEGY: 0,
      Z_BINARY: 0,
      Z_TEXT: 1,
      Z_UNKNOWN: 2,
      Z_DEFLATED: 8,
    },
    Ec = {
      2: 'need dictionary',
      1: 'stream end',
      0: '',
      '-1': 'file error',
      '-2': 'stream error',
      '-3': 'data error',
      '-4': 'insufficient memory',
      '-5': 'buffer error',
      '-6': 'incompatible version',
    },
    Dc = Object.prototype.toString;
  function Sc(e) {
    if (!(this instanceof Sc)) return new Sc(e);
    this.options = Cs.assign(
      { chunkSize: 16384, windowBits: 0, to: '' },
      e || {}
    );
    var t = this.options;
    if (
      (t.raw &&
        0 <= t.windowBits &&
        t.windowBits < 16 &&
        ((t.windowBits = -t.windowBits),
        0 === t.windowBits && (t.windowBits = -15)),
      !(0 <= t.windowBits && t.windowBits < 16) ||
        (e && e.windowBits) ||
        (t.windowBits += 32),
      15 < t.windowBits &&
        t.windowBits < 48 &&
        !(15 & t.windowBits) &&
        (t.windowBits |= 15),
      (this.err = 0),
      (this.msg = ''),
      (this.ended = !1),
      (this.chunks = []),
      (this.strm = new Mc()),
      (this.strm.avail_out = 0),
      (e = gc.inflateInit2(this.strm, t.windowBits)) !== Tc.Z_OK)
    )
      throw new Error(Ec[e]);
    if (
      ((this.header = new Cc()),
      gc.inflateGetHeader(this.strm, this.header),
      t.dictionary &&
        ('string' == typeof t.dictionary
          ? (t.dictionary = (function (e) {
              for (var t, n, i, o, r = e.length, a = 0, s = 0; s < r; s++)
                55296 == (64512 & (n = e.charCodeAt(s))) &&
                  s + 1 < r &&
                  56320 == (64512 & (i = e.charCodeAt(s + 1))) &&
                  ((n = 65536 + ((n - 55296) << 10) + (i - 56320)), s++),
                  (a += n < 128 ? 1 : n < 2048 ? 2 : n < 65536 ? 3 : 4);
              for (t = new Cs.Buf8(a), s = o = 0; o < a; s++)
                55296 == (64512 & (n = e.charCodeAt(s))) &&
                  s + 1 < r &&
                  56320 == (64512 & (i = e.charCodeAt(s + 1))) &&
                  ((n = 65536 + ((n - 55296) << 10) + (i - 56320)), s++),
                  n < 128
                    ? (t[o++] = n)
                    : (n < 2048
                        ? (t[o++] = 192 | (n >>> 6))
                        : (n < 65536
                            ? (t[o++] = 224 | (n >>> 12))
                            : ((t[o++] = 240 | (n >>> 18)),
                              (t[o++] = 128 | ((n >>> 12) & 63))),
                          (t[o++] = 128 | ((n >>> 6) & 63))),
                      (t[o++] = 128 | (63 & n)));
              return t;
            })(t.dictionary))
          : '[object ArrayBuffer]' === Dc.call(t.dictionary) &&
            (t.dictionary = new Uint8Array(t.dictionary)),
        t.raw &&
          (e = gc.inflateSetDictionary(this.strm, t.dictionary)) !== Tc.Z_OK))
    )
      throw new Error(Ec[e]);
  }
  function kc(e, t) {
    if (((t = new Sc(t)).push(e, !0), t.err)) throw t.msg || Ec[t.err];
    return t.result;
  }
  (Sc.prototype.push = function (e, t) {
    var n,
      i,
      o,
      r,
      a,
      s = this.strm,
      c = this.options.chunkSize,
      u = this.options.dictionary,
      l = !1;
    if (this.ended) return !1;
    (i = t === ~~t ? t : !0 === t ? Tc.Z_FINISH : Tc.Z_NO_FLUSH),
      'string' == typeof e
        ? (s.input = (function (e) {
            for (var t = new Cs.Buf8(e.length), n = 0, i = t.length; n < i; n++)
              t[n] = e.charCodeAt(n);
            return t;
          })(e))
        : '[object ArrayBuffer]' === Dc.call(e)
          ? (s.input = new Uint8Array(e))
          : (s.input = e),
      (s.next_in = 0),
      (s.avail_in = s.input.length);
    do {
      if (
        (0 === s.avail_out &&
          ((s.output = new Cs.Buf8(c)), (s.next_out = 0), (s.avail_out = c)),
        (n =
          (n = gc.inflate(s, Tc.Z_NO_FLUSH)) === Tc.Z_NEED_DICT && u
            ? gc.inflateSetDictionary(this.strm, u)
            : n) === Tc.Z_BUF_ERROR &&
          !0 === l &&
          ((n = Tc.Z_OK), (l = !1)),
        n !== Tc.Z_STREAM_END && n !== Tc.Z_OK)
      )
        return this.onEnd(n), !(this.ended = !0);
      s.next_out &&
        ((0 !== s.avail_out &&
          n !== Tc.Z_STREAM_END &&
          (0 !== s.avail_in || (i !== Tc.Z_FINISH && i !== Tc.Z_SYNC_FLUSH))) ||
          ('string' === this.options.to
            ? ((o = (function (e, t) {
                for (
                  var n =
                    (t = (t = t || e.length) > e.length ? e.length : t) - 1;
                  0 <= n && 128 == (192 & e[n]);

                )
                  n--;
                return !(n < 0 || 0 === n) && n + mc[e[n]] > t ? n : t;
              })(s.output, s.next_out)),
              (r = s.next_out - o),
              (a = Ic(s.output, o)),
              (s.next_out = r),
              (s.avail_out = c - r),
              r && Cs.arraySet(s.output, s.output, o, r, 0),
              this.onData(a))
            : this.onData(Cs.shrinkBuf(s.output, s.next_out)))),
        0 === s.avail_in && 0 === s.avail_out && (l = !0);
    } while ((0 < s.avail_in || 0 === s.avail_out) && n !== Tc.Z_STREAM_END);
    return (i = n === Tc.Z_STREAM_END ? Tc.Z_FINISH : i) === Tc.Z_FINISH
      ? ((n = gc.inflateEnd(this.strm)),
        this.onEnd(n),
        (this.ended = !0),
        n === Tc.Z_OK)
      : i !== Tc.Z_SYNC_FLUSH || (this.onEnd(Tc.Z_OK), !(s.avail_out = 0));
  }),
    (Sc.prototype.onData = function (e) {
      this.chunks.push(e);
    }),
    (Sc.prototype.onEnd = function (e) {
      e === Tc.Z_OK &&
        ('string' === this.options.to
          ? (this.result = this.chunks.join(''))
          : (this.result = Cs.flattenChunks(this.chunks))),
        (this.chunks = []),
        (this.err = e),
        (this.msg = this.strm.msg);
    }),
    ($ = {});
  var Rc =
      ((0, Cs.assign)(
        $,
        {
          Inflate: Sc,
          inflate: kc,
          inflateRaw: function (e, t) {
            return ((t = t || {}).raw = !0), kc(e, t);
          },
          ungzip: kc,
        },
        Tc
      ),
      $),
    Lc =
      (r(Gc, [
        {
          key: 'inflate',
          value: function (e) {
            e = new Uint8Array(e).slice(4);
            var t,
              n = Date.now();
            try {
              (t = Rc.inflate(e, { to: 'string' })),
                this._bLogForInflateOK ||
                  ((this._bLogForInflateOK = !0), new ei('inflateOK').end());
            } catch (o) {
              return this._bLogForInflateError
                ? void 0
                : ((this._bLogForInflateError = !0),
                  void new ei('inflateError').setMessage(o).end());
            }
            e = e.length + 4;
            var i = t.length;
            return (
              Ae.d(
                'inflate ok. zipped:'.concat(e, ' unzipped:').concat(i) +
                  ' compression ratio:'
                    .concat(Math.round((100 * (i - e)) / i), '% cost:')
                    .concat(Date.now() - n)
              ),
              t
            );
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')),
              (this._bLogForInflateOK = !1),
              (this._bLogForInflateError = !1);
          },
        },
      ]),
      Gc),
    Ac =
      (r(Uc, [
        {
          key: '_startTimer',
          value: function () {
            var e = this._map.get(24),
              t = e.isWorkerEnabled();
            Ae.l(
              ''
                .concat(this._n, '.startTimer isWorkerEnabled:')
                .concat(t, ' seed:')
                .concat(this._checkTimer)
            ),
              t ? e.startWorkerTimer() : this._startMainThreadTimer();
          },
        },
        {
          key: '_startMainThreadTimer',
          value: function () {
            this._checkTimer < 0 &&
              (this._checkTimer = setInterval(
                this.onCheckTimer.bind(this),
                1e3
              )),
              Ae.l(
                ''
                  .concat(this._n, '._startMainThreadTimer seed:')
                  .concat(this._checkTimer)
              );
          },
        },
        {
          key: 'stopTimer',
          value: function () {
            var e = this._map.get(24),
              t = e.isWorkerEnabled();
            Ae.l(
              ''
                .concat(this._n, '.stopTimer isWorkerEnabled:')
                .concat(t, ' seed:')
                .concat(this._checkTimer)
            ),
              t ? e.stopWorkerTimer() : this._stopMainThreadTimer();
          },
        },
        {
          key: '_stopMainThreadTimer',
          value: function () {
            Ae.l(''.concat(this._n, '._stopMainThreadTimer')),
              0 < this._checkTimer &&
                (clearInterval(this._checkTimer),
                (this._checkTimer = -1),
                (this._checkCount = 0));
          },
        },
        {
          key: '_stopMainThreadSocket',
          value: function () {
            Ae.l(''.concat(this._n, '._stopMainThreadSocket'));
            var e = this._map.get(21);
            e.setIsWorkerEnabled(!0), e.reConnect();
          },
        },
        {
          key: '_startMainThreadSocket',
          value: function () {
            Ae.l(''.concat(this._n, '._startMainThreadSocket'));
            var e = this._map.get(21);
            e.setIsWorkerEnabled(!1), e.reConnect();
          },
        },
        {
          key: 'onWorkerTimerEnabled',
          value: function () {
            Ae.l(
              ''.concat(
                this._n,
                '.onWorkerTimerEnabled, disable main thread timer and socket'
              )
            ),
              this._stopMainThreadTimer(),
              this._stopMainThreadSocket();
          },
        },
        {
          key: 'onWorkerTimerDisabled',
          value: function () {
            Ae.l(
              ''.concat(
                this._n,
                '.onWorkerTimerDisabled, enable main thread timer and socket'
              )
            ),
              this._startMainThreadTimer(),
              this._startMainThreadSocket();
          },
        },
        {
          key: 'onCheckTimer',
          value: function () {
            this._checkCount += 1;
            var e,
              t = T(this._map);
            try {
              for (t.s(); !(e = t.n()).done; ) {
                var n = _(e.value, 2)[1];
                n.onCheckTimer && n.onCheckTimer(this._checkCount);
              }
            } catch (i) {
              t.e(i);
            } finally {
              t.f();
            }
          },
        },
        {
          key: '_initReadyList',
          value: function () {
            var e = this;
            (this._readyList = [this._map.get(1)]),
              this._readyList.forEach(function (t) {
                t.ready(function () {
                  return e._onModuleReady();
                });
              });
          },
        },
        {
          key: '_onModuleReady',
          value: function () {
            var e,
              t,
              n = !0;
            this._readyList.forEach(function (e) {
              e.isReady() || (n = !1);
            }),
              n &&
                !this._isReady &&
                ((this._isReady = !0),
                this._oEmitter.emit(E.SDK_READY),
                (e = Date.now() - this._startLoginTs),
                Ae.w('SDK is ready. cost '.concat(e, ' ms')),
                (this._startLoginTs = Date.now()),
                (t = this._ssoLogForReady.getStartTs() + De),
                this._ssoLogForReady.setMessage(e).start(t).end());
          },
        },
        {
          key: 'login',
          value: function () {
            0 === this._startLoginTs &&
              (Ce(),
              (this._startLoginTs = Date.now()),
              this._startTimer(),
              this._map.get(15).start(),
              (this._ssoLogForReady = new ei('sdkReady')),
              (this._reason = wn.LOGGING_IN));
          },
        },
        {
          key: 'onLoginFailed',
          value: function () {
            this._startLoginTs = 0;
          },
        },
        {
          key: 'getOEmitInst',
          value: function () {
            return (
              null === this._oEmitter &&
                ((this._oEmitter = new Mr()),
                (e = this._oEmitter),
                (Un = e),
                (this._oEmitter._emit = this._oEmitter.emit),
                (this._oEmitter.emit = function (e, t) {
                  var n,
                    i,
                    o = this;
                  this._canIUseSignaling() &&
                    (e === E.MESSAGE_RECEIVED &&
                      this.get(33).onNewMessageList(t),
                    e === E.MESSAGE_MODIFIED &&
                      this.get(33).onMessageModified(t)),
                    e === E.CONVERSATION_LIST_UPDATED ||
                    e === E.FRIEND_LIST_UPDATED ||
                    e === E.GROUP_LIST_UPDATED ||
                    e === E.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED
                      ? !1 !== this._eventThrottling
                        ? this._eventThrottleMap.has(e)
                          ? (n = Date.now()) -
                              (i = this._eventThrottleMap.get(e)).last <=
                            1e3
                            ? (i.timeoutID && clearTimeout(i.timeoutID),
                              (i.timeoutID = setTimeout(function () {
                                (i.last = Date.now()),
                                  o._oEmitter._emit.apply(o._oEmitter, [
                                    e,
                                    { name: e, data: o._getEventData(e) },
                                  ]);
                              }, 1e3)))
                            : ((i.last = n),
                              this._oEmitter._emit.apply(this._oEmitter, [
                                e,
                                { name: e, data: this._getEventData(e) },
                              ]))
                          : (this._eventThrottleMap.set(e, {
                              last: Date.now(),
                              timeoutID: -1,
                            }),
                            this._oEmitter._emit.apply(this._oEmitter, [
                              e,
                              { name: e, data: this._getEventData(e) },
                            ]))
                        : this._oEmitter._emit.apply(this._oEmitter, [
                            e,
                            { name: e, data: this._getEventData(e) },
                          ])
                      : this._oEmitter._emit.apply(this._oEmitter, [
                          e,
                          { name: e, data: t },
                        ]);
                }.bind(this))),
              this._oEmitter
            );
            var e;
          },
        },
        {
          key: '_canIUseSignaling',
          value: function () {
            var e = this.get(33);
            return !!e && e.canIUseSignaling();
          },
        },
        {
          key: '_getEventData',
          value: function (e) {
            return e === E.CONVERSATION_LIST_UPDATED
              ? this._map.get(12).isPartialUpdatedConvs()
                ? this._map.get(11).getPartialUpdatedConvs()
                : this._map.get(11).getLocalConvList()
              : e === E.FRIEND_LIST_UPDATED
                ? this._map.get(8).getLocalFriendList(!1)
                : e === E.GROUP_LIST_UPDATED
                  ? this._map.get(7).getLocalGroupList()
                  : e === E.TOTAL_UNREAD_MESSAGE_COUNT_UPDATED
                    ? this._map.get(11).getTotalUnreadCount()
                    : e === E.CONVERSATION_ID_LIST_UPDATED
                      ? this._map.get(11).getUpdatedConvIDList()
                      : void 0;
          },
        },
        {
          key: 'getIEmitInst',
          value: function () {
            return (
              null === this._iEmitter &&
                ((this._iEmitter = new Mr()),
                (this._iEmitter._emit = this._iEmitter.emit),
                (this._iEmitter.emit = function (e, t) {
                  (e =
                    ze(t) && t.data
                      ? [e, { name: e, data: t.data }]
                      : [e, { name: e, data: t }]),
                    this._iEmitter._emit.apply(this._iEmitter, e);
                }.bind(this))),
              this._iEmitter
            );
          },
        },
        {
          key: 'hasModule',
          value: function (e) {
            return this._map.has(e);
          },
        },
        {
          key: 'get',
          value: function (e) {
            return this._map.get(e);
          },
        },
        {
          key: 'canIUseModule',
          value: function (e) {
            return (
              !this._map.get(12).isUsingChatCore() ||
              this._optionalModuleMap.has(e)
            );
          },
        },
        {
          key: 'canIUseInflate',
          value: function () {
            return !!this._map.get(37);
          },
        },
        {
          key: 'isReady',
          value: function () {
            return this._isReady;
          },
        },
        {
          key: 'isIntl',
          value: function () {
            return this.get(12).isIntl();
          },
        },
        {
          key: 'getNotReadyReason',
          value: function () {
            return this._reason;
          },
        },
        {
          key: 'setNotReadyReason',
          value: function (e) {
            this._reason = e;
          },
        },
        {
          key: 'getErrMsg',
          value: function (e, t, n) {
            return this._map
              .get(32)
              .get({
                key: e,
                replacement1: t,
                replacement2: n,
                isIntl: this.isIntl(),
              });
          },
        },
        {
          key: 'warn',
          value: function (e, t, n) {
            (e = this.getErrMsg(e, t, n)) && Ae.w(e);
          },
        },
        {
          key: 'onError',
          value: function (e) {
            var t = 'code:'.concat(e.code, ' message:').concat(e.message);
            Ae.w('Oops! '.concat(t)),
              new ei('error').setMessage(t).setLevel('error').end(),
              this.getOEmitInst().emit(E.ERROR, e);
          },
        },
        {
          key: 'restartTimer',
          value: function () {
            Ae.l(''.concat(this._n, '.restartTimer')),
              this.stopTimer(),
              this._startTimer();
            var e = this.get(7);
            e && e.restartPolling();
          },
        },
        {
          key: 'getTimerID',
          value: function () {
            var e = this._map.get(24);
            return e.isWorkerEnabled() ? e.getTimerID() : this._checkTimer;
          },
        },
        {
          key: 'getPollingTimerID',
          value: function (e) {
            return this._map.get(7).getPollingTimerID(e);
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')), Ce();
            var e,
              t = T(this._map);
            try {
              for (t.s(); !(e = t.n()).done; ) {
                var n = _(e.value, 2)[1];
                n.reset && n.reset();
              }
            } catch (a) {
              t.e(a);
            } finally {
              t.f();
            }
            (this._startLoginTs = 0),
              this._initReadyList(),
              (this._isReady = !1),
              this.stopTimer(),
              this._oEmitter.emit(E.SDK_NOT_READY);
            var i,
              o = T(this._eventThrottleMap);
            try {
              for (o.s(); !(i = o.n()).done; ) {
                var r = _(i.value, 2)[1];
                r.timeoutID && clearTimeout(r.timeoutID);
              }
            } catch (a) {
              o.e(a);
            } finally {
              o.f();
            }
            this._eventThrottleMap.clear();
          },
        },
      ]),
      Uc),
    Oc =
      (r(wc, [
        {
          key: 'defense',
          value: function (e, t) {
            var n =
              2 < arguments.length && void 0 !== arguments[2]
                ? arguments[2]
                : void 0;
            if ('string' != typeof e) return null;
            if (0 === e.length) return null;
            if ('function' != typeof t) return null;
            if (this._funcMap.has(e) && this._funcMap.get(e).has(t))
              return this._funcMap.get(e).get(t);
            this._funcMap.has(e) || this._funcMap.set(e, new Map());
            var i = null;
            return (
              this._funcMap.get(e).has(t)
                ? (i = this._funcMap.get(e).get(t))
                : ((i = this._pack(e, t, n)), this._funcMap.get(e).set(t, i)),
              i
            );
          },
        },
        {
          key: 'defenseOnce',
          value: function (e, t) {
            return 'function' != typeof t
              ? null
              : this._pack(
                  e,
                  t,
                  2 < arguments.length && void 0 !== arguments[2]
                    ? arguments[2]
                    : void 0
                );
          },
        },
        {
          key: 'find',
          value: function (e, t) {
            return 'string' != typeof e ||
              0 === e.length ||
              'function' != typeof t
              ? null
              : this._funcMap.has(e) && this._funcMap.get(e).has(t)
                ? this._funcMap.get(e).get(t)
                : (this._m.warn('ListenerFnNotFound', e), null);
          },
        },
        {
          key: 'delete',
          value: function (e, t) {
            return (
              'function' == typeof t &&
              !!this._funcMap.has(e) &&
              !!this._funcMap.get(e).has(t) &&
              (this._funcMap.get(e).delete(t),
              0 === this._funcMap.get(e).size && this._funcMap.delete(e),
              !0)
            );
          },
        },
        {
          key: '_pack',
          value: function (e, t, n) {
            var i = this;
            return function () {
              try {
                t.apply(n, Array.from(arguments));
              } catch (a) {
                var o = Object.values(E).indexOf(e),
                  r = 'CallbackError';
                -1 !== o && ((o = Object.keys(E)[o]), i._m.warn(r, o, a)),
                  i._reportCount < 5 &&
                    (new ei(r)
                      .setMessage('eventName:'.concat(e))
                      .setMoreMessage(a.message)
                      .end(),
                    (i._reportCount += 1));
              }
            };
          },
        },
        {
          key: 'destroy',
          value: function () {
            this._funcMap.clear();
          },
        },
        {
          key: 'reset',
          value: function () {
            Ae.l(''.concat(this._n, '.reset')), (this._reportCount = 0);
          },
        },
      ]),
      wc),
    bc =
      (r(Pc, [
        {
          key: 'onError',
          value: function (e) {
            this._m.onError(e);
          },
        },
        {
          key: 'login',
          value: function (e) {
            return this._m.login(), this._get(1).login(e);
          },
        },
        {
          key: 'logout',
          value: function () {
            var e = this;
            return this._get(1)
              .logout()
              .then(function (t) {
                return e._safetyCallbackFactory.reset(), e._m.reset(), t;
              });
          },
        },
        {
          key: 'getLoginUser',
          value: function () {
            return this._get(1).getLoginUser();
          },
        },
        {
          key: 'isReady',
          value: function () {
            return this._m.isReady();
          },
        },
        {
          key: 'isIntl',
          value: function () {
            return this._m.isIntl();
          },
        },
        {
          key: 'getNotReadyReason',
          value: function () {
            return this._m.getNotReadyReason();
          },
        },
        {
          key: 'getErrMsg',
          value: function (e, t, n) {
            return this._m.getErrMsg(e, t, n);
          },
        },
        {
          key: '_get',
          value: function (e) {
            return this._m.get(e);
          },
        },
        {
          key: 'destroy',
          value: function () {
            var e = this,
              t = this._get(12),
              n = t.getSDKAppID();
            return (
              Ae.w('destroy '.concat(n, ' ').concat(t.getInstanceID())),
              this.logout().finally(function () {
                e._safetyCallbackFactory.destroy(),
                  e._m.stopTimer(),
                  e._get(24).terminate(),
                  e._get(21).dealloc(),
                  e._m.getOEmitInst().emit(E.SDK_DESTROY, { SDKAppID: n });
              })
            );
          },
        },
        {
          key: 'on',
          value: function (e, t, n) {
            Ae.d('on', 'eventName:'.concat(e)),
              this._m
                .getOEmitInst()
                .on(e, this._safetyCallbackFactory.defense(e, t, n), n);
          },
        },
        {
          key: 'once',
          value: function (e, t, n) {
            Ae.d('once', 'eventName:'.concat(e)),
              this._m
                .getOEmitInst()
                .once(
                  e,
                  this._safetyCallbackFactory.defenseOnce(e, t, n),
                  n || this
                );
          },
        },
        {
          key: 'off',
          value: function (e, t, n, i) {
            Ae.d('off', 'eventName:'.concat(e));
            var o = this._safetyCallbackFactory.find(e, t);
            null !== o &&
              (this._m.getOEmitInst().off(e, o, n, i),
              this._safetyCallbackFactory.delete(e, t));
          },
        },
        {
          key: 'registerPlugin',
          value: function (e) {
            (ut(e['tim-push'])
              ? ut(e['tim-offline-push-plugin'])
                ? this._get(18)
                : this._get(28)
              : this._get(36)
            ).registerPlugin(e);
          },
        },
        {
          key: 'setLogLevel',
          value: function (e) {
            var t;
            e <= 0 &&
              ((t = this.getErrMsg('TIM_ASCII_ART')) && console.log(t),
              (t = this.getErrMsg('API_REFER')) &&
                (Vt()
                  ? console.log(
                      '%c '.concat('IM SDK API ->', ' %c'),
                      'background:#ff9d00; padding:1px; border-radius:3px; color: #fff',
                      'background:transparent',
                      t
                    )
                  : console.log('IM SDK API ->', t)),
              (t = this.getErrMsg('DOCS_GUIDE')) && console.log(t),
              (t = this.getErrMsg('IOS_WEBVIEW_WARNING')),
              _e && t && console.warn(t)),
              Ae.setLevel(e);
          },
        },
        {
          key: 'createTextMessage',
          value: function (e) {
            return this._get(2).createTextMessage(e);
          },
        },
        {
          key: 'createTextAtMessage',
          value: function (e) {
            return this._get(2).createTextMessage(e);
          },
        },
        {
          key: 'createImageMessage',
          value: function (e) {
            return this._get(2).createImageMessage(e);
          },
        },
        {
          key: 'createAudioMessage',
          value: function (e) {
            return this._get(2).createAudioMessage(e);
          },
        },
        {
          key: 'createVideoMessage',
          value: function (e) {
            return this._get(2).createVideoMessage(e);
          },
        },
        {
          key: 'createCustomMessage',
          value: function (e) {
            return this._get(2).createCustomMessage(e);
          },
        },
        {
          key: 'createFaceMessage',
          value: function (e) {
            return this._get(2).createFaceMessage(e);
          },
        },
        {
          key: 'createFileMessage',
          value: function (e) {
            return this._get(2).createFileMessage(e);
          },
        },
        {
          key: 'createLocationMessage',
          value: function (e) {
            return this._get(2).createLocationMessage(e);
          },
        },
        {
          key: 'createMergerMessage',
          value: function (e) {
            return this._get(2).createMergerMessage(e);
          },
        },
        {
          key: 'downloadMergerMessage',
          value: function (e) {
            return e.type !== D.MSG_MERGER
              ? In({ code: wn.MSG_MERGER_TYPE_INVALID })
              : Ve(e.payload.downloadKey)
                ? In({ code: wn.MSG_MERGER_KEY_INVALID })
                : this._get(2)
                    .downloadMergerMessage(e)
                    .catch(function (e) {
                      return In({ code: wn.MSG_MERGER_DOWNLOAD_FAIL });
                    });
          },
        },
        {
          key: 'createForwardMessage',
          value: function (e) {
            return this._get(2).createForwardMessage(e);
          },
        },
        {
          key: 'sendMessage',
          value: function (e, t) {
            return e instanceof Ei
              ? this._get(2).sendMessageInstance(e, t)
              : In({ code: wn.MSG_INSTANCE_REQUIRED });
          },
        },
        {
          key: 'searchCloudMessages',
          value: function (e) {
            return this._get(2).searchCloudMessages(e);
          },
        },
        {
          key: 'callExperimentalAPI',
          value: function (e, t) {
            return 'sendComboMessage' === e
              ? this._get(31).sendMessage(t)
              : 'handleGroupInvitation' === e
                ? this._get(7).handleGroupInvitation(t)
                : 'isCommercialAbilityEnabled' === e
                  ? this._get(27).isFeatureEnabled(t)
                  : 'isFeatureEnabledForStat' === e
                    ? this._get(27).isFeatureEnabledForStat(t)
                    : 'isIntl' === e
                      ? this.isIntl()
                      : 'sendTRTCCustomData' === e || 'sendRoomCustomData' === e
                        ? this._get(30).sendTRTCCustomData(t)
                        : 'getTimerID' === e
                          ? this._m.getTimerID()
                          : 'getPollingTimerID' === e
                            ? this._m.getPollingTimerID(t)
                            : 'setApplicationID' === e
                              ? (this._get(12).setApplicationID(t),
                                void this._get(20).updateProtocolConfig())
                              : 'getServerConfig' === e
                                ? this._get(23).getServerConfig(t)
                                : 'canIUseModule' === e
                                  ? this._m.canIUseModule(t)
                                  : 'startMessageLongPolling' === e
                                    ? this._get(7).startMessageLongPolling(t)
                                    : 'stopMessageLongPolling' === e
                                      ? this._get(7).stopMessageLongPolling(t)
                                      : In({ code: wn.INVALID_OPERATION });
          },
        },
        {
          key: 'revokeMessage',
          value: function (e) {
            return this._get(2).revokeMessage(e);
          },
        },
        {
          key: 'resendMessage',
          value: function (e, t) {
            return e instanceof Ei
              ? this._get(2).resendMessage(e, t)
              : In({ code: wn.MSG_INSTANCE_REQUIRED });
          },
        },
        {
          key: 'deleteMessage',
          value: function (e) {
            return this._get(2).deleteMessage(e);
          },
        },
        {
          key: 'translateText',
          value: function (e) {
            return this._get(2).translateText(e);
          },
        },
        {
          key: 'convertVoiceToText',
          value: function (e) {
            return this._get(2).convertVoiceToText(e);
          },
        },
        {
          key: 'setMessageExtensions',
          value: function (e, t) {
            return this._get(3).setMessageExtensions(e, t);
          },
        },
        {
          key: 'getMessageExtensions',
          value: function (e) {
            return this._get(3).getMessageExtensions(e);
          },
        },
        {
          key: 'deleteMessageExtensions',
          value: function (e, t) {
            return this._get(3).deleteMessageExtensions(e, t);
          },
        },
        {
          key: 'addMessageReaction',
          value: function (e, t) {
            return this._get(34).addMessageReaction(e, t);
          },
        },
        {
          key: 'removeMessageReaction',
          value: function (e, t) {
            return this._get(34).removeMessageReaction(e, t);
          },
        },
        {
          key: 'getMessageReactions',
          value: function (e) {
            return this._get(34).getMessageReactions(e);
          },
        },
        {
          key: 'getAllUserListOfMessageReaction',
          value: function (e) {
            return this._get(34).getAllUserListOfMessageReaction(e);
          },
        },
        {
          key: 'modifyMessage',
          value: function (e) {
            return this._get(2).modifyRemoteMessage(e);
          },
        },
        {
          key: 'getMessageList',
          value: function (e) {
            return this._get(11).getMessageList(e);
          },
        },
        {
          key: 'getMessageListHopping',
          value: function (e) {
            return this._get(11).getMessageListHopping(e);
          },
        },
        {
          key: 'sendMessageReadReceipt',
          value: function (e) {
            return this._get(11).sendReadReceipt(e);
          },
        },
        {
          key: 'getMessageReadReceiptList',
          value: function (e) {
            return this._get(11).getReadReceiptList(e);
          },
        },
        {
          key: 'getGroupMessageReadMemberList',
          value: function (e) {
            var t = this._get(7);
            return t ? t.getReadReceiptDetail(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'findMessage',
          value: function (e) {
            return this._get(11).findMessage(e);
          },
        },
        {
          key: 'setMessageRead',
          value: function (e) {
            return this._get(11).setMessageRead(e);
          },
        },
        {
          key: 'getConversationList',
          value: function (e) {
            return this._get(11).getConvList(e);
          },
        },
        {
          key: 'getConversationProfile',
          value: function (e) {
            return this._get(11).getConversationProfile(e);
          },
        },
        {
          key: 'deleteConversation',
          value: function (e) {
            return this._get(11).deleteConversation(e);
          },
        },
        {
          key: 'setConversationDraft',
          value: function (e) {
            return this._get(11).setConvDraft(e);
          },
        },
        {
          key: 'clearHistoryMessage',
          value: function (e) {
            return this._get(11).clearHistoryMessage(e);
          },
        },
        {
          key: 'pinConversation',
          value: function (e) {
            return this._get(11).pinConversation(e);
          },
        },
        {
          key: 'setAllMessageRead',
          value: function (e) {
            return this._get(11).setAllMessageRead(e);
          },
        },
        {
          key: 'setMessageRemindType',
          value: function (e) {
            return this._get(11).setMessageRemindType(e);
          },
        },
        {
          key: 'setAllReceiveMessageOpt',
          value: function (e) {
            return this._get(11).setAllRcvMsgOpt(e);
          },
        },
        {
          key: 'getAllReceiveMessageOpt',
          value: function () {
            return this._get(11).getAllRcvMsgOpt();
          },
        },
        {
          key: 'getTotalUnreadMessageCount',
          value: function () {
            return this._get(11).getTotalUnreadCount();
          },
        },
        {
          key: 'setConversationCustomData',
          value: function (e) {
            return this._get(11).setConvCustomData(e);
          },
        },
        {
          key: 'markConversation',
          value: function (e) {
            return this._get(11).markConv(e);
          },
        },
        {
          key: 'getConversationGroupList',
          value: function () {
            return this._get(11).getConvGroupList();
          },
        },
        {
          key: 'createConversationGroup',
          value: function (e) {
            return this._get(11).createConvGroup(e);
          },
        },
        {
          key: 'deleteConversationGroup',
          value: function (e) {
            return this._get(11).deleteConvGroup(e);
          },
        },
        {
          key: 'renameConversationGroup',
          value: function (e) {
            return this._get(11).renameConvGroup(e);
          },
        },
        {
          key: 'addConversationsToGroup',
          value: function (e) {
            return this._get(11).addConvsToGroup(e);
          },
        },
        {
          key: 'deleteConversationsFromGroup',
          value: function (e) {
            return this._get(11).deleteConvsFromGroup(e);
          },
        },
        {
          key: 'getMyProfile',
          value: function () {
            return this._get(4).getMyProfile();
          },
        },
        {
          key: 'getUserProfile',
          value: function (e) {
            return this._get(4).getUserProfile(e);
          },
        },
        {
          key: 'updateMyProfile',
          value: function (e) {
            return this._get(4).updateMyProfile(e);
          },
        },
        {
          key: 'getBlacklist',
          value: function () {
            return this._get(4).getLocalBlacklist();
          },
        },
        {
          key: 'addToBlacklist',
          value: function (e) {
            return this._get(4).addBlacklist(e);
          },
        },
        {
          key: 'removeFromBlacklist',
          value: function (e) {
            return this._get(4).deleteBlacklist(e);
          },
        },
        {
          key: 'setSelfStatus',
          value: function (e) {
            return this._get(4).setSelfStatus(e);
          },
        },
        {
          key: 'getUserStatus',
          value: function (e) {
            return this._get(4).getUserStatus(e);
          },
        },
        {
          key: 'subscribeUserStatus',
          value: function (e) {
            return this._get(4).subscribeUserStatus(e);
          },
        },
        {
          key: 'unsubscribeUserStatus',
          value: function (e) {
            return this._get(4).unsubscribeUserStatus(e);
          },
        },
        {
          key: 'getFriendList',
          value: function () {
            var e = this._get(8);
            return e ? e.getLocalFriendList() : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'addFriend',
          value: function (e) {
            var t = this._get(8);
            return t ? t.addFriend(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'deleteFriend',
          value: function (e) {
            var t = this._get(8);
            return t ? t.deleteFriend(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'checkFriend',
          value: function (e) {
            var t = this._get(8);
            return t ? t.checkFriend(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getFriendProfile',
          value: function (e) {
            var t = this._get(8);
            return t ? t.getFriendProfile(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'updateFriend',
          value: function (e) {
            var t = this._get(8);
            return t ? t.updateFriend(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getFriendApplicationList',
          value: function () {
            var e = this._get(8);
            return e
              ? e.getLocalFriendApplicationList()
              : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'acceptFriendApplication',
          value: function (e) {
            var t = this._get(8);
            return t
              ? t.acceptFriendApplication(e)
              : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'refuseFriendApplication',
          value: function (e) {
            var t = this._get(8);
            return t
              ? t.refuseFriendApplication(e)
              : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'deleteFriendApplication',
          value: function (e) {
            var t = this._get(8);
            return t
              ? t.deleteFriendApplication(e)
              : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'setFriendApplicationRead',
          value: function () {
            var e = this._get(8);
            return e
              ? e.setFriendApplicationRead()
              : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getFriendGroupList',
          value: function () {
            var e = this._get(8);
            return e ? e.getLocalFriendGroupList() : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'createFriendGroup',
          value: function (e) {
            var t = this._get(8);
            return t ? t.createFriendGroup(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'deleteFriendGroup',
          value: function (e) {
            var t = this._get(8);
            return t ? t.deleteFriendGroup(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'addToFriendGroup',
          value: function (e) {
            var t = this._get(8);
            return t ? t.addToFriendGroup(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'removeFromFriendGroup',
          value: function (e) {
            var t = this._get(8);
            return t ? t.removeFromFriendGroup(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'renameFriendGroup',
          value: function (e) {
            var t = this._get(8);
            return t ? t.renameFriendGroup(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'followUser',
          value: function (e) {
            var t = this._get(35);
            return t ? t.followUser(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'unfollowUser',
          value: function (e) {
            var t = this._get(35);
            return t ? t.unfollowUser(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getMyFollowersList',
          value: function (e) {
            var t = this._get(35);
            return t ? t.getMyFollowersList(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getMyFollowingList',
          value: function (e) {
            var t = this._get(35);
            return t ? t.getMyFollowingList(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getMutualFollowersList',
          value: function (e) {
            var t = this._get(35);
            return t ? t.getMutualFollowersList(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getUserFollowInfo',
          value: function (e) {
            var t = this._get(35);
            return t ? t.getUserFollowInfo(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'checkFollowType',
          value: function (e) {
            var t = this._get(35);
            return t ? t.checkFollowType(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getGroupList',
          value: function () {
            var e = this._get(7);
            return e ? e.getGroupList() : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getGroupProfile',
          value: function (e) {
            var t = this._get(7);
            return t ? t.getGroupProfile(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'createGroup',
          value: function (e) {
            var t = this._get(7);
            return t ? t.createGroup(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'dismissGroup',
          value: function (e) {
            var t = this._get(7);
            return t ? t.dismissGroup(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'updateGroupProfile',
          value: function (e) {
            var t = this._get(7);
            return t ? t.updateGroupProfile(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'joinGroup',
          value: function (e) {
            var t = this._get(7);
            return t ? t.joinGroup(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'quitGroup',
          value: function (e) {
            var t = this._get(7);
            return t ? t.quitGroup(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'searchGroupByID',
          value: function (e) {
            var t = this._get(7);
            return t ? t.searchGroupByID(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getGroupOnlineMemberCount',
          value: function (e) {
            var t = this._get(7);
            return t
              ? t.getGroupOnlineMemberCount(e)
              : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'changeGroupOwner',
          value: function (e) {
            var t = this._get(7);
            return t ? t.changeGroupOwner(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getGroupApplicationList',
          value: function () {
            var e = this._get(7);
            return e ? e.getGroupApplicationList() : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'handleGroupApplication',
          value: function (e) {
            var t = this._get(7);
            return t ? t.handleGroupApplication(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'initGroupAttributes',
          value: function (e) {
            var t = this._get(7);
            return t ? t.initGroupAttributes(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'setGroupAttributes',
          value: function (e) {
            var t = this._get(7);
            return t ? t.setGroupAttributes(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'deleteGroupAttributes',
          value: function (e) {
            var t = this._get(7);
            return t ? t.deleteGroupAttributes(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getGroupAttributes',
          value: function (e) {
            var t = this._get(7);
            return t ? t.getGroupAttributes(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'setGroupCounters',
          value: function (e) {
            var t = this._get(7);
            return t ? t.setGroupCounters(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'increaseGroupCounter',
          value: function (e) {
            var t = this._get(7);
            return t ? t.increaseGroupCounter(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'decreaseGroupCounter',
          value: function (e) {
            var t = this._get(7);
            return t ? t.decreaseGroupCounter(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getGroupCounters',
          value: function (e) {
            var t = this._get(7);
            return t ? t.getGroupCounters(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getGroupMemberList',
          value: function (e) {
            var t = this._get(7);
            return t ? t.getGroupMemberList(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getGroupMemberProfile',
          value: function (e) {
            var t = this._get(7);
            return t ? t.getGroupMemberProfile(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'addGroupMember',
          value: function (e) {
            var t = this._get(7);
            return t ? t.addGroupMember(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'deleteGroupMember',
          value: function (e) {
            var t = this._get(7);
            return t ? t.deleteGroupMember(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'setGroupMemberMuteTime',
          value: function (e) {
            var t = this._get(7);
            return t ? t.setGroupMemberMuteTime(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'setGroupMemberRole',
          value: function (e) {
            var t = this._get(7);
            return t ? t.setGroupMemberRole(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'setGroupMemberNameCard',
          value: function (e) {
            var t = this._get(7);
            return t ? t.setGroupMemberNameCard(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'setGroupMemberCustomField',
          value: function (e) {
            var t = this._get(7);
            return t
              ? t.setGroupMemberCustomField(e)
              : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'markGroupMemberList',
          value: function (e) {
            var t = this._get(7);
            return t ? t.markGroupMemberList(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getJoinedCommunityList',
          value: function () {
            return this._get(10).getJoinedCommunityList();
          },
        },
        {
          key: 'createTopicInCommunity',
          value: function (e) {
            return this._get(10).createTopicInCommunity(e);
          },
        },
        {
          key: 'deleteTopicFromCommunity',
          value: function (e) {
            return this._get(10).deleteTopicFromCommunity(e);
          },
        },
        {
          key: 'updateTopicProfile',
          value: function (e) {
            return this._get(10).updateTopicProfile(e);
          },
        },
        {
          key: 'getTopicList',
          value: function (e) {
            return this._get(10).getTopicList(e);
          },
        },
        {
          key: 'addSignalingListener',
          value: function (e, t, n) {
            var i = this._get(33);
            i &&
              i.addSignalingListener(
                e,
                this._safetyCallbackFactory.defense(e, t, n),
                n
              );
          },
        },
        {
          key: 'removeSignalingListener',
          value: function (e, t, n) {
            var i,
              o = this._safetyCallbackFactory.find(e, t);
            null === o ||
              ((i = this._get(33)) &&
                (i.removeSignalingListener(e, o, n),
                this._safetyCallbackFactory.delete(e, t)));
          },
        },
        {
          key: 'invite',
          value: function (e) {
            var t = this._get(33);
            return t ? t.invite(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'inviteSync',
          value: function (e, t, n) {
            var i = this._get(33);
            return i ? i.inviteSync(e, t, n) : '';
          },
        },
        {
          key: 'inviteInGroup',
          value: function (e) {
            var t = this._get(33);
            return t ? t.invite(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'inviteInGroupSync',
          value: function (e, t, n) {
            var i = this._get(33);
            return i ? i.inviteSync(e, t, n) : '';
          },
        },
        {
          key: 'cancel',
          value: function (e) {
            var t = this._get(33);
            return t ? t.cancel(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'accept',
          value: function (e) {
            var t = this._get(33);
            return t ? t.accept(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'reject',
          value: function (e) {
            var t = this._get(33);
            return t ? t.reject(e) : In({ code: wn.NO_MODULE });
          },
        },
        {
          key: 'getSignalingInfo',
          value: function (e) {
            var t = this._get(33);
            return t ? t.getSignalingInfo(e) : null;
          },
        },
        {
          key: 'modifyInvitation',
          value: function (e) {
            var t = this._get(33);
            return t ? t.modifyInvitation(e) : In({ code: wn.NO_MODULE });
          },
        },
      ]),
      Pc),
    Nc = {
      login: 1,
      logout: 1,
      getLoginUser: 1,
      destroy: 1,
      on: 1,
      off: 1,
      ready: 1,
      setLogLevel: 1,
      joinGroup: 1,
      quitGroup: 1,
      registerPlugin: 1,
      getGroupOnlineMemberCount: 1,
      isReady: 1,
      addSignalingListener: 1,
      removeSignalingListener: 1,
      callExperimentalAPI: 1,
    };
  function Pc(e) {
    i(this, Pc),
      (e = {
        SDKAppID: e.SDKAppID,
        unlimitedAVChatRoom: e.unlimitedAVChatRoom || !1,
        scene: e.scene || '',
        oversea: e.oversea || !1,
        instanceID: Rt(),
        devMode: e.devMode || !1,
        testEnv: e.testEnv || !1,
        proxyServer: e.proxyServer || void 0,
        fileUploadProxy: e.fileUploadProxy || void 0,
        fileDownloadProxy: e.fileDownloadProxy || e.fileUploadProxy || void 0,
        eventThrottling: !1 !== e.eventThrottling,
        partialUpdatedConversations: !0 === e.partialUpdatedConversations,
        modules: e.modules || void 0,
      }),
      (this._m = new Ac(e)),
      (this._safetyCallbackFactory = new Oc(this._m));
  }
  function wc(e) {
    i(this, wc),
      (this._funcMap = new Map()),
      (this._m = e),
      (this._n = 'SafetyCallback'),
      (this._reportCount = 0);
  }
  function Uc(e) {
    var t = this;
    i(this, Uc);
    var n,
      o = new ei('sdkConstruct'),
      r =
        ((this._n = 'ModuleManager'),
        (this._isReady = !1),
        (this._reason = wn.USER_NOT_LOGGED_IN),
        (this._startLoginTs = 0),
        (this._map = new Map()),
        (this._optionalModuleMap = new Map()),
        (this._iEmitter = null),
        (this._oEmitter = null),
        (this._checkCount = 0),
        (this._checkTimer = -1),
        this._map.set(12, new bo(this, e)),
        this._map.set(37, new Lc(this)),
        this._map.set(15, new fr(this)),
        this._map.set(27, new as(this)),
        this._map.set(23, new ja(this)),
        this._map.set(24, new os(this)),
        this._map.set(26, new Ja(this)),
        this._map.set(21, new ha(this)),
        this._map.set(20, new Ha(this)),
        this._map.set(1, new Po(this)),
        this._map.set(2, new Fr(this)),
        this._map.set(3, new qr(this)),
        this._map.set(34, new Vr(this)),
        this._map.set(31, new Br(this)),
        this._map.set(4, new Oo(this)),
        this._map.set(6, new Fi(this)),
        this._map.set(11, new uo(this)),
        this._map.set(7, new To(this)),
        this._map.set(10, new So(this)),
        this._map.set(13, new ur(this)),
        this._map.set(32, new ds(this)),
        this._map.set(14, new dr(this)),
        this._map.set(17, new Er(this)),
        this._map.set(18, new Hr(this)),
        this._map.set(19, new jr(this)),
        this._map.set(25, new Ka(this)),
        this._map.set(8, new is(this)),
        this._map.set(28, new ss(this)),
        this._map.set(36, new cs(this)),
        this._map.set(29, new us(this)),
        this._map.set(30, new ls(this)),
        this._map.set(33, new ms(this)),
        this._map.set(35, new Ms(this)),
        (this._eventThrottleMap = new Map()),
        (this._eventThrottling = e.eventThrottling),
        ze(e.modules)
          ? (Object.keys(e.modules).forEach(function (i) {
              (n = e.modules[i]),
                'group-module' === i
                  ? t._map.set(7, new n(t))
                  : 'relationship-module' === i
                    ? t._map.set(8, new n(t))
                    : 'signaling-module' === i
                      ? t._map.set(33, new n(t))
                      : 'follow-module' === i && t._map.set(35, new n(t)),
                t._optionalModuleMap.set(i, 1);
            }),
            this._map.get(12).setUsingChatCore(!0))
          : this._map.has(7) || this._map.get(12).setUsingChatCore(!0),
        e.instanceID),
      a = e.SDKAppID,
      s = this._map.get(12).isIntl(),
      c = this._map.get(12).isUsingChatCore();
    (r =
      'instanceID:'
        .concat(r, ' SDKAppID:')
        .concat(a, ' isIntl:')
        .concat(s, ' isUsingChatCore:')
        .concat(c, ' host:')
        .concat(Lt(), ' isIOSWebView:')
        .concat(_e) +
      ' inBrowser:'.concat(ee, ' inMiniApp:').concat(Z) +
      ' canIUseInflate:'.concat(this.canIUseInflate()) +
      ' workerAvailable:'.concat(he, ' UserAgent:').concat(ne)),
      ei.bindEventStatModule(this._map.get(14)),
      ei.bindNetMonitorModule(this._map.get(15)),
      o
        .setMessage(
          ''.concat(r, ' ').concat(
            (function () {
              var e = '';
              if (Z)
                try {
                  var t = te.getSystemInfoSync(),
                    n = t.model,
                    i = t.version,
                    o = t.system,
                    r = t.platform,
                    a = t.SDKVersion;
                  e = 'model:'
                    .concat(n, ' version:')
                    .concat(i, ' system:')
                    .concat(o, ' platform:')
                    .concat(r, ' SDKVersion:')
                    .concat(a);
                } catch (s) {
                  e = '';
                }
              return e;
            })()
          )
        )
        .end(),
      Ae.i('SDK '.concat(r)),
      (Pn.prototype._getErrMsg = this.getErrMsg.bind(this)),
      (this._readyList = void 0),
      (this._ssoLogForReady = null),
      this._initReadyList();
  }
  function Gc(e) {
    i(this, Gc),
      (this._m = e),
      (this._n = 'InflateModule'),
      (this._bLogForInflateOK = !1),
      (this._bLogForInflateError = !1);
  }
  var xc = {};
  return (
    ((J = {}).create = function (e) {
      var n,
        i,
        o,
        r = 'TencentCloudChat.create',
        a = 0;
      if (Ke((o = e.SDKAppID))) a = o;
      else if (((a = parseInt(o)), isNaN(o)))
        return (
          Ae.e(
            ''.concat(
              r,
              ' failed. Failed to parse the SDKAppID, please check the arguments'
            )
          ),
          null
        );
      return a && xc[a]
        ? xc[a]
        : (Ae.l(''.concat(r)),
          (o = new bc(t(t({}, e), {}, { SDKAppID: a }))).on(
            E.SDK_DESTROY,
            function (e) {
              (xc[e.data.SDKAppID] = null), delete xc[e.data.SDKAppID];
            }
          ),
          (n = o),
          (i = Object.create(null)),
          Object.keys(Nn).forEach(function (e) {
            var t;
            n[e] &&
              ((t = new k()),
              (i[e] = function () {
                var i = Array.from(arguments);
                return (
                  t
                    .use(function (t, i) {
                      var o = (function (e, t) {
                        if (e.isReady() || 1 === Nc[t]) return !0;
                        var n = {
                          code: (n = e.getNotReadyReason()),
                          message: ''
                            .concat(e.getErrMsg(n), ' | ')
                            .concat(t, ' | ')
                            .concat(e.getErrMsg(wn.SDK_IS_NOT_READY)),
                        };
                        return e.onError(n), n;
                      })(n, e);
                      return !0 === o ? i() : In(o);
                    })
                    .use(function (t, n) {
                      if (
                        !0 ===
                        (function (e, t, n) {
                          if (void 0 === t) return !0;
                          var i = !0;
                          if (ze(t))
                            Object.keys(t).forEach(function (o) {
                              var r = 1 === e.length ? e[0][o] : void 0;
                              i = !!zt(r, t[o], n, o) && i;
                            });
                          else if ($e(t))
                            for (var o = 0; o < t.length; o++)
                              i = !!zt(e[o], t[o], n, t[o].name) && i;
                          if (i) return i;
                          throw new Error('Params validate failed.');
                        })(t, bn[e], e)
                      )
                        return n();
                    })
                    .use(function (t, i) {
                      return n[e].apply(n, t);
                    }),
                  t.run(i)
                );
              }));
          }),
          (e = i),
          (xc[a] = e),
          bn.hookGetAPITips(o.getErrMsg.bind(o)),
          Ae.l(''.concat(r, ' ok')),
          e);
    }),
    (J.TYPES = D),
    (J.EVENT = E),
    (J.TSignaling = S),
    (J.VERSION = '3.4.2'),
    Ae.l('TencentCloudChat.VERSION:'.concat(J.VERSION)),
    J
  );
})();
var Yd = $d.exports;
const Jd = Qs(Yd);
var Xd = { exports: {} };
Xd.exports = (function () {
  function e(t) {
    return (e =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (e) {
            return typeof e;
          }
        : function (e) {
            return e &&
              'function' == typeof Symbol &&
              e.constructor === Symbol &&
              e !== Symbol.prototype
              ? 'symbol'
              : typeof e;
          })(t);
  }
  function t(e, t) {
    if (!(e instanceof t))
      throw new TypeError('Cannot call a class as a function');
  }
  function n(e, t) {
    for (var n = 0; n < t.length; n++) {
      var i = t[n];
      (i.enumerable = i.enumerable || !1),
        (i.configurable = !0),
        'value' in i && (i.writable = !0),
        Object.defineProperty(e, i.key, i);
    }
  }
  function i(e, t, i) {
    return t && n(e.prototype, t), e;
  }
  function o(e, t, n) {
    return (
      t in e
        ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0,
          })
        : (e[t] = n),
      e
    );
  }
  function r(e, t) {
    var n = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var i = Object.getOwnPropertySymbols(e);
      t &&
        (i = i.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })),
        n.push.apply(n, i);
    }
    return n;
  }
  function a(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = null != arguments[t] ? arguments[t] : {};
      t % 2
        ? r(Object(n), !0).forEach(function (t) {
            o(e, t, n[t]);
          })
        : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n))
          : r(Object(n)).forEach(function (t) {
              Object.defineProperty(
                e,
                t,
                Object.getOwnPropertyDescriptor(n, t)
              );
            });
    }
    return e;
  }
  function s() {
    var e = new Date().getTime(),
      t = new Date(e),
      n = t.getHours(),
      i = t.getMinutes(),
      o = t.getSeconds(),
      r = t.getMilliseconds();
    return (
      (n = n < 10 ? '0'.concat(n) : n),
      (i = i < 10 ? '0'.concat(i) : i),
      (o = o < 10 ? '0'.concat(o) : o),
      ''.concat(n, ':').concat(i, ':').concat(o, '.').concat(r)
    );
  }
  var c = 'TRTC-WX',
    u = 0,
    l = 1,
    d = 2,
    p = 3,
    h = new ((function () {
      function e() {
        t(this, e), (this.logLevel = 0);
      }
      return (
        i(e, [
          {
            key: 'setLogLevel',
            value: function (e) {
              this.logLevel = e;
            },
          },
          {
            key: 'log',
            value: function () {
              var e;
              this.logLevel === u &&
                (e = console).log.apply(
                  e,
                  [c, s()].concat(Array.prototype.slice.call(arguments))
                );
            },
          },
          {
            key: 'info',
            value: function () {
              var e;
              this.logLevel <= l &&
                (e = console).info.apply(
                  e,
                  [c, s()].concat(Array.prototype.slice.call(arguments))
                );
            },
          },
          {
            key: 'warn',
            value: function () {
              var e;
              this.logLevel <= d &&
                (e = console).warn.apply(
                  e,
                  [c, s()].concat(Array.prototype.slice.call(arguments))
                );
            },
          },
          {
            key: 'error',
            value: function () {
              var e;
              this.logLevel <= p &&
                (e = console).error.apply(
                  e,
                  [c, s()].concat(Array.prototype.slice.call(arguments))
                );
            },
          },
        ]),
        e
      );
    })())();
  function f(e) {
    if (!g(e)) return null;
    (e.scene = e.scene && 'rtc' !== e.scene ? e.scene : 'videocall'),
      (e.enableBlackStream = e.enableBlackStream || ''),
      (e.encsmall = e.encsmall || 0),
      (e.cloudenv = e.cloudenv || 'PRO'),
      (e.streamID = e.streamID || ''),
      (e.userDefineRecordID = e.userDefineRecordID || ''),
      (e.privateMapKey = e.privateMapKey || ''),
      (e.pureAudioMode = e.pureAudioMode || ''),
      (e.recvMode = e.recvMode || 1);
    var t = '';
    return (
      (t = e.strRoomID
        ? '&strroomid='.concat(e.strRoomID)
        : '&roomid='.concat(e.roomID)),
      'room://cloud.tencent.com/rtc?sdkappid='
        .concat(e.sdkAppID)
        .concat(t, '&userid=')
        .concat(e.userID, '&usersig=')
        .concat(e.userSig, '&appscene=')
        .concat(e.scene, '&encsmall=')
        .concat(e.encsmall, '&cloudenv=')
        .concat(e.cloudenv, '&enableBlackStream=')
        .concat(e.enableBlackStream, '&streamid=')
        .concat(e.streamID, '&userdefinerecordid=')
        .concat(e.userDefineRecordID, '&privatemapkey=')
        .concat(e.privateMapKey, '&pureaudiomode=')
        .concat(e.pureAudioMode, '&recvmode=')
        .concat(e.recvMode, '&component=')
        .concat(
          (function () {
            var e, t;
            try {
              e =
                $n && $n.TUIScene
                  ? $n.TUIScene
                  : $n && $n.getStorageSync && $n.getStorageSync('TUIScene')
                    ? $n.getStorageSync('TUIScene')
                    : getApp &&
                        getApp() &&
                        getApp().globalData &&
                        getApp().globalData.TUIScene
                      ? getApp().globalData.TUIScene
                      : '';
            } catch (n) {
              (e = ''), console.error(n);
            }
            if (
              e &&
              'number' == typeof (t = Number(e)) &&
              !isNaN(t) &&
              0 < Number(e) &&
              Number(e) < 20
            )
              return e;
            switch (e) {
              case 'sampleDemo':
                return 2;
              case 'TUICalling':
                return 3;
              case 'TUIRoom':
                return 5;
              case 'TUIVoiceRoom':
                return 6;
              case 'TIMCalling':
                return 10;
              case 'TUICallKit':
                return 14;
              case 'TIMCallKit':
                return 15;
              case 'TUIRoomEngine':
                return 16;
              case 'TUICallEngine':
                return 17;
              case 'TUIRoomKit':
                return 18;
              default:
                return 1;
            }
          })()
        )
    );
  }
  var g = function (e) {
      var t = /[\u4e00-\u9fa5]/;
      return e.sdkAppID
        ? void 0 === e.roomID && void 0 === e.strRoomID
          ? (h.error('未设置 roomID'), !1)
          : !e.strRoomID && (e.roomID < 1 || e.roomID > 4294967296)
            ? (h.error('roomID 超出取值范围 1 ~ 4294967295'), !1)
            : e.strRoomID && t.test(e.strRoomID)
              ? (h.error('strRoomID 请勿使用中文字符'), !1)
              : e.userID
                ? e.userID && t.test(e.userID)
                  ? (h.error('userID 请勿使用中文字符'), !1)
                  : !!e.userSig || (h.error('未设置 userSig'), !1)
                : (h.error('未设置 userID'), !1)
        : (h.error('未设置 sdkAppID'), !1);
    },
    _ = {
      LOCAL_JOIN: 'LOCAL_JOIN',
      LOCAL_LEAVE: 'LOCAL_LEAVE',
      KICKED_OUT: 'KICKED_OUT',
      REMOTE_USER_JOIN: 'REMOTE_USER_JOIN',
      REMOTE_USER_LEAVE: 'REMOTE_USER_LEAVE',
      REMOTE_VIDEO_ADD: 'REMOTE_VIDEO_ADD',
      REMOTE_VIDEO_REMOVE: 'REMOTE_VIDEO_REMOVE',
      REMOTE_AUDIO_ADD: 'REMOTE_AUDIO_ADD',
      REMOTE_AUDIO_REMOVE: 'REMOTE_AUDIO_REMOVE',
      REMOTE_STATE_UPDATE: 'REMOTE_STATE_UPDATE',
      LOCAL_NET_STATE_UPDATE: 'LOCAL_NET_STATE_UPDATE',
      REMOTE_NET_STATE_UPDATE: 'REMOTE_NET_STATE_UPDATE',
      LOCAL_AUDIO_VOLUME_UPDATE: 'LOCAL_AUDIO_VOLUME_UPDATE',
      REMOTE_AUDIO_VOLUME_UPDATE: 'REMOTE_AUDIO_VOLUME_UPDATE',
      VIDEO_FULLSCREEN_UPDATE: 'VIDEO_FULLSCREEN_UPDATE',
      BGM_PLAY_START: 'BGM_PLAY_START',
      BGM_PLAY_FAIL: 'BGM_PLAY_FAIL',
      BGM_PLAY_PROGRESS: 'BGM_PLAY_PROGRESS',
      BGM_PLAY_COMPLETE: 'BGM_PLAY_COMPLETE',
      ERROR: 'ERROR',
      IM_READY: 'IM_READY',
      IM_MESSAGE_RECEIVED: 'IM_MESSAGE_RECEIVED',
      IM_NOT_READY: 'IM_NOT_READY',
      IM_KICKED_OUT: 'IM_KICKED_OUT',
      IM_ERROR: 'IM_ERROR',
    },
    v = {
      url: '',
      mode: 'RTC',
      autopush: !1,
      enableCamera: !1,
      enableMic: !1,
      enableAgc: !1,
      enableAns: !1,
      enableEarMonitor: !1,
      enableAutoFocus: !0,
      enableZoom: !1,
      minBitrate: 600,
      maxBitrate: 900,
      videoWidth: 360,
      videoHeight: 640,
      beautyLevel: 0,
      whitenessLevel: 0,
      videoOrientation: 'vertical',
      videoAspect: '9:16',
      frontCamera: 'front',
      enableRemoteMirror: !1,
      localMirror: 'auto',
      enableBackgroundMute: !1,
      audioQuality: 'high',
      audioVolumeType: 'voicecall',
      audioReverbType: 0,
      waitingImage: '',
      waitingImageHash: '',
      beautyStyle: 'smooth',
      filter: '',
      netStatus: {},
    },
    m = {
      src: '',
      mode: 'RTC',
      autoplay: !0,
      muteAudio: !1,
      muteVideo: !1,
      orientation: 'vertical',
      objectFit: 'fillCrop',
      enableBackgroundMute: !1,
      minCache: 1,
      maxCache: 2,
      soundMode: 'speaker',
      enableRecvMessage: !1,
      autoPauseIfNavigate: !0,
      autoPauseIfOpenNative: !0,
      isVisible: !0,
      _definitionType: 'main',
      netStatus: {},
    };
  function y() {
    var e = new Date();
    return e.setTime(new Date().getTime() + 0), e.toLocaleString();
  }
  new Date().getTime();
  var I = function (e) {
      var t = [];
      if ((e && e.TUIScene && t.push(e.TUIScene), e && 'test' === e.env))
        return 'default';
      if (
        ($n && $n.TUIScene && t.push($n.TUIScene),
        $n && 'function' == typeof getApp)
      ) {
        var n = getApp().globalData;
        n && n.TUIScene && t.push(n.TUIScene);
      }
      return (
        $n &&
          $n.getStorage({
            key: 'TUIScene',
            success: function (e) {
              t.push(e.data);
            },
          }),
        t[0] || 'default'
      );
    },
    M = new ((function () {
      function e() {
        t(this, e),
          (this.sdkAppId = ''),
          (this.userId = ''),
          (this.version = ''),
          (this.common = {});
      }
      return (
        i(e, [
          {
            key: 'setConfig',
            value: function (e) {
              (this.sdkAppId = ''.concat(e.sdkAppId)),
                (this.userId = ''.concat(e.userId)),
                (this.version = ''.concat(e.version)),
                (this.common.TUIScene = I(e));
            },
          },
          {
            key: 'log',
            value: function (e) {
              $n.request({
                url: 'https://yun.tim.qq.com/v5/AVQualityReportSvc/C2S?sdkappid=1&cmdtype=jssdk_log',
                method: 'POST',
                header: { 'content-type': 'application/json' },
                data: {
                  timestamp: y(),
                  sdkAppId: this.sdkAppId,
                  userId: this.userId,
                  version: this.version,
                  log: JSON.stringify(a(a({}, e), this.common)),
                },
              });
            },
          },
        ]),
        e
      );
    })())(),
    C = 'enterRoom',
    T = 'exitRoom',
    E = 'setPusherAttributes',
    D = 'setPlayerAttributes',
    S = 'init',
    k = 'error',
    R = 'connectServer',
    L = 'startPusher',
    A = 'openCamera',
    O = 'screenCap',
    b = 'pusherResolution',
    N = 'pusherCodeRate',
    P = 'collectionFirstFrame',
    w = 'encoderStart',
    U = 'enterRoomSuccess',
    G = 'exitRoomSuccess',
    x = 'kicked_out',
    F = 'renderFirstFrame',
    q = 'miniAppHang',
    V = 'closeSuspension',
    B = 'other',
    H = 'update',
    j = 'addUser',
    K = 'remove_user',
    W = 'update_user_video',
    z = 'update_user_audio',
    $ = 'pusherStart',
    Y = 'pusherStop',
    J = 'pusherPause',
    X = 'pusherResume',
    Z = (function () {
      function n(e, i) {
        t(this, n),
          (this.context = $n.createLivePusherContext(i)),
          (this.pusherAttributes = {}),
          Object.assign(this.pusherAttributes, v, e);
      }
      return (
        i(n, [
          {
            key: 'setPusherAttributes',
            value: function (e) {
              return (
                Object.assign(this.pusherAttributes, e), this.pusherAttributes
              );
            },
          },
          {
            key: 'start',
            value: function (e) {
              h.log('[apiLog][pusherStart]'),
                M.log({ name: $, options: e }),
                this.context.start(e);
            },
          },
          {
            key: 'stop',
            value: function (e) {
              h.log('[apiLog][pusherStop]'),
                M.log({ name: Y, options: e }),
                this.context.stop(e);
            },
          },
          {
            key: 'pause',
            value: function (e) {
              h.log('[apiLog] pusherPause()'),
                M.log({ name: J, options: e }),
                this.context.pause(e);
            },
          },
          {
            key: 'resume',
            value: function (e) {
              h.log('[apiLog][pusherResume]'),
                M.log({ name: X, options: e }),
                this.context.resume(e);
            },
          },
          {
            key: 'switchCamera',
            value: function (e) {
              return (
                h.log('[apiLog][switchCamera]'),
                (this.pusherAttributes.frontCamera =
                  'front' === this.pusherAttributes.frontCamera
                    ? 'back'
                    : 'front'),
                this.context.switchCamera(e),
                this.pusherAttributes
              );
            },
          },
          {
            key: 'sendMessage',
            value: function (e) {
              h.log('[apiLog][sendMessage]', e.msg),
                this.context.sendMessage(e);
            },
          },
          {
            key: 'snapshot',
            value: function () {
              var e = this;
              return (
                h.log('[apiLog][pusherSnapshot]'),
                new Promise(function (t, n) {
                  e.context.snapshot({
                    quality: 'raw',
                    complete: function (e) {
                      e.tempImagePath
                        ? ($n.saveImageToPhotosAlbum({
                            filePath: e.tempImagePath,
                            success: function (n) {
                              t(e);
                            },
                            fail: function (e) {
                              h.error('[error] pusher截图失败: ', e),
                                n(new Error('截图失败'));
                            },
                          }),
                          t(e))
                        : (h.error('[error] snapShot 回调失败', e),
                          n(new Error('截图失败')));
                    },
                  });
                })
              );
            },
          },
          {
            key: 'toggleTorch',
            value: function (e) {
              this.context.toggleTorch(e);
            },
          },
          {
            key: 'startDumpAudio',
            value: function (e) {
              this.context.startDumpAudio(e);
            },
          },
          {
            key: 'stopDumpAudio',
            value: function (e) {
              this.context.startDumpAudio(e);
            },
          },
          {
            key: 'playBGM',
            value: function (e) {
              h.log('[apiLog] playBGM() url: ', e.url), this.context.playBGM(e);
            },
          },
          {
            key: 'pauseBGM',
            value: function (e) {
              h.log('[apiLog] pauseBGM()'), this.context.pauseBGM(e);
            },
          },
          {
            key: 'resumeBGM',
            value: function (e) {
              h.log('[apiLog] resumeBGM()'), this.context.resumeBGM(e);
            },
          },
          {
            key: 'stopBGM',
            value: function (e) {
              h.log('[apiLog] stopBGM()'), this.context.stopBGM(e);
            },
          },
          {
            key: 'setBGMVolume',
            value: function (t) {
              h.log('[apiLog] setBGMVolume() volume:', t),
                t && t.volume && 'object' === e(t.volume) && t.volume.volume
                  ? this.context.setBGMVolume(t.volume)
                  : this.context.setBGMVolume(t);
            },
          },
          {
            key: 'setMICVolume',
            value: function (t) {
              h.log('[apiLog] setMICVolume() volume:', t),
                t && t.volume && 'object' === e(t.volume) && t.volume.volume
                  ? this.context.setMICVolume(t.volume)
                  : this.context.setMICVolume(t);
            },
          },
          {
            key: 'startPreview',
            value: function (e) {
              h.log('[apiLog] startPreview()'), this.context.startPreview(e);
            },
          },
          {
            key: 'stopPreview',
            value: function (e) {
              h.log('[apiLog] stopPreview()'), this.context.stopPreview(e);
            },
          },
          {
            key: 'reset',
            value: function () {
              return (
                console.log('Pusher reset', this.context),
                (this.pusherAttributes = {}),
                this.context &&
                  (this.stop({
                    success: function () {
                      console.log('Pusher context.stop()');
                    },
                  }),
                  (this.context = null)),
                this.pusherAttributes
              );
            },
          },
        ]),
        n
      );
    })(),
    Q = function e(n) {
      t(this, e), Object.assign(this, { userID: '', streams: {} }, n);
    },
    ee = (function () {
      function e(n, i) {
        t(this, e),
          (this.ctx = i),
          (this.playerAttributes = this.getInitPlayerAttributes(n));
      }
      return (
        i(e, [
          {
            key: 'play',
            value: function (e) {
              this.getPlayerContext().play(e);
            },
          },
          {
            key: 'stop',
            value: function (e) {
              this.getPlayerContext().stop(e);
            },
          },
          {
            key: 'mute',
            value: function (e) {
              this.getPlayerContext().mute(e);
            },
          },
          {
            key: 'pause',
            value: function (e) {
              this.getPlayerContext().pause(e);
            },
          },
          {
            key: 'resume',
            value: function (e) {
              this.getPlayerContext().resume(e);
            },
          },
          {
            key: 'requestFullScreen',
            value: function (e) {
              var t = this;
              return new Promise(function (n, i) {
                t.getPlayerContext().requestFullScreen({
                  direction: e.direction,
                  success: function (e) {
                    n(e);
                  },
                  fail: function (e) {
                    i(e);
                  },
                });
              });
            },
          },
          {
            key: 'requestExitFullScreen',
            value: function () {
              var e = this;
              return new Promise(function (t, n) {
                e.getPlayerContext().exitFullScreen({
                  success: function (e) {
                    t(e);
                  },
                  fail: function (e) {
                    n(e);
                  },
                });
              });
            },
          },
          {
            key: 'snapshot',
            value: function (e) {
              var t = this;
              return (
                h.log('[playerSnapshot]', e),
                new Promise(function (e, n) {
                  t.getPlayerContext().snapshot({
                    quality: 'raw',
                    complete: function (t) {
                      t.tempImagePath
                        ? ($n.saveImageToPhotosAlbum({
                            filePath: t.tempImagePath,
                            success: function (n) {
                              h.log('save photo is success', n), e(t);
                            },
                            fail: function (e) {
                              h.error('save photo is fail', e), n(e);
                            },
                          }),
                          e(t))
                        : (h.error('snapShot 回调失败', t),
                          n(new Error('截图失败')));
                    },
                  });
                })
              );
            },
          },
          {
            key: 'setPlayerAttributes',
            value: function (e) {
              this.playerAttributes = Object.assign(
                {},
                this.playerAttributes,
                e
              );
            },
          },
          {
            key: 'getPlayerContext',
            value: function () {
              return (
                this.playerContext ||
                  (this.playerContext = $n.createLivePlayerContext(
                    this.playerAttributes.id,
                    this.ctx
                  )),
                this.playerContext
              );
            },
          },
          {
            key: 'reset',
            value: function () {
              this.playerContext &&
                (this.playerContext.stop(), (this.playerContext = void 0)),
                (this.playerAttributes = this.getInitPlayerAttributes());
            },
          },
          {
            key: 'getInitPlayerAttributes',
            value: function () {
              var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : {};
              return Object.assign(
                {},
                m,
                {
                  userID: '',
                  streamType: '',
                  streamID: '',
                  id: '',
                  hasVideo: !1,
                  hasAudio: !1,
                  volume: 0,
                  playerContext: void 0,
                },
                e
              );
            },
          },
        ]),
        e
      );
    })(),
    te = 'UserController',
    ne = (function () {
      function e(n, i) {
        t(this, e),
          (this.ctx = i),
          (this.userMap = new Map()),
          (this.userList = []),
          (this.streamList = []),
          (this.emitter = n);
      }
      return (
        i(e, [
          {
            key: 'userEventHandler',
            value: function (e) {
              var t = e.detail.code,
                n = e.detail.message,
                i = { name: B, code: t, message: n, data: '' };
              switch (t) {
                case 0:
                  h.log(n, t);
                  break;
                case 1001:
                  h.log('已经连接推流服务器', t), (i.name = R);
                  break;
                case 1002:
                  h.log('已经与服务器握手完毕,开始推流', t), (i.name = L);
                  break;
                case 1003:
                  h.log('打开摄像头成功', t), (i.name = A);
                  break;
                case 1004:
                  h.log('录屏启动成功', t), (i.name = O);
                  break;
                case 1005:
                  h.log('推流动态调整分辨率', t), (i.name = b);
                  break;
                case 1006:
                  h.log('推流动态调整码率', t), (i.name = N);
                  break;
                case 1007:
                  h.log('首帧画面采集完成', t), (i.name = P);
                  break;
                case 1008:
                  h.log('编码器启动', t), (i.name = w);
                  break;
                case 1018:
                  h.log('进房成功', t),
                    (i.name = U),
                    (i.data = 'event enterRoom success'),
                    this.emitter.emit(_.LOCAL_JOIN);
                  break;
                case 1019:
                  h.log('退出房间', t),
                    n.indexOf('reason[0]') > -1
                      ? ((i.name = G), (i.data = 'event exitRoom success'))
                      : ((i.name = x),
                        (i.data = 'event abnormal exitRoom'),
                        this.emitter.emit(_.KICKED_OUT));
                  break;
                case 2003:
                  h.log('渲染首帧视频', t), (i.name = F);
                  break;
                case -1301:
                  h.error('打开摄像头失败: ', t),
                    (i.name = k),
                    (i.data = 'event start camera failed'),
                    this.emitter.emit(_.ERROR, { code: t, message: n });
                  break;
                case -1302:
                  (i.name = k),
                    (i.data = 'event start microphone failed'),
                    h.error('打开麦克风失败: ', t),
                    this.emitter.emit(_.ERROR, { code: t, message: n });
                  break;
                case -1303:
                  h.error('视频编码失败: ', t),
                    (i.name = k),
                    (i.data = 'event video encode failed'),
                    this.emitter.emit(_.ERROR, { code: t, message: n });
                  break;
                case -1304:
                  h.error('音频编码失败: ', t),
                    (i.name = k),
                    (i.data = 'event audio encode failed'),
                    this.emitter.emit(_.ERROR, { code: t, message: n });
                  break;
                case -1307:
                  h.error('推流连接断开: ', t),
                    (i.name = k),
                    (i.data = 'event pusher stream failed'),
                    this.emitter.emit(_.ERROR, { code: t, message: n });
                  break;
                case -100018:
                  h.error(
                    '进房失败: userSig 校验失败，请检查 userSig 是否填写正确',
                    t,
                    n
                  ),
                    (i.name = k),
                    (i.data = 'event userSig is error'),
                    this.emitter.emit(_.ERROR, { code: t, message: n });
                  break;
                case 5e3:
                  h.log('小程序被挂起: ', t),
                    (i.name = q),
                    (i.data = 'miniApp is hang');
                  break;
                case 5001:
                  h.log('小程序悬浮窗被关闭: ', t), (i.name = V);
                  break;
                case 1021:
                  h.log('网络类型发生变化，需要重新进房', t);
                  break;
                case 2007:
                  h.log('本地视频播放loading: ', t);
                  break;
                case 2004:
                  h.log('本地视频播放开始: ', t);
                  break;
                case 1031:
                case 1032:
                case 1033:
                case 1034:
                  this._handleUserEvent(e);
              }
              M.log(i);
            },
          },
          {
            key: '_handleUserEvent',
            value: function (e) {
              var t,
                n = e.detail.code,
                i = e.detail.message;
              if (!e.detail.message || 'string' != typeof i)
                return h.warn(te, 'userEventHandler 数据格式错误'), !1;
              try {
                t = JSON.parse(e.detail.message);
              } catch (o) {
                return h.warn(te, 'userEventHandler 数据格式错误', o), !1;
              }
              switch (
                (this.emitter.emit(_.LOCAL_STATE_UPDATE, e),
                M.log({ name: H, code: n, message: i, data: t }),
                n)
              ) {
                case 1031:
                  this.addUser(t);
                  break;
                case 1032:
                  this.removeUser(t);
                  break;
                case 1033:
                  this.updateUserVideo(t);
                  break;
                case 1034:
                  this.updateUserAudio(t);
              }
            },
          },
          {
            key: 'addUser',
            value: function (e) {
              var t = this,
                n = e.userlist;
              Array.isArray(n) &&
                n.length > 0 &&
                n.forEach(function (e) {
                  var n = e.userid,
                    i = t.getUser(n);
                  i ||
                    ((i = new Q({ userID: n })),
                    t.userList.push({ userID: n })),
                    t.userMap.set(n, i),
                    t.emitter.emit(_.REMOTE_USER_JOIN, {
                      userID: n,
                      userList: t.userList,
                      playerList: t.getPlayerList(),
                    }),
                    M.log({
                      name: j,
                      userID: n,
                      userList: t.userList,
                      playerList: t.getPlayerList(),
                    });
                });
            },
          },
          {
            key: 'removeUser',
            value: function (e) {
              var t = this,
                n = e.userlist;
              Array.isArray(n) &&
                n.length > 0 &&
                n.forEach(function (e) {
                  var n = e.userid,
                    i = t.getUser(n);
                  if (i && i.streams) {
                    if (i.streams) {
                      var o,
                        r,
                        a =
                          null === (o = i.streams) || void 0 === o
                            ? void 0
                            : o.main,
                        s =
                          null === (r = i.streams) || void 0 === r
                            ? void 0
                            : r.aux,
                        c = function (e) {
                          var n, i;
                          null != e &&
                            null !== (n = e.playerAttributes) &&
                            void 0 !== n &&
                            n.hasVideo &&
                            t.emitter.emit(_.REMOTE_VIDEO_REMOVE, {
                              player: e.playerAttributes,
                              userList: t.userList,
                              playerList: t.getPlayerList(),
                            }),
                            null != e &&
                              null !== (i = e.playerAttributes) &&
                              void 0 !== i &&
                              i.hasAudio &&
                              t.emitter.emit(_.REMOTE_AUDIO_REMOVE, {
                                player: e.playerAttributes,
                                userList: t.userList,
                                playerList: t.getPlayerList(),
                              });
                        };
                      c(a), c(s);
                    }
                    t._removeUserAndStream(n),
                      i.streams.main && i.streams.main.reset(),
                      i.streams.aux && i.streams.aux.reset(),
                      t.emitter.emit(_.REMOTE_USER_LEAVE, {
                        userID: n,
                        userList: t.userList,
                        playerList: t.getPlayerList(),
                      }),
                      M.log({
                        name: K,
                        userID: n,
                        userList: t.userList,
                        playerList: t.getPlayerList(),
                      }),
                      (i = void 0),
                      t.userMap.delete(n);
                  }
                });
            },
          },
          {
            key: 'updateUserVideo',
            value: function (e) {
              var t = this;
              h.log(te, 'updateUserVideo', e);
              var n = e.userlist;
              Array.isArray(n) &&
                n.length > 0 &&
                n.forEach(function (e) {
                  var n = e.userid,
                    i = e.streamtype,
                    o = ''.concat(n, '_').concat(i),
                    r = o,
                    a = e.hasvideo,
                    s = e.playurl,
                    c = t.getUser(n);
                  if (c) {
                    var u = c.streams[i];
                    h.log(te, 'updateUserVideo start', c, i, u),
                      u
                        ? (u.setPlayerAttributes({ hasVideo: a }),
                          a ||
                            u.playerAttributes.hasAudio ||
                            t._removeStream(u))
                        : ((u = new ee(
                            {
                              userID: n,
                              streamID: o,
                              hasVideo: a,
                              src: s,
                              streamType: i,
                              id: r,
                            },
                            t.ctx
                          )),
                          (c.streams[i] = u),
                          t._addStream(u)),
                      'aux' === i &&
                        (a
                          ? (u.setPlayerAttributes({
                              objectFit: 'contain',
                              muteAudio: !1,
                            }),
                            t._addStream(u))
                          : t._removeStream(u)),
                      t.userList.find(function (e) {
                        if (e.userID === n)
                          return (
                            (e[
                              'has'.concat(
                                i.replace(/^\S/, function (e) {
                                  return e.toUpperCase();
                                }),
                                'Video'
                              )
                            ] = a),
                            !0
                          );
                      }),
                      h.log(te, 'updateUserVideo end', c, i, u);
                    var l = a ? _.REMOTE_VIDEO_ADD : _.REMOTE_VIDEO_REMOVE;
                    t.emitter.emit(l, {
                      player: u.playerAttributes,
                      userList: t.userList,
                      playerList: t.getPlayerList(),
                    }),
                      M.log({
                        name: W,
                        player: u.playerAttributes,
                        userList: t.userList,
                        playerList: t.getPlayerList(),
                      });
                  }
                });
            },
          },
          {
            key: 'updateUserAudio',
            value: function (e) {
              var t = this,
                n = e.userlist;
              Array.isArray(n) &&
                n.length > 0 &&
                n.forEach(function (e) {
                  var n = e.userid,
                    i = 'main',
                    o = ''.concat(n, '_').concat(i),
                    r = o,
                    a = e.hasaudio,
                    s = e.playurl,
                    c = t.getUser(n);
                  if (c) {
                    var u = c.streams.main;
                    u
                      ? (u.setPlayerAttributes({ hasAudio: a }),
                        a || u.playerAttributes.hasVideo || t._removeStream(u))
                      : ((u = new ee(
                          {
                            userID: n,
                            streamID: o,
                            hasAudio: a,
                            src: s,
                            streamType: i,
                            id: r,
                          },
                          t.ctx
                        )),
                        (c.streams.main = u),
                        t._addStream(u)),
                      t.userList.find(function (e) {
                        if (e.userID === n)
                          return (
                            (e[
                              'has'.concat(
                                i.replace(/^\S/, function (e) {
                                  return e.toUpperCase();
                                }),
                                'Audio'
                              )
                            ] = a),
                            !0
                          );
                      });
                    var l = a ? _.REMOTE_AUDIO_ADD : _.REMOTE_AUDIO_REMOVE;
                    t.emitter.emit(l, {
                      player: u.playerAttributes,
                      userList: t.userList,
                      playerList: t.getPlayerList(),
                    }),
                      M.log({
                        name: z,
                        player: u.playerAttributes,
                        userList: t.userList,
                        playerList: t.getPlayerList(),
                      });
                  }
                });
            },
          },
          {
            key: 'getUser',
            value: function (e) {
              return this.userMap.get(e);
            },
          },
          {
            key: 'getStream',
            value: function (e) {
              var t = e.userID,
                n = e.streamType,
                i = this.userMap.get(t);
              if (i) return i.streams[n];
            },
          },
          {
            key: 'getUserList',
            value: function () {
              return this.userList;
            },
          },
          {
            key: 'getStreamList',
            value: function () {
              return this.streamList;
            },
          },
          {
            key: 'getPlayerList',
            value: function () {
              return this.getStreamList().map(function (e) {
                return Object.assign({}, e.playerAttributes);
              });
            },
          },
          {
            key: 'reset',
            value: function () {
              return (
                this.streamList.forEach(function (e) {
                  e.reset();
                }),
                (this.streamList = []),
                (this.userList = []),
                this.userMap.clear(),
                { userList: this.userList, streamList: this.streamList }
              );
            },
          },
          {
            key: '_removeUserAndStream',
            value: function (e) {
              (this.streamList = this.streamList.filter(function (t) {
                return (
                  t.playerAttributes.userID !== e &&
                  '' !== t.playerAttributes.userID
                );
              })),
                (this.userList = this.userList.filter(function (t) {
                  return t.userID !== e;
                }));
            },
          },
          {
            key: '_addStream',
            value: function (e) {
              -1 ===
                this.streamList.findIndex(function (t) {
                  return (
                    t.playerAttributes.userID === e.playerAttributes.userID &&
                    t.playerAttributes.streamType ===
                      e.playerAttributes.streamType
                  );
                }) && this.streamList.push(e);
            },
          },
          {
            key: '_removeStream',
            value: function (e) {
              (this.streamList = this.streamList.filter(function (t) {
                return (
                  t.playerAttributes.userID !== e.playerAttributes.userID ||
                  t.playerAttributes.streamType !==
                    e.playerAttributes.streamType
                );
              })),
                (this.getUser(e.playerAttributes.userID).streams[
                  e.playerAttributes.streamType
                ] = void 0);
            },
          },
        ]),
        e
      );
    })(),
    ie = (function () {
      function e() {
        t(this, e);
      }
      return (
        i(e, [
          {
            key: 'on',
            value: function (e, t, n) {
              'function' == typeof t
                ? ((this._stores = this._stores || {}),
                  (this._stores[e] = this._stores[e] || []).push({
                    cb: t,
                    ctx: n,
                  }))
                : console.error('listener must be a function');
            },
          },
          {
            key: 'emit',
            value: function (e) {
              this._stores = this._stores || {};
              var t,
                n = this._stores[e];
              if (n) {
                (n = n.slice(0)),
                  ((t = [].slice.call(arguments, 1))[0] = {
                    eventCode: e,
                    data: t[0],
                  });
                for (var i = 0, o = n.length; i < o; i++)
                  n[i].cb.apply(n[i].ctx, t);
              }
            },
          },
          {
            key: 'off',
            value: function (e, t) {
              if (((this._stores = this._stores || {}), arguments.length)) {
                var n = this._stores[e];
                if (n)
                  if (1 !== arguments.length) {
                    for (var i = 0, o = n.length; i < o; i++)
                      if (n[i].cb === t) {
                        n.splice(i, 1);
                        break;
                      }
                  } else delete this._stores[e];
              } else this._stores = {};
            },
          },
        ]),
        e
      );
    })();
  return (function () {
    function e(n, i) {
      var o = this;
      t(this, e),
        (this.env = 'prod'),
        (this.ctx = n),
        (this.eventEmitter = new ie()),
        (this.pusherInstance = null),
        (this.userController = new ne(this.eventEmitter, this.ctx)),
        (this.EVENT = _),
        (this.TUIScene = null == i ? void 0 : i.TUIScene),
        'test' !== (null == i ? void 0 : i.env)
          ? $n.getSystemInfo({
              success: function (e) {
                return (o.systemInfo = e);
              },
            })
          : ((this.env = 'test'),
            (M.log = function () {}),
            (h.log = function () {}),
            (h.warn = function () {}));
    }
    return (
      i(e, [
        {
          key: 'initLog',
          value: function (e) {
            M.setConfig({
              sdkAppId: e.sdkAppID,
              userId: e.userID,
              version: 'wechat-mini',
              TUIScene: this.TUIScene,
              env: this.env,
            });
          },
        },
        {
          key: 'setLogLevel',
          value: function (e) {
            h.setLogLevel(e);
          },
        },
        {
          key: 'on',
          value: function (e, t, n) {
            h.log('[on] 事件订阅: '.concat(e)), this.eventEmitter.on(e, t, n);
          },
        },
        {
          key: 'off',
          value: function (e, t) {
            h.log('[off] 取消订阅: '.concat(e)), this.eventEmitter.off(e, t);
          },
        },
        {
          key: 'createPusher',
          value: function (e) {
            return (
              (this.pusherInstance = new Z(e, this.ctx)),
              h.log('pusherInstance', this.pusherInstance),
              this.pusherInstance
            );
          },
        },
        {
          key: 'getPusherInstance',
          value: function () {
            return this.pusherInstance;
          },
        },
        {
          key: 'enterRoom',
          value: function (e) {
            h.log('[apiLog] [enterRoom]', e);
            var t = f(e);
            return (
              this.initLog(a(a({}, e), {}, { env: this.env })),
              M.log({ name: S }),
              t ||
                (this.eventEmitter.emit(_.ERROR, { message: '进房参数错误' }),
                M.log({ name: k, message: '进房参数错误', data: e })),
              this.pusherInstance.setPusherAttributes(
                a(a({}, e), {}, { url: t })
              ),
              h.warn(
                '[statusLog] [enterRoom]',
                this.pusherInstance.pusherAttributes
              ),
              M.log({
                name: C,
                pusherConfig: this.pusherInstance.pusherAttributes,
              }),
              this.getPusherAttributes()
            );
          },
        },
        {
          key: 'exitRoom',
          value: function () {
            this.userController.reset();
            var e = Object.assign(
              { pusher: this.pusherInstance.reset() },
              { playerList: this.userController.getPlayerList() }
            );
            return (
              this.eventEmitter.emit(_.LOCAL_LEAVE),
              M.log({ name: T, data: e }),
              e
            );
          },
        },
        {
          key: 'getPlayerList',
          value: function () {
            var e = this.userController.getPlayerList();
            return h.log('[apiLog][getStreamList]', e), e;
          },
        },
        {
          key: 'setPusherAttributes',
          value: function (e) {
            return (
              h.log('[apiLog] [setPusherAttributes], ', e),
              this.pusherInstance.setPusherAttributes(e),
              h.warn(
                '[statusLog] [setPusherAttributes]',
                this.pusherInstance.pusherAttributes
              ),
              M.log({
                name: E,
                options: e,
                pusherConfig: this.pusherInstance.pusherAttributes,
              }),
              this.pusherInstance.pusherAttributes
            );
          },
        },
        {
          key: 'getPusherAttributes',
          value: function () {
            return (
              h.log('[apiLog] [getPusherConfig]'),
              this.pusherInstance.pusherAttributes
            );
          },
        },
        {
          key: 'setPlayerAttributes',
          value: function (e, t) {
            h.log('[apiLog] [setPlayerAttributes] id', e, 'options: ', t);
            var n = this._transformStreamID(e),
              i = n.userID,
              o = n.streamType,
              r = this.userController.getStream({ userID: i, streamType: o });
            return r
              ? (r.setPlayerAttributes(t),
                M.log({
                  name: D,
                  id: e,
                  options: t,
                  playerList: this.getPlayerList(),
                }),
                this.getPlayerList())
              : this.getPlayerList();
          },
        },
        {
          key: 'getPlayerInstance',
          value: function (e) {
            var t = this._transformStreamID(e),
              n = t.userID,
              i = t.streamType;
            return (
              h.log('[api][getPlayerInstance] id:', e),
              this.userController.getStream({ userID: n, streamType: i })
            );
          },
        },
        {
          key: 'switchStreamType',
          value: function (e) {
            h.log('[apiLog] [switchStreamType] id: ', e);
            var t = this._transformStreamID(e),
              n = t.userID,
              i = t.streamType,
              o = this.userController.getStream({ userID: n, streamType: i });
            return (
              'main' === o._definitionType
                ? ((o.src = o.src.replace('main', 'small')),
                  (o._definitionType = 'small'))
                : ((o.src = o.src.replace('small', 'main')),
                  (o._definitionType = 'main')),
              this.getPlayerList()
            );
          },
        },
        {
          key: 'pusherEventHandler',
          value: function (e) {
            this.userController.userEventHandler(e);
          },
        },
        {
          key: 'pusherNetStatusHandler',
          value: function (e) {
            var t = e.detail.info;
            this.pusherInstance.setPusherAttributes(a({ netStatus: t }, t)),
              this.eventEmitter.emit(_.LOCAL_NET_STATE_UPDATE, {
                pusher: this.pusherInstance.pusherAttributes,
              });
          },
        },
        {
          key: 'pusherErrorHandler',
          value: function (e) {
            try {
              var t = e.detail.errCode,
                n = e.detail.errMsg;
              this.eventEmitter.emit(_.ERROR, { code: t, message: n }),
                M.log({ name: k, code: t, message: n });
            } catch (i) {
              h.error('pusher error data parser exception', e, i);
            }
          },
        },
        {
          key: 'pusherBGMStartHandler',
          value: function (e) {
            this.eventEmitter.emit(_.BGM_PLAY_START);
          },
        },
        {
          key: 'pusherBGMProgressHandler',
          value: function (e) {
            var t, n;
            this.eventEmitter.emit(_.BGM_PLAY_PROGRESS, {
              progress:
                null === (t = e.detail) || void 0 === t ? void 0 : t.progress,
              duration:
                null === (n = e.detail) || void 0 === n ? void 0 : n.duration,
            });
          },
        },
        {
          key: 'pusherBGMCompleteHandler',
          value: function (e) {
            this.eventEmitter.emit(_.BGM_PLAY_COMPLETE);
          },
        },
        {
          key: 'pusherAudioVolumeNotify',
          value: function (e) {
            (this.pusherInstance.pusherAttributes.volume = e.detail.volume),
              this.eventEmitter.emit(_.LOCAL_AUDIO_VOLUME_UPDATE, {
                pusher: this.pusherInstance.pusherAttributes,
              });
          },
        },
        {
          key: 'playerEventHandler',
          value: function (e) {
            h.log('[statusLog][playerStateChange]', e),
              this.eventEmitter.emit(_.REMOTE_STATE_UPDATE, e);
          },
        },
        {
          key: 'playerFullscreenChange',
          value: function (e) {
            this.eventEmitter.emit(_.VIDEO_FULLSCREEN_UPDATE);
          },
        },
        {
          key: 'playerNetStatus',
          value: function (e) {
            var t = this._transformStreamID(e.currentTarget.dataset.streamid),
              n = t.userID,
              i = t.streamType,
              o = this.userController.getStream({ userID: n, streamType: i });
            !o ||
              (o.videoWidth === e.detail.info.videoWidth &&
                o.videoHeight === e.detail.info.videoHeight) ||
              (o.setPlayerAttributes({ netStatus: e.detail.info }),
              this.eventEmitter.emit(_.REMOTE_NET_STATE_UPDATE, {
                playerList: this.userController.getPlayerList(),
              }));
          },
        },
        {
          key: 'playerAudioVolumeNotify',
          value: function (e) {
            try {
              var t = this._transformStreamID(e.currentTarget.dataset.streamid),
                n = t.userID,
                i = t.streamType,
                o = this.userController.getStream({ userID: n, streamType: i });
              if (!o) return;
              var r = e.detail.volume;
              o.setPlayerAttributes({ volume: r }),
                this.eventEmitter.emit(_.REMOTE_AUDIO_VOLUME_UPDATE, {
                  playerList: this.userController.getPlayerList(),
                });
            } catch (a) {
              console.warn(a);
            }
          },
        },
        {
          key: '_transformStreamID',
          value: function (e) {
            try {
              var t = e.lastIndexOf('_');
              return { userID: e.slice(0, t), streamType: e.slice(t + 1) };
            } catch (n) {
              throw (
                (h.error(
                  'transformStreamID error: streamID = '
                    .concat(e, ', error = ')
                    .concat(n)
                ),
                n)
              );
            }
          },
        },
      ]),
      e
    );
  })();
})();
const Zd = Qs(Xd.exports);
function Qd(e, t) {
  (null == t || t > e.length) && (t = e.length);
  for (var n = 0, i = Array(t); n < t; n++) i[n] = e[n];
  return i;
}
function ep(e, t, n) {
  if ('function' == typeof e ? e === t : e.has(t))
    return arguments.length < 3 ? t : n;
  throw new TypeError('Private element is not present on this object');
}
function tp(e, t, n, i, o, r, a) {
  try {
    var s = e[r](a),
      c = s.value;
  } catch (u) {
    return void n(u);
  }
  s.done ? t(c) : Promise.resolve(c).then(i, o);
}
function np(e) {
  return function () {
    var t = this,
      n = arguments;
    return new Promise(function (i, o) {
      var r = e.apply(t, n);
      function a(e) {
        tp(r, i, o, a, s, 'next', e);
      }
      function s(e) {
        tp(r, i, o, a, s, 'throw', e);
      }
      a(void 0);
    });
  };
}
function ip(e, t, n) {
  return (
    (t = lp(t)),
    (function (e, t) {
      if (t && ('object' == typeof t || 'function' == typeof t)) return t;
      if (void 0 !== t)
        throw new TypeError(
          'Derived constructors may only return object or undefined'
        );
      return (function (e) {
        if (void 0 === e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          );
        return e;
      })(e);
    })(
      e,
      pp() ? Reflect.construct(t, n || [], lp(e).constructor) : t.apply(e, n)
    )
  );
}
function op(e, t) {
  if (!(e instanceof t))
    throw new TypeError('Cannot call a class as a function');
}
function rp(e, t) {
  return e.get(ep(e, t));
}
function ap(e, t) {
  for (var n = 0; n < t.length; n++) {
    var i = t[n];
    (i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(e, yp(i.key), i);
  }
}
function sp(e, t, n) {
  return (
    t && ap(e.prototype, t),
    n && ap(e, n),
    Object.defineProperty(e, 'prototype', { writable: !1 }),
    e
  );
}
function cp(e, t) {
  var n =
    ('undefined' != typeof Symbol && e[Symbol.iterator]) || e['@@iterator'];
  if (!n) {
    if (Array.isArray(e) || (n = Mp(e)) || t) {
      n && (e = n);
      var i = 0,
        o = function () {};
      return {
        s: o,
        n: function () {
          return i >= e.length ? { done: !0 } : { done: !1, value: e[i++] };
        },
        e: function (e) {
          throw e;
        },
        f: o,
      };
    }
    throw new TypeError(
      'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    );
  }
  var r,
    a = !0,
    s = !1;
  return {
    s: function () {
      n = n.call(e);
    },
    n: function () {
      var e = n.next();
      return (a = e.done), e;
    },
    e: function (e) {
      (s = !0), (r = e);
    },
    f: function () {
      try {
        a || null == n.return || n.return();
      } finally {
        if (s) throw r;
      }
    },
  };
}
function up(e, t, n) {
  return (
    (t = yp(t)) in e
      ? Object.defineProperty(e, t, {
          value: n,
          enumerable: !0,
          configurable: !0,
          writable: !0,
        })
      : (e[t] = n),
    e
  );
}
function lp(e) {
  return (lp = Object.setPrototypeOf
    ? Object.getPrototypeOf.bind()
    : function (e) {
        return e.__proto__ || Object.getPrototypeOf(e);
      })(e);
}
function dp(e, t) {
  if ('function' != typeof t && null !== t)
    throw new TypeError('Super expression must either be null or a function');
  (e.prototype = Object.create(t && t.prototype, {
    constructor: { value: e, writable: !0, configurable: !0 },
  })),
    Object.defineProperty(e, 'prototype', { writable: !1 }),
    t && vp(e, t);
}
function pp() {
  try {
    var e = !Boolean.prototype.valueOf.call(
      Reflect.construct(Boolean, [], function () {})
    );
  } catch (t) {}
  return (pp = function () {
    return !!e;
  })();
}
function hp(e, t) {
  var n = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    t &&
      (i = i.filter(function (t) {
        return Object.getOwnPropertyDescriptor(e, t).enumerable;
      })),
      n.push.apply(n, i);
  }
  return n;
}
function fp(e) {
  for (var t = 1; t < arguments.length; t++) {
    var n = null != arguments[t] ? arguments[t] : {};
    t % 2
      ? hp(Object(n), !0).forEach(function (t) {
          up(e, t, n[t]);
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n))
        : hp(Object(n)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(n, t));
          });
  }
  return e;
}
function gp(e, t) {
  if (null == e) return {};
  var n,
    i,
    o = (function (e, t) {
      if (null == e) return {};
      var n = {};
      for (var i in e)
        if ({}.hasOwnProperty.call(e, i)) {
          if (t.includes(i)) continue;
          n[i] = e[i];
        }
      return n;
    })(e, t);
  if (Object.getOwnPropertySymbols) {
    var r = Object.getOwnPropertySymbols(e);
    for (i = 0; i < r.length; i++)
      (n = r[i]),
        t.includes(n) || ({}.propertyIsEnumerable.call(e, n) && (o[n] = e[n]));
  }
  return o;
}
function _p() {
  _p = function () {
    return t;
  };
  var e,
    t = {},
    n = Object.prototype,
    i = n.hasOwnProperty,
    o =
      Object.defineProperty ||
      function (e, t, n) {
        e[t] = n.value;
      },
    r = 'function' == typeof Symbol ? Symbol : {},
    a = r.iterator || '@@iterator',
    s = r.asyncIterator || '@@asyncIterator',
    c = r.toStringTag || '@@toStringTag';
  function u(e, t, n) {
    return (
      Object.defineProperty(e, t, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0,
      }),
      e[t]
    );
  }
  try {
    u({}, '');
  } catch (b) {
    u = function (e, t, n) {
      return (e[t] = n);
    };
  }
  function l(e, t, n, i) {
    var r = t && t.prototype instanceof v ? t : v,
      a = Object.create(r.prototype),
      s = new A(i || []);
    return o(a, '_invoke', { value: S(e, n, s) }), a;
  }
  function d(e, t, n) {
    try {
      return { type: 'normal', arg: e.call(t, n) };
    } catch (i) {
      return { type: 'throw', arg: i };
    }
  }
  t.wrap = l;
  var p = 'suspendedStart',
    h = 'suspendedYield',
    f = 'executing',
    g = 'completed',
    _ = {};
  function v() {}
  function m() {}
  function y() {}
  var I = {};
  u(I, a, function () {
    return this;
  });
  var M = Object.getPrototypeOf,
    C = M && M(M(O([])));
  C && C !== n && i.call(C, a) && (I = C);
  var T = (y.prototype = v.prototype = Object.create(I));
  function E(e) {
    ['next', 'throw', 'return'].forEach(function (t) {
      u(e, t, function (e) {
        return this._invoke(t, e);
      });
    });
  }
  function D(e, t) {
    function n(o, r, a, s) {
      var c = d(e[o], e, r);
      if ('throw' !== c.type) {
        var u = c.arg,
          l = u.value;
        return l && 'object' == typeof l && i.call(l, '__await')
          ? t.resolve(l.__await).then(
              function (e) {
                n('next', e, a, s);
              },
              function (e) {
                n('throw', e, a, s);
              }
            )
          : t.resolve(l).then(
              function (e) {
                (u.value = e), a(u);
              },
              function (e) {
                return n('throw', e, a, s);
              }
            );
      }
      s(c.arg);
    }
    var r;
    o(this, '_invoke', {
      value: function (e, i) {
        function o() {
          return new t(function (t, o) {
            n(e, i, t, o);
          });
        }
        return (r = r ? r.then(o, o) : o());
      },
    });
  }
  function S(t, n, i) {
    var o = p;
    return function (r, a) {
      if (o === f) throw Error('Generator is already running');
      if (o === g) {
        if ('throw' === r) throw a;
        return { value: e, done: !0 };
      }
      for (i.method = r, i.arg = a; ; ) {
        var s = i.delegate;
        if (s) {
          var c = k(s, i);
          if (c) {
            if (c === _) continue;
            return c;
          }
        }
        if ('next' === i.method) i.sent = i._sent = i.arg;
        else if ('throw' === i.method) {
          if (o === p) throw ((o = g), i.arg);
          i.dispatchException(i.arg);
        } else 'return' === i.method && i.abrupt('return', i.arg);
        o = f;
        var u = d(t, n, i);
        if ('normal' === u.type) {
          if (((o = i.done ? g : h), u.arg === _)) continue;
          return { value: u.arg, done: i.done };
        }
        'throw' === u.type && ((o = g), (i.method = 'throw'), (i.arg = u.arg));
      }
    };
  }
  function k(t, n) {
    var i = n.method,
      o = t.iterator[i];
    if (o === e)
      return (
        (n.delegate = null),
        ('throw' === i &&
          t.iterator.return &&
          ((n.method = 'return'),
          (n.arg = e),
          k(t, n),
          'throw' === n.method)) ||
          ('return' !== i &&
            ((n.method = 'throw'),
            (n.arg = new TypeError(
              "The iterator does not provide a '" + i + "' method"
            )))),
        _
      );
    var r = d(o, t.iterator, n.arg);
    if ('throw' === r.type)
      return (n.method = 'throw'), (n.arg = r.arg), (n.delegate = null), _;
    var a = r.arg;
    return a
      ? a.done
        ? ((n[t.resultName] = a.value),
          (n.next = t.nextLoc),
          'return' !== n.method && ((n.method = 'next'), (n.arg = e)),
          (n.delegate = null),
          _)
        : a
      : ((n.method = 'throw'),
        (n.arg = new TypeError('iterator result is not an object')),
        (n.delegate = null),
        _);
  }
  function R(e) {
    var t = { tryLoc: e[0] };
    1 in e && (t.catchLoc = e[1]),
      2 in e && ((t.finallyLoc = e[2]), (t.afterLoc = e[3])),
      this.tryEntries.push(t);
  }
  function L(e) {
    var t = e.completion || {};
    (t.type = 'normal'), delete t.arg, (e.completion = t);
  }
  function A(e) {
    (this.tryEntries = [{ tryLoc: 'root' }]),
      e.forEach(R, this),
      this.reset(!0);
  }
  function O(t) {
    if (t || '' === t) {
      var n = t[a];
      if (n) return n.call(t);
      if ('function' == typeof t.next) return t;
      if (!isNaN(t.length)) {
        var o = -1,
          r = function n() {
            for (; ++o < t.length; )
              if (i.call(t, o)) return (n.value = t[o]), (n.done = !1), n;
            return (n.value = e), (n.done = !0), n;
          };
        return (r.next = r);
      }
    }
    throw new TypeError(typeof t + ' is not iterable');
  }
  return (
    (m.prototype = y),
    o(T, 'constructor', { value: y, configurable: !0 }),
    o(y, 'constructor', { value: m, configurable: !0 }),
    (m.displayName = u(y, c, 'GeneratorFunction')),
    (t.isGeneratorFunction = function (e) {
      var t = 'function' == typeof e && e.constructor;
      return (
        !!t && (t === m || 'GeneratorFunction' === (t.displayName || t.name))
      );
    }),
    (t.mark = function (e) {
      return (
        Object.setPrototypeOf
          ? Object.setPrototypeOf(e, y)
          : ((e.__proto__ = y), u(e, c, 'GeneratorFunction')),
        (e.prototype = Object.create(T)),
        e
      );
    }),
    (t.awrap = function (e) {
      return { __await: e };
    }),
    E(D.prototype),
    u(D.prototype, s, function () {
      return this;
    }),
    (t.AsyncIterator = D),
    (t.async = function (e, n, i, o, r) {
      void 0 === r && (r = Promise);
      var a = new D(l(e, n, i, o), r);
      return t.isGeneratorFunction(n)
        ? a
        : a.next().then(function (e) {
            return e.done ? e.value : a.next();
          });
    }),
    E(T),
    u(T, c, 'Generator'),
    u(T, a, function () {
      return this;
    }),
    u(T, 'toString', function () {
      return '[object Generator]';
    }),
    (t.keys = function (e) {
      var t = Object(e),
        n = [];
      for (var i in t) n.push(i);
      return (
        n.reverse(),
        function e() {
          for (; n.length; ) {
            var i = n.pop();
            if (i in t) return (e.value = i), (e.done = !1), e;
          }
          return (e.done = !0), e;
        }
      );
    }),
    (t.values = O),
    (A.prototype = {
      constructor: A,
      reset: function (t) {
        if (
          ((this.prev = 0),
          (this.next = 0),
          (this.sent = this._sent = e),
          (this.done = !1),
          (this.delegate = null),
          (this.method = 'next'),
          (this.arg = e),
          this.tryEntries.forEach(L),
          !t)
        )
          for (var n in this)
            't' === n.charAt(0) &&
              i.call(this, n) &&
              !isNaN(+n.slice(1)) &&
              (this[n] = e);
      },
      stop: function () {
        this.done = !0;
        var e = this.tryEntries[0].completion;
        if ('throw' === e.type) throw e.arg;
        return this.rval;
      },
      dispatchException: function (t) {
        if (this.done) throw t;
        var n = this;
        function o(i, o) {
          return (
            (s.type = 'throw'),
            (s.arg = t),
            (n.next = i),
            o && ((n.method = 'next'), (n.arg = e)),
            !!o
          );
        }
        for (var r = this.tryEntries.length - 1; r >= 0; --r) {
          var a = this.tryEntries[r],
            s = a.completion;
          if ('root' === a.tryLoc) return o('end');
          if (a.tryLoc <= this.prev) {
            var c = i.call(a, 'catchLoc'),
              u = i.call(a, 'finallyLoc');
            if (c && u) {
              if (this.prev < a.catchLoc) return o(a.catchLoc, !0);
              if (this.prev < a.finallyLoc) return o(a.finallyLoc);
            } else if (c) {
              if (this.prev < a.catchLoc) return o(a.catchLoc, !0);
            } else {
              if (!u) throw Error('try statement without catch or finally');
              if (this.prev < a.finallyLoc) return o(a.finallyLoc);
            }
          }
        }
      },
      abrupt: function (e, t) {
        for (var n = this.tryEntries.length - 1; n >= 0; --n) {
          var o = this.tryEntries[n];
          if (
            o.tryLoc <= this.prev &&
            i.call(o, 'finallyLoc') &&
            this.prev < o.finallyLoc
          ) {
            var r = o;
            break;
          }
        }
        r &&
          ('break' === e || 'continue' === e) &&
          r.tryLoc <= t &&
          t <= r.finallyLoc &&
          (r = null);
        var a = r ? r.completion : {};
        return (
          (a.type = e),
          (a.arg = t),
          r
            ? ((this.method = 'next'), (this.next = r.finallyLoc), _)
            : this.complete(a)
        );
      },
      complete: function (e, t) {
        if ('throw' === e.type) throw e.arg;
        return (
          'break' === e.type || 'continue' === e.type
            ? (this.next = e.arg)
            : 'return' === e.type
              ? ((this.rval = this.arg = e.arg),
                (this.method = 'return'),
                (this.next = 'end'))
              : 'normal' === e.type && t && (this.next = t),
          _
        );
      },
      finish: function (e) {
        for (var t = this.tryEntries.length - 1; t >= 0; --t) {
          var n = this.tryEntries[t];
          if (n.finallyLoc === e)
            return this.complete(n.completion, n.afterLoc), L(n), _;
        }
      },
      catch: function (e) {
        for (var t = this.tryEntries.length - 1; t >= 0; --t) {
          var n = this.tryEntries[t];
          if (n.tryLoc === e) {
            var i = n.completion;
            if ('throw' === i.type) {
              var o = i.arg;
              L(n);
            }
            return o;
          }
        }
        throw Error('illegal catch attempt');
      },
      delegateYield: function (t, n, i) {
        return (
          (this.delegate = { iterator: O(t), resultName: n, nextLoc: i }),
          'next' === this.method && (this.arg = e),
          _
        );
      },
    }),
    t
  );
}
function vp(e, t) {
  return (vp = Object.setPrototypeOf
    ? Object.setPrototypeOf.bind()
    : function (e, t) {
        return (e.__proto__ = t), e;
      })(e, t);
}
function mp(e) {
  return (
    (function (e) {
      if (Array.isArray(e)) return Qd(e);
    })(e) ||
    (function (e) {
      if (
        ('undefined' != typeof Symbol && null != e[Symbol.iterator]) ||
        null != e['@@iterator']
      )
        return Array.from(e);
    })(e) ||
    Mp(e) ||
    (function () {
      throw new TypeError(
        'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
      );
    })()
  );
}
function yp(e) {
  var t = (function (e, t) {
    if ('object' != typeof e || !e) return e;
    var n = e[Symbol.toPrimitive];
    if (void 0 !== n) {
      var i = n.call(e, 'string');
      if ('object' != typeof i) return i;
      throw new TypeError('@@toPrimitive must return a primitive value.');
    }
    return String(e);
  })(e);
  return 'symbol' == typeof t ? t : t + '';
}
function Ip(e) {
  return (Ip =
    'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
      ? function (e) {
          return typeof e;
        }
      : function (e) {
          return e &&
            'function' == typeof Symbol &&
            e.constructor === Symbol &&
            e !== Symbol.prototype
            ? 'symbol'
            : typeof e;
        })(e);
}
function Mp(e, t) {
  if (e) {
    if ('string' == typeof e) return Qd(e, t);
    var n = {}.toString.call(e).slice(8, -1);
    return (
      'Object' === n && e.constructor && (n = e.constructor.name),
      'Map' === n || 'Set' === n
        ? Array.from(e)
        : 'Arguments' === n ||
            /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
          ? Qd(e, t)
          : void 0
    );
  }
}
function Cp(e) {
  var t = 'function' == typeof Map ? new Map() : void 0;
  return (
    (Cp = function (e) {
      if (
        null === e ||
        !(function (e) {
          try {
            return -1 !== Function.toString.call(e).indexOf('[native code]');
          } catch (t) {
            return 'function' == typeof e;
          }
        })(e)
      )
        return e;
      if ('function' != typeof e)
        throw new TypeError(
          'Super expression must either be null or a function'
        );
      if (void 0 !== t) {
        if (t.has(e)) return t.get(e);
        t.set(e, n);
      }
      function n() {
        return (function (e, t, n) {
          if (pp()) return Reflect.construct.apply(null, arguments);
          var i = [null];
          i.push.apply(i, t);
          var o = new (e.bind.apply(e, i))();
          return n && vp(o, n.prototype), o;
        })(e, arguments, lp(this).constructor);
      }
      return (
        (n.prototype = Object.create(e.prototype, {
          constructor: {
            value: n,
            enumerable: !1,
            writable: !0,
            configurable: !0,
          },
        })),
        vp(n, e)
      );
    }),
    Cp(e)
  );
}
var Tp =
  'undefined' != typeof globalThis
    ? globalThis
    : 'undefined' != typeof window
      ? window
      : 'undefined' != typeof global
        ? global
        : 'undefined' != typeof self
          ? self
          : {};
var Ep = function (e) {
    return e && e.Math === Math && e;
  },
  Dp =
    Ep('object' == typeof globalThis && globalThis) ||
    Ep('object' == typeof window && window) ||
    Ep('object' == typeof self && self) ||
    Ep('object' == typeof Tp && Tp) ||
    Ep('object' == typeof Tp && Tp) ||
    (function () {
      return this;
    })() ||
    Function('return this')(),
  Sp = {},
  kp = function (e) {
    try {
      return !!e();
    } catch (t) {
      return !0;
    }
  },
  Rp = !kp(function () {
    return (
      7 !==
      Object.defineProperty({}, 1, {
        get: function () {
          return 7;
        },
      })[1]
    );
  }),
  Lp = !kp(function () {
    var e = function () {}.bind();
    return 'function' != typeof e || e.hasOwnProperty('prototype');
  }),
  Ap = Lp,
  Op = Function.prototype.call,
  bp = Ap
    ? Op.bind(Op)
    : function () {
        return Op.apply(Op, arguments);
      },
  Np = {},
  Pp = {}.propertyIsEnumerable,
  wp = Object.getOwnPropertyDescriptor,
  Up = wp && !Pp.call({ 1: 2 }, 1);
Np.f = Up
  ? function (e) {
      var t = wp(this, e);
      return !!t && t.enumerable;
    }
  : Pp;
var Gp,
  xp,
  Fp = function (e, t) {
    return {
      enumerable: !(1 & e),
      configurable: !(2 & e),
      writable: !(4 & e),
      value: t,
    };
  },
  qp = Lp,
  Vp = Function.prototype,
  Bp = Vp.call,
  Hp = qp && Vp.bind.bind(Bp, Bp),
  jp = qp
    ? Hp
    : function (e) {
        return function () {
          return Bp.apply(e, arguments);
        };
      },
  Kp = jp,
  Wp = Kp({}.toString),
  zp = Kp(''.slice),
  $p = function (e) {
    return zp(Wp(e), 8, -1);
  },
  Yp = kp,
  Jp = $p,
  Xp = Object,
  Zp = jp(''.split),
  Qp = Yp(function () {
    return !Xp('z').propertyIsEnumerable(0);
  })
    ? function (e) {
        return 'String' === Jp(e) ? Zp(e, '') : Xp(e);
      }
    : Xp,
  eh = function (e) {
    return null == e;
  },
  th = eh,
  nh = TypeError,
  ih = function (e) {
    if (th(e)) throw new nh("Can't call method on " + e);
    return e;
  },
  oh = Qp,
  rh = ih,
  ah = function (e) {
    return oh(rh(e));
  },
  sh = 'object' == typeof document && document.all,
  ch =
    void 0 === sh && void 0 !== sh
      ? function (e) {
          return 'function' == typeof e || e === sh;
        }
      : function (e) {
          return 'function' == typeof e;
        },
  uh = ch,
  lh = function (e) {
    return 'object' == typeof e ? null !== e : uh(e);
  },
  dh = Dp,
  ph = ch,
  hh = function (e, t) {
    return arguments.length < 2
      ? ((n = dh[e]), ph(n) ? n : void 0)
      : dh[e] && dh[e][t];
    var n;
  },
  fh = jp({}.isPrototypeOf),
  gh = Dp.navigator,
  _h = gh && gh.userAgent,
  vh = _h ? String(_h) : '',
  mh = Dp,
  yh = vh,
  Ih = mh.process,
  Mh = mh.Deno,
  Ch = (Ih && Ih.versions) || (Mh && Mh.version),
  Th = Ch && Ch.v8;
Th && (xp = (Gp = Th.split('.'))[0] > 0 && Gp[0] < 4 ? 1 : +(Gp[0] + Gp[1])),
  !xp &&
    yh &&
    (!(Gp = yh.match(/Edge\/(\d+)/)) || Gp[1] >= 74) &&
    (Gp = yh.match(/Chrome\/(\d+)/)) &&
    (xp = +Gp[1]);
var Eh = xp,
  Dh = Eh,
  Sh = kp,
  kh = Dp.String,
  Rh =
    !!Object.getOwnPropertySymbols &&
    !Sh(function () {
      var e = Symbol('symbol detection');
      return (
        !kh(e) ||
        !(Object(e) instanceof Symbol) ||
        (!Symbol.sham && Dh && Dh < 41)
      );
    }),
  Lh = Rh && !Symbol.sham && 'symbol' == typeof Symbol.iterator,
  Ah = hh,
  Oh = ch,
  bh = fh,
  Nh = Object,
  Ph = Lh
    ? function (e) {
        return 'symbol' == typeof e;
      }
    : function (e) {
        var t = Ah('Symbol');
        return Oh(t) && bh(t.prototype, Nh(e));
      },
  wh = String,
  Uh = function (e) {
    try {
      return wh(e);
    } catch (t) {
      return 'Object';
    }
  },
  Gh = ch,
  xh = Uh,
  Fh = TypeError,
  qh = function (e) {
    if (Gh(e)) return e;
    throw new Fh(xh(e) + ' is not a function');
  },
  Vh = qh,
  Bh = eh,
  Hh = function (e, t) {
    var n = e[t];
    return Bh(n) ? void 0 : Vh(n);
  },
  jh = bp,
  Kh = ch,
  Wh = lh,
  zh = TypeError,
  $h = { exports: {} },
  Yh = Dp,
  Jh = Object.defineProperty,
  Xh = function (e, t) {
    try {
      Jh(Yh, e, { value: t, configurable: !0, writable: !0 });
    } catch (rc) {
      Yh[e] = t;
    }
    return t;
  },
  Zh = Dp,
  Qh = Xh,
  ef = '__core-js_shared__',
  tf = ($h.exports = Zh[ef] || Qh(ef, {}));
(tf.versions || (tf.versions = [])).push({
  version: '3.38.1',
  mode: 'global',
  copyright: '© 2014-2024 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.38.1/LICENSE',
  source: 'https://github.com/zloirock/core-js',
});
var nf = $h.exports,
  of = function (e, t) {
    return nf[e] || (nf[e] = t || {});
  },
  rf = ih,
  af = Object,
  sf = function (e) {
    return af(rf(e));
  },
  cf = sf,
  uf = jp({}.hasOwnProperty),
  lf =
    Object.hasOwn ||
    function (e, t) {
      return uf(cf(e), t);
    },
  df = jp,
  pf = 0,
  hf = Math.random(),
  ff = df((1).toString),
  gf = function (e) {
    return 'Symbol(' + (void 0 === e ? '' : e) + ')_' + ff(++pf + hf, 36);
  },
  _f = of,
  vf = lf,
  mf = gf,
  yf = Rh,
  If = Lh,
  Mf = Dp.Symbol,
  Cf = _f('wks'),
  Tf = If ? Mf.for || Mf : (Mf && Mf.withoutSetter) || mf,
  Ef = function (e) {
    return (
      vf(Cf, e) || (Cf[e] = yf && vf(Mf, e) ? Mf[e] : Tf('Symbol.' + e)), Cf[e]
    );
  },
  Df = bp,
  Sf = lh,
  kf = Ph,
  Rf = Hh,
  Lf = TypeError,
  Af = Ef('toPrimitive'),
  Of = function (e, t) {
    if (!Sf(e) || kf(e)) return e;
    var n,
      i = Rf(e, Af);
    if (i) {
      if ((void 0 === t && (t = 'default'), (n = Df(i, e, t)), !Sf(n) || kf(n)))
        return n;
      throw new Lf("Can't convert object to primitive value");
    }
    return (
      void 0 === t && (t = 'number'),
      (function (e, t) {
        var n, i;
        if ('string' === t && Kh((n = e.toString)) && !Wh((i = jh(n, e))))
          return i;
        if (Kh((n = e.valueOf)) && !Wh((i = jh(n, e)))) return i;
        if ('string' !== t && Kh((n = e.toString)) && !Wh((i = jh(n, e))))
          return i;
        throw new zh("Can't convert object to primitive value");
      })(e, t)
    );
  },
  bf = Of,
  Nf = Ph,
  Pf = function (e) {
    var t = bf(e, 'string');
    return Nf(t) ? t : t + '';
  },
  wf = lh,
  Uf = Dp.document,
  Gf = wf(Uf) && wf(Uf.createElement),
  xf = function (e) {
    return Gf ? Uf.createElement(e) : {};
  },
  Ff = xf,
  qf =
    !Rp &&
    !kp(function () {
      return (
        7 !==
        Object.defineProperty(Ff('div'), 'a', {
          get: function () {
            return 7;
          },
        }).a
      );
    }),
  Vf = Rp,
  Bf = bp,
  Hf = Np,
  jf = Fp,
  Kf = ah,
  Wf = Pf,
  zf = lf,
  $f = qf,
  Yf = Object.getOwnPropertyDescriptor;
Sp.f = Vf
  ? Yf
  : function (e, t) {
      if (((e = Kf(e)), (t = Wf(t)), $f))
        try {
          return Yf(e, t);
        } catch (n) {}
      if (zf(e, t)) return jf(!Bf(Hf.f, e, t), e[t]);
    };
var Jf = {},
  Xf =
    Rp &&
    kp(function () {
      return (
        42 !==
        Object.defineProperty(function () {}, 'prototype', {
          value: 42,
          writable: !1,
        }).prototype
      );
    }),
  Zf = lh,
  Qf = String,
  eg = TypeError,
  tg = function (e) {
    if (Zf(e)) return e;
    throw new eg(Qf(e) + ' is not an object');
  },
  ng = Rp,
  ig = qf,
  og = Xf,
  rg = tg,
  ag = Pf,
  sg = TypeError,
  cg = Object.defineProperty,
  ug = Object.getOwnPropertyDescriptor,
  lg = 'enumerable',
  dg = 'configurable',
  pg = 'writable';
Jf.f = ng
  ? og
    ? function (e, t, n) {
        if (
          (rg(e),
          (t = ag(t)),
          rg(n),
          'function' == typeof e &&
            'prototype' === t &&
            'value' in n &&
            pg in n &&
            !n[pg])
        ) {
          var i = ug(e, t);
          i &&
            i[pg] &&
            ((e[t] = n.value),
            (n = {
              configurable: dg in n ? n[dg] : i[dg],
              enumerable: lg in n ? n[lg] : i[lg],
              writable: !1,
            }));
        }
        return cg(e, t, n);
      }
    : cg
  : function (e, t, n) {
      if ((rg(e), (t = ag(t)), rg(n), ig))
        try {
          return cg(e, t, n);
        } catch (i) {}
      if ('get' in n || 'set' in n) throw new sg('Accessors not supported');
      return 'value' in n && (e[t] = n.value), e;
    };
var hg = Jf,
  fg = Fp,
  gg = Rp
    ? function (e, t, n) {
        return hg.f(e, t, fg(1, n));
      }
    : function (e, t, n) {
        return (e[t] = n), e;
      },
  _g = { exports: {} },
  vg = Rp,
  mg = lf,
  yg = Function.prototype,
  Ig = vg && Object.getOwnPropertyDescriptor,
  Mg = mg(yg, 'name'),
  Cg = {
    EXISTS: Mg,
    PROPER: Mg && 'something' === function () {}.name,
    CONFIGURABLE: Mg && (!vg || (vg && Ig(yg, 'name').configurable)),
  },
  Tg = jp,
  Eg = ch,
  Dg = $h.exports,
  Sg = Tg(Function.toString);
Eg(Dg.inspectSource) ||
  (Dg.inspectSource = function (e) {
    return Sg(e);
  });
var kg,
  Rg,
  Lg,
  Ag = Dg.inspectSource,
  Og = ch,
  bg = Dp.WeakMap,
  Ng = Og(bg) && /native code/.test(String(bg)),
  Pg = gf,
  wg = of('keys'),
  Ug = function (e) {
    return wg[e] || (wg[e] = Pg(e));
  },
  Gg = {},
  xg = Ng,
  Fg = Dp,
  qg = lh,
  Vg = gg,
  Bg = lf,
  Hg = $h.exports,
  jg = Ug,
  Kg = Gg,
  Wg = 'Object already initialized',
  zg = Fg.TypeError,
  $g = Fg.WeakMap;
if (xg || Hg.state) {
  var Yg = Hg.state || (Hg.state = new $g());
  (Yg.get = Yg.get),
    (Yg.has = Yg.has),
    (Yg.set = Yg.set),
    (kg = function (e, t) {
      if (Yg.has(e)) throw new zg(Wg);
      return (t.facade = e), Yg.set(e, t), t;
    }),
    (Rg = function (e) {
      return Yg.get(e) || {};
    }),
    (Lg = function (e) {
      return Yg.has(e);
    });
} else {
  var Jg = jg('state');
  (Kg[Jg] = !0),
    (kg = function (e, t) {
      if (Bg(e, Jg)) throw new zg(Wg);
      return (t.facade = e), Vg(e, Jg, t), t;
    }),
    (Rg = function (e) {
      return Bg(e, Jg) ? e[Jg] : {};
    }),
    (Lg = function (e) {
      return Bg(e, Jg);
    });
}
var Xg = {
    set: kg,
    get: Rg,
    has: Lg,
    enforce: function (e) {
      return Lg(e) ? Rg(e) : kg(e, {});
    },
    getterFor: function (e) {
      return function (t) {
        var n;
        if (!qg(t) || (n = Rg(t)).type !== e)
          throw new zg('Incompatible receiver, ' + e + ' required');
        return n;
      };
    },
  },
  Zg = jp,
  Qg = kp,
  e_ = ch,
  t_ = lf,
  n_ = Rp,
  i_ = Cg.CONFIGURABLE,
  o_ = Ag,
  r_ = Xg.enforce,
  a_ = Xg.get,
  s_ = String,
  c_ = Object.defineProperty,
  u_ = Zg(''.slice),
  l_ = Zg(''.replace),
  d_ = Zg([].join),
  p_ =
    n_ &&
    !Qg(function () {
      return 8 !== c_(function () {}, 'length', { value: 8 }).length;
    }),
  h_ = String(String).split('String'),
  f_ = (_g.exports = function (e, t, n) {
    'Symbol(' === u_(s_(t), 0, 7) &&
      (t = '[' + l_(s_(t), /^Symbol\(([^)]*)\).*$/, '$1') + ']'),
      n && n.getter && (t = 'get ' + t),
      n && n.setter && (t = 'set ' + t),
      (!t_(e, 'name') || (i_ && e.name !== t)) &&
        (n_ ? c_(e, 'name', { value: t, configurable: !0 }) : (e.name = t)),
      p_ &&
        n &&
        t_(n, 'arity') &&
        e.length !== n.arity &&
        c_(e, 'length', { value: n.arity });
    try {
      n && t_(n, 'constructor') && n.constructor
        ? n_ && c_(e, 'prototype', { writable: !1 })
        : e.prototype && (e.prototype = void 0);
    } catch (o) {}
    var i = r_(e);
    return (
      t_(i, 'source') || (i.source = d_(h_, 'string' == typeof t ? t : '')), e
    );
  });
Function.prototype.toString = f_(function () {
  return (e_(this) && a_(this).source) || o_(this);
}, 'toString');
var g_ = ch,
  __ = Jf,
  v_ = _g.exports,
  m_ = Xh,
  y_ = function (e, t, n, i) {
    i || (i = {});
    var o = i.enumerable,
      r = void 0 !== i.name ? i.name : t;
    if ((g_(n) && v_(n, r, i), i.global)) o ? (e[t] = n) : m_(t, n);
    else {
      try {
        i.unsafe ? e[t] && (o = !0) : delete e[t];
      } catch (a) {}
      o
        ? (e[t] = n)
        : __.f(e, t, {
            value: n,
            enumerable: !1,
            configurable: !i.nonConfigurable,
            writable: !i.nonWritable,
          });
    }
    return e;
  },
  I_ = {},
  M_ = Math.ceil,
  C_ = Math.floor,
  T_ =
    Math.trunc ||
    function (e) {
      var t = +e;
      return (t > 0 ? C_ : M_)(t);
    },
  E_ = function (e) {
    var t = +e;
    return t != t || 0 === t ? 0 : T_(t);
  },
  D_ = E_,
  S_ = Math.max,
  k_ = Math.min,
  R_ = function (e, t) {
    var n = D_(e);
    return n < 0 ? S_(n + t, 0) : k_(n, t);
  },
  L_ = E_,
  A_ = Math.min,
  O_ = function (e) {
    var t = L_(e);
    return t > 0 ? A_(t, 9007199254740991) : 0;
  },
  b_ = O_,
  N_ = function (e) {
    return b_(e.length);
  },
  P_ = ah,
  w_ = R_,
  U_ = N_,
  G_ = function (e) {
    return function (t, n, i) {
      var o = P_(t),
        r = U_(o);
      if (0 === r) return !e && -1;
      var a,
        s = w_(i, r);
      if (e && n != n) {
        for (; r > s; ) if ((a = o[s++]) != a) return !0;
      } else
        for (; r > s; s++) if ((e || s in o) && o[s] === n) return e || s || 0;
      return !e && -1;
    };
  },
  x_ = { includes: G_(!0), indexOf: G_(!1) },
  F_ = lf,
  q_ = ah,
  V_ = x_.indexOf,
  B_ = Gg,
  H_ = jp([].push),
  j_ = function (e, t) {
    var n,
      i = q_(e),
      o = 0,
      r = [];
    for (n in i) !F_(B_, n) && F_(i, n) && H_(r, n);
    for (; t.length > o; ) F_(i, (n = t[o++])) && (~V_(r, n) || H_(r, n));
    return r;
  },
  K_ = [
    'constructor',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toLocaleString',
    'toString',
    'valueOf',
  ],
  W_ = j_,
  z_ = K_.concat('length', 'prototype');
I_.f =
  Object.getOwnPropertyNames ||
  function (e) {
    return W_(e, z_);
  };
var $_ = {};
$_.f = Object.getOwnPropertySymbols;
var Y_ = hh,
  J_ = I_,
  X_ = $_,
  Z_ = tg,
  Q_ = jp([].concat),
  ev =
    Y_('Reflect', 'ownKeys') ||
    function (e) {
      var t = J_.f(Z_(e)),
        n = X_.f;
      return n ? Q_(t, n(e)) : t;
    },
  tv = lf,
  nv = ev,
  iv = Sp,
  ov = Jf,
  rv = function (e, t, n) {
    for (var i = nv(t), o = ov.f, r = iv.f, a = 0; a < i.length; a++) {
      var s = i[a];
      tv(e, s) || (n && tv(n, s)) || o(e, s, r(t, s));
    }
  },
  av = kp,
  sv = ch,
  cv = /#|\.prototype\./,
  uv = function (e, t) {
    var n = dv[lv(e)];
    return n === hv || (n !== pv && (sv(t) ? av(t) : !!t));
  },
  lv = (uv.normalize = function (e) {
    return String(e).replace(cv, '.').toLowerCase();
  }),
  dv = (uv.data = {}),
  pv = (uv.NATIVE = 'N'),
  hv = (uv.POLYFILL = 'P'),
  fv = uv,
  gv = Dp,
  _v = Sp.f,
  vv = gg,
  mv = y_,
  yv = Xh,
  Iv = rv,
  Mv = fv,
  Cv = function (e, t) {
    var n,
      i,
      o,
      r,
      a,
      s = e.target,
      c = e.global,
      u = e.stat;
    if ((n = c ? gv : u ? gv[s] || yv(s, {}) : gv[s] && gv[s].prototype))
      for (i in t) {
        if (
          ((r = t[i]),
          (o = e.dontCallGetSet ? (a = _v(n, i)) && a.value : n[i]),
          !Mv(c ? i : s + (u ? '.' : '#') + i, e.forced) && void 0 !== o)
        ) {
          if (typeof r == typeof o) continue;
          Iv(r, o);
        }
        (e.sham || (o && o.sham)) && vv(r, 'sham', !0), mv(n, i, r, e);
      }
  },
  Tv = $p,
  Ev =
    Array.isArray ||
    function (e) {
      return 'Array' === Tv(e);
    },
  Dv = TypeError,
  Sv = function (e) {
    if (e > 9007199254740991) throw Dv('Maximum allowed index exceeded');
    return e;
  },
  kv = Rp,
  Rv = Jf,
  Lv = Fp,
  Av = function (e, t, n) {
    kv ? Rv.f(e, t, Lv(0, n)) : (e[t] = n);
  },
  Ov = {};
Ov[Ef('toStringTag')] = 'z';
var bv = '[object z]' === String(Ov),
  Nv = bv,
  Pv = ch,
  wv = $p,
  Uv = Ef('toStringTag'),
  Gv = Object,
  xv =
    'Arguments' ===
    wv(
      (function () {
        return arguments;
      })()
    ),
  Fv = Nv
    ? wv
    : function (e) {
        var t, n, i;
        return void 0 === e
          ? 'Undefined'
          : null === e
            ? 'Null'
            : 'string' ==
                typeof (n = (function (e, t) {
                  try {
                    return e[t];
                  } catch (n) {}
                })((t = Gv(e)), Uv))
              ? n
              : xv
                ? wv(t)
                : 'Object' === (i = wv(t)) && Pv(t.callee)
                  ? 'Arguments'
                  : i;
      },
  qv = jp,
  Vv = kp,
  Bv = ch,
  Hv = Fv,
  jv = Ag,
  Kv = function () {},
  Wv = hh('Reflect', 'construct'),
  zv = /^\s*(?:class|function)\b/,
  $v = qv(zv.exec),
  Yv = !zv.test(Kv),
  Jv = function (e) {
    if (!Bv(e)) return !1;
    try {
      return Wv(Kv, [], e), !0;
    } catch (t) {
      return !1;
    }
  },
  Xv = function (e) {
    if (!Bv(e)) return !1;
    switch (Hv(e)) {
      case 'AsyncFunction':
      case 'GeneratorFunction':
      case 'AsyncGeneratorFunction':
        return !1;
    }
    try {
      return Yv || !!$v(zv, jv(e));
    } catch (t) {
      return !0;
    }
  };
Xv.sham = !0;
var Zv =
    !Wv ||
    Vv(function () {
      var e;
      return (
        Jv(Jv.call) ||
        !Jv(Object) ||
        !Jv(function () {
          e = !0;
        }) ||
        e
      );
    })
      ? Xv
      : Jv,
  Qv = Ev,
  em = Zv,
  tm = lh,
  nm = Ef('species'),
  im = Array,
  om = function (e, t) {
    return new ((function (e) {
      var t;
      return (
        Qv(e) &&
          ((t = e.constructor),
          ((em(t) && (t === im || Qv(t.prototype))) ||
            (tm(t) && null === (t = t[nm]))) &&
            (t = void 0)),
        void 0 === t ? im : t
      );
    })(e))(0 === t ? 0 : t);
  },
  rm = kp,
  am = Eh,
  sm = Ef('species'),
  cm = function (e) {
    return (
      am >= 51 ||
      !rm(function () {
        var t = [];
        return (
          ((t.constructor = {})[sm] = function () {
            return { foo: 1 };
          }),
          1 !== t[e](Boolean).foo
        );
      })
    );
  },
  um = Cv,
  lm = kp,
  dm = Ev,
  pm = lh,
  hm = sf,
  fm = N_,
  gm = Sv,
  _m = Av,
  vm = om,
  mm = cm,
  ym = Eh,
  Im = Ef('isConcatSpreadable'),
  Mm =
    ym >= 51 ||
    !lm(function () {
      var e = [];
      return (e[Im] = !1), e.concat()[0] !== e;
    }),
  Cm = function (e) {
    if (!pm(e)) return !1;
    var t = e[Im];
    return void 0 !== t ? !!t : dm(e);
  };
um(
  { target: 'Array', proto: !0, arity: 1, forced: !Mm || !mm('concat') },
  {
    concat: function (e) {
      var t,
        n,
        i,
        o,
        r,
        a = hm(this),
        s = vm(a, 0),
        c = 0;
      for (t = -1, i = arguments.length; t < i; t++)
        if (Cm((r = -1 === t ? a : arguments[t])))
          for (o = fm(r), gm(c + o), n = 0; n < o; n++, c++)
            n in r && _m(s, c, r[n]);
        else gm(c + 1), _m(s, c++, r);
      return (s.length = c), s;
    },
  }
);
var Tm = $p,
  Em = jp,
  Dm = function (e) {
    if ('Function' === Tm(e)) return Em(e);
  },
  Sm = qh,
  km = Lp,
  Rm = Dm(Dm.bind),
  Lm = function (e, t) {
    return (
      Sm(e),
      void 0 === t
        ? e
        : km
          ? Rm(e, t)
          : function () {
              return e.apply(t, arguments);
            }
    );
  },
  Am = Lm,
  Om = Qp,
  bm = sf,
  Nm = N_,
  Pm = om,
  wm = jp([].push),
  Um = function (e) {
    var t = 1 === e,
      n = 2 === e,
      i = 3 === e,
      o = 4 === e,
      r = 6 === e,
      a = 7 === e,
      s = 5 === e || r;
    return function (c, u, l, d) {
      for (
        var p,
          h,
          f = bm(c),
          g = Om(f),
          _ = Nm(g),
          v = Am(u, l),
          m = 0,
          y = d || Pm,
          I = t ? y(c, _) : n || a ? y(c, 0) : void 0;
        _ > m;
        m++
      )
        if ((s || m in g) && ((h = v((p = g[m]), m, f)), e))
          if (t) I[m] = h;
          else if (h)
            switch (e) {
              case 3:
                return !0;
              case 5:
                return p;
              case 6:
                return m;
              case 2:
                wm(I, p);
            }
          else
            switch (e) {
              case 4:
                return !1;
              case 7:
                wm(I, p);
            }
      return r ? -1 : i || o ? o : I;
    };
  },
  Gm = {
    forEach: Um(0),
    map: Um(1),
    filter: Um(2),
    some: Um(3),
    every: Um(4),
    find: Um(5),
    findIndex: Um(6),
    filterReject: Um(7),
  },
  xm = Gm.filter;
Cv(
  { target: 'Array', proto: !0, forced: !cm('filter') },
  {
    filter: function (e) {
      return xm(this, e, arguments.length > 1 ? arguments[1] : void 0);
    },
  }
);
var Fm = {},
  qm = j_,
  Vm = K_,
  Bm =
    Object.keys ||
    function (e) {
      return qm(e, Vm);
    },
  Hm = Rp,
  jm = Xf,
  Km = Jf,
  Wm = tg,
  zm = ah,
  $m = Bm;
Fm.f =
  Hm && !jm
    ? Object.defineProperties
    : function (e, t) {
        Wm(e);
        for (var n, i = zm(t), o = $m(t), r = o.length, a = 0; r > a; )
          Km.f(e, (n = o[a++]), i[n]);
        return e;
      };
var Ym,
  Jm = hh('document', 'documentElement'),
  Xm = tg,
  Zm = Fm,
  Qm = K_,
  ey = Gg,
  ty = Jm,
  ny = xf,
  iy = 'prototype',
  oy = 'script',
  ry = Ug('IE_PROTO'),
  ay = function () {},
  sy = function (e) {
    return '<' + oy + '>' + e + '</' + oy + '>';
  },
  cy = function (e) {
    e.write(sy('')), e.close();
    var t = e.parentWindow.Object;
    return (e = null), t;
  },
  uy = function () {
    try {
      Ym = new ActiveXObject('htmlfile');
    } catch (o) {}
    var e, t, n;
    uy =
      'undefined' != typeof document
        ? document.domain && Ym
          ? cy(Ym)
          : ((t = ny('iframe')),
            (n = 'java' + oy + ':'),
            (t.style.display = 'none'),
            ty.appendChild(t),
            (t.src = String(n)),
            (e = t.contentWindow.document).open(),
            e.write(sy('document.F=Object')),
            e.close(),
            e.F)
        : cy(Ym);
    for (var i = Qm.length; i--; ) delete uy[iy][Qm[i]];
    return uy();
  };
ey[ry] = !0;
var ly =
    Object.create ||
    function (e, t) {
      var n;
      return (
        null !== e
          ? ((ay[iy] = Xm(e)), (n = new ay()), (ay[iy] = null), (n[ry] = e))
          : (n = uy()),
        void 0 === t ? n : Zm.f(n, t)
      );
    },
  dy = Ef,
  py = ly,
  hy = Jf.f,
  fy = dy('unscopables'),
  gy = Array.prototype;
void 0 === gy[fy] && hy(gy, fy, { configurable: !0, value: py(null) });
var _y = function (e) {
    gy[fy][e] = !0;
  },
  vy = Cv,
  yy = Gm.find,
  Iy = _y,
  My = 'find',
  Cy = !0;
My in [] &&
  Array(1)[My](function () {
    Cy = !1;
  }),
  vy(
    { target: 'Array', proto: !0, forced: Cy },
    {
      find: function (e) {
        return yy(this, e, arguments.length > 1 ? arguments[1] : void 0);
      },
    }
  ),
  Iy(My);
var Ty = kp,
  Ey = function (e, t) {
    var n = [][e];
    return (
      !!n &&
      Ty(function () {
        n.call(
          null,
          t ||
            function () {
              return 1;
            },
          1
        );
      })
    );
  },
  Dy = Gm.forEach,
  Sy = Ey('forEach')
    ? [].forEach
    : function (e) {
        return Dy(this, e, arguments.length > 1 ? arguments[1] : void 0);
      };
Cv({ target: 'Array', proto: !0, forced: [].forEach !== Sy }, { forEach: Sy });
var ky = bp,
  Ry = tg,
  Ly = Hh,
  Ay = function (e, t, n) {
    var i, o;
    Ry(e);
    try {
      if (!(i = Ly(e, 'return'))) {
        if ('throw' === t) throw n;
        return n;
      }
      i = ky(i, e);
    } catch (r) {
      (o = !0), (i = r);
    }
    if ('throw' === t) throw n;
    if (o) throw i;
    return Ry(i), n;
  },
  Oy = tg,
  by = Ay,
  Ny = {},
  Py = Ny,
  wy = Ef('iterator'),
  Uy = Array.prototype,
  Gy = function (e) {
    return void 0 !== e && (Py.Array === e || Uy[wy] === e);
  },
  xy = Fv,
  Fy = Hh,
  qy = eh,
  Vy = Ny,
  By = Ef('iterator'),
  Hy = function (e) {
    if (!qy(e)) return Fy(e, By) || Fy(e, '@@iterator') || Vy[xy(e)];
  },
  jy = bp,
  Ky = qh,
  Wy = tg,
  zy = Uh,
  $y = Hy,
  Yy = TypeError,
  Jy = function (e, t) {
    var n = arguments.length < 2 ? $y(e) : t;
    if (Ky(n)) return Wy(jy(n, e));
    throw new Yy(zy(e) + ' is not iterable');
  },
  Xy = Lm,
  Zy = bp,
  Qy = sf,
  eI = function (e, t, n, i) {
    try {
      return i ? t(Oy(n)[0], n[1]) : t(n);
    } catch (o) {
      by(e, 'throw', o);
    }
  },
  tI = Gy,
  nI = Zv,
  iI = N_,
  oI = Av,
  rI = Jy,
  aI = Hy,
  sI = Array,
  cI = Ef('iterator'),
  uI = !1;
try {
  var lI = 0,
    dI = {
      next: function () {
        return { done: !!lI++ };
      },
      return: function () {
        uI = !0;
      },
    };
  (dI[cI] = function () {
    return this;
  }),
    Array.from(dI, function () {
      throw 2;
    });
} catch (ic) {}
var pI = function (e, t) {
  try {
    if (!t && !uI) return !1;
  } catch (o) {
    return !1;
  }
  var n = !1;
  try {
    var i = {};
    (i[cI] = function () {
      return {
        next: function () {
          return { done: (n = !0) };
        },
      };
    }),
      e(i);
  } catch (o) {}
  return n;
};
Cv(
  {
    target: 'Array',
    stat: !0,
    forced: !pI(function (e) {
      Array.from(e);
    }),
  },
  {
    from: function (e) {
      var t = Qy(e),
        n = nI(this),
        i = arguments.length,
        o = i > 1 ? arguments[1] : void 0,
        r = void 0 !== o;
      r && (o = Xy(o, i > 2 ? arguments[2] : void 0));
      var a,
        s,
        c,
        u,
        l,
        d,
        p = aI(t),
        h = 0;
      if (!p || (this === sI && tI(p)))
        for (a = iI(t), s = n ? new this(a) : sI(a); a > h; h++)
          (d = r ? o(t[h], h) : t[h]), oI(s, h, d);
      else
        for (
          s = n ? new this() : [], l = (u = rI(t, p)).next;
          !(c = Zy(l, u)).done;
          h++
        )
          (d = r ? eI(u, o, [c.value, h], !0) : c.value), oI(s, h, d);
      return (s.length = h), s;
    },
  }
);
var hI = Cv,
  fI = x_.indexOf,
  gI = Ey,
  _I = Dm([].indexOf),
  vI = !!_I && 1 / _I([1], 1, -0) < 0;
hI(
  { target: 'Array', proto: !0, forced: vI || !gI('indexOf') },
  {
    indexOf: function (e) {
      var t = arguments.length > 1 ? arguments[1] : void 0;
      return vI ? _I(this, e, t) || 0 : fI(this, e, t);
    },
  }
);
var mI,
  yI,
  II,
  MI = !kp(function () {
    function e() {}
    return (
      (e.prototype.constructor = null),
      Object.getPrototypeOf(new e()) !== e.prototype
    );
  }),
  CI = lf,
  TI = ch,
  EI = sf,
  DI = MI,
  SI = Ug('IE_PROTO'),
  kI = Object,
  RI = kI.prototype,
  LI = DI
    ? kI.getPrototypeOf
    : function (e) {
        var t = EI(e);
        if (CI(t, SI)) return t[SI];
        var n = t.constructor;
        return TI(n) && t instanceof n
          ? n.prototype
          : t instanceof kI
            ? RI
            : null;
      },
  AI = kp,
  OI = ch,
  bI = lh,
  NI = LI,
  PI = y_,
  wI = Ef('iterator'),
  UI = !1;
[].keys &&
  ('next' in (II = [].keys())
    ? (yI = NI(NI(II))) !== Object.prototype && (mI = yI)
    : (UI = !0));
var GI =
  !bI(mI) ||
  AI(function () {
    var e = {};
    return mI[wI].call(e) !== e;
  });
GI && (mI = {}),
  OI(mI[wI]) ||
    PI(mI, wI, function () {
      return this;
    });
var xI = { IteratorPrototype: mI, BUGGY_SAFARI_ITERATORS: UI },
  FI = Jf.f,
  qI = lf,
  VI = Ef('toStringTag'),
  BI = function (e, t, n) {
    e && !n && (e = e.prototype),
      e && !qI(e, VI) && FI(e, VI, { configurable: !0, value: t });
  },
  HI = xI.IteratorPrototype,
  jI = ly,
  KI = Fp,
  WI = BI,
  zI = Ny,
  $I = function () {
    return this;
  },
  YI = jp,
  JI = qh,
  XI = lh,
  ZI = String,
  QI = TypeError,
  eM = lh,
  tM = ih,
  nM = function (e) {
    if (
      (function (e) {
        return XI(e) || null === e;
      })(e)
    )
      return e;
    throw new QI("Can't set " + ZI(e) + ' as a prototype');
  },
  iM =
    Object.setPrototypeOf ||
    ('__proto__' in {}
      ? (function () {
          var e,
            t = !1,
            n = {};
          try {
            (e = (function (e, t, n) {
              try {
                return YI(JI(Object.getOwnPropertyDescriptor(e, t)[n]));
              } catch (i) {}
            })(Object.prototype, '__proto__', 'set'))(n, []),
              (t = n instanceof Array);
          } catch (i) {}
          return function (n, i) {
            return (
              tM(n), nM(i), eM(n) ? (t ? e(n, i) : (n.__proto__ = i), n) : n
            );
          };
        })()
      : void 0),
  oM = Cv,
  rM = bp,
  aM = ch,
  sM = LI,
  cM = iM,
  uM = BI,
  lM = gg,
  dM = y_,
  pM = Ny,
  hM = Cg.PROPER,
  fM = Cg.CONFIGURABLE,
  gM = xI.IteratorPrototype,
  _M = xI.BUGGY_SAFARI_ITERATORS,
  vM = Ef('iterator'),
  mM = 'keys',
  yM = 'values',
  IM = 'entries',
  MM = function () {
    return this;
  },
  CM = function (e, t, n, i, o, r, a) {
    !(function (e, t, n, i) {
      var o = t + ' Iterator';
      (e.prototype = jI(HI, { next: KI(+!i, n) })), WI(e, o, !1), (zI[o] = $I);
    })(n, t, i);
    var s,
      c,
      u,
      l = function (e) {
        if (e === o && g) return g;
        if (!_M && e && e in h) return h[e];
        switch (e) {
          case mM:
          case yM:
          case IM:
            return function () {
              return new n(this, e);
            };
        }
        return function () {
          return new n(this);
        };
      },
      d = t + ' Iterator',
      p = !1,
      h = e.prototype,
      f = h[vM] || h['@@iterator'] || (o && h[o]),
      g = (!_M && f) || l(o),
      _ = ('Array' === t && h.entries) || f;
    if (
      (_ &&
        (s = sM(_.call(new e()))) !== Object.prototype &&
        s.next &&
        (sM(s) !== gM && (cM ? cM(s, gM) : aM(s[vM]) || dM(s, vM, MM)),
        uM(s, d, !0)),
      hM &&
        o === yM &&
        f &&
        f.name !== yM &&
        (fM
          ? lM(h, 'name', yM)
          : ((p = !0),
            (g = function () {
              return rM(f, this);
            }))),
      o)
    )
      if (((c = { values: l(yM), keys: r ? g : l(mM), entries: l(IM) }), a))
        for (u in c) (_M || p || !(u in h)) && dM(h, u, c[u]);
      else oM({ target: t, proto: !0, forced: _M || p }, c);
    return h[vM] !== g && dM(h, vM, g, { name: o }), (pM[t] = g), c;
  },
  TM = function (e, t) {
    return { value: e, done: t };
  },
  EM = ah,
  DM = _y,
  SM = Ny,
  kM = Xg,
  RM = Jf.f,
  LM = CM,
  AM = TM,
  OM = Rp,
  bM = 'Array Iterator',
  NM = kM.set,
  PM = kM.getterFor(bM),
  wM = LM(
    Array,
    'Array',
    function (e, t) {
      NM(this, { type: bM, target: EM(e), index: 0, kind: t });
    },
    function () {
      var e = PM(this),
        t = e.target,
        n = e.index++;
      if (!t || n >= t.length) return (e.target = null), AM(void 0, !0);
      switch (e.kind) {
        case 'keys':
          return AM(n, !1);
        case 'values':
          return AM(t[n], !1);
      }
      return AM([n, t[n]], !1);
    },
    'values'
  ),
  UM = (SM.Arguments = SM.Array);
if ((DM('keys'), DM('values'), DM('entries'), OM && 'values' !== UM.name))
  try {
    RM(UM, 'name', { value: 'values' });
  } catch (ic) {}
var GM = Gm.map;
Cv(
  { target: 'Array', proto: !0, forced: !cm('map') },
  {
    map: function (e) {
      return GM(this, e, arguments.length > 1 ? arguments[1] : void 0);
    },
  }
);
var xM = jp([].slice),
  FM = Cv,
  qM = Ev,
  VM = Zv,
  BM = lh,
  HM = R_,
  jM = N_,
  KM = ah,
  WM = Av,
  zM = Ef,
  $M = xM,
  YM = cm('slice'),
  JM = zM('species'),
  XM = Array,
  ZM = Math.max;
FM(
  { target: 'Array', proto: !0, forced: !YM },
  {
    slice: function (e, t) {
      var n,
        i,
        o,
        r = KM(this),
        a = jM(r),
        s = HM(e, a),
        c = HM(void 0 === t ? a : t, a);
      if (
        qM(r) &&
        ((n = r.constructor),
        ((VM(n) && (n === XM || qM(n.prototype))) ||
          (BM(n) && null === (n = n[JM]))) &&
          (n = void 0),
        n === XM || void 0 === n)
      )
        return $M(r, s, c);
      for (
        i = new (void 0 === n ? XM : n)(ZM(c - s, 0)), o = 0;
        s < c;
        s++, o++
      )
        s in r && WM(i, o, r[s]);
      return (i.length = o), i;
    },
  }
);
var QM = Cv,
  eC = Date,
  tC = jp(eC.prototype.getTime);
QM(
  { target: 'Date', stat: !0 },
  {
    now: function () {
      return tC(new eC());
    },
  }
);
var nC = sf,
  iC = Of;
Cv(
  {
    target: 'Date',
    proto: !0,
    arity: 1,
    forced: kp(function () {
      return (
        null !== new Date(NaN).toJSON() ||
        1 !==
          Date.prototype.toJSON.call({
            toISOString: function () {
              return 1;
            },
          })
      );
    }),
  },
  {
    toJSON: function (e) {
      var t = nC(this),
        n = iC(t, 'number');
      return 'number' != typeof n || isFinite(n) ? t.toISOString() : null;
    },
  }
);
var oC = jp,
  rC = y_,
  aC = Date.prototype,
  sC = 'Invalid Date',
  cC = 'toString',
  uC = oC(aC[cC]),
  lC = oC(aC.getTime);
String(new Date(NaN)) !== sC &&
  rC(aC, cC, function () {
    var e = lC(this);
    return e == e ? uC(this) : sC;
  });
var dC = _g.exports,
  pC = Jf,
  hC = function (e, t, n) {
    return (
      n.get && dC(n.get, t, { getter: !0 }),
      n.set && dC(n.set, t, { setter: !0 }),
      pC.f(e, t, n)
    );
  },
  fC = Rp,
  gC = Cg.EXISTS,
  _C = jp,
  vC = hC,
  mC = Function.prototype,
  yC = _C(mC.toString),
  IC = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,
  MC = _C(IC.exec);
fC &&
  !gC &&
  vC(mC, 'name', {
    configurable: !0,
    get: function () {
      try {
        return MC(IC, yC(this))[1];
      } catch (ic) {
        return '';
      }
    },
  });
var CC = sf,
  TC = Bm;
Cv(
  {
    target: 'Object',
    stat: !0,
    forced: kp(function () {
      TC(1);
    }),
  },
  {
    keys: function (e) {
      return TC(CC(e));
    },
  }
);
var EC = Fv,
  DC = bv
    ? {}.toString
    : function () {
        return '[object ' + EC(this) + ']';
      };
bv || y_(Object.prototype, 'toString', DC, { unsafe: !0 });
var SC,
  kC,
  RC,
  LC,
  AC = Dp,
  OC = vh,
  bC = $p,
  NC = function (e) {
    return OC.slice(0, e.length) === e;
  },
  PC = NC('Bun/')
    ? 'BUN'
    : NC('Cloudflare-Workers')
      ? 'CLOUDFLARE'
      : NC('Deno/')
        ? 'DENO'
        : NC('Node.js/')
          ? 'NODE'
          : AC.Bun && 'string' == typeof Bun.version
            ? 'BUN'
            : AC.Deno && 'object' == typeof Deno.version
              ? 'DENO'
              : 'process' === bC(AC.process)
                ? 'NODE'
                : AC.window && AC.document
                  ? 'BROWSER'
                  : 'REST',
  wC = 'NODE' === PC,
  UC = hh,
  GC = hC,
  xC = Rp,
  FC = Ef('species'),
  qC = function (e) {
    var t = UC(e);
    xC &&
      t &&
      !t[FC] &&
      GC(t, FC, {
        configurable: !0,
        get: function () {
          return this;
        },
      });
  },
  VC = fh,
  BC = TypeError,
  HC = function (e, t) {
    if (VC(t, e)) return e;
    throw new BC('Incorrect invocation');
  },
  jC = Zv,
  KC = Uh,
  WC = TypeError,
  zC = tg,
  $C = eh,
  YC = Ef('species'),
  JC = Lp,
  XC = Function.prototype,
  ZC = XC.apply,
  QC = XC.call,
  eT =
    ('object' == typeof Reflect && Reflect.apply) ||
    (JC
      ? QC.bind(ZC)
      : function () {
          return QC.apply(ZC, arguments);
        }),
  tT = TypeError,
  nT = function (e, t) {
    if (e < t) throw new tT('Not enough arguments');
    return e;
  },
  iT = /(?:ipad|iphone|ipod).*applewebkit/i.test(vh),
  oT = Dp,
  rT = eT,
  aT = Lm,
  sT = ch,
  cT = lf,
  uT = kp,
  lT = Jm,
  dT = xM,
  pT = xf,
  hT = nT,
  fT = iT,
  gT = wC,
  _T = oT.setImmediate,
  vT = oT.clearImmediate,
  mT = oT.process,
  yT = oT.Dispatch,
  IT = oT.Function,
  MT = oT.MessageChannel,
  CT = oT.String,
  TT = 0,
  ET = {},
  DT = 'onreadystatechange';
uT(function () {
  SC = oT.location;
});
var ST = function (e) {
    if (cT(ET, e)) {
      var t = ET[e];
      delete ET[e], t();
    }
  },
  kT = function (e) {
    return function () {
      ST(e);
    };
  },
  RT = function (e) {
    ST(e.data);
  },
  LT = function (e) {
    oT.postMessage(CT(e), SC.protocol + '//' + SC.host);
  };
(_T && vT) ||
  ((_T = function (e) {
    hT(arguments.length, 1);
    var t = sT(e) ? e : IT(e),
      n = dT(arguments, 1);
    return (
      (ET[++TT] = function () {
        rT(t, void 0, n);
      }),
      kC(TT),
      TT
    );
  }),
  (vT = function (e) {
    delete ET[e];
  }),
  gT
    ? (kC = function (e) {
        mT.nextTick(kT(e));
      })
    : yT && yT.now
      ? (kC = function (e) {
          yT.now(kT(e));
        })
      : MT && !fT
        ? ((LC = (RC = new MT()).port2),
          (RC.port1.onmessage = RT),
          (kC = aT(LC.postMessage, LC)))
        : oT.addEventListener &&
            sT(oT.postMessage) &&
            !oT.importScripts &&
            SC &&
            'file:' !== SC.protocol &&
            !uT(LT)
          ? ((kC = LT), oT.addEventListener('message', RT, !1))
          : (kC =
              DT in pT('script')
                ? function (e) {
                    lT.appendChild(pT('script'))[DT] = function () {
                      lT.removeChild(this), ST(e);
                    };
                  }
                : function (e) {
                    setTimeout(kT(e), 0);
                  }));
var AT = { set: _T, clear: vT },
  OT = Dp,
  bT = Rp,
  NT = Object.getOwnPropertyDescriptor,
  PT = function () {
    (this.head = null), (this.tail = null);
  };
PT.prototype = {
  add: function (e) {
    var t = { item: e, next: null },
      n = this.tail;
    n ? (n.next = t) : (this.head = t), (this.tail = t);
  },
  get: function () {
    var e = this.head;
    if (e) return null === (this.head = e.next) && (this.tail = null), e.item;
  },
};
var wT,
  UT,
  GT,
  xT,
  FT,
  qT = PT,
  VT = /ipad|iphone|ipod/i.test(vh) && 'undefined' != typeof Pebble,
  BT = /web0s(?!.*chrome)/i.test(vh),
  HT = Dp,
  jT = Lm,
  KT = AT.set,
  WT = qT,
  zT = iT,
  $T = VT,
  YT = BT,
  JT = wC,
  XT = HT.MutationObserver || HT.WebKitMutationObserver,
  ZT = HT.document,
  QT = HT.process,
  eE = HT.Promise,
  tE = (function (e) {
    if (!bT) return OT[e];
    var t = NT(OT, e);
    return t && t.value;
  })('queueMicrotask');
if (!tE) {
  var nE = new WT(),
    iE = function () {
      var e, t;
      for (JT && (e = QT.domain) && e.exit(); (t = nE.get()); )
        try {
          t();
        } catch (n) {
          throw (nE.head && wT(), n);
        }
      e && e.enter();
    };
  zT || JT || YT || !XT || !ZT
    ? !$T && eE && eE.resolve
      ? (((xT = eE.resolve(void 0)).constructor = eE),
        (FT = jT(xT.then, xT)),
        (wT = function () {
          FT(iE);
        }))
      : JT
        ? (wT = function () {
            QT.nextTick(iE);
          })
        : ((KT = jT(KT, HT)),
          (wT = function () {
            KT(iE);
          }))
    : ((UT = !0),
      (GT = ZT.createTextNode('')),
      new XT(iE).observe(GT, { characterData: !0 }),
      (wT = function () {
        GT.data = UT = !UT;
      })),
    (tE = function (e) {
      nE.head || wT(), nE.add(e);
    });
}
var oE = tE,
  rE = function (e) {
    try {
      return { error: !1, value: e() };
    } catch (t) {
      return { error: !0, value: t };
    }
  },
  aE = Dp.Promise,
  sE = Dp,
  cE = aE,
  uE = ch,
  lE = fv,
  dE = Ag,
  pE = Ef,
  hE = PC,
  fE = Eh;
cE && cE.prototype;
var gE = pE('species'),
  _E = !1,
  vE = uE(sE.PromiseRejectionEvent),
  mE = lE('Promise', function () {
    var e = dE(cE),
      t = e !== String(cE);
    if (!t && 66 === fE) return !0;
    if (!fE || fE < 51 || !/native code/.test(e)) {
      var n = new cE(function (e) {
          e(1);
        }),
        i = function (e) {
          e(
            function () {},
            function () {}
          );
        };
      if (
        (((n.constructor = {})[gE] = i),
        !(_E = n.then(function () {}) instanceof i))
      )
        return !0;
    }
    return !(t || ('BROWSER' !== hE && 'DENO' !== hE) || vE);
  }),
  yE = { CONSTRUCTOR: mE, REJECTION_EVENT: vE, SUBCLASSING: _E },
  IE = {},
  ME = qh,
  CE = TypeError,
  TE = function (e) {
    var t, n;
    (this.promise = new e(function (e, i) {
      if (void 0 !== t || void 0 !== n) throw new CE('Bad Promise constructor');
      (t = e), (n = i);
    })),
      (this.resolve = ME(t)),
      (this.reject = ME(n));
  };
IE.f = function (e) {
  return new TE(e);
};
var EE,
  DE,
  SE,
  kE = Cv,
  RE = wC,
  LE = Dp,
  AE = bp,
  OE = y_,
  bE = iM,
  NE = BI,
  PE = qC,
  wE = qh,
  UE = ch,
  GE = lh,
  xE = HC,
  FE = function (e, t) {
    var n,
      i = zC(e).constructor;
    return void 0 === i || $C((n = zC(i)[YC]))
      ? t
      : (function (e) {
          if (jC(e)) return e;
          throw new WC(KC(e) + ' is not a constructor');
        })(n);
  },
  qE = AT.set,
  VE = oE,
  BE = rE,
  HE = qT,
  jE = Xg,
  KE = aE,
  WE = IE,
  zE = 'Promise',
  $E = yE.CONSTRUCTOR,
  YE = yE.REJECTION_EVENT,
  JE = yE.SUBCLASSING,
  XE = jE.getterFor(zE),
  ZE = jE.set,
  QE = KE && KE.prototype,
  eD = KE,
  tD = QE,
  nD = LE.TypeError,
  iD = LE.document,
  oD = LE.process,
  rD = WE.f,
  aD = rD,
  sD = !!(iD && iD.createEvent && LE.dispatchEvent),
  cD = 'unhandledrejection',
  uD = function (e) {
    var t;
    return !(!GE(e) || !UE((t = e.then))) && t;
  },
  lD = function (e, t) {
    var n,
      i,
      o,
      r = t.value,
      a = 1 === t.state,
      s = a ? e.ok : e.fail,
      c = e.resolve,
      u = e.reject,
      l = e.domain;
    try {
      s
        ? (a || (2 === t.rejection && gD(t), (t.rejection = 1)),
          !0 === s
            ? (n = r)
            : (l && l.enter(), (n = s(r)), l && (l.exit(), (o = !0))),
          n === e.promise
            ? u(new nD('Promise-chain cycle'))
            : (i = uD(n))
              ? AE(i, n, c, u)
              : c(n))
        : u(r);
    } catch (d) {
      l && !o && l.exit(), u(d);
    }
  },
  dD = function (e, t) {
    e.notified ||
      ((e.notified = !0),
      VE(function () {
        for (var n, i = e.reactions; (n = i.get()); ) lD(n, e);
        (e.notified = !1), t && !e.rejection && hD(e);
      }));
  },
  pD = function (e, t, n) {
    var i, o;
    sD
      ? (((i = iD.createEvent('Event')).promise = t),
        (i.reason = n),
        i.initEvent(e, !1, !0),
        LE.dispatchEvent(i))
      : (i = { promise: t, reason: n }),
      !YE && (o = LE['on' + e])
        ? o(i)
        : e === cD &&
          (function (e, t) {
            try {
              1 === arguments.length ? console.error(e) : console.error(e, t);
            } catch (n) {}
          })('Unhandled promise rejection', n);
  },
  hD = function (e) {
    AE(qE, LE, function () {
      var t,
        n = e.facade,
        i = e.value;
      if (
        fD(e) &&
        ((t = BE(function () {
          RE ? oD.emit('unhandledRejection', i, n) : pD(cD, n, i);
        })),
        (e.rejection = RE || fD(e) ? 2 : 1),
        t.error)
      )
        throw t.value;
    });
  },
  fD = function (e) {
    return 1 !== e.rejection && !e.parent;
  },
  gD = function (e) {
    AE(qE, LE, function () {
      var t = e.facade;
      RE ? oD.emit('rejectionHandled', t) : pD('rejectionhandled', t, e.value);
    });
  },
  _D = function (e, t, n) {
    return function (i) {
      e(t, i, n);
    };
  },
  vD = function (e, t, n) {
    e.done ||
      ((e.done = !0), n && (e = n), (e.value = t), (e.state = 2), dD(e, !0));
  },
  mD = function (e, t, n) {
    if (!e.done) {
      (e.done = !0), n && (e = n);
      try {
        if (e.facade === t) throw new nD("Promise can't be resolved itself");
        var i = uD(t);
        i
          ? VE(function () {
              var n = { done: !1 };
              try {
                AE(i, t, _D(mD, n, e), _D(vD, n, e));
              } catch (o) {
                vD(n, o, e);
              }
            })
          : ((e.value = t), (e.state = 1), dD(e, !1));
      } catch (o) {
        vD({ done: !1 }, o, e);
      }
    }
  };
if (
  $E &&
  ((tD = (eD = function (e) {
    xE(this, tD), wE(e), AE(EE, this);
    var t = XE(this);
    try {
      e(_D(mD, t), _D(vD, t));
    } catch (n) {
      vD(t, n);
    }
  }).prototype),
  ((EE = function (e) {
    ZE(this, {
      type: zE,
      done: !1,
      notified: !1,
      parent: !1,
      reactions: new HE(),
      rejection: !1,
      state: 0,
      value: null,
    });
  }).prototype = OE(tD, 'then', function (e, t) {
    var n = XE(this),
      i = rD(FE(this, eD));
    return (
      (n.parent = !0),
      (i.ok = !UE(e) || e),
      (i.fail = UE(t) && t),
      (i.domain = RE ? oD.domain : void 0),
      0 === n.state
        ? n.reactions.add(i)
        : VE(function () {
            lD(i, n);
          }),
      i.promise
    );
  })),
  (DE = function () {
    var e = new EE(),
      t = XE(e);
    (this.promise = e), (this.resolve = _D(mD, t)), (this.reject = _D(vD, t));
  }),
  (WE.f = rD =
    function (e) {
      return e === eD || void 0 === e ? new DE(e) : aD(e);
    }),
  UE(KE) && QE !== Object.prototype)
) {
  (SE = QE.then),
    JE ||
      OE(
        QE,
        'then',
        function (e, t) {
          var n = this;
          return new eD(function (e, t) {
            AE(SE, n, e, t);
          }).then(e, t);
        },
        { unsafe: !0 }
      );
  try {
    delete QE.constructor;
  } catch (ic) {}
  bE && bE(QE, tD);
}
kE({ global: !0, constructor: !0, wrap: !0, forced: $E }, { Promise: eD }),
  NE(eD, zE, !1),
  PE(zE);
var yD = Lm,
  ID = bp,
  MD = tg,
  CD = Uh,
  TD = Gy,
  ED = N_,
  DD = fh,
  SD = Jy,
  kD = Hy,
  RD = Ay,
  LD = TypeError,
  AD = function (e, t) {
    (this.stopped = e), (this.result = t);
  },
  OD = AD.prototype,
  bD = function (e, t, n) {
    var i,
      o,
      r,
      a,
      s,
      c,
      u,
      l = n && n.that,
      d = !(!n || !n.AS_ENTRIES),
      p = !(!n || !n.IS_RECORD),
      h = !(!n || !n.IS_ITERATOR),
      f = !(!n || !n.INTERRUPTED),
      g = yD(t, l),
      _ = function (e) {
        return i && RD(i, 'normal', e), new AD(!0, e);
      },
      v = function (e) {
        return d
          ? (MD(e), f ? g(e[0], e[1], _) : g(e[0], e[1]))
          : f
            ? g(e, _)
            : g(e);
      };
    if (p) i = e.iterator;
    else if (h) i = e;
    else {
      if (!(o = kD(e))) throw new LD(CD(e) + ' is not iterable');
      if (TD(o)) {
        for (r = 0, a = ED(e); a > r; r++)
          if ((s = v(e[r])) && DD(OD, s)) return s;
        return new AD(!1);
      }
      i = SD(e, o);
    }
    for (c = p ? e.next : i.next; !(u = ID(c, i)).done; ) {
      try {
        s = v(u.value);
      } catch (m) {
        RD(i, 'throw', m);
      }
      if ('object' == typeof s && s && DD(OD, s)) return s;
    }
    return new AD(!1);
  },
  ND = aE,
  PD =
    yE.CONSTRUCTOR ||
    !pI(function (e) {
      ND.all(e).then(void 0, function () {});
    }),
  wD = bp,
  UD = qh,
  GD = IE,
  xD = rE,
  FD = bD;
Cv(
  { target: 'Promise', stat: !0, forced: PD },
  {
    all: function (e) {
      var t = this,
        n = GD.f(t),
        i = n.resolve,
        o = n.reject,
        r = xD(function () {
          var n = UD(t.resolve),
            r = [],
            a = 0,
            s = 1;
          FD(e, function (e) {
            var c = a++,
              u = !1;
            s++,
              wD(n, t, e).then(function (e) {
                u || ((u = !0), (r[c] = e), --s || i(r));
              }, o);
          }),
            --s || i(r);
        });
      return r.error && o(r.value), n.promise;
    },
  }
);
var qD = Cv,
  VD = yE.CONSTRUCTOR,
  BD = aE,
  HD = hh,
  jD = ch,
  KD = y_,
  WD = BD && BD.prototype;
if (
  (qD(
    { target: 'Promise', proto: !0, forced: VD, real: !0 },
    {
      catch: function (e) {
        return this.then(void 0, e);
      },
    }
  ),
  jD(BD))
) {
  var zD = HD('Promise').prototype.catch;
  WD.catch !== zD && KD(WD, 'catch', zD, { unsafe: !0 });
}
var $D = bp,
  YD = qh,
  JD = IE,
  XD = rE,
  ZD = bD;
Cv(
  { target: 'Promise', stat: !0, forced: PD },
  {
    race: function (e) {
      var t = this,
        n = JD.f(t),
        i = n.reject,
        o = XD(function () {
          var o = YD(t.resolve);
          ZD(e, function (e) {
            $D(o, t, e).then(n.resolve, i);
          });
        });
      return o.error && i(o.value), n.promise;
    },
  }
);
var QD = IE;
Cv(
  { target: 'Promise', stat: !0, forced: yE.CONSTRUCTOR },
  {
    reject: function (e) {
      var t = QD.f(this);
      return (0, t.reject)(e), t.promise;
    },
  }
);
var eS = tg,
  tS = lh,
  nS = IE,
  iS = Cv,
  oS = yE.CONSTRUCTOR;
hh('Promise'),
  iS(
    { target: 'Promise', stat: !0, forced: oS },
    {
      resolve: function (e) {
        return (function (e, t) {
          if ((eS(e), tS(t) && t.constructor === e)) return t;
          var n = nS.f(e);
          return (0, n.resolve)(t), n.promise;
        })(this, e);
      },
    }
  );
var rS = { exports: {} },
  aS = {},
  sS = $p,
  cS = ah,
  uS = I_.f,
  lS = xM,
  dS =
    'object' == typeof window && window && Object.getOwnPropertyNames
      ? Object.getOwnPropertyNames(window)
      : [];
aS.f = function (e) {
  return dS && 'Window' === sS(e)
    ? (function (e) {
        try {
          return uS(e);
        } catch (t) {
          return lS(dS);
        }
      })(e)
    : uS(cS(e));
};
var pS = kp(function () {
    if ('function' == typeof ArrayBuffer) {
      var e = new ArrayBuffer(8);
      Object.isExtensible(e) && Object.defineProperty(e, 'a', { value: 8 });
    }
  }),
  hS = kp,
  fS = lh,
  gS = $p,
  _S = pS,
  vS = Object.isExtensible,
  mS =
    hS(function () {
      vS(1);
    }) || _S
      ? function (e) {
          return !!fS(e) && (!_S || 'ArrayBuffer' !== gS(e)) && (!vS || vS(e));
        }
      : vS,
  yS = !kp(function () {
    return Object.isExtensible(Object.preventExtensions({}));
  }),
  IS = Cv,
  MS = jp,
  CS = Gg,
  TS = lh,
  ES = lf,
  DS = Jf.f,
  SS = I_,
  kS = aS,
  RS = mS,
  LS = yS,
  AS = !1,
  OS = gf('meta'),
  bS = 0,
  NS = function (e) {
    DS(e, OS, { value: { objectID: 'O' + bS++, weakData: {} } });
  },
  PS = (rS.exports = {
    enable: function () {
      (PS.enable = function () {}), (AS = !0);
      var e = SS.f,
        t = MS([].splice),
        n = {};
      (n[OS] = 1),
        e(n).length &&
          ((SS.f = function (n) {
            for (var i = e(n), o = 0, r = i.length; o < r; o++)
              if (i[o] === OS) {
                t(i, o, 1);
                break;
              }
            return i;
          }),
          IS(
            { target: 'Object', stat: !0, forced: !0 },
            { getOwnPropertyNames: kS.f }
          ));
    },
    fastKey: function (e, t) {
      if (!TS(e))
        return 'symbol' == typeof e
          ? e
          : ('string' == typeof e ? 'S' : 'P') + e;
      if (!ES(e, OS)) {
        if (!RS(e)) return 'F';
        if (!t) return 'E';
        NS(e);
      }
      return e[OS].objectID;
    },
    getWeakData: function (e, t) {
      if (!ES(e, OS)) {
        if (!RS(e)) return !0;
        if (!t) return !1;
        NS(e);
      }
      return e[OS].weakData;
    },
    onFreeze: function (e) {
      return LS && AS && RS(e) && !ES(e, OS) && NS(e), e;
    },
  });
CS[OS] = !0;
var wS = ch,
  US = lh,
  GS = iM,
  xS = function (e, t, n) {
    var i, o;
    return (
      GS &&
        wS((i = t.constructor)) &&
        i !== n &&
        US((o = i.prototype)) &&
        o !== n.prototype &&
        GS(e, o),
      e
    );
  },
  FS = Cv,
  qS = Dp,
  VS = jp,
  BS = fv,
  HS = y_,
  jS = rS.exports,
  KS = bD,
  WS = HC,
  zS = ch,
  $S = eh,
  YS = lh,
  JS = kp,
  XS = pI,
  ZS = BI,
  QS = xS,
  ek = function (e, t, n) {
    var i = -1 !== e.indexOf('Map'),
      o = -1 !== e.indexOf('Weak'),
      r = i ? 'set' : 'add',
      a = qS[e],
      s = a && a.prototype,
      c = a,
      u = {},
      l = function (e) {
        var t = VS(s[e]);
        HS(
          s,
          e,
          'add' === e
            ? function (e) {
                return t(this, 0 === e ? 0 : e), this;
              }
            : 'delete' === e
              ? function (e) {
                  return !(o && !YS(e)) && t(this, 0 === e ? 0 : e);
                }
              : 'get' === e
                ? function (e) {
                    return o && !YS(e) ? void 0 : t(this, 0 === e ? 0 : e);
                  }
                : 'has' === e
                  ? function (e) {
                      return !(o && !YS(e)) && t(this, 0 === e ? 0 : e);
                    }
                  : function (e, n) {
                      return t(this, 0 === e ? 0 : e, n), this;
                    }
        );
      };
    if (
      BS(
        e,
        !zS(a) ||
          !(
            o ||
            (s.forEach &&
              !JS(function () {
                new a().entries().next();
              }))
          )
      )
    )
      (c = n.getConstructor(t, e, i, r)), jS.enable();
    else if (BS(e, !0)) {
      var d = new c(),
        p = d[r](o ? {} : -0, 1) !== d,
        h = JS(function () {
          d.has(1);
        }),
        f = XS(function (e) {
          new a(e);
        }),
        g =
          !o &&
          JS(function () {
            for (var e = new a(), t = 5; t--; ) e[r](t, t);
            return !e.has(-0);
          });
      f ||
        (((c = t(function (e, t) {
          WS(e, s);
          var n = QS(new a(), e, c);
          return $S(t) || KS(t, n[r], { that: n, AS_ENTRIES: i }), n;
        })).prototype = s),
        (s.constructor = c)),
        (h || g) && (l('delete'), l('has'), i && l('get')),
        (g || p) && l(r),
        o && s.clear && delete s.clear;
    }
    return (
      (u[e] = c),
      FS({ global: !0, constructor: !0, forced: c !== a }, u),
      ZS(c, e),
      o || n.setStrong(c, e, i),
      c
    );
  },
  tk = y_,
  nk = function (e, t, n) {
    for (var i in t) tk(e, i, t[i], n);
    return e;
  },
  ik = ly,
  ok = hC,
  rk = nk,
  ak = Lm,
  sk = HC,
  ck = eh,
  uk = bD,
  lk = CM,
  dk = TM,
  pk = qC,
  hk = Rp,
  fk = rS.exports.fastKey,
  gk = Xg.set,
  _k = Xg.getterFor,
  vk = {
    getConstructor: function (e, t, n, i) {
      var o = e(function (e, o) {
          sk(e, r),
            gk(e, {
              type: t,
              index: ik(null),
              first: null,
              last: null,
              size: 0,
            }),
            hk || (e.size = 0),
            ck(o) || uk(o, e[i], { that: e, AS_ENTRIES: n });
        }),
        r = o.prototype,
        a = _k(t),
        s = function (e, t, n) {
          var i,
            o,
            r = a(e),
            s = c(e, t);
          return (
            s
              ? (s.value = n)
              : ((r.last = s =
                  {
                    index: (o = fk(t, !0)),
                    key: t,
                    value: n,
                    previous: (i = r.last),
                    next: null,
                    removed: !1,
                  }),
                r.first || (r.first = s),
                i && (i.next = s),
                hk ? r.size++ : e.size++,
                'F' !== o && (r.index[o] = s)),
            e
          );
        },
        c = function (e, t) {
          var n,
            i = a(e),
            o = fk(t);
          if ('F' !== o) return i.index[o];
          for (n = i.first; n; n = n.next) if (n.key === t) return n;
        };
      return (
        rk(r, {
          clear: function () {
            for (var e = a(this), t = e.first; t; )
              (t.removed = !0),
                t.previous && (t.previous = t.previous.next = null),
                (t = t.next);
            (e.first = e.last = null),
              (e.index = ik(null)),
              hk ? (e.size = 0) : (this.size = 0);
          },
          delete: function (e) {
            var t = this,
              n = a(t),
              i = c(t, e);
            if (i) {
              var o = i.next,
                r = i.previous;
              delete n.index[i.index],
                (i.removed = !0),
                r && (r.next = o),
                o && (o.previous = r),
                n.first === i && (n.first = o),
                n.last === i && (n.last = r),
                hk ? n.size-- : t.size--;
            }
            return !!i;
          },
          forEach: function (e) {
            for (
              var t,
                n = a(this),
                i = ak(e, arguments.length > 1 ? arguments[1] : void 0);
              (t = t ? t.next : n.first);

            )
              for (i(t.value, t.key, this); t && t.removed; ) t = t.previous;
          },
          has: function (e) {
            return !!c(this, e);
          },
        }),
        rk(
          r,
          n
            ? {
                get: function (e) {
                  var t = c(this, e);
                  return t && t.value;
                },
                set: function (e, t) {
                  return s(this, 0 === e ? 0 : e, t);
                },
              }
            : {
                add: function (e) {
                  return s(this, (e = 0 === e ? 0 : e), e);
                },
              }
        ),
        hk &&
          ok(r, 'size', {
            configurable: !0,
            get: function () {
              return a(this).size;
            },
          }),
        o
      );
    },
    setStrong: function (e, t, n) {
      var i = t + ' Iterator',
        o = _k(t),
        r = _k(i);
      lk(
        e,
        t,
        function (e, t) {
          gk(this, { type: i, target: e, state: o(e), kind: t, last: null });
        },
        function () {
          for (var e = r(this), t = e.kind, n = e.last; n && n.removed; )
            n = n.previous;
          return e.target && (e.last = n = n ? n.next : e.state.first)
            ? dk(
                'keys' === t
                  ? n.key
                  : 'values' === t
                    ? n.value
                    : [n.key, n.value],
                !1
              )
            : ((e.target = null), dk(void 0, !0));
        },
        n ? 'entries' : 'values',
        !n,
        !0
      ),
        pk(t);
    },
  };
ek(
  'Set',
  function (e) {
    return function () {
      return e(this, arguments.length ? arguments[0] : void 0);
    };
  },
  vk
);
var mk = Fv,
  yk = String,
  Ik = function (e) {
    if ('Symbol' === mk(e))
      throw new TypeError('Cannot convert a Symbol value to a string');
    return yk(e);
  },
  Mk = jp,
  Ck = E_,
  Tk = Ik,
  Ek = ih,
  Dk = Mk(''.charAt),
  Sk = Mk(''.charCodeAt),
  kk = Mk(''.slice),
  Rk = function (e) {
    return function (t, n) {
      var i,
        o,
        r = Tk(Ek(t)),
        a = Ck(n),
        s = r.length;
      return a < 0 || a >= s
        ? e
          ? ''
          : void 0
        : (i = Sk(r, a)) < 55296 ||
            i > 56319 ||
            a + 1 === s ||
            (o = Sk(r, a + 1)) < 56320 ||
            o > 57343
          ? e
            ? Dk(r, a)
            : i
          : e
            ? kk(r, a, a + 2)
            : o - 56320 + ((i - 55296) << 10) + 65536;
    };
  },
  Lk = { codeAt: Rk(!1), charAt: Rk(!0) },
  Ak = Lk.charAt,
  Ok = Ik,
  bk = Xg,
  Nk = CM,
  Pk = TM,
  wk = 'String Iterator',
  Uk = bk.set,
  Gk = bk.getterFor(wk);
Nk(
  String,
  'String',
  function (e) {
    Uk(this, { type: wk, string: Ok(e), index: 0 });
  },
  function () {
    var e,
      t = Gk(this),
      n = t.string,
      i = t.index;
    return i >= n.length
      ? Pk(void 0, !0)
      : ((e = Ak(n, i)), (t.index += e.length), Pk(e, !1));
  }
);
var xk = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0,
  },
  Fk = xf('span').classList,
  qk = Fk && Fk.constructor && Fk.constructor.prototype,
  Vk = qk === Object.prototype ? void 0 : qk,
  Bk = Dp,
  Hk = xk,
  jk = Vk,
  Kk = Sy,
  Wk = gg,
  zk = function (e) {
    if (e && e.forEach !== Kk)
      try {
        Wk(e, 'forEach', Kk);
      } catch (sc) {
        e.forEach = Kk;
      }
  };
for (var $k in Hk) Hk[$k] && zk(Bk[$k] && Bk[$k].prototype);
zk(jk);
var Yk = Dp,
  Jk = xk,
  Xk = Vk,
  Zk = wM,
  Qk = gg,
  eR = BI,
  tR = Ef('iterator'),
  nR = Zk.values,
  iR = function (e, t) {
    if (e) {
      if (e[tR] !== nR)
        try {
          Qk(e, tR, nR);
        } catch (i) {
          e[tR] = nR;
        }
      if ((eR(e, t, !0), Jk[t]))
        for (var n in Zk)
          if (e[n] !== Zk[n])
            try {
              Qk(e, n, Zk[n]);
            } catch (i) {
              e[n] = Zk[n];
            }
    }
  };
for (var oR in Jk) iR(Yk[oR] && Yk[oR].prototype, oR);
iR(Xk, 'DOMTokenList');
var rR = Dp,
  aR = eT,
  sR = ch,
  cR = PC,
  uR = vh,
  lR = xM,
  dR = nT,
  pR = rR.Function,
  hR =
    /MSIE .\./.test(uR) ||
    ('BUN' === cR &&
      (function () {
        var e = rR.Bun.version.split('.');
        return (
          e.length < 3 ||
          ('0' === e[0] && (e[1] < 3 || ('3' === e[1] && '0' === e[2])))
        );
      })()),
  fR = function (e, t) {
    return hR
      ? function (t, n) {
          var i = dR(arguments.length, 1) > 2,
            o = sR(t) ? t : pR(t),
            r = i ? lR(arguments, 2) : [];
          return e(
            i
              ? function () {
                  aR(o, this, r);
                }
              : o,
            n
          );
        }
      : e;
  },
  gR = Cv,
  _R = Dp,
  vR = fR(_R.setInterval);
gR(
  { global: !0, bind: !0, forced: _R.setInterval !== vR },
  { setInterval: vR }
);
var mR = Cv,
  yR = Dp,
  IR = fR(yR.setTimeout);
mR({ global: !0, bind: !0, forced: yR.setTimeout !== IR }, { setTimeout: IR });
var MR = '2.2.8',
  CR = {
    INVITED: 'INVITED',
    ON_CALL_RECEIVED: 'onCallReceived',
    GROUP_CALL_INVITEE_LIST_UPDATE: 'GROUP_CALL_INVITEE_LIST_UPDATE',
    USER_ENTER: 'USER_ENTER',
    USER_LEAVE: 'USER_LEAVE',
    USER_ACCEPT: 'USER_ACCEPT',
    USER_UPDATE: 'USER_UPDATE',
    REJECT: 'REJECT',
    NO_RESP: 'NO_RESP',
    LINE_BUSY: 'LINE_BUSY',
    CALLING_CANCEL: 'CALLING_CANCEL',
    ON_CALL_CANCELED: 'onCallCancelled',
    CALLING_TIMEOUT: 'CALLING_TIMEOUT',
    ON_CALL_BEGIN: 'onCallBegin',
    CALL_END: 'CALL_END',
    USER_VIDEO_AVAILABLE: 'USER_VIDEO_AVAILABLE',
    USER_AUDIO_AVAILABLE: 'USER_AUDIO_AVAILABLE',
    USER_VOICE_VOLUME: 'USER_VOICE_VOLUME',
    SDK_READY: 'SDK_READY',
    KICKED_OUT: 'KICKED_OUT',
    CALL_MODE: 'CALL_MODE',
    HANG_UP: 'HANG_UP',
    ON_USER_NETWORK_QUALITY_CHANGED: 'ON_USER_NETWORK_QUALITY_CHANGED',
    MESSAGE_SENT_BY_ME: 'onMessageSentByMe',
    ERROR: 'ERROR',
    CALL_MESSAGE: 'CALL_MESSAGE',
  },
  TR = { IDLE: 'idle', CALLING: 'calling', CONNECTED: 'connected' },
  ER = { AUDIO: 1, VIDEO: 2 },
  DR = 'inviter',
  SR = 'invitee',
  kR = ['', 'audioCall', 'videoCall'],
  RR = 'audio',
  LR = { EAR: 'ear', SPEAKER: 'speaker' },
  AR = {
    BASE: Math.pow(2, 16),
    PRO: Math.pow(2, 17),
    ULTIMATE: Math.pow(2, 18),
  },
  OR = 2147483647,
  bR = 'inviter',
  NR = 'invitee',
  PR = 'normal',
  wR = 'reject',
  UR = 'timeout',
  GR = 'busyline',
  xR = 'unknown',
  FR = 'single',
  qR = 'group',
  VR = 'start_call',
  BR = 'not_answer_call',
  HR = 'call_failed',
  jR = 'event_report',
  KR = 'miniProgram',
  WR = 'waiting',
  zR = 'userId',
  $R = {
    MIC_TITLE: '麦克风权限授权',
    MIC_CONTENT: '使用语音通话，需要在设置中对麦克风进行授权允许',
    CAMERA_TITLE: '麦克风、摄像头权限授权',
    CAMERA_CONTENT: '使用视频通话，需要在设置中对麦克风、摄像头进行授权允许',
    CONFIRM_TEXT: '去设置',
  },
  YR = {
    AUDIO_CALL_MODAL_TITLE: '麦克风权限未开启',
    AUDIO_CALL_MODAL_CONTENT:
      '在设置-应用-微信-权限中开启麦克风权限，以正常使用音视频通话功能',
    VIDEO_CALL_MODAL_TITLE: '麦克风/摄像头权限未开启',
    VIDEO_CALL_MODAL_CONTENT:
      '在设置-应用-微信-权限中开启麦克风/摄像头权限，以正常使用音视频通话功能',
    CONFIRM_MODAL_TEXT: '前往设置',
  },
  JR = {
    AUTHORIZED: 'authorized',
    DENIED: 'denied',
    NOT_DETERMINED: 'not determined',
  },
  XR = { RECORD: 'scope.record', CAMERA: 'scope.camera' },
  ZR = {
    CAMERA_AUTHORIZED: 'cameraAuthorized',
    MICROPHONE_AUTHORIZED: 'microphoneAuthorized',
  },
  QR = 'call_wait',
  eL = 'call_accept',
  tL = { '': TR.IDLE, call_wait: TR.CALLING, call_accept: TR.CONNECTED },
  nL = 'https://buy.cloud.tencent.com/avc?addRavLicense=1',
  iL = 'https://buy.tencentcloud.com/avc?addRavLicense=1',
  oL = 1,
  rL = 9,
  aL = 17,
  sL = 18,
  cL = 21,
  uL = 15,
  lL = (function (e) {
    return e &&
      e.__esModule &&
      Object.prototype.hasOwnProperty.call(e, 'default')
      ? e.default
      : e;
  })(
    (() => {
      var e = {
          902: function (e, t, n) {
            var i =
                (this && this.__assign) ||
                function () {
                  return (
                    (i =
                      Object.assign ||
                      function (e) {
                        for (var t, n = 1, i = arguments.length; n < i; n++)
                          for (var o in (t = arguments[n]))
                            Object.prototype.hasOwnProperty.call(t, o) &&
                              (e[o] = t[o]);
                        return e;
                      }),
                    i.apply(this, arguments)
                  );
                },
              o =
                (this && this.__awaiter) ||
                function (e, t, n, i) {
                  return new (n || (n = Promise))(function (o, r) {
                    function a(e) {
                      try {
                        c(i.next(e));
                      } catch (t) {
                        r(t);
                      }
                    }
                    function s(e) {
                      try {
                        c(i.throw(e));
                      } catch (t) {
                        r(t);
                      }
                    }
                    function c(e) {
                      var t;
                      e.done
                        ? o(e.value)
                        : ((t = e.value),
                          t instanceof n
                            ? t
                            : new n(function (e) {
                                e(t);
                              })).then(a, s);
                    }
                    c((i = i.apply(e, t || [])).next());
                  });
                },
              r =
                (this && this.__generator) ||
                function (e, t) {
                  var n,
                    i,
                    o,
                    r,
                    a = {
                      label: 0,
                      sent: function () {
                        if (1 & o[0]) throw o[1];
                        return o[1];
                      },
                      trys: [],
                      ops: [],
                    };
                  return (
                    (r = { next: s(0), throw: s(1), return: s(2) }),
                    'function' == typeof Symbol &&
                      (r[Symbol.iterator] = function () {
                        return this;
                      }),
                    r
                  );
                  function s(s) {
                    return function (c) {
                      return (function (s) {
                        if (n)
                          throw new TypeError(
                            'Generator is already executing.'
                          );
                        for (; r && ((r = 0), s[0] && (a = 0)), a; )
                          try {
                            if (
                              ((n = 1),
                              i &&
                                (o =
                                  2 & s[0]
                                    ? i.return
                                    : s[0]
                                      ? i.throw ||
                                        ((o = i.return) && o.call(i), 0)
                                      : i.next) &&
                                !(o = o.call(i, s[1])).done)
                            )
                              return o;
                            switch (
                              ((i = 0), o && (s = [2 & s[0], o.value]), s[0])
                            ) {
                              case 0:
                              case 1:
                                o = s;
                                break;
                              case 4:
                                return a.label++, { value: s[1], done: !1 };
                              case 5:
                                a.label++, (i = s[1]), (s = [0]);
                                continue;
                              case 7:
                                (s = a.ops.pop()), a.trys.pop();
                                continue;
                              default:
                                if (
                                  !(
                                    (o =
                                      (o = a.trys).length > 0 &&
                                      o[o.length - 1]) ||
                                    (6 !== s[0] && 2 !== s[0])
                                  )
                                ) {
                                  a = 0;
                                  continue;
                                }
                                if (
                                  3 === s[0] &&
                                  (!o || (s[1] > o[0] && s[1] < o[3]))
                                ) {
                                  a.label = s[1];
                                  break;
                                }
                                if (6 === s[0] && a.label < o[1]) {
                                  (a.label = o[1]), (o = s);
                                  break;
                                }
                                if (o && a.label < o[2]) {
                                  (a.label = o[2]), a.ops.push(s);
                                  break;
                                }
                                o[2] && a.ops.pop(), a.trys.pop();
                                continue;
                            }
                            s = t.call(e, a);
                          } catch (c) {
                            (s = [6, c]), (i = 0);
                          } finally {
                            n = o = 0;
                          }
                        if (5 & s[0]) throw s[1];
                        return { value: s[0] ? s[1] : void 0, done: !0 };
                      })([s, c]);
                    };
                  }
                };
            Object.defineProperty(t, '__esModule', { value: !0 });
            var a,
              s,
              c = n(266),
              u = n(466),
              l = n(402),
              d = n(882),
              p = n(271),
              h = n(884),
              f = n(900),
              g = n(172);
            ((s = a || (a = {}))[(s.DEBUG = 0)] = 'DEBUG'),
              (s[(s.INFO = 1)] = 'INFO'),
              (s[(s.WARING = 2)] = 'WARING'),
              (s[(s.ERROR = 3)] = 'ERROR');
            var _ = { metric: !0, context: !0 },
              v = function (e, t, n) {
                return (
                  void 0 === n && (n = 0),
                  (0, c.isPlainObject)(e)
                    ? (0, c.isPlainObject)(t)
                      ? (Object.keys(t).forEach(function (i) {
                          var o = e[i],
                            r = t[i];
                          e[i] = _[i] && 0 === n ? v(o, r, 1) : r;
                        }),
                        e)
                      : e
                    : (0, c.isPlainObject)(t)
                      ? t
                      : {}
                );
              },
              m = { clsConfig: { endpoint: '', topicId: '' } },
              y = (function () {
                function e(e) {
                  var t = this;
                  (this.url = ''),
                    (this.uploadChannel = ''),
                    (this.sendClsPipe = null),
                    (this.sendEsPipe = null),
                    (this._logLevel = a.INFO),
                    (this._getReportDataList = []),
                    (this._blacklist = []);
                  var n = e || m,
                    i = n.clsConfig,
                    s = n.esConfig,
                    c = i.endpoint,
                    u = i.topicId;
                  (this.esConfig = s), (this.endpoint = c), (this.topicId = u);
                  var g = this.buildUploadUrl();
                  (this.url = g),
                    this.initPageUnloadMonitor(),
                    g &&
                      (this.sendClsPipe = (0, l.createPipeline)([
                        (0, f.filterSdkappIdPipe)(this),
                        (0, h.createThrottlePipe)(this, 5),
                        (0, d.formatClsLog)(),
                        (0, p.limitLengthPipe)(),
                        function (e) {
                          return o(t, void 0, void 0, function () {
                            var t,
                              n,
                              i = this;
                            return r(this, function (a) {
                              return (
                                (t = 0),
                                (n = function () {
                                  return o(i, void 0, void 0, function () {
                                    var i;
                                    return r(this, function (o) {
                                      switch (o.label) {
                                        case 0:
                                          return (
                                            o.trys.push([0, 2, , 3]),
                                            [4, this.send({ url: g, data: e })]
                                          );
                                        case 1:
                                          return o.sent(), [3, 3];
                                        case 2:
                                          return (
                                            (i = o.sent()),
                                            t <= 2
                                              ? (t++,
                                                setTimeout(function () {
                                                  n();
                                                }, 1e3))
                                              : console.debug(i),
                                            [3, 3]
                                          );
                                        case 3:
                                          return [2];
                                      }
                                    });
                                  });
                                })(),
                                [2]
                              );
                            });
                          });
                        },
                      ])),
                    this.updateBlacklist();
                }
                return (
                  (e.prototype.initPageUnloadMonitor = function () {
                    var e = this,
                      t = this;
                    !(0, c.isMiniProgram)() &&
                      document &&
                      'function' == typeof document.addEventListener &&
                      document.addEventListener(
                        'visibilitychange',
                        function () {
                          if ('hidden' === document.visibilityState) {
                            var n = e.getCommonReportData(),
                              i = v(n, {
                                level: a.WARING,
                                method: 'PAGE_UNLOAD',
                                type: 'event',
                              });
                            if (t.esConfig)
                              try {
                                var s = t.esConfig,
                                  c = s.url,
                                  u = s.table;
                                (0, l.createPipeline)([
                                  (0, f.filterSdkappIdPipe)(t),
                                  (0, h.createThrottlePipe)(t, 1),
                                  (0, d.formatESLog)({ table: u }),
                                  (0, p.limitLengthPipe)(),
                                  function (t) {
                                    return o(e, void 0, void 0, function () {
                                      var e;
                                      return r(this, function (n) {
                                        try {
                                          (e = new Blob([JSON.stringify(t)], {
                                            type: 'application/x-www-form-urlencoded',
                                          })),
                                            null === navigator ||
                                              void 0 === navigator ||
                                              navigator.sendBeacon(c, e);
                                        } catch (i) {
                                          console.debug(i);
                                        }
                                        return [2];
                                      });
                                    });
                                  },
                                ])(i);
                              } catch (g) {
                                console.debug(g);
                              }
                          }
                        }
                      );
                  }),
                  (e.prototype.updateEsConfig = function (e) {
                    var t = this;
                    try {
                      if (e) {
                        this.esConfig = e;
                        var n = e.url,
                          i = e.table;
                        n &&
                          i &&
                          ((this.uploadChannel = n),
                          (this.sendEsPipe = (0, l.createPipeline)([
                            (0, f.filterSdkappIdPipe)(this),
                            (0, h.createThrottlePipe)(this, 5),
                            (0, d.formatESLog)({ table: i }),
                            (0, p.limitLengthPipe)(),
                            function (e) {
                              return o(t, void 0, void 0, function () {
                                var t,
                                  i,
                                  a = this;
                                return r(this, function (s) {
                                  return (
                                    (t = 0),
                                    (i = function () {
                                      return o(a, void 0, void 0, function () {
                                        var o;
                                        return r(this, function (r) {
                                          switch (r.label) {
                                            case 0:
                                              return (
                                                r.trys.push([0, 2, , 3]),
                                                [
                                                  4,
                                                  this.send({
                                                    url: n,
                                                    data: e,
                                                  }),
                                                ]
                                              );
                                            case 1:
                                              return r.sent(), [3, 3];
                                            case 2:
                                              return (
                                                (o = r.sent()),
                                                t <= 2
                                                  ? (t++,
                                                    setTimeout(function () {
                                                      i();
                                                    }, 1e3))
                                                  : console.debug(o),
                                                [3, 3]
                                              );
                                            case 3:
                                              return [2];
                                          }
                                        });
                                      });
                                    })(),
                                    [2]
                                  );
                                });
                              });
                            },
                          ])));
                      }
                    } catch (a) {
                      console.debug(a);
                    }
                  }),
                  (e.prototype.updateGetReportData = function (e) {
                    'function' == typeof e && this._getReportDataList.push(e);
                  }),
                  (e.prototype.updateBlacklist = function () {
                    return o(this, void 0, void 0, function () {
                      var e, t, n;
                      return r(this, function (i) {
                        switch (i.label) {
                          case 0:
                            return (
                              i.trys.push([0, 2, , 3]),
                              [
                                4,
                                (0, u.request)({
                                  url: g.RAINBOW_BLACK_LIST_API,
                                }),
                              ]
                            );
                          case 1:
                            return (
                              (e = i.sent().data),
                              'string' ==
                                typeof (t = null == e ? void 0 : e.blackList) &&
                                (this._blacklist = t.split(',')),
                              [3, 3]
                            );
                          case 2:
                            return (
                              (n = i.sent()),
                              console.debug('update blacklist fail', n),
                              [3, 3]
                            );
                          case 3:
                            return [2];
                        }
                      });
                    });
                  }),
                  (e.prototype.getBlackList = function () {
                    return this._blacklist;
                  }),
                  (e.prototype.setLogLevel = function (e) {
                    'number' != typeof e && (e = a.INFO), (this._logLevel = e);
                  }),
                  (e.prototype.createLogFunc = function (e) {
                    var t = this;
                    return function (n, i) {
                      t.log(n, i, { level: e });
                    };
                  }),
                  (e.prototype.buildUploadUrl = function () {
                    return this.endpoint && this.topicId
                      ? ''
                          .concat(this.endpoint, '/tracklog?topic_id=')
                          .concat(this.topicId)
                      : '';
                  }),
                  (e.prototype.sendPipe = function (e) {
                    'function' == typeof this.sendClsPipe &&
                      this.sendClsPipe(e),
                      'function' == typeof this.sendEsPipe &&
                        this.sendEsPipe(e);
                  }),
                  (e.prototype.info = function (e, t) {
                    this.log(e, t, { level: a.INFO });
                  }),
                  (e.prototype.debug = function (e, t) {
                    this.log(e, t, { level: a.DEBUG });
                  }),
                  (e.prototype.warn = function (e, t) {
                    this.log(e, t, { level: a.WARING });
                  }),
                  (e.prototype.error = function (e, t) {
                    this.log(e, t, { level: a.ERROR });
                  }),
                  (e.prototype.log = function (e, t, n) {
                    try {
                      var o = n || {},
                        r = o.level;
                      if ((o.topicId, this._logLevel <= r)) {
                        var a = this.getCommonReportData(),
                          s = v(a, i({ level: r, method: e }, t));
                        this.sendPipe(s);
                      }
                    } catch (c) {
                      console.debug(c);
                    }
                  }),
                  (e.prototype.getCommonReportData = function () {
                    for (
                      var e = {}, t = 0;
                      t < this._getReportDataList.length;
                      t++
                    )
                      e = v(e, this._getReportDataList[t]());
                    return e;
                  }),
                  (e.prototype.send = function (e) {
                    return o(this, void 0, void 0, function () {
                      var t, n, i, o;
                      return r(this, function (r) {
                        switch (r.label) {
                          case 0:
                            (n = (t = e || {}).url),
                              (i = t.data),
                              (r.label = 1);
                          case 1:
                            return (
                              r.trys.push([1, 4, , 5]),
                              n
                                ? [
                                    4,
                                    (0, u.request)({
                                      url: n,
                                      data: i,
                                      method: 'post',
                                    }),
                                  ]
                                : [3, 3]
                            );
                          case 2:
                            r.sent(), (r.label = 3);
                          case 3:
                            return [3, 5];
                          case 4:
                            throw (
                              ((o = r.sent()), console.debug(o), new Error(o))
                            );
                          case 5:
                            return [2];
                        }
                      });
                    });
                  }),
                  e
                );
              })();
            t.default = y;
          },
          900: (e, t) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.filterSdkappIdPipe = void 0),
              (t.filterSdkappIdPipe = function (e) {
                return function (t, n) {
                  try {
                    var i = t.sdkappid,
                      o = e.getBlackList();
                    if (null == o ? void 0 : o.includes(String(i)))
                      throw new Error('this sdkappid in blacklist');
                    n(t);
                  } catch (r) {
                    console.debug(r);
                  }
                };
              });
          },
          793: (e, t, n) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.formatClsLog = void 0);
            var i = n(266);
            t.formatClsLog = function () {
              return function (e, t) {
                try {
                  t({
                    logs:
                      null == e
                        ? void 0
                        : e.map(function (e) {
                            var t = {};
                            return (
                              Object.keys(e).forEach(function (n) {
                                if ((0, i.isPlainObject)(e[n]))
                                  try {
                                    t[n] = (0, i.stringifyPlus)(e[n]);
                                  } catch (o) {
                                    console.debug(o);
                                  }
                                else
                                  'time' === n &&
                                    (t[n] = new Date(e[n]).toISOString()),
                                    (t[n] = e[n] + '');
                              }),
                              { contents: t, time: e.time }
                            );
                          }),
                    source: '',
                  });
                } catch (n) {
                  console.debug(n);
                }
              };
            };
          },
          713: (e, t, n) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.formatESLog = void 0);
            var i = n(266);
            t.formatESLog = function (e) {
              var t = e.table;
              return function (e, n) {
                try {
                  var o =
                    null == e
                      ? void 0
                      : e.map(function (e) {
                          var t = {};
                          return (
                            Object.keys(e).forEach(function (n) {
                              if ((0, i.isPlainObject)(e[n]))
                                try {
                                  t[n] = (0, i.stringifyPlus)(e[n]);
                                } catch (o) {
                                  console.debug(o);
                                }
                              else
                                t[n] =
                                  'level' === n
                                    ? e[n] + ''
                                    : 'time' === n
                                      ? new Date(e[n]).toISOString()
                                      : e[n];
                            }),
                            t
                          );
                        });
                  n({ table: t, report: o });
                } catch (r) {
                  console.debug(r);
                }
              };
            };
          },
          882: (e, t, n) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.formatClsLog = t.formatESLog = void 0);
            var i = n(793);
            Object.defineProperty(t, 'formatClsLog', {
              enumerable: !0,
              get: function () {
                return i.formatClsLog;
              },
            });
            var o = n(713);
            Object.defineProperty(t, 'formatESLog', {
              enumerable: !0,
              get: function () {
                return o.formatESLog;
              },
            });
          },
          402: (e, t, n) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.createPipeline = void 0);
            var i = n(266);
            t.createPipeline = function (e) {
              if (!e || !e.reduce || !e.length)
                throw new TypeError(
                  'createPipeline need at least one function param'
                );
              return 1 === e.length
                ? function (t, n) {
                    e[0](t, n || i.noop);
                  }
                : e.reduce(function (e, t) {
                    return function (n, o) {
                      return (
                        void 0 === o && (o = i.noop),
                        e(n, function (e) {
                          return null == t ? void 0 : t(e, o);
                        })
                      );
                    };
                  });
            };
          },
          271: (e, t, n) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.limitLengthPipe = t.MAX_LOG_LENGTH = void 0);
            var i = n(266);
            (t.MAX_LOG_LENGTH = 102400),
              (t.limitLengthPipe = function () {
                return function (e, n) {
                  try {
                    var o = (e = e || {}).logs,
                      r = void 0 === o ? [] : o;
                    (e.logs =
                      null == r
                        ? void 0
                        : r.map(function (e) {
                            var n = t.MAX_LOG_LENGTH,
                              o = e.contents;
                            return (
                              Object.keys(o).forEach(function (e) {
                                var t = o[e];
                                try {
                                  t &&
                                    t.length > n &&
                                    (o[e] =
                                      null == t ? void 0 : t.substring(0, n));
                                } catch (r) {
                                  console.debug('size of content > limitSize'),
                                    (o[e] = (0, i.stringifyPlus)(t).substring(
                                      0,
                                      n
                                    ));
                                }
                              }),
                              e
                            );
                          })),
                      n(e);
                  } catch (a) {
                    console.debug(a);
                  }
                };
              });
          },
          884: (e, t) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.createThrottlePipe = void 0),
              (t.createThrottlePipe = function (e, t) {
                var n,
                  i = [];
                return function (o, r) {
                  if (
                    (Array.isArray(o) ? (i = i.concat(o)) : i.push(o),
                    (t && i.length >= t) || (e.sendNow && i.length > 0))
                  )
                    return (
                      r(i.splice(0, i.length)), void (n && clearTimeout(n))
                    );
                  n && clearTimeout(n),
                    (n = setTimeout(function () {
                      (n = null), i.length > 0 && r(i.splice(0, i.length));
                    }, e.delay || 1e3));
                };
              });
          },
          466: function (e, t, n) {
            var i =
                (this && this.__assign) ||
                function () {
                  return (
                    (i =
                      Object.assign ||
                      function (e) {
                        for (var t, n = 1, i = arguments.length; n < i; n++)
                          for (var o in (t = arguments[n]))
                            Object.prototype.hasOwnProperty.call(t, o) &&
                              (e[o] = t[o]);
                        return e;
                      }),
                    i.apply(this, arguments)
                  );
                },
              o =
                (this && this.__awaiter) ||
                function (e, t, n, i) {
                  return new (n || (n = Promise))(function (o, r) {
                    function a(e) {
                      try {
                        c(i.next(e));
                      } catch (t) {
                        r(t);
                      }
                    }
                    function s(e) {
                      try {
                        c(i.throw(e));
                      } catch (t) {
                        r(t);
                      }
                    }
                    function c(e) {
                      var t;
                      e.done
                        ? o(e.value)
                        : ((t = e.value),
                          t instanceof n
                            ? t
                            : new n(function (e) {
                                e(t);
                              })).then(a, s);
                    }
                    c((i = i.apply(e, t || [])).next());
                  });
                },
              r =
                (this && this.__generator) ||
                function (e, t) {
                  var n,
                    i,
                    o,
                    r,
                    a = {
                      label: 0,
                      sent: function () {
                        if (1 & o[0]) throw o[1];
                        return o[1];
                      },
                      trys: [],
                      ops: [],
                    };
                  return (
                    (r = { next: s(0), throw: s(1), return: s(2) }),
                    'function' == typeof Symbol &&
                      (r[Symbol.iterator] = function () {
                        return this;
                      }),
                    r
                  );
                  function s(s) {
                    return function (c) {
                      return (function (s) {
                        if (n)
                          throw new TypeError(
                            'Generator is already executing.'
                          );
                        for (; r && ((r = 0), s[0] && (a = 0)), a; )
                          try {
                            if (
                              ((n = 1),
                              i &&
                                (o =
                                  2 & s[0]
                                    ? i.return
                                    : s[0]
                                      ? i.throw ||
                                        ((o = i.return) && o.call(i), 0)
                                      : i.next) &&
                                !(o = o.call(i, s[1])).done)
                            )
                              return o;
                            switch (
                              ((i = 0), o && (s = [2 & s[0], o.value]), s[0])
                            ) {
                              case 0:
                              case 1:
                                o = s;
                                break;
                              case 4:
                                return a.label++, { value: s[1], done: !1 };
                              case 5:
                                a.label++, (i = s[1]), (s = [0]);
                                continue;
                              case 7:
                                (s = a.ops.pop()), a.trys.pop();
                                continue;
                              default:
                                if (
                                  !(
                                    (o =
                                      (o = a.trys).length > 0 &&
                                      o[o.length - 1]) ||
                                    (6 !== s[0] && 2 !== s[0])
                                  )
                                ) {
                                  a = 0;
                                  continue;
                                }
                                if (
                                  3 === s[0] &&
                                  (!o || (s[1] > o[0] && s[1] < o[3]))
                                ) {
                                  a.label = s[1];
                                  break;
                                }
                                if (6 === s[0] && a.label < o[1]) {
                                  (a.label = o[1]), (o = s);
                                  break;
                                }
                                if (o && a.label < o[2]) {
                                  (a.label = o[2]), a.ops.push(s);
                                  break;
                                }
                                o[2] && a.ops.pop(), a.trys.pop();
                                continue;
                            }
                            s = t.call(e, a);
                          } catch (c) {
                            (s = [6, c]), (i = 0);
                          } finally {
                            n = o = 0;
                          }
                        if (5 & s[0]) throw s[1];
                        return { value: s[0] ? s[1] : void 0, done: !0 };
                      })([s, c]);
                    };
                  }
                },
              a =
                (this && this.__rest) ||
                function (e, t) {
                  var n = {};
                  for (var i in e)
                    Object.prototype.hasOwnProperty.call(e, i) &&
                      t.indexOf(i) < 0 &&
                      (n[i] = e[i]);
                  if (
                    null != e &&
                    'function' == typeof Object.getOwnPropertySymbols
                  ) {
                    var o = 0;
                    for (i = Object.getOwnPropertySymbols(e); o < i.length; o++)
                      t.indexOf(i[o]) < 0 &&
                        Object.prototype.propertyIsEnumerable.call(e, i[o]) &&
                        (n[i[o]] = e[i[o]]);
                  }
                  return n;
                };
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.request = void 0);
            var s = n(732),
              c = n(377),
              u = n(266);
            t.request = function (e) {
              return o(void 0, void 0, void 0, function () {
                var t = e.url,
                  n = e.data,
                  o = e.header,
                  l = void 0 === o ? {} : o,
                  d = e.method,
                  p = void 0 === d ? 'GET' : d,
                  h = e.dataType,
                  f = e.responseType,
                  g = a(e, [
                    'url',
                    'data',
                    'header',
                    'method',
                    'dataType',
                    'responseType',
                  ]);
                return r(this, function (e) {
                  return (0, u.isBrowser)()
                    ? [
                        2,
                        (0, c.requestXHR)(t, n, {
                          headers: l,
                          method: p,
                          responseType: f,
                          dataType: h,
                        }),
                      ]
                    : (0, u.isMiniProgram)()
                      ? [
                          2,
                          (0, s.requestWeapp)(
                            i(
                              {
                                url: t,
                                data: n,
                                header: l,
                                method: p,
                                dataType: h,
                                responseType: f,
                              },
                              g
                            )
                          ),
                        ]
                      : (console.debug('unsupport env'), [2]);
                });
              });
            };
          },
          732: function (e, t, n) {
            var i =
                (this && this.__assign) ||
                function () {
                  return (
                    (i =
                      Object.assign ||
                      function (e) {
                        for (var t, n = 1, i = arguments.length; n < i; n++)
                          for (var o in (t = arguments[n]))
                            Object.prototype.hasOwnProperty.call(t, o) &&
                              (e[o] = t[o]);
                        return e;
                      }),
                    i.apply(this, arguments)
                  );
                },
              o =
                (this && this.__awaiter) ||
                function (e, t, n, i) {
                  return new (n || (n = Promise))(function (o, r) {
                    function a(e) {
                      try {
                        c(i.next(e));
                      } catch (t) {
                        r(t);
                      }
                    }
                    function s(e) {
                      try {
                        c(i.throw(e));
                      } catch (t) {
                        r(t);
                      }
                    }
                    function c(e) {
                      var t;
                      e.done
                        ? o(e.value)
                        : ((t = e.value),
                          t instanceof n
                            ? t
                            : new n(function (e) {
                                e(t);
                              })).then(a, s);
                    }
                    c((i = i.apply(e, t || [])).next());
                  });
                },
              r =
                (this && this.__generator) ||
                function (e, t) {
                  var n,
                    i,
                    o,
                    r,
                    a = {
                      label: 0,
                      sent: function () {
                        if (1 & o[0]) throw o[1];
                        return o[1];
                      },
                      trys: [],
                      ops: [],
                    };
                  return (
                    (r = { next: s(0), throw: s(1), return: s(2) }),
                    'function' == typeof Symbol &&
                      (r[Symbol.iterator] = function () {
                        return this;
                      }),
                    r
                  );
                  function s(s) {
                    return function (c) {
                      return (function (s) {
                        if (n)
                          throw new TypeError(
                            'Generator is already executing.'
                          );
                        for (; r && ((r = 0), s[0] && (a = 0)), a; )
                          try {
                            if (
                              ((n = 1),
                              i &&
                                (o =
                                  2 & s[0]
                                    ? i.return
                                    : s[0]
                                      ? i.throw ||
                                        ((o = i.return) && o.call(i), 0)
                                      : i.next) &&
                                !(o = o.call(i, s[1])).done)
                            )
                              return o;
                            switch (
                              ((i = 0), o && (s = [2 & s[0], o.value]), s[0])
                            ) {
                              case 0:
                              case 1:
                                o = s;
                                break;
                              case 4:
                                return a.label++, { value: s[1], done: !1 };
                              case 5:
                                a.label++, (i = s[1]), (s = [0]);
                                continue;
                              case 7:
                                (s = a.ops.pop()), a.trys.pop();
                                continue;
                              default:
                                if (
                                  !(
                                    (o =
                                      (o = a.trys).length > 0 &&
                                      o[o.length - 1]) ||
                                    (6 !== s[0] && 2 !== s[0])
                                  )
                                ) {
                                  a = 0;
                                  continue;
                                }
                                if (
                                  3 === s[0] &&
                                  (!o || (s[1] > o[0] && s[1] < o[3]))
                                ) {
                                  a.label = s[1];
                                  break;
                                }
                                if (6 === s[0] && a.label < o[1]) {
                                  (a.label = o[1]), (o = s);
                                  break;
                                }
                                if (o && a.label < o[2]) {
                                  (a.label = o[2]), a.ops.push(s);
                                  break;
                                }
                                o[2] && a.ops.pop(), a.trys.pop();
                                continue;
                            }
                            s = t.call(e, a);
                          } catch (c) {
                            (s = [6, c]), (i = 0);
                          } finally {
                            n = o = 0;
                          }
                        if (5 & s[0]) throw s[1];
                        return { value: s[0] ? s[1] : void 0, done: !0 };
                      })([s, c]);
                    };
                  }
                };
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.requestWeapp = function (e) {
                return o(this, void 0, void 0, function () {
                  var t;
                  return r(this, function (n) {
                    switch (n.label) {
                      case 0:
                        n.trys.push([0, 5, 6, 7]), (n.label = 1);
                      case 1:
                        return c >= s ? [4, (0, a.startBlocking)()] : [3, 3];
                      case 2:
                        return n.sent(), [3, 1];
                      case 3:
                        return (
                          c++,
                          [
                            4,
                            new Promise(function (t, n) {
                              $n.request(
                                i(i({}, e), {
                                  success: function (e) {
                                    t(e);
                                  },
                                  fail: function (e) {
                                    n(e);
                                  },
                                })
                              );
                            }),
                          ]
                        );
                      case 4:
                        return [2, n.sent()];
                      case 5:
                        return (t = n.sent()), [2, Promise.reject(t)];
                      case 6:
                        return c--, (0, a.resolveFirstBlock)(), [7];
                      case 7:
                        return [2];
                    }
                  });
                });
              });
            var a = n(640),
              s = 2,
              c = 0;
          },
          377: function (e, t, n) {
            var i =
                (this && this.__awaiter) ||
                function (e, t, n, i) {
                  return new (n || (n = Promise))(function (o, r) {
                    function a(e) {
                      try {
                        c(i.next(e));
                      } catch (t) {
                        r(t);
                      }
                    }
                    function s(e) {
                      try {
                        c(i.throw(e));
                      } catch (t) {
                        r(t);
                      }
                    }
                    function c(e) {
                      var t;
                      e.done
                        ? o(e.value)
                        : ((t = e.value),
                          t instanceof n
                            ? t
                            : new n(function (e) {
                                e(t);
                              })).then(a, s);
                    }
                    c((i = i.apply(e, t || [])).next());
                  });
                },
              o =
                (this && this.__generator) ||
                function (e, t) {
                  var n,
                    i,
                    o,
                    r,
                    a = {
                      label: 0,
                      sent: function () {
                        if (1 & o[0]) throw o[1];
                        return o[1];
                      },
                      trys: [],
                      ops: [],
                    };
                  return (
                    (r = { next: s(0), throw: s(1), return: s(2) }),
                    'function' == typeof Symbol &&
                      (r[Symbol.iterator] = function () {
                        return this;
                      }),
                    r
                  );
                  function s(s) {
                    return function (c) {
                      return (function (s) {
                        if (n)
                          throw new TypeError(
                            'Generator is already executing.'
                          );
                        for (; r && ((r = 0), s[0] && (a = 0)), a; )
                          try {
                            if (
                              ((n = 1),
                              i &&
                                (o =
                                  2 & s[0]
                                    ? i.return
                                    : s[0]
                                      ? i.throw ||
                                        ((o = i.return) && o.call(i), 0)
                                      : i.next) &&
                                !(o = o.call(i, s[1])).done)
                            )
                              return o;
                            switch (
                              ((i = 0), o && (s = [2 & s[0], o.value]), s[0])
                            ) {
                              case 0:
                              case 1:
                                o = s;
                                break;
                              case 4:
                                return a.label++, { value: s[1], done: !1 };
                              case 5:
                                a.label++, (i = s[1]), (s = [0]);
                                continue;
                              case 7:
                                (s = a.ops.pop()), a.trys.pop();
                                continue;
                              default:
                                if (
                                  !(
                                    (o =
                                      (o = a.trys).length > 0 &&
                                      o[o.length - 1]) ||
                                    (6 !== s[0] && 2 !== s[0])
                                  )
                                ) {
                                  a = 0;
                                  continue;
                                }
                                if (
                                  3 === s[0] &&
                                  (!o || (s[1] > o[0] && s[1] < o[3]))
                                ) {
                                  a.label = s[1];
                                  break;
                                }
                                if (6 === s[0] && a.label < o[1]) {
                                  (a.label = o[1]), (o = s);
                                  break;
                                }
                                if (o && a.label < o[2]) {
                                  (a.label = o[2]), a.ops.push(s);
                                  break;
                                }
                                o[2] && a.ops.pop(), a.trys.pop();
                                continue;
                            }
                            s = t.call(e, a);
                          } catch (c) {
                            (s = [6, c]), (i = 0);
                          } finally {
                            n = o = 0;
                          }
                        if (5 & s[0]) throw s[1];
                        return { value: s[0] ? s[1] : void 0, done: !0 };
                      })([s, c]);
                    };
                  }
                };
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.default = u),
              (t.requestXHR = function (e) {
                return i(this, arguments, void 0, function (e, t, n) {
                  var l,
                    d = this;
                  return (
                    void 0 === t && (t = {}),
                    void 0 === n && (n = {}),
                    o(this, function (p) {
                      switch (p.label) {
                        case 0:
                          return (
                            p.trys.push([0, 2, 3, 4]),
                            [
                              4,
                              new Promise(function (l, p) {
                                return i(d, void 0, void 0, function () {
                                  var i, d, h, f, g, _;
                                  return o(this, function (o) {
                                    switch (o.label) {
                                      case 0:
                                        return c >= s
                                          ? [4, (0, a.startBlocking)()]
                                          : [3, 2];
                                      case 1:
                                        return o.sent(), [3, 0];
                                      case 2:
                                        return (
                                          c++,
                                          (i = n.method),
                                          (d = n.headers),
                                          (h = void 0 === d ? {} : d),
                                          (f = n.responseType),
                                          (g = void 0 === f ? 'json' : f),
                                          (i = (i || 'get').toUpperCase()),
                                          Object.assign(h, {
                                            'Content-type': 'application/json',
                                          }),
                                          ((_ =
                                            new window.XMLHttpRequest()).responseType =
                                            g),
                                          (_.timeout = 1e4),
                                          (_.onreadystatechange = function () {
                                            4 === _.readyState &&
                                              (200 === _.status
                                                ? l({ data: _.response })
                                                : p({
                                                    code: _.status,
                                                    msg: _.statusText,
                                                  }));
                                          }),
                                          (_.ontimeout = function (e) {
                                            p({
                                              code: _.status,
                                              msg: _.statusText,
                                            });
                                          }),
                                          (_.onloadend = function () {
                                            _ &&
                                              (u(
                                                function (e) {
                                                  l(e);
                                                },
                                                function (e) {
                                                  p(e);
                                                },
                                                {
                                                  status: _.status,
                                                  statusText: _.statusText,
                                                }
                                              ),
                                              (_ = null));
                                          }),
                                          (_.onabort = function () {
                                            _ &&
                                              (p(new Error('Request aborted')),
                                              (_ = null));
                                          }),
                                          (_.onerror = function () {
                                            p(new Error('Network Error')),
                                              (_ = null);
                                          }),
                                          'GET' === i
                                            ? (e = ''
                                                .concat(e)
                                                .concat(
                                                  -1 === e.indexOf('?')
                                                    ? '?'
                                                    : '&'
                                                )
                                                .concat(r.default.stringify(t)))
                                            : 'POST' === i &&
                                              (t = JSON.stringify(t)),
                                          _.open(i, e, !0),
                                          Object.keys(h).forEach(function (e) {
                                            _.setRequestHeader(e, h[e]);
                                          }),
                                          _.send('POST' === i ? t : null),
                                          [2]
                                        );
                                    }
                                  });
                                });
                              }),
                            ]
                          );
                        case 1:
                          return [2, p.sent()];
                        case 2:
                          throw ((l = p.sent()), new Error(l));
                        case 3:
                          return c--, (0, a.resolveFirstBlock)(), [7];
                        case 4:
                          return [2];
                      }
                    })
                  );
                });
              });
            var r = n(383),
              a = n(640),
              s = 2,
              c = 0;
            function u(e, t, n) {
              n.status
                ? t(new Error('Request failed with status code ' + n.status))
                : e(n);
            }
          },
          172: (e, t) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.RAINBOW_BLACK_LIST_API = void 0),
              (t.RAINBOW_BLACK_LIST_API =
                'https://jsonschema.qpic.cn/87084b1b6d263426b92926cfa5fa23af/18f29786d25587b5eb162d5e9f724b1e/blackList');
          },
          266: (e, t) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.date2ISOString =
                t.stringifyPlus =
                t.noop =
                t.isBrowser =
                t.isMiniProgram =
                t.isPlainObject =
                t.appendParams =
                  void 0),
              (t.appendParams = function (e, n) {
                void 0 === n && (n = {});
                var i = [];
                return (
                  Object.keys(n).forEach(function (e) {
                    var o = n[e];
                    if (void 0 !== o) {
                      if ((0, t.isPlainObject)(o))
                        try {
                          o = JSON.stringify(o);
                        } catch (r) {}
                      i.push(''.concat(e, '=').concat(encodeURIComponent(o)));
                    }
                  }),
                  i.length
                    ? (e.indexOf('?') > -1
                        ? ''.concat(e, '&')
                        : ''.concat(e, '?')) + i.join('&')
                    : e
                );
              }),
              (t.isPlainObject = function (e) {
                if ('object' != typeof e || null === e) return !1;
                var t = Object.getPrototypeOf(e);
                if (null === t) return !0;
                for (var n = t; null !== Object.getPrototypeOf(n); )
                  n = Object.getPrototypeOf(n);
                return t === n;
              }),
              (t.isMiniProgram = function () {
                try {
                  return !(
                    !(null == $n ? void 0 : $n.request) ||
                    !(null == $n ? void 0 : $n.connectSocket)
                  );
                } catch (e) {
                  return !1;
                }
              }),
              (t.isBrowser = function () {
                try {
                  return (
                    !(0, t.isMiniProgram)() &&
                    'undefined' != typeof window &&
                    void 0 !== window.document
                  );
                } catch (e) {
                  return !1;
                }
              }),
              (t.noop = function () {});
            var n = function () {
              var e = new WeakSet();
              return function (t, n) {
                if (n instanceof Error)
                  return 'Error.message: '
                    .concat(n.message, ' \n  Error.stack: ')
                    .concat(n.stack);
                if ('object' == typeof n && null !== n) {
                  if (e.has(n)) return '[Circular '.concat(t || 'root', ']');
                  e.add(n);
                }
                return n;
              };
            };
            (t.stringifyPlus = function (e) {
              if ('string' == typeof e) return e;
              try {
                return e instanceof Error
                  ? (JSON.stringify(e, n()) || 'undefined').replace(/"/gim, '')
                  : JSON.stringify(e, n()) || 'undefined';
              } catch (t) {
                return 'error happen when aegis stringify: \n '
                  .concat(t.message, ' \n ')
                  .concat(t.stack);
              }
            }),
              (t.date2ISOString = function () {
                var e,
                  t = new Date(),
                  n = t.toISOString(),
                  i = t.getTimezoneOffset() / 60;
                return (
                  (e =
                    i < 0
                      ? i > -10
                        ? '+0'.concat(Math.abs(100 * i))
                        : '+'.concat(Math.abs(100 * i))
                      : i >= 10
                        ? '-'.concat(100 * i)
                        : '-0'.concat(100 * i)),
                  n.replace('Z', e)
                );
              });
          },
          383: (e, t, n) => {
            Object.defineProperty(t, '__esModule', { value: !0 });
            var i = n(266);
            t.default = {
              stringify: function (e) {
                return e
                  ? Object.keys(e)
                      .map(function (t) {
                        var n = e[t];
                        if ((0, i.isPlainObject)(n)) n = JSON.stringify(n);
                        else {
                          if ('string' != typeof n && 'number' != typeof n)
                            return '';
                          n = +n;
                        }
                        return (
                          encodeURIComponent(t) + '=' + encodeURIComponent(n)
                        );
                      })
                      .filter(function (e) {
                        return e.length > 0;
                      })
                      .join('&')
                  : '';
              },
            };
          },
          640: (e, t) => {
            Object.defineProperty(t, '__esModule', { value: !0 }),
              (t.startBlocking = t.resolveFirstBlock = void 0);
            var n = [];
            (t.startBlocking = function () {
              var e,
                t = new Promise(function (t) {
                  e = t;
                });
              return n.push({ promise: t, resolve: e }), t;
            }),
              (t.resolveFirstBlock = function () {
                n.length && (n[0].resolve(), n.shift());
              });
          },
        },
        t = {};
      function n(i) {
        var o = t[i];
        if (void 0 !== o) return o.exports;
        var r = (t[i] = { exports: {} });
        return e[i].call(r.exports, r, r.exports, n), r.exports;
      }
      var i = {};
      return (
        (() => {
          var e = i;
          Object.defineProperty(e, '__esModule', { value: !0 });
          var t = n(902),
            o = null;
          e.default = function (e) {
            return o || (o = new t.default(e)), o;
          };
        })(),
        i
      );
    })()
  ),
  dL = sp(
    function e(t) {
      op(this, e), (this._emitter = t.emitter), (this._logger = lL());
    },
    [
      {
        key: 'onError',
        value: function (e) {
          this._logger.error('TUICallEvent.onError', {
            text: { error: e },
            type: 'event',
          }),
            this._emitter.emit(CR.ERROR, e);
        },
      },
      {
        key: 'onCallBegin',
        value: function (e) {
          this._logger.info('TUICallEvent.onCallBegin', {
            text: { data: e },
            type: 'event',
          }),
            this._emitter.emit(CR.ON_CALL_BEGIN, e);
        },
      },
      {
        key: 'onCallEnd',
        value: function (e) {
          this._logger.info('TUICallEvent.onCallEnd', {
            text: { data: e },
            type: 'event',
          });
          var t = e.userID,
            n = e.callEnd,
            i = e.message,
            o = e.roomID,
            r = e.callMediaType,
            a = e.callRole,
            s = e.totalTime;
          this._emitter.emit(CR.CALL_END, {
            userID: t,
            callEnd: n,
            message: i,
            roomID: o,
            callMediaType: r,
            callRole: a,
            totalTime: s,
          });
        },
      },
      {
        key: 'onInvited',
        value: function (e) {
          this._logger.info('TUICallEvent.onInvited', {
            text: { data: e },
            type: 'event',
          }),
            this._emitter.emit(CR.INVITED, e),
            this._emitter.emit(CR.ON_CALL_RECEIVED, e);
        },
      },
      {
        key: 'onLineBusy',
        value: function (e) {
          this._logger.info('TUICallEvent.onLineBusy', {
            text: { data: e },
            type: 'event',
          });
          var t = e.inviteID,
            n = e.invitee,
            i = e.userID;
          this._emitter.emit(CR.LINE_BUSY, {
            inviteID: t,
            invitee: n,
            userID: i,
            reason: 'line busy',
          });
        },
      },
      {
        key: 'onReject',
        value: function (e) {
          var t = e.inviteID,
            n = e.invitee,
            i = e.userID;
          this._emitter.emit(CR.REJECT, {
            inviteID: t,
            invitee: n,
            userID: i,
            reason: 'reject',
          });
        },
      },
      {
        key: 'onNoResp',
        value: function (e) {
          this._logger.info('TUICallEvent.onNoResp', {
            text: { data: e },
            type: 'event',
          });
          var t = e.groupID,
            n = void 0 === t ? '' : t,
            i = e.inviteID,
            o = e.sponsor,
            r = e.timeoutUserList,
            a = e.userIDList;
          this._emitter.emit(CR.NO_RESP, {
            groupID: n,
            inviteID: i,
            sponsor: o,
            timeoutUserList: r,
            userIDList: a,
          });
        },
      },
      {
        key: 'onCancel',
        value: function (e) {
          this._emitter.emit(CR.CALLING_CANCEL, e),
            this._emitter.emit(CR.ON_CALL_CANCELED, e);
        },
      },
      {
        key: 'onTimeout',
        value: function (e) {
          this._logger.info('TUICallEvent.onTimeout', {
            text: { data: e },
            type: 'event',
          });
          var t = e.inviteID,
            n = e.groupID,
            i = e.sponsor,
            o = e.timeoutUserList;
          this._emitter.emit(CR.CALLING_TIMEOUT, {
            groupID: n,
            inviteID: t,
            sponsor: i,
            timeoutUserList: o,
          });
        },
      },
      {
        key: 'onUserAccept',
        value: function (e) {
          this._logger.info('TUICallEvent.onUserAccept', {
            text: { data: e },
            type: 'event',
          });
          var t = e.userID,
            n = e.userList;
          this._emitter.emit(CR.USER_ACCEPT, { userID: t, userList: n });
        },
      },
      {
        key: 'onUserEnter',
        value: function (e) {
          this._logger.info('TUICallEvent.onUserEnter', {
            text: { data: e },
            type: 'event',
          });
          var t = e.userID,
            n = e.playerList;
          this._emitter.emit(CR.USER_ENTER, { userID: t, playerList: n });
        },
      },
      {
        key: 'onUserLeave',
        value: function (e) {
          this._logger.info('TUICallEvent.onUserLeave', {
            text: { data: e },
            type: 'event',
          });
          var t = e.userID,
            n = e.playerList;
          this._emitter.emit(CR.USER_LEAVE, { userID: t, playerList: n });
        },
      },
      {
        key: 'onUserUpdate',
        value: function (e) {
          var t = e.pusher,
            n = e.playerList;
          this._emitter.emit(CR.USER_UPDATE, { pusher: t, playerList: n });
        },
      },
      {
        key: 'onUserNetworkQualityChanged',
        value: function (e) {
          this._emitter.emit(CR.ON_USER_NETWORK_QUALITY_CHANGED, {
            networkQualityList: e,
          });
        },
      },
      {
        key: 'onSdkReady',
        value: function (e) {
          this._logger.info('TUICallEvent.onSdkReady', {
            text: { data: e },
            type: 'event',
          }),
            this._emitter.emit(CR.SDK_READY, e);
        },
      },
      {
        key: 'onKickedOut',
        value: function (e) {
          this._logger.info('TUICallEvent.onKickedOut', {
            text: { data: e },
            type: 'event',
          }),
            this._emitter.emit(CR.KICKED_OUT, e);
        },
      },
      {
        key: 'onCallMode',
        value: function (e) {
          this._logger.info('TUICallEvent.onCallMode', {
            text: { data: e },
            type: 'event',
          }),
            this._emitter.emit(CR.CALL_MODE, e);
        },
      },
      {
        key: 'onMessageSentByMe',
        value: function (e) {
          this._logger.info('TUICallEvent.onMessageSentByMe', {
            text: { data: e },
            type: 'event',
          }),
            this._emitter.emit(CR.MESSAGE_SENT_BY_ME, e);
        },
      },
      {
        key: 'onCallMessage',
        value: function (e) {
          var t;
          this._logger.info('TUICallEvent.onCallMessage', {
            text: { data: e },
            type: 'event',
          }),
            this._emitter.emit(
              CR.CALL_MESSAGE,
              null == e || null === (t = e.data) || void 0 === t
                ? void 0
                : t.message
            );
        },
      },
      {
        key: 'destroyed',
        value: function () {
          this._logger.info('TUICallEvent.destroyed', { type: 'api' }),
            (this._emitter = null);
        },
      },
    ]
  ),
  pL = {},
  hL = Ef;
pL.f = hL;
var fL = Dp,
  gL = fL,
  _L = lf,
  vL = pL,
  mL = Jf.f,
  yL = bp,
  IL = hh,
  ML = Ef,
  CL = y_,
  TL = Cv,
  EL = Dp,
  DL = bp,
  SL = jp,
  kL = Rp,
  RL = Rh,
  LL = kp,
  AL = lf,
  OL = fh,
  bL = tg,
  NL = ah,
  PL = Pf,
  wL = Ik,
  UL = Fp,
  GL = ly,
  xL = Bm,
  FL = I_,
  qL = aS,
  VL = $_,
  BL = Sp,
  HL = Jf,
  jL = Fm,
  KL = Np,
  WL = y_,
  zL = hC,
  $L = of,
  YL = Gg,
  JL = gf,
  XL = Ef,
  ZL = pL,
  QL = BI,
  eA = Xg,
  tA = Gm.forEach,
  nA = Ug('hidden'),
  iA = 'Symbol',
  oA = 'prototype',
  rA = eA.set,
  aA = eA.getterFor(iA),
  sA = Object[oA],
  cA = EL.Symbol,
  uA = cA && cA[oA],
  lA = EL.RangeError,
  dA = EL.TypeError,
  pA = EL.QObject,
  hA = BL.f,
  fA = HL.f,
  gA = qL.f,
  _A = KL.f,
  vA = SL([].push),
  mA = $L('symbols'),
  yA = $L('op-symbols'),
  IA = $L('wks'),
  MA = !pA || !pA[oA] || !pA[oA].findChild,
  CA = function (e, t, n) {
    var i = hA(sA, t);
    i && delete sA[t], fA(e, t, n), i && e !== sA && fA(sA, t, i);
  },
  TA =
    kL &&
    LL(function () {
      return (
        7 !==
        GL(
          fA({}, 'a', {
            get: function () {
              return fA(this, 'a', { value: 7 }).a;
            },
          })
        ).a
      );
    })
      ? CA
      : fA,
  EA = function (e, t) {
    var n = (mA[e] = GL(uA));
    return (
      rA(n, { type: iA, tag: e, description: t }), kL || (n.description = t), n
    );
  },
  DA = function (e, t, n) {
    e === sA && DA(yA, t, n), bL(e);
    var i = PL(t);
    return (
      bL(n),
      AL(mA, i)
        ? (n.enumerable
            ? (AL(e, nA) && e[nA][i] && (e[nA][i] = !1),
              (n = GL(n, { enumerable: UL(0, !1) })))
            : (AL(e, nA) || fA(e, nA, UL(1, GL(null))), (e[nA][i] = !0)),
          TA(e, i, n))
        : fA(e, i, n)
    );
  },
  SA = function (e, t) {
    bL(e);
    var n = NL(t),
      i = xL(n).concat(AA(n));
    return (
      tA(i, function (t) {
        (kL && !DL(kA, n, t)) || DA(e, t, n[t]);
      }),
      e
    );
  },
  kA = function (e) {
    var t = PL(e),
      n = DL(_A, this, t);
    return (
      !(this === sA && AL(mA, t) && !AL(yA, t)) &&
      (!(n || !AL(this, t) || !AL(mA, t) || (AL(this, nA) && this[nA][t])) || n)
    );
  },
  RA = function (e, t) {
    var n = NL(e),
      i = PL(t);
    if (n !== sA || !AL(mA, i) || AL(yA, i)) {
      var o = hA(n, i);
      return (
        !o || !AL(mA, i) || (AL(n, nA) && n[nA][i]) || (o.enumerable = !0), o
      );
    }
  },
  LA = function (e) {
    var t = gA(NL(e)),
      n = [];
    return (
      tA(t, function (e) {
        AL(mA, e) || AL(YL, e) || vA(n, e);
      }),
      n
    );
  },
  AA = function (e) {
    var t = e === sA,
      n = gA(t ? yA : NL(e)),
      i = [];
    return (
      tA(n, function (e) {
        !AL(mA, e) || (t && !AL(sA, e)) || vA(i, mA[e]);
      }),
      i
    );
  };
RL ||
  (WL(
    (uA = (cA = function () {
      if (OL(uA, this)) throw new dA('Symbol is not a constructor');
      var e =
          arguments.length && void 0 !== arguments[0]
            ? wL(arguments[0])
            : void 0,
        t = JL(e),
        n = function (e) {
          var i = void 0 === this ? EL : this;
          i === sA && DL(n, yA, e),
            AL(i, nA) && AL(i[nA], t) && (i[nA][t] = !1);
          var o = UL(1, e);
          try {
            TA(i, t, o);
          } catch (r) {
            if (!(r instanceof lA)) throw r;
            CA(i, t, o);
          }
        };
      return kL && MA && TA(sA, t, { configurable: !0, set: n }), EA(t, e);
    })[oA]),
    'toString',
    function () {
      return aA(this).tag;
    }
  ),
  WL(cA, 'withoutSetter', function (e) {
    return EA(JL(e), e);
  }),
  (KL.f = kA),
  (HL.f = DA),
  (jL.f = SA),
  (BL.f = RA),
  (FL.f = qL.f = LA),
  (VL.f = AA),
  (ZL.f = function (e) {
    return EA(XL(e), e);
  }),
  kL &&
    (zL(uA, 'description', {
      configurable: !0,
      get: function () {
        return aA(this).description;
      },
    }),
    WL(sA, 'propertyIsEnumerable', kA, { unsafe: !0 }))),
  TL(
    { global: !0, constructor: !0, wrap: !0, forced: !RL, sham: !RL },
    { Symbol: cA }
  ),
  tA(xL(IA), function (e) {
    !(function (e) {
      var t = gL.Symbol || (gL.Symbol = {});
      _L(t, e) || mL(t, e, { value: vL.f(e) });
    })(e);
  }),
  TL(
    { target: iA, stat: !0, forced: !RL },
    {
      useSetter: function () {
        MA = !0;
      },
      useSimple: function () {
        MA = !1;
      },
    }
  ),
  TL(
    { target: 'Object', stat: !0, forced: !RL, sham: !kL },
    {
      create: function (e, t) {
        return void 0 === t ? GL(e) : SA(GL(e), t);
      },
      defineProperty: DA,
      defineProperties: SA,
      getOwnPropertyDescriptor: RA,
    }
  ),
  TL({ target: 'Object', stat: !0, forced: !RL }, { getOwnPropertyNames: LA }),
  (function () {
    var e = IL('Symbol'),
      t = e && e.prototype,
      n = t && t.valueOf,
      i = ML('toPrimitive');
    t &&
      !t[i] &&
      CL(
        t,
        i,
        function (e) {
          return yL(n, this);
        },
        { arity: 1 }
      );
  })(),
  QL(cA, iA),
  (YL[nA] = !0);
var OA = Rh && !!Symbol.for && !!Symbol.keyFor,
  bA = Cv,
  NA = hh,
  PA = lf,
  wA = Ik,
  UA = of,
  GA = OA,
  xA = UA('string-to-symbol-registry'),
  FA = UA('symbol-to-string-registry');
bA(
  { target: 'Symbol', stat: !0, forced: !GA },
  {
    for: function (e) {
      var t = wA(e);
      if (PA(xA, t)) return xA[t];
      var n = NA('Symbol')(t);
      return (xA[t] = n), (FA[n] = t), n;
    },
  }
);
var qA = Cv,
  VA = lf,
  BA = Ph,
  HA = Uh,
  jA = OA,
  KA = of('symbol-to-string-registry');
qA(
  { target: 'Symbol', stat: !0, forced: !jA },
  {
    keyFor: function (e) {
      if (!BA(e)) throw new TypeError(HA(e) + ' is not a symbol');
      if (VA(KA, e)) return KA[e];
    },
  }
);
var WA = Ev,
  zA = ch,
  $A = $p,
  YA = Ik,
  JA = jp([].push),
  XA = Cv,
  ZA = hh,
  QA = eT,
  eO = bp,
  tO = jp,
  nO = kp,
  iO = ch,
  oO = Ph,
  rO = xM,
  aO = Rh,
  sO = String,
  cO = ZA('JSON', 'stringify'),
  uO = tO(/./.exec),
  lO = tO(''.charAt),
  dO = tO(''.charCodeAt),
  pO = tO(''.replace),
  hO = tO((1).toString),
  fO = /[\uD800-\uDFFF]/g,
  gO = /^[\uD800-\uDBFF]$/,
  _O = /^[\uDC00-\uDFFF]$/,
  vO =
    !aO ||
    nO(function () {
      var e = ZA('Symbol')('stringify detection');
      return (
        '[null]' !== cO([e]) || '{}' !== cO({ a: e }) || '{}' !== cO(Object(e))
      );
    }),
  mO = nO(function () {
    return (
      '"\\udf06\\ud834"' !== cO('\udf06\ud834') || '"\\udead"' !== cO('\udead')
    );
  }),
  yO = function (e, t) {
    var n = rO(arguments),
      i = (function (e) {
        if (zA(e)) return e;
        if (WA(e)) {
          for (var t = e.length, n = [], i = 0; i < t; i++) {
            var o = e[i];
            'string' == typeof o
              ? JA(n, o)
              : ('number' != typeof o &&
                  'Number' !== $A(o) &&
                  'String' !== $A(o)) ||
                JA(n, YA(o));
          }
          var r = n.length,
            a = !0;
          return function (e, t) {
            if (a) return (a = !1), t;
            if (WA(this)) return t;
            for (var i = 0; i < r; i++) if (n[i] === e) return t;
          };
        }
      })(t);
    if (iO(i) || (void 0 !== e && !oO(e)))
      return (
        (n[1] = function (e, t) {
          if ((iO(i) && (t = eO(i, this, sO(e), t)), !oO(t))) return t;
        }),
        QA(cO, null, n)
      );
  },
  IO = function (e, t, n) {
    var i = lO(n, t - 1),
      o = lO(n, t + 1);
    return (uO(gO, e) && !uO(_O, o)) || (uO(_O, e) && !uO(gO, i))
      ? '\\u' + hO(dO(e, 0), 16)
      : e;
  };
cO &&
  XA(
    { target: 'JSON', stat: !0, arity: 3, forced: vO || mO },
    {
      stringify: function (e, t, n) {
        var i = rO(arguments),
          o = QA(vO ? yO : cO, null, i);
        return mO && 'string' == typeof o ? pO(o, fO, IO) : o;
      },
    }
  );
var MO = $_,
  CO = sf;
Cv(
  {
    target: 'Object',
    stat: !0,
    forced:
      !Rh ||
      kp(function () {
        MO.f(1);
      }),
  },
  {
    getOwnPropertySymbols: function (e) {
      var t = MO.f;
      return t ? t(CO(e)) : [];
    },
  }
);
var TO = Cv,
  EO = Rp,
  DO = jp,
  SO = lf,
  kO = ch,
  RO = fh,
  LO = Ik,
  AO = hC,
  OO = rv,
  bO = Dp.Symbol,
  NO = bO && bO.prototype;
if (EO && kO(bO) && (!('description' in NO) || void 0 !== bO().description)) {
  var PO = {},
    wO = function () {
      var e =
          arguments.length < 1 || void 0 === arguments[0]
            ? void 0
            : LO(arguments[0]),
        t = RO(NO, this) ? new bO(e) : void 0 === e ? bO() : bO(e);
      return '' === e && (PO[t] = !0), t;
    };
  OO(wO, bO), (wO.prototype = NO), (NO.constructor = wO);
  var UO =
      'Symbol(description detection)' === String(bO('description detection')),
    GO = DO(NO.valueOf),
    xO = DO(NO.toString),
    FO = /^Symbol\((.*)\)[^)]+$/,
    qO = DO(''.replace),
    VO = DO(''.slice);
  AO(NO, 'description', {
    configurable: !0,
    get: function () {
      var e = GO(this);
      if (SO(PO, e)) return '';
      var t = xO(e),
        n = UO ? VO(t, 7, -1) : qO(t, FO, '$1');
      return '' === n ? void 0 : n;
    },
  }),
    TO({ global: !0, constructor: !0, forced: !0 }, { Symbol: wO });
}
var BO = {
  UNKNOWN: 65535,
  NO_NETWORK: 2805,
  FAILURE_SWITCH_TO_AUDIO: 60001,
  FAILURE_SWITCH_TO_VIDEO: 60002,
  ERROR_PACKAGE_NOT_PURCHASED: -1001,
  ERROR_PACKAGE_NOT_SUPPORTED: -1002,
  ERROR_TIM_VERSION_OUTDATED: -1003,
  ERROR_PERMISSION_DENIED: -1101,
  ERROR_GET_DEVICE_LIST_FAIL: -1102,
  ERROR_INIT_FAIL: -1201,
  ERROR_PARAM_INVALID: -1202,
  ERROR_REQUEST_REFUSED: -1203,
  ERROR_REQUEST_REPEATED: -1204,
  ERROR_SCENE_NOT_SUPPORTED: -1205,
  INVALID_PARAMETER_REQUIRED: -120200,
  INVALID_PARAMETER_TYPE: -120201,
  INVALID_PARAMETER_EMPTY: -120202,
  INVALID_PARAMETER_RANGE: -120203,
  ERROR_SIGNALING_SEND_FAIL: -1401,
  ERROR_INVALID_INVITEID: 8010,
  ERROR_INVALID_SEND_FAIL: 8021,
  ERROR_BLACKLIST: 20007,
};
Cv({ target: 'Array', stat: !0 }, { isArray: Ev });
var HO = Cv,
  jO = Qp,
  KO = ah,
  WO = Ey,
  zO = jp([].join);
HO(
  { target: 'Array', proto: !0, forced: jO !== Object || !WO('join', ',') },
  {
    join: function (e) {
      return zO(KO(this), void 0 === e ? ',' : e);
    },
  }
);
var $O = tg,
  YO = function () {
    var e = $O(this),
      t = '';
    return (
      e.hasIndices && (t += 'd'),
      e.global && (t += 'g'),
      e.ignoreCase && (t += 'i'),
      e.multiline && (t += 'm'),
      e.dotAll && (t += 's'),
      e.unicode && (t += 'u'),
      e.unicodeSets && (t += 'v'),
      e.sticky && (t += 'y'),
      t
    );
  },
  JO = bp,
  XO = lf,
  ZO = fh,
  QO = YO,
  eb = RegExp.prototype,
  tb = Cg.PROPER,
  nb = y_,
  ib = tg,
  ob = Ik,
  rb = kp,
  ab = 'toString',
  sb = RegExp.prototype,
  cb = sb[ab],
  ub = rb(function () {
    return '/a/b' !== cb.call({ source: 'a', flags: 'b' });
  }),
  lb = tb && cb.name !== ab;
(ub || lb) &&
  nb(
    sb,
    ab,
    function () {
      var e = ib(this);
      return (
        '/' +
        ob(e.source) +
        '/' +
        ob(
          (function (e) {
            var t = e.flags;
            return void 0 !== t || 'flags' in eb || XO(e, 'flags') || !ZO(eb, e)
              ? t
              : JO(QO, e);
          })(e)
        )
      );
    },
    { unsafe: !0 }
  );
var db = Cv,
  pb = Gm.findIndex,
  hb = _y,
  fb = 'findIndex',
  gb = !0;
fb in [] &&
  Array(1)[fb](function () {
    gb = !1;
  }),
  db(
    { target: 'Array', proto: !0, forced: gb },
    {
      findIndex: function (e) {
        return pb(this, e, arguments.length > 1 ? arguments[1] : void 0);
      },
    }
  ),
  hb(fb);
var _b = E_,
  vb = Ik,
  mb = ih,
  yb = RangeError,
  Ib = function (e) {
    var t = vb(mb(this)),
      n = '',
      i = _b(e);
    if (i < 0 || i === 1 / 0) throw new yb('Wrong number of repetitions');
    for (; i > 0; (i >>>= 1) && (t += t)) 1 & i && (n += t);
    return n;
  },
  Mb = jp,
  Cb = O_,
  Tb = Ik,
  Eb = ih,
  Db = Mb(Ib),
  Sb = Mb(''.slice),
  kb = Math.ceil,
  Rb = function (e) {
    return function (t, n, i) {
      var o,
        r,
        a = Tb(Eb(t)),
        s = Cb(n),
        c = a.length,
        u = void 0 === i ? ' ' : Tb(i);
      return s <= c || '' === u
        ? a
        : ((r = Db(u, kb((o = s - c) / u.length))).length > o &&
            (r = Sb(r, 0, o)),
          e ? a + r : r + a);
    };
  },
  Lb = jp,
  Ab = kp,
  Ob = [Rb(!1), Rb(!0)][0],
  bb = RangeError,
  Nb = isFinite,
  Pb = Math.abs,
  wb = Date.prototype,
  Ub = wb.toISOString,
  Gb = Lb(wb.getTime),
  xb = Lb(wb.getUTCDate),
  Fb = Lb(wb.getUTCFullYear),
  qb = Lb(wb.getUTCHours),
  Vb = Lb(wb.getUTCMilliseconds),
  Bb = Lb(wb.getUTCMinutes),
  Hb = Lb(wb.getUTCMonth),
  jb = Lb(wb.getUTCSeconds),
  Kb =
    Ab(function () {
      return '0385-07-25T07:06:39.999Z' !== Ub.call(new Date(-50000000000001));
    }) ||
    !Ab(function () {
      Ub.call(new Date(NaN));
    })
      ? function () {
          if (!Nb(Gb(this))) throw new bb('Invalid time value');
          var e = this,
            t = Fb(e),
            n = Vb(e),
            i = t < 0 ? '-' : t > 9999 ? '+' : '';
          return (
            i +
            Ob(Pb(t), i ? 6 : 4, 0) +
            '-' +
            Ob(Hb(e) + 1, 2, 0) +
            '-' +
            Ob(xb(e), 2, 0) +
            'T' +
            Ob(qb(e), 2, 0) +
            ':' +
            Ob(Bb(e), 2, 0) +
            ':' +
            Ob(jb(e), 2, 0) +
            '.' +
            Ob(n, 3, 0) +
            'Z'
          );
        }
      : Ub;
Cv(
  { target: 'Date', proto: !0, forced: Date.prototype.toISOString !== Kb },
  { toISOString: Kb }
);
var Wb = jp((1).valueOf),
  zb = '\t\n\v\f\r                　\u2028\u2029\ufeff',
  $b = ih,
  Yb = Ik,
  Jb = zb,
  Xb = jp(''.replace),
  Zb = RegExp('^[' + Jb + ']+'),
  Qb = RegExp('(^|[^' + Jb + '])[' + Jb + ']+$'),
  eN = function (e) {
    return function (t) {
      var n = Yb($b(t));
      return 1 & e && (n = Xb(n, Zb, '')), 2 & e && (n = Xb(n, Qb, '$1')), n;
    };
  },
  tN = { start: eN(1), end: eN(2), trim: eN(3) },
  nN = Cv,
  iN = Rp,
  oN = Dp,
  rN = fL,
  aN = jp,
  sN = fv,
  cN = lf,
  uN = xS,
  lN = fh,
  dN = Ph,
  pN = Of,
  hN = kp,
  fN = I_.f,
  gN = Sp.f,
  _N = Jf.f,
  vN = Wb,
  mN = tN.trim,
  yN = 'Number',
  IN = oN[yN];
rN[yN];
var MN = IN.prototype,
  CN = oN.TypeError,
  TN = aN(''.slice),
  EN = aN(''.charCodeAt),
  DN = sN(yN, !IN(' 0o1') || !IN('0b1') || IN('+0x1')),
  SN = function (e) {
    var t,
      n,
      i =
        arguments.length < 1
          ? 0
          : IN(
              'bigint' == typeof (n = pN(e, 'number'))
                ? n
                : (function (e) {
                    var t,
                      n,
                      i,
                      o,
                      r,
                      a,
                      s,
                      c,
                      u = pN(e, 'number');
                    if (dN(u))
                      throw new CN('Cannot convert a Symbol value to a number');
                    if ('string' == typeof u && u.length > 2)
                      if (((u = mN(u)), 43 === (t = EN(u, 0)) || 45 === t)) {
                        if (88 === (n = EN(u, 2)) || 120 === n) return NaN;
                      } else if (48 === t) {
                        switch (EN(u, 1)) {
                          case 66:
                          case 98:
                            (i = 2), (o = 49);
                            break;
                          case 79:
                          case 111:
                            (i = 8), (o = 55);
                            break;
                          default:
                            return +u;
                        }
                        for (a = (r = TN(u, 2)).length, s = 0; s < a; s++)
                          if ((c = EN(r, s)) < 48 || c > o) return NaN;
                        return parseInt(r, i);
                      }
                    return +u;
                  })(n)
            );
    return lN(MN, (t = this)) &&
      hN(function () {
        vN(t);
      })
      ? uN(Object(i), this, SN)
      : i;
  };
(SN.prototype = MN),
  DN && (MN.constructor = SN),
  nN({ global: !0, constructor: !0, wrap: !0, forced: DN }, { Number: SN }),
  DN &&
    (function (e, t) {
      for (
        var n,
          i = iN
            ? fN(t)
            : 'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range'.split(
                ','
              ),
          o = 0;
        i.length > o;
        o++
      )
        cN(t, (n = i[o])) && !cN(e, n) && _N(e, n, gN(t, n));
    })(rN[yN], IN);
var kN = eT,
  RN = qh,
  LN = tg;
Cv(
  {
    target: 'Reflect',
    stat: !0,
    forced: !kp(function () {
      Reflect.apply(function () {});
    }),
  },
  {
    apply: function (e, t, n) {
      return kN(RN(e), t, LN(n));
    },
  }
);
var AN,
  ON,
  bN = kp,
  NN = Dp.RegExp,
  PN = bN(function () {
    var e = NN('a', 'y');
    return (e.lastIndex = 2), null !== e.exec('abcd');
  }),
  wN =
    PN ||
    bN(function () {
      return !NN('a', 'y').sticky;
    }),
  UN = {
    BROKEN_CARET:
      PN ||
      bN(function () {
        var e = NN('^r', 'gy');
        return (e.lastIndex = 2), null !== e.exec('str');
      }),
    MISSED_STICKY: wN,
    UNSUPPORTED_Y: PN,
  },
  GN = kp,
  xN = Dp.RegExp,
  FN = GN(function () {
    var e = xN('.', 's');
    return !(e.dotAll && e.test('\n') && 's' === e.flags);
  }),
  qN = kp,
  VN = Dp.RegExp,
  BN = qN(function () {
    var e = VN('(?<a>b)', 'g');
    return 'b' !== e.exec('b').groups.a || 'bc' !== 'b'.replace(e, '$<a>c');
  }),
  HN = bp,
  jN = jp,
  KN = Ik,
  WN = YO,
  zN = UN,
  $N = ly,
  YN = Xg.get,
  JN = FN,
  XN = BN,
  ZN = of('native-string-replace', String.prototype.replace),
  QN = RegExp.prototype.exec,
  eP = QN,
  tP = jN(''.charAt),
  nP = jN(''.indexOf),
  iP = jN(''.replace),
  oP = jN(''.slice),
  rP =
    ((ON = /b*/g),
    HN(QN, (AN = /a/), 'a'),
    HN(QN, ON, 'a'),
    0 !== AN.lastIndex || 0 !== ON.lastIndex),
  aP = zN.BROKEN_CARET,
  sP = void 0 !== /()??/.exec('')[1];
(rP || sP || aP || JN || XN) &&
  (eP = function (e) {
    var t,
      n,
      i,
      o,
      r,
      a,
      s,
      c = this,
      u = YN(c),
      l = KN(e),
      d = u.raw;
    if (d)
      return (
        (d.lastIndex = c.lastIndex),
        (t = HN(eP, d, l)),
        (c.lastIndex = d.lastIndex),
        t
      );
    var p = u.groups,
      h = aP && c.sticky,
      f = HN(WN, c),
      g = c.source,
      _ = 0,
      v = l;
    if (
      (h &&
        ((f = iP(f, 'y', '')),
        -1 === nP(f, 'g') && (f += 'g'),
        (v = oP(l, c.lastIndex)),
        c.lastIndex > 0 &&
          (!c.multiline || (c.multiline && '\n' !== tP(l, c.lastIndex - 1))) &&
          ((g = '(?: ' + g + ')'), (v = ' ' + v), _++),
        (n = new RegExp('^(?:' + g + ')', f))),
      sP && (n = new RegExp('^' + g + '$(?!\\s)', f)),
      rP && (i = c.lastIndex),
      (o = HN(QN, h ? n : c, v)),
      h
        ? o
          ? ((o.input = oP(o.input, _)),
            (o[0] = oP(o[0], _)),
            (o.index = c.lastIndex),
            (c.lastIndex += o[0].length))
          : (c.lastIndex = 0)
        : rP && o && (c.lastIndex = c.global ? o.index + o[0].length : i),
      sP &&
        o &&
        o.length > 1 &&
        HN(ZN, o[0], n, function () {
          for (r = 1; r < arguments.length - 2; r++)
            void 0 === arguments[r] && (o[r] = void 0);
        }),
      o && p)
    )
      for (o.groups = a = $N(null), r = 0; r < p.length; r++)
        a[(s = p[r])[0]] = o[s[1]];
    return o;
  });
var cP = eP;
Cv({ target: 'RegExp', proto: !0, forced: /./.exec !== cP }, { exec: cP });
var uP = bp,
  lP = y_,
  dP = cP,
  pP = kp,
  hP = Ef,
  fP = gg,
  gP = hP('species'),
  _P = RegExp.prototype,
  vP = function (e, t, n, i) {
    var o = hP(e),
      r = !pP(function () {
        var t = {};
        return (
          (t[o] = function () {
            return 7;
          }),
          7 !== ''[e](t)
        );
      }),
      a =
        r &&
        !pP(function () {
          var t = !1,
            n = /a/;
          return (
            'split' === e &&
              (((n = {}).constructor = {}),
              (n.constructor[gP] = function () {
                return n;
              }),
              (n.flags = ''),
              (n[o] = /./[o])),
            (n.exec = function () {
              return (t = !0), null;
            }),
            n[o](''),
            !t
          );
        });
    if (!r || !a || n) {
      var s = /./[o],
        c = t(o, ''[e], function (e, t, n, i, o) {
          var a = t.exec;
          return a === dP || a === _P.exec
            ? r && !o
              ? { done: !0, value: uP(s, t, n, i) }
              : { done: !0, value: uP(e, n, t, i) }
            : { done: !1 };
        });
      lP(String.prototype, e, c[0]), lP(_P, o, c[1]);
    }
    i && fP(_P[o], 'sham', !0);
  },
  mP = Lk.charAt,
  yP = function (e, t, n) {
    return t + (n ? mP(e, t).length : 1);
  },
  IP = bp,
  MP = tg,
  CP = ch,
  TP = $p,
  EP = cP,
  DP = TypeError,
  SP = function (e, t) {
    var n = e.exec;
    if (CP(n)) {
      var i = IP(n, e, t);
      return null !== i && MP(i), i;
    }
    if ('RegExp' === TP(e)) return IP(EP, e, t);
    throw new DP('RegExp#exec called on incompatible receiver');
  },
  kP = bp,
  RP = tg,
  LP = eh,
  AP = O_,
  OP = Ik,
  bP = ih,
  NP = Hh,
  PP = yP,
  wP = SP;
vP('match', function (e, t, n) {
  return [
    function (t) {
      var n = bP(this),
        i = LP(t) ? void 0 : NP(t, e);
      return i ? kP(i, t, n) : new RegExp(t)[e](OP(n));
    },
    function (e) {
      var i = RP(this),
        o = OP(e),
        r = n(t, i, o);
      if (r.done) return r.value;
      if (!i.global) return wP(i, o);
      var a = i.unicode;
      i.lastIndex = 0;
      for (var s, c = [], u = 0; null !== (s = wP(i, o)); ) {
        var l = OP(s[0]);
        (c[u] = l), '' === l && (i.lastIndex = PP(o, AP(i.lastIndex), a)), u++;
      }
      return 0 === u ? null : c;
    },
  ];
});
var UP = jp,
  GP = sf,
  xP = Math.floor,
  FP = UP(''.charAt),
  qP = UP(''.replace),
  VP = UP(''.slice),
  BP = /\$([$&'`]|\d{1,2}|<[^>]*>)/g,
  HP = /\$([$&'`]|\d{1,2})/g,
  jP = eT,
  KP = bp,
  WP = jp,
  zP = vP,
  $P = kp,
  YP = tg,
  JP = ch,
  XP = eh,
  ZP = E_,
  QP = O_,
  ew = Ik,
  tw = ih,
  nw = yP,
  iw = Hh,
  ow = function (e, t, n, i, o, r) {
    var a = n + e.length,
      s = i.length,
      c = HP;
    return (
      void 0 !== o && ((o = GP(o)), (c = BP)),
      qP(r, c, function (r, c) {
        var u;
        switch (FP(c, 0)) {
          case '$':
            return '$';
          case '&':
            return e;
          case '`':
            return VP(t, 0, n);
          case "'":
            return VP(t, a);
          case '<':
            u = o[VP(c, 1, -1)];
            break;
          default:
            var l = +c;
            if (0 === l) return r;
            if (l > s) {
              var d = xP(l / 10);
              return 0 === d
                ? r
                : d <= s
                  ? void 0 === i[d - 1]
                    ? FP(c, 1)
                    : i[d - 1] + FP(c, 1)
                  : r;
            }
            u = i[l - 1];
        }
        return void 0 === u ? '' : u;
      })
    );
  },
  rw = SP,
  aw = Ef('replace'),
  sw = Math.max,
  cw = Math.min,
  uw = WP([].concat),
  lw = WP([].push),
  dw = WP(''.indexOf),
  pw = WP(''.slice),
  hw = '$0' === 'a'.replace(/./, '$0'),
  fw = !!/./[aw] && '' === /./[aw]('a', '$0');
zP(
  'replace',
  function (e, t, n) {
    var i = fw ? '$' : '$0';
    return [
      function (e, n) {
        var i = tw(this),
          o = XP(e) ? void 0 : iw(e, aw);
        return o ? KP(o, e, i, n) : KP(t, ew(i), e, n);
      },
      function (e, o) {
        var r = YP(this),
          a = ew(e);
        if ('string' == typeof o && -1 === dw(o, i) && -1 === dw(o, '$<')) {
          var s = n(t, r, a, o);
          if (s.done) return s.value;
        }
        var c = JP(o);
        c || (o = ew(o));
        var u,
          l = r.global;
        l && ((u = r.unicode), (r.lastIndex = 0));
        for (var d, p = []; null !== (d = rw(r, a)) && (lw(p, d), l); )
          '' === ew(d[0]) && (r.lastIndex = nw(a, QP(r.lastIndex), u));
        for (var h, f = '', g = 0, _ = 0; _ < p.length; _++) {
          for (
            var v,
              m = ew((d = p[_])[0]),
              y = sw(cw(ZP(d.index), a.length), 0),
              I = [],
              M = 1;
            M < d.length;
            M++
          )
            lw(I, void 0 === (h = d[M]) ? h : String(h));
          var C = d.groups;
          if (c) {
            var T = uw([m], I, y, a);
            void 0 !== C && lw(T, C), (v = ew(jP(o, void 0, T)));
          } else v = ow(m, a, y, I, C, o);
          y >= g && ((f += pw(a, g, y) + v), (g = y + m.length));
        }
        return f + pw(a, g);
      },
    ];
  },
  !!$P(function () {
    var e = /./;
    return (
      (e.exec = function () {
        var e = [];
        return (e.groups = { a: '7' }), e;
      }),
      '7' !== ''.replace(e, '$<a>')
    );
  }) ||
    !hw ||
    fw
);
var gw,
  _w = lh,
  vw = $p,
  mw = Ef('match'),
  yw = TypeError,
  Iw = function (e) {
    if (
      (function (e) {
        var t;
        return _w(e) && (void 0 !== (t = e[mw]) ? !!t : 'RegExp' === vw(e));
      })(e)
    )
      throw new yw("The method doesn't accept regular expressions");
    return e;
  },
  Mw = Ef('match'),
  Cw = function (e) {
    var t = /./;
    try {
      '/./'[e](t);
    } catch (rc) {
      try {
        return (t[Mw] = !1), '/./'[e](t);
      } catch (n) {}
    }
    return !1;
  },
  Tw = Cv,
  Ew = Dm,
  Dw = Sp.f,
  Sw = O_,
  kw = Ik,
  Rw = Iw,
  Lw = ih,
  Aw = Cw,
  Ow = Ew(''.slice),
  bw = Math.min,
  Nw = Aw('startsWith');
Tw(
  {
    target: 'String',
    proto: !0,
    forced: !(
      (!Nw &&
        ((gw = Dw(String.prototype, 'startsWith')), gw && !gw.writable)) ||
      Nw
    ),
  },
  {
    startsWith: function (e) {
      var t = kw(Lw(this));
      Rw(e);
      var n = Sw(bw(arguments.length > 1 ? arguments[1] : void 0, t.length)),
        i = kw(e);
      return Ow(t, n, n + i.length) === i;
    },
  }
);
var Pw = Dp,
  ww = kp,
  Uw = jp,
  Gw = Ik,
  xw = tN.trim,
  Fw = zb,
  qw = Pw.parseInt,
  Vw = Pw.Symbol,
  Bw = Vw && Vw.iterator,
  Hw = /^[+-]?0x/i,
  jw = Uw(Hw.exec),
  Kw =
    8 !== qw(Fw + '08') ||
    22 !== qw(Fw + '0x16') ||
    (Bw &&
      !ww(function () {
        qw(Object(Bw));
      }))
      ? function (e, t) {
          var n = xw(Gw(e));
          return qw(n, t >>> 0 || (jw(Hw, n) ? 16 : 10));
        }
      : qw;
function Ww(e, t) {
  (e = e.split('.')), (t = t.split('.'));
  for (var n = Math.max(e.length, t.length); e.length < n; ) e.push('0');
  for (; t.length < n; ) t.push('0');
  for (var i = 0; i < n; i++) {
    var o = parseInt(e[i], 10),
      r = parseInt(t[i], 10);
    if (o > r) return 1;
    if (o < r) return -1;
  }
  return 0;
}
Cv({ global: !0, forced: parseInt !== Kw }, { parseInt: Kw });
var zw = 'TRTC-ROOM',
  $w = $n || qq;
$w || console.error(zw, '不支持当前小程序环境');
var Yw,
  Jw = $w.getSystemInfoSync(),
  Xw = Jw.safeArea;
('iOS 13.3' === Jw.system ||
  ('iPhoneX' === Jw.model && 'iOS 13.3.1' === Jw.system)) &&
  console.log('use media audio volume type'),
  console.log(zw, 'SystemInfo', Jw),
  'undefined' != typeof qq
    ? (Yw = !0)
    : void 0 !== $n &&
      (Yw =
        Ww(Jw.version, '7.0.8') >= 0 ||
        (Ww(Jw.version, '2.4.0') >= 0 &&
          Ww(Jw.version, '6.0.0') < 0 &&
          Ww(Jw.SDKVersion, '2.10.0') >= 0));
var Zw = Yw,
  Qw = void 0 !== Yn,
  eU = /iOS/i.test(Jw.system),
  tU = /Android/i.test(Jw.system);
/mac/i.test(Jw.system);
var nU = Jw.version,
  iU = Jw.SDKBuild
    ? ''.concat(Jw.SDKVersion, '-').concat(Jw.SDKBuild)
    : Jw.SDKVersion;
Jw.screenHeight,
  Xw.bottom,
  console.log(
    zw,
    'APP_VERSION:',
    nU,
    ' LIB_VERSION:',
    iU,
    ' is new version:',
    Zw
  );
var oU = Rp,
  rU = Ev,
  aU = TypeError,
  sU = Object.getOwnPropertyDescriptor,
  cU =
    oU &&
    !(function () {
      if (void 0 !== this) return !0;
      try {
        Object.defineProperty([], 'length', { writable: !1 }).length = 1;
      } catch (ic) {
        return ic instanceof TypeError;
      }
    })()
      ? function (e, t) {
          if (rU(e) && !sU(e, 'length').writable)
            throw new aU('Cannot set read only .length');
          return (e.length = t);
        }
      : function (e, t) {
          return (e.length = t);
        },
  uU = Uh,
  lU = TypeError,
  dU = Cv,
  pU = sf,
  hU = R_,
  fU = E_,
  gU = N_,
  _U = cU,
  vU = Sv,
  mU = om,
  yU = Av,
  IU = function (e, t) {
    if (!delete e[t])
      throw new lU('Cannot delete property ' + uU(t) + ' of ' + uU(e));
  },
  MU = cm('splice'),
  CU = Math.max,
  TU = Math.min;
dU(
  { target: 'Array', proto: !0, forced: !MU },
  {
    splice: function (e, t) {
      var n,
        i,
        o,
        r,
        a,
        s,
        c = pU(this),
        u = gU(c),
        l = hU(e, u),
        d = arguments.length;
      for (
        0 === d
          ? (n = i = 0)
          : 1 === d
            ? ((n = 0), (i = u - l))
            : ((n = d - 2), (i = TU(CU(fU(t), 0), u - l))),
          vU(u + n - i),
          o = mU(c, i),
          r = 0;
        r < i;
        r++
      )
        (a = l + r) in c && yU(o, r, c[a]);
      if (((o.length = i), n < i)) {
        for (r = l; r < u - i; r++)
          (s = r + n), (a = r + i) in c ? (c[s] = c[a]) : IU(c, s);
        for (r = u; r > u - i + n; r--) IU(c, r - 1);
      } else if (n > i)
        for (r = u - i; r > l; r--)
          (s = r + n - 1), (a = r + i - 1) in c ? (c[s] = c[a]) : IU(c, s);
      for (r = 0; r < n; r++) c[r + l] = arguments[r + 2];
      return _U(c, u - i + n), o;
    },
  }
),
  ek(
    'Map',
    function (e) {
      return function () {
        return e(this, arguments.length ? arguments[0] : void 0);
      };
    },
    vk
  );
var EU,
  DU,
  SU = mS;
Cv(
  { target: 'Object', stat: !0, forced: Object.isExtensible !== SU },
  { isExtensible: SU }
),
  (EU =
    'undefined' != typeof console
      ? console
      : 'undefined' != typeof global && global.console
        ? global.console
        : 'undefined' != typeof window && window.console
          ? window.console
          : {});
for (
  var kU = function () {},
    RU = [
      'assert',
      'clear',
      'count',
      'debug',
      'dir',
      'dirxml',
      'error',
      'group',
      'groupCollapsed',
      'groupEnd',
      'info',
      'log',
      'profile',
      'profileEnd',
      'table',
      'time',
      'timeEnd',
      'timeStamp',
      'trace',
      'warn',
    ],
    LU = RU.length - 1;
  LU;

)
  (DU = RU[LU]), console[DU] || (EU[DU] = kU), (LU -= 1);
Object.isExtensible(EU) && (EU.methods = RU);
var AU = EU,
  OU = 0,
  bU = new Map(),
  NU = 'CallEngine';
function PU() {
  var e = new Date();
  return '['.concat(e.toLocaleTimeString('en-US', { hour12: !1 }), '.').concat(
    (function (e) {
      var t;
      switch (e.toString().length) {
        case 1:
          t = '00'.concat(e);
          break;
        case 2:
          t = '0'.concat(e);
          break;
        default:
          t = e;
      }
      return t;
    })(e.getMilliseconds()),
    ']'
  );
}
var wU = {
    _data: [],
    _length: 0,
    _visible: !1,
    arguments2String: function (e, t) {
      var n;
      if (1 === t.length)
        n = '【'
          .concat(NU, '】')
          .concat(PU(), ' <')
          .concat(e, '> ')
          .concat(t[0]);
      else {
        n = '【'.concat(NU, '】').concat(PU(), ' <').concat(e, '> ');
        for (var i = 0, o = t.length; i < o; i++)
          VU(t[i])
            ? KU(t[i])
              ? (n += WU(t[i]))
              : (n += JSON.stringify(t[i]))
            : (n += t[i]),
            (n += ' ');
      }
      return n;
    },
    debug: function () {
      if (OU <= -1) {
        var e = this.arguments2String('DEBUG', arguments);
        wU.record(e, 'debug'), AU.debug(e);
      }
    },
    log: function () {
      if (OU <= 0) {
        var e = this.arguments2String('LOG', arguments);
        wU.record(e, 'log'), AU.log(e);
      }
    },
    info: function () {
      if (OU <= 1) {
        var e = this.arguments2String('INFO', arguments);
        wU.record(e, 'info'), AU.info(e);
      }
    },
    warn: function () {
      if (OU <= 2) {
        var e = this.arguments2String('WARN', arguments);
        wU.record(e, 'warn'), AU.warn(e);
      }
    },
    error: function () {
      if (OU <= 3) {
        var e = this.arguments2String('ERROR', arguments);
        wU.record(e, 'error'), AU.error(e);
      }
    },
    time: function (e) {
      bU.set(e, jU.now());
    },
    timeEnd: function (e) {
      if (bU.has(e)) {
        var t = jU.now() - bU.get(e);
        return bU.delete(e), t;
      }
      return (
        AU.warn(
          '未找到对应label: '.concat(
            e,
            ', 请在调用 logger.timeEnd 前，调用 logger.time'
          )
        ),
        0
      );
    },
    setLevel: function (e) {
      e < 4 &&
        AU.log(''.concat(PU(), 'set level from ').concat(OU, ' to ').concat(e)),
        (OU = e);
    },
    getLevel: function () {
      return OU;
    },
    record: function (e, t) {
      1100 === wU._length && (wU._data.splice(0, 100), (wU._length = 1e3)),
        (wU._length += 1),
        wU._data.push(''.concat(e, ' [').concat(t, '] \n'));
    },
    getLog: function () {
      return wU._data;
    },
  },
  UU = function (e) {
    return 'function' == typeof Array.isArray
      ? Array.isArray(e)
      : 'array' ===
          ((t = e),
          Object.prototype.toString
            .call(t)
            .match(/^\[object (.*)\]$/)[1]
            .toLowerCase());
    var t;
  },
  GU = function (e) {
    return (
      null !== e &&
      (('number' == typeof e && !isNaN(e - 0)) ||
        ('object' === Ip(e) && e.constructor === Number))
    );
  },
  xU = function (e) {
    return 'string' == typeof e;
  },
  FU = function (e) {
    return null !== e && 'object' === Ip(e);
  },
  qU = function (e) {
    return void 0 === e;
  },
  VU = function (e) {
    return UU(e) || FU(e);
  },
  BU = function (e) {
    return 'function' === Ip(e);
  },
  HU = 0;
Date.now ||
  (Date.now = function () {
    return new Date().getTime();
  });
var jU = {
    now: function () {
      0 === HU && (HU = Date.now() - 1);
      var e = Date.now() - HU;
      return e > 4294967295 ? ((HU += 4294967295), Date.now() - HU) : e;
    },
    utc: function () {
      return Math.round(Date.now() / 1e3);
    },
  },
  KU = function (e) {
    return e instanceof Error;
  },
  WU = function (e) {
    return JSON.stringify(e, ['message', 'code']);
  };
function zU() {
  var e = 'unknown';
  return eU && (e = 'ios'), tU && (e = 'android'), e;
}
function $U(e) {
  return YU.apply(this, arguments);
}
function YU() {
  return (
    (YU = np(
      _p().mark(function e(t) {
        var n, i, o, r, a, s, c;
        return _p().wrap(
          function (e) {
            for (;;)
              switch ((e.prev = e.next)) {
                case 0:
                  if (t) {
                    e.next = 2;
                    break;
                  }
                  return e.abrupt('return', !1);
                case 2:
                  return (
                    (n = t.microphone),
                    (i = void 0 !== n && n),
                    (o = t.camera),
                    (r = void 0 !== o && o),
                    (e.prev = 3),
                    (e.next = 6),
                    new Promise(
                      (function () {
                        var e = np(
                          _p().mark(function e(t, n) {
                            return _p().wrap(function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    $n.getSetting({
                                      success: function (e) {
                                        var n;
                                        (n = $n.$TUICallKitPlugin
                                          ? e.miniprogramAuthSetting
                                          : e.authSetting),
                                          t(n);
                                      },
                                      fail: function (e) {
                                        n(e);
                                      },
                                    });
                                  case 1:
                                  case 'end':
                                    return e.stop();
                                }
                            }, e);
                          })
                        );
                        return function (t, n) {
                          return e.apply(this, arguments);
                        };
                      })()
                    )
                  );
                case 6:
                  if (((e.t0 = e.sent), e.t0)) {
                    e.next = 9;
                    break;
                  }
                  e.t0 = !1;
                case 9:
                  if (
                    ((a = e.t0),
                    (s = a[XR.RECORD]),
                    (c = a[XR.CAMERA]),
                    !i || !r)
                  ) {
                    e.next = 14;
                    break;
                  }
                  return e.abrupt('return', s && c);
                case 14:
                  if (!i) {
                    e.next = 16;
                    break;
                  }
                  return e.abrupt('return', s);
                case 16:
                  if (!r) {
                    e.next = 18;
                    break;
                  }
                  return e.abrupt('return', c);
                case 18:
                  return e.abrupt('return', !1);
                case 21:
                  return (
                    (e.prev = 21), (e.t1 = e.catch(3)), e.abrupt('return', !1)
                  );
                case 24:
                case 'end':
                  return e.stop();
              }
          },
          e,
          null,
          [[3, 21]]
        );
      })
    )),
    YU.apply(this, arguments)
  );
}
function JU(e) {
  if (!e) return !1;
  var t = e.microphone,
    n = void 0 !== t && t,
    i = e.camera,
    o = void 0 !== i && i,
    r = $n.getAppAuthorizeSetting(),
    a = r[ZR.MICROPHONE_AUTHORIZED] === JR.AUTHORIZED,
    s = r[ZR.CAMERA_AUTHORIZED] === JR.AUTHORIZED;
  return n && o ? a && s : n ? a : !!o && s;
}
function XU(e) {
  return 'av_call' === e;
}
function ZU() {
  return performance && performance.now
    ? Math.floor(performance.now())
    : Date.now();
}
function QU(e) {
  var t = String(e);
  return t.startsWith('14') || t.startsWith('16') || t.startsWith('17');
}
function eG(e) {
  var t,
    n = QU(e) ? nL : iL;
  return ''
    .concat(n, '&position=')
    .concat(e, '&regionId=')
    .concat(
      ((t = e) >= 2e7 && t < 3e7) || (t >= 172e7 && t < 173e7)
        ? rL
        : (t >= 3e7 && t < 4e7) || (t >= 173e7 && t < 174e7)
          ? sL
          : (t >= 4e7 && t < 5e7) || (t >= 174e7 && t < 175e7)
            ? aL
            : (t >= 5e7 && t < 6e7) || (t >= 175e7 && t < 176e7)
              ? cL
              : (t >= 7e7 && t < 8e7) || (t >= 177e7 && t < 178e7)
                ? uL
                : oL
    );
}
function tG(e) {
  return Reflect.apply(Object.prototype.toString, e, [])
    .replace(/^\[object\s(\w+)\]$/, '$1')
    .toLowerCase();
}
function nG(e, t) {
  return GU(e) && e > 0
    ? e
    : 0 === e && t
      ? t
      : Math.floor(2147483646 * Math.random() + 1);
}
function iG(e, t, n) {
  if (0 === Object.keys(t).length) return e;
  var i = e.findIndex(function (e) {
    return e[n] === t[n];
  });
  return -1 !== i ? (e[i] = t) : e.push(t), e;
}
function oG(e) {
  return rG.apply(this, arguments);
}
function rG() {
  return (
    (rG = np(
      _p().mark(function e(t) {
        var n;
        return _p().wrap(function (e) {
          for (;;)
            switch ((e.prev = e.next)) {
              case 0:
                return (
                  (e.next = 2),
                  Promise.all(
                    t.map(
                      (function () {
                        var e = np(
                          _p().mark(function e(t) {
                            var n;
                            return _p().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (e.prev = 0), (e.next = 3), t;
                                    case 3:
                                      return (
                                        (n = e.sent),
                                        e.abrupt('return', {
                                          status: 'fulfilled',
                                          value: n,
                                        })
                                      );
                                    case 7:
                                      return (
                                        (e.prev = 7),
                                        (e.t0 = e.catch(0)),
                                        e.abrupt('return', {
                                          status: 'rejected',
                                          reason: e.t0,
                                        })
                                      );
                                    case 10:
                                    case 'end':
                                      return e.stop();
                                  }
                              },
                              e,
                              null,
                              [[0, 7]]
                            );
                          })
                        );
                        return function (t) {
                          return e.apply(this, arguments);
                        };
                      })()
                    )
                  )
                );
              case 2:
                return (n = e.sent), e.abrupt('return', n);
              case 4:
              case 'end':
                return e.stop();
            }
        }, e);
      })
    )),
    rG.apply(this, arguments)
  );
}
function aG(e) {
  if ('string' != typeof e) return e;
  var t;
  try {
    var n = JSON.parse(e);
    t = 'object' === Ip(n) && n ? n : e;
  } catch (i) {
    t = e;
  }
  return t;
}
function sG(e) {
  e = e || 32;
  for (var t = '', n = 0; n < e; n++)
    t += 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'.charAt(
      Math.floor(48 * Math.random())
    );
  return t;
}
var cG = {
    NO_NETWORK: '未连接到网络',
    FAILURE_SWITCH_TO_AUDIO: 'switch to audio call error',
    FAILURE_SWITCH_TO_VIDEO: 'switch to video call error',
    ERROR_NULL: 'success',
    ERROR_PACKAGE_NOT_PURCHASED:
      'You do not have TUICallKit package, please open the free experience in the console: https://console.intl.cloud.tencent.com/im/detail or purchase the official package: ${purchaseAddress}',
    ERROR_PACKAGE_NOT_SUPPORTED:
      'The package you purchased does not support this ability. You can refer to here to purchase: ${purchaseAddress}',
    ERROR_TIM_VERSION_OUTDATED:
      'TIM SDK version is too old. Please upgrade version',
    ERROR_PERMISSION_DENIED:
      'camera / microphone permission refused. Please go to: https://cloud.tencent.com/document/product/647/78770',
    ERROR_GET_DEVICE_LIST_FAIL: 'Failed to get device list',
    ERROR_INIT_FAIL:
      'init is not complete, this API needs to be used after init. To solve the problem, please go to: https://cloud.tencent.com/document/product/647/78769#3a61f42b-e06f-49af-88bf-362d40025887',
    ERROR_REQUEST_REFUSED:
      'The API is not support use in the current state. Please go to: https://cloud.tencent.com/document/product/647/78769#5e65043d-e3dc-4bd3-8220-3ac7694dfa42',
    ERROR_REQUEST_REPEATED:
      'The current method is being executed, please do not call it repeatedly',
    ERROR_REQUEST_REPEATED_SWITCH:
      'Consistent with the current call type, please do not switch repeatedly',
    ERROR_SCENE_NOT_SUPPORTED:
      'In the current call scene, this function is not supported',
    ERROR_SIGNALING_SEND_FAIL: 'signaling failed to send',
    ERROR_INVALID_INVITEID:
      'Failed to send message, common reasons: the called userID or groupID does not exist. To solve the problem, please go to: https://cloud.tencent.com/document/product/647/84363#e97ea97b-7812-42ed-89b7-2a3840ac0e3f',
    ERROR_INVALID_SEND_FAIL:
      'Invalid sender or receiver identifier! To solve the problem, please go to: https://cloud.tencent.com/document/product/647/84363#661be1b0-f649-4199-a343-958c3f4f4bbb',
    ERROR_PARAM_INVALID: 'invalid parameter',
  },
  uG = {
    NO_NETWORK: '未连接到网络',
    FAILURE_SWITCH_TO_AUDIO: '切换语音通话失败',
    FAILURE_SWITCH_TO_VIDEO: '切换视频通话失败',
    ERROR_NULL: '成功',
    ERROR_PACKAGE_NOT_PURCHASED:
      '您的应用还未开通音视频通话（TUICallKit）能力，您可以去控制台申请免费体验: https://console.cloud.tencent.com/im/detail 或购买通话能力套餐包: ${purchaseAddress}',
    ERROR_PACKAGE_NOT_SUPPORTED:
      '您暂不支持使用该能力，请前往如下购买页购买开通: ${purchaseAddress}',
    ERROR_TIM_VERSION_OUTDATED: 'TIM SDK 版本太旧，请升级版本',
    ERROR_PERMISSION_DENIED:
      '摄像头/麦克风权限被拒绝。解决方案请前往: https://cloud.tencent.com/document/product/647/78770',
    ERROR_GET_DEVICE_LIST_FAIL: '获取设备列表失败',
    ERROR_INIT_FAIL:
      'TUICallEngine init 未完成，需要在 init 完成后使用此 API。解决方案请前往: https://cloud.tencent.com/document/product/647/78769#3a61f42b-e06f-49af-88bf-362d40025887',
    ERROR_REQUEST_REFUSED:
      '当前通话状态无法使用该API。解决方案请前往: https://cloud.tencent.com/document/product/647/78769#5e65043d-e3dc-4bd3-8220-3ac7694dfa42',
    ERROR_REQUEST_REPEATED: '当前方法正在执行中，请勿重复调用',
    ERROR_REQUEST_REPEATED_SWITCH: '与当前通话类型一致，请勿重复切换',
    ERROR_SCENE_NOT_SUPPORTED: '当前通话场景不支持该功能',
    ERROR_SIGNALING_SEND_FAIL: '信令发送失败',
    ERROR_INVALID_INVITEID:
      'inviteID 无效或邀请已处理。解决方案请前往: https://cloud.tencent.com/document/product/647/84363#e97ea97b-7812-42ed-89b7-2a3840ac0e3f',
    ERROR_INVALID_SEND_FAIL:
      '消息发送失败，常见原因：被叫用户 userID 或群 groupID 不存在。解决方案请前往: https://cloud.tencent.com/document/product/647/84363#661be1b0-f649-4199-a343-958c3f4f4bbb',
    ERROR_PARAM_INVALID: '参数错误',
  };
function lG(e) {
  var t,
    n,
    i,
    o,
    r = e.code,
    a = e.params,
    s = e.enableDocLink,
    c = void 0 !== s && s,
    u = e.languageList,
    l = void 0 === u ? ['en', 'zh-CN'] : u,
    d = '',
    p =
      ((n = BO),
      (i = r),
      (o = ''),
      Object.keys(n).forEach(function (e) {
        n[e] === i && (o = e);
      }),
      o);
  try {
    l.forEach(function (e) {
      switch (e) {
        case 'en':
          t = dG[p];
          break;
        case 'zh-CN':
          t = pG[p];
      }
      BU(t) ? ((d = d ? ''.concat(d, ' ') : d), (d += t(a))) : xU(t) && (d = t);
    });
  } catch (h) {
    t = dG.UNKNOWN_ERROR;
  }
  return c && (d += ' doc:'), d;
}
var dG = {
    ERROR_INIT_FAIL: function (e) {
      var t = e.fnName;
      return ''.concat(t, ': ').concat(cG.ERROR_INIT_FAIL, '.');
    },
    ERROR_SCENE_NOT_SUPPORTED: function (e) {
      var t = e.fnName;
      return ''.concat(t, ': ').concat(cG.ERROR_SCENE_NOT_SUPPORTED, '.');
    },
    ERROR_REQUEST_REFUSED: function (e) {
      var t = e.value;
      return ''
        .concat(cG.ERROR_REQUEST_REFUSED, '. customStatus: ')
        .concat(t, '.');
    },
    ERROR_PARAM_INVALID: function (e) {
      var t = e.fnName;
      return "the parameters of the '".concat(
        t,
        "' you called does not meet the requirements, please check the API documentation."
      );
    },
    INVALID_PARAMETER_REQUIRED: function (e) {
      var t = e.key,
        n = e.rule,
        i = e.fnName,
        o = e.value;
      return "'"
        .concat(t || n.name, "' is a required param when calling ")
        .concat(i, '(), received: ')
        .concat(o, '.');
    },
    INVALID_PARAMETER_TYPE: function (e) {
      var t,
        n = e.key,
        i = e.rule,
        o = e.fnName,
        r = e.value,
        a = ''.concat(n || i.name);
      return (
        (t = Array.isArray(i.type) ? i.type.join('|') : i.type),
        "'"
          .concat(a, "' must be type of ")
          .concat(t, ' when calling ')
          .concat(o, '(), received type: ')
          .concat(tG(r), '.')
      );
    },
    INVALID_PARAMETER_EMPTY: function (e) {
      var t = e.key,
        n = e.rule,
        i = e.fnName;
      return "'"
        .concat(t || n.name, "' cannot be empty when calling ")
        .concat(i, '().');
    },
    INVALID_PARAMETER_RANGE: function (e) {
      var t = e.key,
        n = e.rule,
        i = e.fnName,
        o = e.value;
      return UU(n.values)
        ? "'"
            .concat(t || n.name, "' must be one of ")
            .concat(n.values.join('|'), ' when calling ')
            .concat(i, '(), received: ')
            .concat(o, '.')
        : xU(n.values) && -1 !== n.values.indexOf('~')
          ? "'"
              .concat(t || n.name, "' must be the range of ")
              .concat(n.values, ' when calling ')
              .concat(i, '(), received: ')
              .concat(o, '.')
          : void 0;
    },
    ERROR_REQUEST_REPEATED: function (e) {
      var t = e.fnName;
      return 'you are already '
        .concat(t, "(), cannot repeated call '")
        .concat(t, "'.");
    },
    ERROR_HTTP: function () {
      return ''.concat(cG.ERROR_HTTP, '.');
    },
    ERROR_TIM_VERSION_OUTDATED: function () {
      return ''.concat(cG.ERROR_TIM_VERSION_OUTDATED, ' >= 2.21.2.');
    },
    ERROR_PACKAGE_NOT_SUPPORTED: function () {
      return ''.concat(cG.ERROR_PACKAGE_NOT_SUPPORTED, '.');
    },
    FAILURE_SWITCH_TO_AUDIO: function () {
      return ''.concat(cG.FAILURE_SWITCH_TO_AUDIO, '.');
    },
    NOT_MICROPHONE_LIST: function (e) {
      var t = e.fnName,
        n = e.error;
      return "NotFoundError, no microphone detected, please check your device and the configuration on '"
        .concat(t, "'")
        .concat(n ? ', error: '.concat(n.toString(), '.') : '.');
    },
    NOT_CAMERA_LIST: function (e) {
      var t = e.fnName,
        n = e.error;
      return "NotFoundError, no camera detected, please check your device and the configuration on '"
        .concat(t, "'")
        .concat(n ? ', error: '.concat(n.toString(), '.') : '.');
    },
    ERROR_PERMISSION_DENIED: function (e) {
      var t = e.fnName,
        n = e.error;
      return 'NotAllowedError, you have disabled camera/microphone access, please allow the current application '
        .concat(t, ' to use the camera/microphone. ')
        .concat(n ? ', error: '.concat(n.toString(), '.') : '.');
    },
    ERROR_INVALID_SEND_FAIL: function () {
      return ''.concat(cG.ERROR_INVALID_SEND_FAIL, '.');
    },
    UNKNOWN_ERROR: function (e) {
      var t = e.fnName,
        n = e.error;
      return "'"
        .concat(t, "' throw unknown exception")
        .concat(n ? ', error: '.concat(n.toString(), '.') : '.');
    },
  },
  pG = {
    ERROR_INIT_FAIL: function (e) {
      var t = e.fnName;
      return ''.concat(t, ': ').concat(uG.ERROR_INIT_FAIL, '。');
    },
    ERROR_SCENE_NOT_SUPPORTED: function (e) {
      var t = e.fnName;
      return ''.concat(t, ': ').concat(uG.ERROR_SCENE_NOT_SUPPORTED, '。');
    },
    ERROR_REQUEST_REFUSED: function (e) {
      var t = e.value;
      return ''
        .concat(uG.ERROR_REQUEST_REFUSED, '. customStatus: ')
        .concat(t, '。');
    },
    ERROR_PARAM_INVALID: function (e) {
      var t = e.fnName;
      return "the parameters of the '".concat(
        t,
        "' you called does not meet the requirements, please check the API documentation."
      );
    },
    INVALID_PARAMETER_REQUIRED: function (e) {
      var t = e.key,
        n = e.rule,
        i = e.fnName,
        o = e.value;
      return '调用 '
        .concat(i, "() 方法的时候 '")
        .concat(t || n.name, "' 是必须的参数, 收到的值为: ")
        .concat(o, '。');
    },
    INVALID_PARAMETER_TYPE: function (e) {
      var t,
        n = e.key,
        i = e.rule,
        o = e.fnName,
        r = e.value,
        a = ''.concat(n || i.name);
      return (
        (t = Array.isArray(i.type) ? i.type.join('|') : i.type),
        '调用 '
          .concat(o, "() 方法的时候 '")
          .concat(a, "' 必须是 ")
          .concat(t, ' 类型, 收到的类型是: ')
          .concat(tG(r), '。')
      );
    },
    INVALID_PARAMETER_EMPTY: function (e) {
      var t = e.key,
        n = e.rule,
        i = e.fnName;
      return (
        e.value,
        '调用 '.concat(i, "() 的时候 '").concat(t || n.name, "' 不能是空。")
      );
    },
    INVALID_PARAMETER_RANGE: function (e) {
      var t = e.key,
        n = e.rule,
        i = e.fnName,
        o = e.value;
      return UU(n.values)
        ? '调用 '
            .concat(i, "() 的时候 '")
            .concat(t || n.name, "' 必须是 ")
            .concat(n.values.join('|'), ' 的其中一种, 收到的是: ')
            .concat(o, '。')
        : xU(n.values) && -1 !== n.values.indexOf('~')
          ? '调用 '
              .concat(i, "() 的时候 '")
              .concat(t || n.name, "' 范围是 ")
              .concat(n.values, ', 收到的是: ')
              .concat(o, '。')
          : void 0;
    },
    ERROR_REQUEST_REPEATED: function (e) {
      var t = e.fnName;
      return '你已经调用 '.concat(t, "(), 请勿重复调用 '").concat(t, "'。");
    },
    ERROR_HTTP: function () {
      return ''.concat(uG.ERROR_HTTP, '。');
    },
    ERROR_TIM_VERSION_OUTDATED: function () {
      return ''.concat(uG.ERROR_TIM_VERSION_OUTDATED, ' >= 2.21.2。');
    },
    ERROR_PACKAGE_NOT_SUPPORTED: function () {
      return ''.concat(uG.ERROR_PACKAGE_NOT_SUPPORTED, '。');
    },
    FAILURE_SWITCH_TO_AUDIO: function () {
      return ''.concat(uG.FAILURE_SWITCH_TO_AUDIO, '。');
    },
    NOT_MICROPHONE_LIST: function (e) {
      var t = e.fnName,
        n = e.error;
      return "NotFoundError，未检测到麦克风设备，请检查您的设备和麦克风上的配置 '"
        .concat(t, "'")
        .concat(n ? ', error: '.concat(n.toString(), '.') : '.');
    },
    NOT_CAMERA_LIST: function (e) {
      var t = e.fnName,
        n = e.error;
      return "NotFoundError，未检测到摄像头设备，请检查您的设备和摄像头上的配置 '"
        .concat(t, "'")
        .concat(n ? ', error: '.concat(n.toString(), '.') : '.');
    },
    ERROR_PERMISSION_DENIED: function (e) {
      e.fnName;
      var t = e.error;
      return 'NotAllowedError, 您已禁用摄像头/麦克风访问权限，请允许当前应用程序使用摄像头/麦克风。'.concat(
        t ? ', error: '.concat(t.toString(), '.') : '.'
      );
    },
    ERROR_INVALID_SEND_FAIL: function () {
      return ''.concat(uG.ERROR_INVALID_SEND_FAIL, '.');
    },
  },
  hG = (function () {
    function e(t) {
      var n,
        i = t.name,
        o = void 0 === i ? '' : i,
        r = t.code,
        a = void 0 === r ? BO.UNKNOWN : r,
        s = t.message,
        c = void 0 === s ? '' : s,
        u = t.messageParams,
        l = void 0 === u ? {} : u;
      t.extraCode;
      var d = t.fnName,
        p = void 0 === d ? '' : d;
      return (
        op(this, e),
        ((n = ip(this, e, [
          c || lG({ code: a, params: fp({ fnName: p }, l) }),
        ])).name = o || n.name),
        (n.code = a),
        (n.functionName = p || n.functionName),
        n
      );
    }
    return (
      dp(e, Cp(Error)),
      sp(e, [
        {
          key: 'getCode',
          value: function () {
            return this.code;
          },
        },
      ])
    );
  })(),
  fG = ['inviteID', 'type'],
  gG = (function () {
    return sp(
      function e(t) {
        op(this, e),
          up(this, '_tuiCallEngine', null),
          (this._tuiCallEngine = t.tuiCallEngine),
          (this._chat = t.chat),
          (this._logger = lL());
      },
      [
        {
          key: 'handleNewSignaling',
          value: function (e, t) {
            var n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : '';
            this._logger.info('TSignaling.handleNewSignaling.start', {
              text: { data: { data: e, params: t, userData: n } },
              type: 'api',
            });
            var i = fp(
              fp({ userData: n || '' }, e),
              {},
              {
                version: 4,
                businessID: 'av_call',
                platform: 'MiniApp',
                data: fp(
                  {
                    cmd: kR[e.call_type],
                    room_id: e.room_id,
                    str_room_id: e.str_room_id,
                    inviter: this._tuiCallEngine.getInviterID(),
                    message: '',
                  },
                  t
                ),
              }
            );
            return (
              void 0 !== this._tuiCallEngine.getExcludeFromHistoryMessage() &&
                (this._tuiCallEngine.getExcludeFromHistoryMessage()
                  ? (i.data.excludeFromHistoryMessage = !0)
                  : delete i.data.excludeFromHistoryMessage),
              delete i.str_room_id,
              i
            );
          },
        },
        {
          key: 'extractCallingInfoFromMessage',
          value: function (e) {
            if (!e || 'TIMCustomElem' !== e.type) return '';
            var t = JSON.parse(e.payload.data);
            if (1 !== t.businessID) return '';
            switch (t.actionType) {
              case 1:
                var n = JSON.parse(t.data);
                return n.call_end > 0 && !t.groupID
                  ? n.call_end
                  : 0 !== n.call_end && n.room_id
                    ? '发起通话'
                    : '结束群聊';
              case 2:
                return '取消通话';
              case 3:
                return '已接听';
              case 4:
                return '拒绝通话';
              case 5:
                return '无应答';
              default:
                return '';
            }
          },
        },
        {
          key: 'handleError',
          value: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : {},
              t = e.code,
              n = void 0 === t ? '' : t,
              i = e.message;
            if (n) throw new hG({ message: void 0 === i ? '' : i, code: n });
          },
        },
        {
          key: '_handleInviteData',
          value: function (e) {
            var t = e.type,
              n = e.roomID,
              i = e.strRoomId,
              o = e.userIDList,
              r = e.hangup,
              a = e.switchMode,
              s = e.userData;
            if (r)
              return JSON.stringify(
                this.handleNewSignaling(
                  { version: 0, call_type: t, call_end: r.callEnd },
                  { cmd: 'hangup' }
                )
              );
            if (a) {
              var c = { version: 0, call_type: t, room_id: n },
                u = { cmd: 'switchToVideo' };
              return (
                a === RR &&
                  ((c.switch_to_audio_call = 'switch_to_audio_call'),
                  (u.cmd = 'switchToAudio')),
                JSON.stringify(this.handleNewSignaling(c, u))
              );
            }
            var l = this.handleNewSignaling(
              { version: 0, call_type: t, room_id: n, str_room_id: i },
              { userIDs: o, excludeFromHistoryMessage: !0 },
              s
            );
            return (
              this._tuiCallEngine.setInitialInviteData(l), JSON.stringify(l)
            );
          },
        },
        {
          key: '_handleInviteGroupData',
          value: function (e) {
            var t = e.type,
              n = e.roomID,
              i = e.strRoomId,
              o = e.hangup,
              r = e.userData;
            return o
              ? JSON.stringify(
                  this.handleNewSignaling(
                    { version: 0, call_type: t, call_end: o.call_end },
                    { cmd: 'hangup' },
                    r
                  )
                )
              : JSON.stringify(
                  this.handleNewSignaling(
                    { version: 0, call_type: t, room_id: n, str_room_id: i },
                    {},
                    r
                  )
                );
          },
        },
        {
          key: 'invite',
          value:
            ((a = np(
              _p().mark(function e(t) {
                var n, i, o, r;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('TSignaling.invite.start', {
                              text: { data: { params: t } },
                              type: 'api',
                            }),
                            (n = t.userID),
                            (i = t.offlinePushInfo),
                            (o = t.timeout),
                            (r = t.switchMode),
                            (e.prev = 2),
                            (e.next = 5),
                            this._chat.invite({
                              userID: n,
                              data: this._handleInviteData(t),
                              timeout: o,
                              offlinePushInfo:
                                this._convertOfflinePushParams(i),
                            })
                          );
                        case 5:
                          return e.abrupt('return', e.sent);
                        case 8:
                          if (
                            ((e.prev = 8),
                            (e.t0 = e.catch(2)),
                            this._logger.error('TSignaling.invite.fail', {
                              text: { data: { params: t }, error: e.t0 },
                              type: 'api',
                            }),
                            !r)
                          ) {
                            e.next = 13;
                            break;
                          }
                          return e.abrupt('return', this.handleError(e.t0, r));
                        case 13:
                          return e.abrupt(
                            'return',
                            this.handleError(e.t0, 'invite')
                          );
                        case 14:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[2, 8]]
                );
              })
            )),
            function (e) {
              return a.apply(this, arguments);
            }),
        },
        {
          key: 'inviteGroup',
          value:
            ((r = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('TSignaling.inviteGroup.start', {
                              text: { data: { params: t } },
                              type: 'api',
                            }),
                            (n = t.groupID),
                            (i = t.userIDList),
                            (o = t.offlinePushInfo),
                            (r = t.timeout),
                            (a = t.inCallUserIDs),
                            (s = void 0 === a ? [] : a),
                            (e.prev = 2),
                            (e.next = 5),
                            this._chat.inviteInGroup({
                              groupID: n,
                              inviteeList: i,
                              timeout: r,
                              data: this._handleInviteGroupData(t),
                              offlinePushInfo:
                                this._convertOfflinePushParams(o),
                              inCallUserIDs: s,
                            })
                          );
                        case 5:
                          return e.abrupt('return', e.sent);
                        case 8:
                          return (
                            (e.prev = 8),
                            (e.t0 = e.catch(2)),
                            this._logger.error('TSignaling.inviteGroup.fail', {
                              text: { data: { params: t }, error: e.t0 },
                              type: 'api',
                            }),
                            e.abrupt(
                              'return',
                              this.handleError(e.t0, 'inviteGroup')
                            )
                          );
                        case 12:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[2, 8]]
                );
              })
            )),
            function (e) {
              return r.apply(this, arguments);
            }),
        },
        {
          key: 'accept',
          value:
            ((o = np(
              _p().mark(function e(t, n) {
                var i, o, r;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('TSignaling.accept.start', {
                              text: { data: { params: t, supportParams: n } },
                              type: 'api',
                            }),
                            (i = t.inviteID),
                            (o = t.type),
                            (r = gp(t, fG)),
                            (e.prev = 2),
                            (e.next = 5),
                            this._chat.accept({
                              inviteID: i,
                              data: JSON.stringify(
                                this.handleNewSignaling(
                                  fp({ version: 0, call_type: o }, r),
                                  fp(
                                    fp({}, n),
                                    {},
                                    { excludeFromHistoryMessage: !0 }
                                  )
                                )
                              ),
                            })
                          );
                        case 5:
                          return e.abrupt('return', e.sent);
                        case 8:
                          return (
                            (e.prev = 8),
                            (e.t0 = e.catch(2)),
                            this._logger.error('TSignaling.accept.fail', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            e.abrupt('return', this.handleError(e.t0, 'accept'))
                          );
                        case 12:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[2, 8]]
                );
              })
            )),
            function (e, t) {
              return o.apply(this, arguments);
            }),
        },
        {
          key: 'reject',
          value:
            ((i = np(
              _p().mark(function e(t) {
                var n, i, o, r, a;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('TSignaling.reject.start', {
                              text: { data: { params: t } },
                              type: 'api',
                            }),
                            (n = t.inviteID),
                            (i = t.type),
                            (o = t.lineBusy),
                            (r = { version: 0, call_type: i }),
                            (a = null),
                            o
                              ? ((r.line_busy = o),
                                (a = JSON.stringify(
                                  this.handleNewSignaling(r, {
                                    message: 'lineBusy',
                                  })
                                )))
                              : (a = JSON.stringify(
                                  this.handleNewSignaling(r)
                                )),
                            (e.prev = 5),
                            (e.next = 8),
                            this._tuiCallEngine.modifyInvitation(n)
                          );
                        case 8:
                          return (
                            (e.next = 10),
                            this._chat.reject({ inviteID: n, data: a })
                          );
                        case 10:
                          return e.abrupt('return', e.sent);
                        case 13:
                          if (
                            ((e.prev = 13),
                            (e.t0 = e.catch(5)),
                            this._logger.error('TSignaling.reject.fail', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            !o)
                          ) {
                            e.next = 18;
                            break;
                          }
                          return e.abrupt(
                            'return',
                            this.handleError(e.t0, 'line_busy')
                          );
                        case 18:
                          return e.abrupt(
                            'return',
                            this.handleError(e.t0, 'reject')
                          );
                        case 19:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[5, 13]]
                );
              })
            )),
            function (e) {
              return i.apply(this, arguments);
            }),
        },
        {
          key: 'cancel',
          value:
            ((n = np(
              _p().mark(function e(t) {
                var n, i, o;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('TSignaling.cancel.start', {
                              text: { data: { params: t } },
                              type: 'api',
                            }),
                            (n = t.inviteID),
                            (i = t.callType),
                            (e.prev = 2),
                            (e.next = 5),
                            this._chat.cancel({
                              inviteID: n,
                              data: JSON.stringify(
                                this.handleNewSignaling({
                                  version: 0,
                                  call_type: i,
                                })
                              ),
                            })
                          );
                        case 5:
                          return (o = e.sent), e.abrupt('return', o);
                        case 9:
                          return (
                            (e.prev = 9),
                            (e.t0 = e.catch(2)),
                            this._logger.error('TSignaling.cancel.fail', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            e.abrupt('return', this.handleError(e.t0, 'cancel'))
                          );
                        case 13:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[2, 9]]
                );
              })
            )),
            function (e) {
              return n.apply(this, arguments);
            }),
        },
        {
          key: 'hangup',
          value:
            ((t = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d, p, h;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('TSignaling.hangup.start', {
                              text: { data: { params: t } },
                              type: 'api',
                            }),
                            (n = t.userIDList),
                            (i = t.callType),
                            (o = t.callEnd),
                            (r = void 0 === o ? 0 : o),
                            (a = t.isGroupCall),
                            (s = void 0 !== a && a),
                            (c = t.groupID),
                            (u = void 0 === c ? '' : c),
                            (l = { version: 0, call_type: i, call_end: r }),
                            (d = { cmd: 'hangup' }),
                            (p = JSON.stringify(this.handleNewSignaling(l, d))),
                            (h = {}),
                            !s || !u)
                          ) {
                            e.next = 12;
                            break;
                          }
                          return (
                            (e.next = 9),
                            this._chat.inviteInGroup({
                              inviteeList: n,
                              groupID: u,
                              data: p,
                              timeout: 0,
                            })
                          );
                        case 9:
                          (h = e.sent), (e.next = 15);
                          break;
                        case 12:
                          return (
                            (e.next = 14),
                            this._chat.invite({
                              userID: n[0],
                              data: p,
                              timeout: 0,
                            })
                          );
                        case 14:
                          h = e.sent;
                        case 15:
                          return (
                            this._tuiCallEngine.TRTCCallingDelegate.onCallMessage(
                              h
                            ),
                            e.abrupt('return', h)
                          );
                        case 17:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return t.apply(this, arguments);
            }),
        },
        {
          key: 'switchCallMode',
          value:
            ((e = np(
              _p().mark(function e(t) {
                var n, i, o, r;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info(
                              'TSignaling.switchCallMode.start',
                              { text: { data: { params: t } }, type: 'api' }
                            ),
                            (n = t.userID),
                            (i = t.callType),
                            (o = t.roomID),
                            (r = t.mode),
                            e.abrupt(
                              'return',
                              this.invite({
                                userID: n,
                                type: i,
                                roomID: o,
                                switchMode: r,
                              })
                            )
                          );
                        case 3:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (t) {
              return e.apply(this, arguments);
            }),
        },
        {
          key: 'destroyed',
          value: function () {
            this._logger.info('TSignaling.destroyed.start', { type: 'api' }),
              (this._chat = null);
          },
        },
        {
          key: 'setLogLevel',
          value: function (e) {
            this._chat.setLogLevel(e);
          },
        },
        {
          key: '_convertOfflinePushParams',
          value: function () {
            var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {};
            if (0 === Object.keys(e).length) return {};
            var t = e.title,
              n = e.description,
              i = e.androidOPPOChannelID,
              o = e.extension,
              r = e.isDisablePush,
              a = e.iOSPushType,
              s = void 0 === a ? 0 : a,
              c = e.ignoreIOSBadge,
              u = e.iOSSound,
              l = e.androidSound,
              d = e.androidVIVOClassification;
            return {
              title: t || '',
              description: n || '',
              extension: o || '',
              disablePush: r || !1,
              androidInfo: {
                sound: l,
                XiaoMiChannelID: e.androidXiaoMiChannelID,
                OPPOChannelID: i,
                FCMChannelID: e.androidFCMChannelID,
                VIVOClassification: d,
                HuaWeiCategory: e.androidHuaWeiCategory,
              },
              apnsInfo: {
                sound: u,
                ignoreIOSBadge: c || !1,
                disableVoipPush: 1 !== s,
              },
            };
          },
        },
      ]
    );
    var e, t, n, i, o, r, a;
  })(),
  _G = sp(
    function e() {
      op(this, e), (this._table = 'timweb-trtccalling'), (this._report = []);
    },
    [
      {
        key: 'pushIn',
        value: function (e) {
          wU.debug('SSOLogBody.pushIn', this._report.length, e),
            this._report.push(e);
        },
      },
      {
        key: 'backfill',
        value: function (e) {
          var t;
          UU(e) &&
            0 !== e.length &&
            (wU.debug('SSOLogBody.backfill', this._report.length, e.length),
            (t = this._report).unshift.apply(t, mp(e)));
        },
      },
      {
        key: 'getLogsNumInMemory',
        value: function () {
          return this._report.length;
        },
      },
      {
        key: 'isEmpty',
        value: function () {
          return 0 === this._report.length;
        },
      },
      {
        key: '_reset',
        value: function () {
          (this._report.length = 0), (this._report = []);
        },
      },
      {
        key: 'getTable',
        value: function () {
          return this._table;
        },
      },
      {
        key: 'getLogsInMemory',
        value: function () {
          var e = this._report.slice();
          return this._reset(), e;
        },
      },
    ]
  ),
  vG = (function () {
    function e(t) {
      op(this, e),
        (this.sdkappid = ''),
        (this.version = ''),
        (this.userid = ''),
        (this.platform = ''),
        (this.useragent = ''),
        (this.method = t),
        (this.codeint = 1),
        (this.calltype = 1),
        (this.talktime = 0),
        (this.message = ''),
        (this.text = ''),
        (this.startts = Date.now()),
        (this.endts = 0),
        (this.timespan = 0),
        (this.time = ''),
        (this.networktype = ''),
        (this.host = zU());
    }
    return sp(
      e,
      [
        {
          key: 'setCommonInfo',
          value: function (e) {
            var t,
              n,
              i,
              o,
              r = e.SDKAppID,
              a = e.version,
              s = e.userID,
              c = e.platform,
              u = e.scene;
            (this.sdkappid = r),
              (this.version = ''.concat(a)),
              (this.userid = s),
              (this.platform = c),
              (this.scene = u),
              (this.time =
                ((n = (t = new Date()).toISOString()),
                '',
                (o =
                  (i = t.getTimezoneOffset() / 60) < 0
                    ? i > -10
                      ? '+0'.concat(Math.abs(100 * i))
                      : '+'.concat(Math.abs(100 * i))
                    : i >= 10
                      ? '-'.concat(100 * i)
                      : '-0'.concat(100 * i)),
                n.replace('Z', o))),
              this.startts &&
                this.endts &&
                !this.timespan &&
                (this.timespan = Math.abs(this.endts - this.startts));
          },
        },
        {
          key: 'setEnd',
          value: function () {
            var e = this,
              t =
                arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            (this.endts = Date.now()),
              t
                ? this._eventStatController.pushIn(this)
                : setTimeout(function () {
                    e._eventStatController.pushIn(e);
                  }, 0);
          },
        },
        {
          key: 'setError',
          value: function (e, t, n) {
            return (
              this.setNetworkType(n),
              t
                ? (e.code && this.setCode(e.code),
                  e.message && this.setMessage(e.message))
                : (this.setCode(BO.NO_NETWORK), this.setMessage(cG.NO_NETWORK)),
              this
            );
          },
        },
        {
          key: 'setCode',
          value: function (e) {
            return (
              'ECONNABORTED' === e && (this.codeint = 103),
              GU(e)
                ? (this.codeint = e)
                : wU.warn(
                    'SSOLogData.setCode value not a number, please check!',
                    e,
                    Ip(e)
                  ),
              this
            );
          },
        },
        {
          key: 'setMessage',
          value: function (e) {
            return xU(e) ? ((this.message = e), this) : this;
          },
        },
        {
          key: 'setText',
          value: function (e) {
            return (
              GU(e) ? (this.text = e.toString()) : xU(e) && (this.text = e),
              this
            );
          },
        },
        {
          key: 'setTalkTime',
          value: function (e) {
            return (this.talktime = e), this;
          },
        },
        {
          key: 'setMessageType',
          value: function (e) {
            return (this.msgType = e), this;
          },
        },
        {
          key: 'setCallType',
          value: function (e) {
            return (this.calltype = e), this;
          },
        },
        {
          key: 'setNetworkType',
          value: function (e) {
            return (
              qU(e)
                ? wU.warn(
                    'SSOLogData.setNetworkType value is undefined, please check!'
                  )
                : (this.networktype = e),
              this
            );
          },
        },
      ],
      [
        {
          key: 'bindController',
          value: function (t) {
            e.prototype._eventStatController = t;
          },
        },
      ]
    );
  })(),
  mG = { COMMON: 'https://webim.tim.qq.com' },
  yG = 'imopenstat',
  IG = 'tweb_trtccalling_report',
  MG = 'v4',
  CG = sp(
    function e() {
      op(this, e),
        (this.TAG = 'trtccalling-ssolog-event'),
        (this._reportBody = new _G()),
        (this._version = MR),
        (this.MIN_THRESHOLD = 20),
        (this.MAX_THRESHOLD = 100),
        (this.WAITING_TIME = 6e4),
        (this.INTERVAL = 2e4),
        (this._timerID = 0),
        this._resetLastReportTime(),
        this._startReportTimer(),
        (this._retryCount = 0),
        (this.MAX_RETRY_COUNT = 3);
    },
    [
      {
        key: 'reportAtOnce',
        value: function () {
          wU.debug('EventStatController.reportAtOnce'), this._report();
        },
      },
      {
        key: 'pushIn',
        value: function (e) {
          e instanceof vG &&
            (e.setCommonInfo({
              SDKAppID: Number($n.getStorageSync('sdkAppId')),
              version: this._version,
              userID: $n.getStorageSync('userId'),
            }),
            this._reportBody.pushIn(e),
            this._report());
        },
      },
      {
        key: '_resetLastReportTime',
        value: function () {
          this._lastReportTime = Date.now();
        },
      },
      {
        key: '_startReportTimer',
        value: function () {
          var e = this;
          this._timerID = setInterval(function () {
            Date.now() < e._lastReportTime + e.WAITING_TIME ||
              e._reportBody.isEmpty() ||
              e._report();
          }, this.INTERVAL);
        },
      },
      {
        key: '_stopReportTimer',
        value: function () {
          this._timerID > 0 &&
            (clearInterval(this._timerID), (this._timerID = 0));
        },
      },
      {
        key: '_report',
        value: function () {
          var e = this;
          if (!this._reportBody.isEmpty()) {
            var t = Math.ceil(+new Date() / 1e3),
              n = $n.getStorageSync('sdkAppId'),
              i = this._reportBody.getLogsInMemory(),
              o = { table: this._reportBody.getTable(), report: i },
              r = mG.COMMON,
              a = MG,
              s = yG,
              c = IG,
              u = ''
                .concat(r, '/')
                .concat(a, '/')
                .concat(s, '/')
                .concat(c, '/?sdkappid=')
                .concat(n, '&reqtime=')
                .concat(t);
            $n.request({
              url: u,
              method: 'POST',
              data: JSON.stringify(o),
              header: { 'content-type': 'application/json' },
              success: function (t) {
                e._retryCount > 0 &&
                  (wU.debug('EventStatController.report retry success'),
                  (e._retryCount = 0));
              },
              fail: function (t) {
                wU.warn('EventStatController.report, error:'.concat(WU(t))),
                  e._reportBody.backfill(i),
                  e._reportBody.getLogsNumInMemory() > e.MAX_THRESHOLD ||
                  e._retryCount === e.MAX_RETRY_COUNT ||
                  0 === e._timerID
                    ? (e._retryCount = 0)
                    : (e._retryCount += 1);
              },
            });
          }
        },
      },
      {
        key: 'reset',
        value: function () {
          wU.log('EventStatController.reset'),
            this._stopReportTimer(),
            this._report();
        },
      },
    ]
  ),
  TG = sp(
    function e() {
      op(this, e);
    },
    [
      {
        key: 'on',
        value: function (e, t, n) {
          'function' == typeof t
            ? ((this._stores = this._stores || {}),
              (this._stores[e] = this._stores[e] || []).push({ cb: t, ctx: n }))
            : console.error('listener must be a function');
        },
      },
      {
        key: 'emit',
        value: function (e) {
          this._stores = this._stores || {};
          var t,
            n = this._stores[e];
          if (n) {
            (n = n.slice(0)),
              ((t = [].slice.call(arguments, 1))[0] = {
                eventCode: e,
                data: t[0],
              });
            for (var i = 0, o = n.length; i < o; i++)
              n[i].cb.apply(n[i].ctx, t);
          }
        },
      },
      {
        key: 'off',
        value: function (e, t) {
          if (((this._stores = this._stores || {}), arguments.length)) {
            var n = this._stores[e];
            if (n)
              if (1 !== arguments.length) {
                for (var i = 0, o = n.length; i < o; i++)
                  if (n[i].cb === t) {
                    n.splice(i, 1);
                    break;
                  }
              } else delete this._stores[e];
          } else this._stores = {};
        },
      },
    ]
  );
function EG(e) {
  var t = new Date(e);
  return (
    ''.concat(t.getFullYear(), '-') +
    ''.concat(
      t.getMonth() + 1 < 10 ? '0'.concat(t.getMonth() + 1) : t.getMonth() + 1,
      '-'
    ) +
    DG(t.getDate(), ' ') +
    DG(t.getHours(), ':') +
    DG(t.getMinutes(), ':') +
    DG(t.getSeconds(), '')
  );
}
function DG(e, t) {
  return ''.concat(e < 10 ? '0'.concat(e).concat(t) : ''.concat(e).concat(t));
}
var SG = x_.includes,
  kG = _y;
Cv(
  {
    target: 'Array',
    proto: !0,
    forced: kp(function () {
      return !Array(1).includes();
    }),
  },
  {
    includes: function (e) {
      return SG(this, e, arguments.length > 1 ? arguments[1] : void 0);
    },
  }
),
  kG('includes');
var RG = Cv,
  LG = Iw,
  AG = ih,
  OG = Ik,
  bG = Cw,
  NG = jp(''.indexOf);
RG(
  { target: 'String', proto: !0, forced: !bG('includes') },
  {
    includes: function (e) {
      return !!~NG(
        OG(AG(this)),
        OG(LG(e)),
        arguments.length > 1 ? arguments[1] : void 0
      );
    },
  }
);
var PG = jp,
  wG = nk,
  UG = rS.exports.getWeakData,
  GG = HC,
  xG = tg,
  FG = eh,
  qG = lh,
  VG = bD,
  BG = lf,
  HG = Xg.set,
  jG = Xg.getterFor,
  KG = Gm.find,
  WG = Gm.findIndex,
  zG = PG([].splice),
  $G = 0,
  YG = function (e) {
    return e.frozen || (e.frozen = new JG());
  },
  JG = function () {
    this.entries = [];
  },
  XG = function (e, t) {
    return KG(e.entries, function (e) {
      return e[0] === t;
    });
  };
JG.prototype = {
  get: function (e) {
    var t = XG(this, e);
    if (t) return t[1];
  },
  has: function (e) {
    return !!XG(this, e);
  },
  set: function (e, t) {
    var n = XG(this, e);
    n ? (n[1] = t) : this.entries.push([e, t]);
  },
  delete: function (e) {
    var t = WG(this.entries, function (t) {
      return t[0] === e;
    });
    return ~t && zG(this.entries, t, 1), !!~t;
  },
};
var ZG,
  QG = {
    getConstructor: function (e, t, n, i) {
      var o = e(function (e, o) {
          GG(e, r),
            HG(e, { type: t, id: $G++, frozen: null }),
            FG(o) || VG(o, e[i], { that: e, AS_ENTRIES: n });
        }),
        r = o.prototype,
        a = jG(t),
        s = function (e, t, n) {
          var i = a(e),
            o = UG(xG(t), !0);
          return !0 === o ? YG(i).set(t, n) : (o[i.id] = n), e;
        };
      return (
        wG(r, {
          delete: function (e) {
            var t = a(this);
            if (!qG(e)) return !1;
            var n = UG(e);
            return !0 === n
              ? YG(t).delete(e)
              : n && BG(n, t.id) && delete n[t.id];
          },
          has: function (e) {
            var t = a(this);
            if (!qG(e)) return !1;
            var n = UG(e);
            return !0 === n ? YG(t).has(e) : n && BG(n, t.id);
          },
        }),
        wG(
          r,
          n
            ? {
                get: function (e) {
                  var t = a(this);
                  if (qG(e)) {
                    var n = UG(e);
                    if (!0 === n) return YG(t).get(e);
                    if (n) return n[t.id];
                  }
                },
                set: function (e, t) {
                  return s(this, e, t);
                },
              }
            : {
                add: function (e) {
                  return s(this, e, !0);
                },
              }
        ),
        o
      );
    },
  },
  ex = yS,
  tx = Dp,
  nx = jp,
  ix = nk,
  ox = rS.exports,
  rx = ek,
  ax = QG,
  sx = lh,
  cx = Xg.enforce,
  ux = kp,
  lx = Ng,
  dx = Object,
  px = Array.isArray,
  hx = dx.isExtensible,
  fx = dx.isFrozen,
  gx = dx.isSealed,
  _x = dx.freeze,
  vx = dx.seal,
  mx = !tx.ActiveXObject && 'ActiveXObject' in tx,
  yx = function (e) {
    return function () {
      return e(this, arguments.length ? arguments[0] : void 0);
    };
  },
  Ix = rx('WeakMap', yx, ax),
  Mx = Ix.prototype,
  Cx = nx(Mx.set);
if (lx)
  if (mx) {
    (ZG = ax.getConstructor(yx, 'WeakMap', !0)), ox.enable();
    var Tx = nx(Mx.delete),
      Ex = nx(Mx.has),
      Dx = nx(Mx.get);
    ix(Mx, {
      delete: function (e) {
        if (sx(e) && !hx(e)) {
          var t = cx(this);
          return (
            t.frozen || (t.frozen = new ZG()), Tx(this, e) || t.frozen.delete(e)
          );
        }
        return Tx(this, e);
      },
      has: function (e) {
        if (sx(e) && !hx(e)) {
          var t = cx(this);
          return (
            t.frozen || (t.frozen = new ZG()), Ex(this, e) || t.frozen.has(e)
          );
        }
        return Ex(this, e);
      },
      get: function (e) {
        if (sx(e) && !hx(e)) {
          var t = cx(this);
          return (
            t.frozen || (t.frozen = new ZG()),
            Ex(this, e) ? Dx(this, e) : t.frozen.get(e)
          );
        }
        return Dx(this, e);
      },
      set: function (e, t) {
        if (sx(e) && !hx(e)) {
          var n = cx(this);
          n.frozen || (n.frozen = new ZG()),
            Ex(this, e) ? Cx(this, e, t) : n.frozen.set(e, t);
        } else Cx(this, e, t);
        return this;
      },
    });
  } else
    ex &&
      ux(function () {
        var e = _x([]);
        return Cx(new Ix(), e, 1), !fx(e);
      }) &&
      ix(Mx, {
        set: function (e, t) {
          var n;
          return (
            px(e) && (fx(e) ? (n = _x) : gx(e) && (n = vx)),
            Cx(this, e, t),
            n && n(e),
            this
          );
        },
      });
var Sx = { exports: {} };
/*!
 * validate.js 0.13.1
 *
 * (c) 2013-2019 Nicklas Ansman, 2013 Wrapp
 * Validate.js may be freely distributed under the MIT license.
 * For all details and documentation:
 * http://validatejs.org/
 */ (function (e, t, n) {
  var i = function (e, t, n) {
      n = o.extend({}, o.options, n);
      var r = o.runValidations(e, t, n);
      if (
        r.some(function (e) {
          return o.isPromise(e.error);
        })
      )
        throw new Error('Use validate.async if you want support for promises');
      return i.processValidationResults(r, n);
    },
    o = i;
  (o.extend = function (e) {
    return (
      [].slice.call(arguments, 1).forEach(function (t) {
        for (var n in t) e[n] = t[n];
      }),
      e
    );
  }),
    o.extend(i, {
      version: {
        major: 0,
        minor: 13,
        patch: 1,
        metadata: null,
        toString: function () {
          var e = o.format('%{major}.%{minor}.%{patch}', o.version);
          return (
            o.isEmpty(o.version.metadata) || (e += '+' + o.version.metadata), e
          );
        },
      },
      Promise: 'undefined' != typeof Promise ? Promise : null,
      EMPTY_STRING_REGEXP: /^\s*$/,
      runValidations: function (e, t, n) {
        var i,
          r,
          a,
          s,
          c,
          u,
          l,
          d = [];
        for (i in ((o.isDomElement(e) || o.isJqueryElement(e)) &&
          (e = o.collectFormValues(e)),
        t))
          for (r in ((a = o.getDeepObjectValue(e, i)),
          (s = o.result(t[i], a, e, i, n, t)))) {
            if (!(c = o.validators[r]))
              throw (
                ((l = o.format('Unknown validator %{name}', { name: r })),
                new Error(l))
              );
            (u = s[r]),
              (u = o.result(u, a, e, i, n, t)) &&
                d.push({
                  attribute: i,
                  value: a,
                  validator: r,
                  globalOptions: n,
                  attributes: e,
                  options: u,
                  error: c.call(c, a, u, i, e, n),
                });
          }
        return d;
      },
      processValidationResults: function (e, t) {
        (e = o.pruneEmptyErrors(e, t)),
          (e = o.expandMultipleErrors(e, t)),
          (e = o.convertErrorMessages(e, t));
        var n = t.format || 'grouped';
        if ('function' != typeof o.formatters[n])
          throw new Error(o.format('Unknown format %{format}', t));
        return (e = o.formatters[n](e)), o.isEmpty(e) ? void 0 : e;
      },
      async: function (e, t, n) {
        var i =
          (n = o.extend({}, o.async.options, n)).wrapErrors ||
          function (e) {
            return e;
          };
        !1 !== n.cleanAttributes && (e = o.cleanAttributes(e, t));
        var r = o.runValidations(e, t, n);
        return new o.Promise(function (a, s) {
          o.waitForResults(r).then(
            function () {
              var c = o.processValidationResults(r, n);
              c ? s(new i(c, n, e, t)) : a(e);
            },
            function (e) {
              s(e);
            }
          );
        });
      },
      single: function (e, t, n) {
        return (
          (n = o.extend({}, o.single.options, n, {
            format: 'flat',
            fullMessages: !1,
          })),
          o({ single: e }, { single: t }, n)
        );
      },
      waitForResults: function (e) {
        return e.reduce(
          function (e, t) {
            return o.isPromise(t.error)
              ? e.then(function () {
                  return t.error.then(function (e) {
                    t.error = e || null;
                  });
                })
              : e;
          },
          new o.Promise(function (e) {
            e();
          })
        );
      },
      result: function (e) {
        var t = [].slice.call(arguments, 1);
        return 'function' == typeof e && (e = e.apply(null, t)), e;
      },
      isNumber: function (e) {
        return 'number' == typeof e && !isNaN(e);
      },
      isFunction: function (e) {
        return 'function' == typeof e;
      },
      isInteger: function (e) {
        return o.isNumber(e) && e % 1 == 0;
      },
      isBoolean: function (e) {
        return 'boolean' == typeof e;
      },
      isObject: function (e) {
        return e === Object(e);
      },
      isDate: function (e) {
        return e instanceof Date;
      },
      isDefined: function (e) {
        return null != e;
      },
      isPromise: function (e) {
        return !!e && o.isFunction(e.then);
      },
      isJqueryElement: function (e) {
        return e && o.isString(e.jquery);
      },
      isDomElement: function (e) {
        return (
          !!e &&
          !(!e.querySelectorAll || !e.querySelector) &&
          (!(!o.isObject(document) || e !== document) ||
            ('object' == typeof HTMLElement
              ? e instanceof HTMLElement
              : e &&
                'object' == typeof e &&
                null !== e &&
                1 === e.nodeType &&
                'string' == typeof e.nodeName))
        );
      },
      isEmpty: function (e) {
        var t;
        if (!o.isDefined(e)) return !0;
        if (o.isFunction(e)) return !1;
        if (o.isString(e)) return o.EMPTY_STRING_REGEXP.test(e);
        if (o.isArray(e)) return 0 === e.length;
        if (o.isDate(e)) return !1;
        if (o.isObject(e)) {
          for (t in e) return !1;
          return !0;
        }
        return !1;
      },
      format: o.extend(
        function (e, t) {
          return o.isString(e)
            ? e.replace(o.format.FORMAT_REGEXP, function (e, n, i) {
                return '%' === n ? '%{' + i + '}' : String(t[i]);
              })
            : e;
        },
        { FORMAT_REGEXP: /(%?)%\{([^\}]+)\}/g }
      ),
      prettify: function (e) {
        return o.isNumber(e)
          ? (100 * e) % 1 == 0
            ? '' + e
            : parseFloat(Math.round(100 * e) / 100).toFixed(2)
          : o.isArray(e)
            ? e
                .map(function (e) {
                  return o.prettify(e);
                })
                .join(', ')
            : o.isObject(e)
              ? o.isDefined(e.toString)
                ? e.toString()
                : JSON.stringify(e)
              : (e = '' + e)
                  .replace(/([^\s])\.([^\s])/g, '$1 $2')
                  .replace(/\\+/g, '')
                  .replace(/[_-]/g, ' ')
                  .replace(/([a-z])([A-Z])/g, function (e, t, n) {
                    return t + ' ' + n.toLowerCase();
                  })
                  .toLowerCase();
      },
      stringifyValue: function (e, t) {
        return ((t && t.prettify) || o.prettify)(e);
      },
      isString: function (e) {
        return 'string' == typeof e;
      },
      isArray: function (e) {
        return '[object Array]' === {}.toString.call(e);
      },
      isHash: function (e) {
        return o.isObject(e) && !o.isArray(e) && !o.isFunction(e);
      },
      contains: function (e, t) {
        return (
          !!o.isDefined(e) && (o.isArray(e) ? -1 !== e.indexOf(t) : t in e)
        );
      },
      unique: function (e) {
        return o.isArray(e)
          ? e.filter(function (e, t, n) {
              return n.indexOf(e) == t;
            })
          : e;
      },
      forEachKeyInKeypath: function (e, t, n) {
        if (o.isString(t)) {
          var i,
            r = '',
            a = !1;
          for (i = 0; i < t.length; ++i)
            switch (t[i]) {
              case '.':
                a ? ((a = !1), (r += '.')) : ((e = n(e, r, !1)), (r = ''));
                break;
              case '\\':
                a ? ((a = !1), (r += '\\')) : (a = !0);
                break;
              default:
                (a = !1), (r += t[i]);
            }
          return n(e, r, !0);
        }
      },
      getDeepObjectValue: function (e, t) {
        if (o.isObject(e))
          return o.forEachKeyInKeypath(e, t, function (e, t) {
            if (o.isObject(e)) return e[t];
          });
      },
      collectFormValues: function (e, t) {
        var n,
          i,
          r,
          a,
          s,
          c,
          u = {};
        if ((o.isJqueryElement(e) && (e = e[0]), !e)) return u;
        for (
          t = t || {},
            a = e.querySelectorAll('input[name], textarea[name]'),
            n = 0;
          n < a.length;
          ++n
        )
          if (((r = a.item(n)), !o.isDefined(r.getAttribute('data-ignored')))) {
            var l = r.name.replace(/\./g, '\\\\.');
            (c = o.sanitizeFormValue(r.value, t)),
              'number' === r.type
                ? (c = c ? +c : null)
                : 'checkbox' === r.type
                  ? r.attributes.value
                    ? r.checked || (c = u[l] || null)
                    : (c = r.checked)
                  : 'radio' === r.type && (r.checked || (c = u[l] || null)),
              (u[l] = c);
          }
        for (a = e.querySelectorAll('select[name]'), n = 0; n < a.length; ++n)
          if (((r = a.item(n)), !o.isDefined(r.getAttribute('data-ignored')))) {
            if (r.multiple)
              for (i in ((c = []), r.options))
                (s = r.options[i]) &&
                  s.selected &&
                  c.push(o.sanitizeFormValue(s.value, t));
            else {
              var d =
                void 0 !== r.options[r.selectedIndex]
                  ? r.options[r.selectedIndex].value
                  : '';
              c = o.sanitizeFormValue(d, t);
            }
            u[r.name] = c;
          }
        return u;
      },
      sanitizeFormValue: function (e, t) {
        return (
          t.trim && o.isString(e) && (e = e.trim()),
          !1 !== t.nullify && '' === e ? null : e
        );
      },
      capitalize: function (e) {
        return o.isString(e) ? e[0].toUpperCase() + e.slice(1) : e;
      },
      pruneEmptyErrors: function (e) {
        return e.filter(function (e) {
          return !o.isEmpty(e.error);
        });
      },
      expandMultipleErrors: function (e) {
        var t = [];
        return (
          e.forEach(function (e) {
            o.isArray(e.error)
              ? e.error.forEach(function (n) {
                  t.push(o.extend({}, e, { error: n }));
                })
              : t.push(e);
          }),
          t
        );
      },
      convertErrorMessages: function (e, t) {
        var n = [],
          i = (t = t || {}).prettify || o.prettify;
        return (
          e.forEach(function (e) {
            var r = o.result(
              e.error,
              e.value,
              e.attribute,
              e.options,
              e.attributes,
              e.globalOptions
            );
            o.isString(r)
              ? ('^' === r[0]
                  ? (r = r.slice(1))
                  : !1 !== t.fullMessages &&
                    (r = o.capitalize(i(e.attribute)) + ' ' + r),
                (r = r.replace(/\\\^/g, '^')),
                (r = o.format(r, { value: o.stringifyValue(e.value, t) })),
                n.push(o.extend({}, e, { error: r })))
              : n.push(e);
          }),
          n
        );
      },
      groupErrorsByAttribute: function (e) {
        var t = {};
        return (
          e.forEach(function (e) {
            var n = t[e.attribute];
            n ? n.push(e) : (t[e.attribute] = [e]);
          }),
          t
        );
      },
      flattenErrorsToArray: function (e) {
        return e
          .map(function (e) {
            return e.error;
          })
          .filter(function (e, t, n) {
            return n.indexOf(e) === t;
          });
      },
      cleanAttributes: function (e, t) {
        function n(e, t, n) {
          return o.isObject(e[t]) ? e[t] : (e[t] = !!n || {});
        }
        return o.isObject(t) && o.isObject(e)
          ? (function e(t, n) {
              if (!o.isObject(t)) return t;
              var i,
                r,
                a = o.extend({}, t);
              for (r in t)
                (i = n[r]),
                  o.isObject(i) ? (a[r] = e(a[r], i)) : i || delete a[r];
              return a;
            })(
              e,
              (t = (function (e) {
                var t,
                  i = {};
                for (t in e) e[t] && o.forEachKeyInKeypath(i, t, n);
                return i;
              })(t))
            )
          : {};
      },
      exposeModule: function (e, t, n, i, o) {
        n
          ? (i && i.exports && (n = i.exports = e), (n.validate = e))
          : ((t.validate = e),
            e.isFunction(o) &&
              o.amd &&
              o([], function () {
                return e;
              }));
      },
      warn: function (e) {
        'undefined' != typeof console &&
          console.warn &&
          console.warn('[validate.js] ' + e);
      },
      error: function (e) {
        'undefined' != typeof console &&
          console.error &&
          console.error('[validate.js] ' + e);
      },
    }),
    (i.validators = {
      presence: function (e, t) {
        if (
          !1 !== (t = o.extend({}, this.options, t)).allowEmpty
            ? !o.isDefined(e)
            : o.isEmpty(e)
        )
          return t.message || this.message || "can't be blank";
      },
      length: function (e, t, n) {
        if (o.isDefined(e)) {
          var i,
            r = (t = o.extend({}, this.options, t)).is,
            a = t.maximum,
            s = t.minimum,
            c = [],
            u = (e = (
              t.tokenizer ||
              function (e) {
                return e;
              }
            )(e)).length;
          return o.isNumber(u)
            ? (o.isNumber(r) &&
                u !== r &&
                ((i =
                  t.wrongLength ||
                  this.wrongLength ||
                  'is the wrong length (should be %{count} characters)'),
                c.push(o.format(i, { count: r }))),
              o.isNumber(s) &&
                u < s &&
                ((i =
                  t.tooShort ||
                  this.tooShort ||
                  'is too short (minimum is %{count} characters)'),
                c.push(o.format(i, { count: s }))),
              o.isNumber(a) &&
                u > a &&
                ((i =
                  t.tooLong ||
                  this.tooLong ||
                  'is too long (maximum is %{count} characters)'),
                c.push(o.format(i, { count: a }))),
              c.length > 0 ? t.message || c : void 0)
            : t.message || this.notValid || 'has an incorrect length';
        }
      },
      numericality: function (e, t, n, i, r) {
        if (o.isDefined(e)) {
          var a,
            s,
            c = [],
            u = {
              greaterThan: function (e, t) {
                return e > t;
              },
              greaterThanOrEqualTo: function (e, t) {
                return e >= t;
              },
              equalTo: function (e, t) {
                return e === t;
              },
              lessThan: function (e, t) {
                return e < t;
              },
              lessThanOrEqualTo: function (e, t) {
                return e <= t;
              },
              divisibleBy: function (e, t) {
                return e % t == 0;
              },
            },
            l =
              (t = o.extend({}, this.options, t)).prettify ||
              (r && r.prettify) ||
              o.prettify;
          if (o.isString(e) && t.strict) {
            var d = '^-?(0|[1-9]\\d*)';
            if (
              (t.onlyInteger || (d += '(\\.\\d+)?'),
              (d += '$'),
              !new RegExp(d).test(e))
            )
              return (
                t.message ||
                t.notValid ||
                this.notValid ||
                this.message ||
                'must be a valid number'
              );
          }
          if (
            (!0 !== t.noStrings && o.isString(e) && !o.isEmpty(e) && (e = +e),
            !o.isNumber(e))
          )
            return (
              t.message ||
              t.notValid ||
              this.notValid ||
              this.message ||
              'is not a number'
            );
          if (t.onlyInteger && !o.isInteger(e))
            return (
              t.message ||
              t.notInteger ||
              this.notInteger ||
              this.message ||
              'must be an integer'
            );
          for (a in u)
            if (((s = t[a]), o.isNumber(s) && !u[a](e, s))) {
              var p = 'not' + o.capitalize(a),
                h =
                  t[p] || this[p] || this.message || 'must be %{type} %{count}';
              c.push(o.format(h, { count: s, type: l(a) }));
            }
          return (
            t.odd &&
              e % 2 != 1 &&
              c.push(t.notOdd || this.notOdd || this.message || 'must be odd'),
            t.even &&
              e % 2 != 0 &&
              c.push(
                t.notEven || this.notEven || this.message || 'must be even'
              ),
            c.length ? t.message || c : void 0
          );
        }
      },
      datetime: o.extend(
        function (e, t) {
          if (!o.isFunction(this.parse) || !o.isFunction(this.format))
            throw new Error(
              'Both the parse and format functions needs to be set to use the datetime/date validator'
            );
          if (o.isDefined(e)) {
            var n,
              i = [],
              r = (t = o.extend({}, this.options, t)).earliest
                ? this.parse(t.earliest, t)
                : NaN,
              a = t.latest ? this.parse(t.latest, t) : NaN;
            return (
              (e = this.parse(e, t)),
              isNaN(e) || (t.dateOnly && e % 864e5 != 0)
                ? ((n =
                    t.notValid ||
                    t.message ||
                    this.notValid ||
                    'must be a valid date'),
                  o.format(n, { value: arguments[0] }))
                : (!isNaN(r) &&
                    e < r &&
                    ((n =
                      t.tooEarly ||
                      t.message ||
                      this.tooEarly ||
                      'must be no earlier than %{date}'),
                    (n = o.format(n, {
                      value: this.format(e, t),
                      date: this.format(r, t),
                    })),
                    i.push(n)),
                  !isNaN(a) &&
                    e > a &&
                    ((n =
                      t.tooLate ||
                      t.message ||
                      this.tooLate ||
                      'must be no later than %{date}'),
                    (n = o.format(n, {
                      date: this.format(a, t),
                      value: this.format(e, t),
                    })),
                    i.push(n)),
                  i.length ? o.unique(i) : void 0)
            );
          }
        },
        { parse: null, format: null }
      ),
      date: function (e, t) {
        return (
          (t = o.extend({}, t, { dateOnly: !0 })),
          o.validators.datetime.call(o.validators.datetime, e, t)
        );
      },
      format: function (e, t) {
        (o.isString(t) || t instanceof RegExp) && (t = { pattern: t });
        var n,
          i =
            (t = o.extend({}, this.options, t)).message ||
            this.message ||
            'is invalid',
          r = t.pattern;
        if (o.isDefined(e))
          return o.isString(e)
            ? (o.isString(r) && (r = new RegExp(t.pattern, t.flags)),
              (n = r.exec(e)) && n[0].length == e.length ? void 0 : i)
            : i;
      },
      inclusion: function (e, t) {
        if (
          o.isDefined(e) &&
          (o.isArray(t) && (t = { within: t }),
          (t = o.extend({}, this.options, t)),
          !o.contains(t.within, e))
        ) {
          var n =
            t.message ||
            this.message ||
            '^%{value} is not included in the list';
          return o.format(n, { value: e });
        }
      },
      exclusion: function (e, t) {
        if (
          o.isDefined(e) &&
          (o.isArray(t) && (t = { within: t }),
          (t = o.extend({}, this.options, t)),
          o.contains(t.within, e))
        ) {
          var n = t.message || this.message || '^%{value} is restricted';
          return (
            o.isString(t.within[e]) && (e = t.within[e]),
            o.format(n, { value: e })
          );
        }
      },
      email: o.extend(
        function (e, t) {
          var n =
            (t = o.extend({}, this.options, t)).message ||
            this.message ||
            'is not a valid email';
          if (o.isDefined(e))
            return o.isString(e) && this.PATTERN.exec(e) ? void 0 : n;
        },
        {
          PATTERN:
            /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i,
        }
      ),
      equality: function (e, t, n, i, r) {
        if (o.isDefined(e)) {
          o.isString(t) && (t = { attribute: t });
          var a =
            (t = o.extend({}, this.options, t)).message ||
            this.message ||
            'is not equal to %{attribute}';
          if (o.isEmpty(t.attribute) || !o.isString(t.attribute))
            throw new Error('The attribute must be a non empty string');
          var s = o.getDeepObjectValue(i, t.attribute),
            c =
              t.comparator ||
              function (e, t) {
                return e === t;
              },
            u = t.prettify || (r && r.prettify) || o.prettify;
          return c(e, s, t, n, i)
            ? void 0
            : o.format(a, { attribute: u(t.attribute) });
        }
      },
      url: function (e, t) {
        if (o.isDefined(e)) {
          var n =
              (t = o.extend({}, this.options, t)).message ||
              this.message ||
              'is not a valid url',
            i = t.schemes || this.schemes || ['http', 'https'],
            r = t.allowLocal || this.allowLocal || !1,
            a = t.allowDataUrl || this.allowDataUrl || !1;
          if (!o.isString(e)) return n;
          var s = '^(?:(?:' + i.join('|') + ')://)(?:\\S+(?::\\S*)?@)?(?:',
            c = '(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))';
          return (
            r
              ? (c += '?')
              : (s +=
                  '(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})'),
            (s +=
              '(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*' +
              c +
              ')(?::\\d{2,5})?(?:[/?#]\\S*)?$'),
            a &&
              (s =
                '(?:' +
                s +
                ")|(?:^data:(?:\\w+\\/[-+.\\w]+(?:;[\\w=]+)*)?(?:;base64)?,[A-Za-z0-9-_.!~\\*'();\\/?:@&=+$,%]*$)"),
            new RegExp(s, 'i').exec(e) ? void 0 : n
          );
        }
      },
      type: o.extend(
        function (e, t, n, i, r) {
          if ((o.isString(t) && (t = { type: t }), o.isDefined(e))) {
            var a,
              s = o.extend({}, this.options, t),
              c = s.type;
            if (!o.isDefined(c)) throw new Error('No type was specified');
            if (((a = o.isFunction(c) ? c : this.types[c]), !o.isFunction(a)))
              throw new Error(
                'validate.validators.type.types.' + c + ' must be a function.'
              );
            if (!a(e, s, n, i, r)) {
              var u =
                t.message ||
                this.messages[c] ||
                this.message ||
                s.message ||
                (o.isFunction(c)
                  ? 'must be of the correct type'
                  : 'must be of type %{type}');
              return (
                o.isFunction(u) && (u = u(e, t, n, i, r)),
                o.format(u, { attribute: o.prettify(n), type: c })
              );
            }
          }
        },
        {
          types: {
            object: function (e) {
              return o.isObject(e) && !o.isArray(e);
            },
            array: o.isArray,
            integer: o.isInteger,
            number: o.isNumber,
            string: o.isString,
            date: o.isDate,
            boolean: o.isBoolean,
          },
          messages: {},
        }
      ),
    }),
    (i.formatters = {
      detailed: function (e) {
        return e;
      },
      flat: o.flattenErrorsToArray,
      grouped: function (e) {
        var t;
        for (t in (e = o.groupErrorsByAttribute(e)))
          e[t] = o.flattenErrorsToArray(e[t]);
        return e;
      },
      constraint: function (e) {
        var t;
        for (t in (e = o.groupErrorsByAttribute(e)))
          e[t] = e[t]
            .map(function (e) {
              return e.validator;
            })
            .sort();
        return e;
      },
    }),
    i.exposeModule(i, this, e, t, n);
}).call(Tp, Sx.exports, Sx, null);
var kx = Sx.exports,
  Rx = 'number',
  Lx = 'string',
  Ax = 'object',
  Ox = 'function',
  bx = 'array',
  Nx = {
    createInstance: { sdkAppID: { presence: !0, type: Rx }, tim: { type: Ax } },
    destroyInstance: {},
    init: {
      userID: { presence: !0, type: Lx },
      userSig: { presence: !0, type: Lx },
    },
    on: {
      eventCode: { presence: !0, type: Lx },
      handler: { presence: !0, type: Ox },
      context: { presence: !0, type: Ax },
    },
    off: {
      eventCode: { presence: !0, type: Lx },
      handler: { presence: !0, type: Ox },
    },
    call: {
      userID: { presence: !0, type: Lx },
      type: { presence: !0, type: Rx },
      roomID: {
        presence: !1,
        type: Rx,
        numericality: {
          onlyInteger: !0,
          greaterThanOrEqualTo: 0,
          lessThanOrEqualTo: OR,
        },
      },
      strRoomID: { presence: !1, type: Lx },
    },
    groupCall: {
      groupID: { presence: !0, type: Lx },
      type: { presence: !0, type: Rx },
      userIDList: { presence: !0, type: bx },
      roomID: {
        presence: !1,
        type: Rx,
        numericality: {
          onlyInteger: !0,
          greaterThanOrEqualTo: 0,
          lessThanOrEqualTo: OR,
        },
      },
      strRoomID: { presence: !1, type: Lx },
    },
    joinInGroupCall: {
      groupID: { presence: !0, type: Lx },
      type: { presence: !0, type: Rx },
      roomID: { presence: !0, type: Rx },
      strRoomID: { presence: !1, type: Lx },
    },
    inviteUser: { userIDList: { presence: !0, type: bx } },
    accept: {},
    reject: {},
    hangup: {},
    switchCallMediaType: { type: { presence: !0, type: Rx } },
    openCamera: {},
    closeCamera: {},
    switchCamera: {},
    openMicrophone: {},
    closeMicrophone: {},
    selectAudioPlaybackDevice: { type: { presence: !0, type: Lx } },
    setSelfInfo: {
      nickName: { presence: !0, type: Lx },
      avatar: { presence: !0, type: Lx },
    },
    setBeautyLevel: {
      level: {
        presence: !0,
        type: Rx,
        numericality: {
          onlyInteger: !0,
          greaterThan: -1,
          lessThanOrEqualTo: 9,
        },
      },
    },
    enableMultiDeviceAbility: { enable: { presence: !0, type: 'boolean' } },
  },
  Px = {
    createInstance: '',
    destroyInstance: '',
    init: '',
    on: '',
    off: '',
    call: [TR.IDLE],
    groupCall: [TR.IDLE],
    accept: [TR.CALLING],
    reject: [TR.CALLING],
    hangup: [TR.CALLING, TR.CONNECTED],
    switchCallMediaType: [TR.CALLING, TR.CONNECTED],
    joinInGroupCall: [TR.IDLE],
    inviteUser: [TR.CALLING, TR.CONNECTED],
    openCamera: [TR.CALLING, TR.CONNECTED],
    closeCamera: [TR.CALLING, TR.CONNECTED],
    switchCamera: [TR.CALLING, TR.CONNECTED],
    openMicrophone: [TR.CALLING, TR.CONNECTED],
    closeMicrophone: [TR.CALLING, TR.CONNECTED],
    selectAudioPlaybackDevice: [TR.CALLING, TR.CONNECTED],
    setSelfInfo: '',
    setBeautyLevel: '',
  },
  Ux = {
    createInstance: !1,
    destroyInstance: !0,
    init: !1,
    off: !0,
    call: !0,
    groupCall: !0,
    joinInGroupCall: !0,
    inviteUser: !0,
    accept: !0,
    reject: !0,
    hangup: !0,
    switchCallMediaType: !0,
    openCamera: !0,
    closeCamera: !0,
    switchCamera: !0,
    openMicrophone: !0,
    closeMicrophone: !0,
    selectAudioPlaybackDevice: !0,
    setSelfInfo: !0,
    setBeautyLevel: !1,
    enableMultiDeviceAbility: !0,
  };
function Gx(e) {
  var t = QU(e)
    ? ''.concat(uG.ERROR_PACKAGE_NOT_PURCHASED)
    : ''.concat(cG.ERROR_PACKAGE_NOT_PURCHASED);
  return t.replace('${purchaseAddress}', eG(e));
}
kx.validators.type.types.function = function (e) {
  return e instanceof Function;
};
var xx = sp(
    function e() {
      op(this, e),
        up(this, 'paramsMatchedRule', Nx),
        up(this, 'statusMatchedRule', Px),
        up(this, 'requireInit', Ux);
    },
    [
      {
        key: 'getParamsMatchedRule',
        value: function (e) {
          return this.paramsMatchedRule[e];
        },
      },
      {
        key: 'getStatusMatchedRule',
        value: function (e) {
          return this.statusMatchedRule[e];
        },
      },
      {
        key: 'getInitReadyRule',
        value: function (e) {
          return this.requireInit[e];
        },
      },
    ]
  ),
  Fx = sp(
    function e() {
      op(this, e), (this._logger = lL());
    },
    [
      {
        key: 'notify',
        value: function (e, t, n) {
          this._logger.error('check:'.concat(e.api), {
            text: { data: e, error: { code: t, message: n } },
          });
          var i = { code: t, fnName: e.api };
          throw ((i = n ? fp(fp({}, i), {}, { message: n }) : i), new hG(i));
        },
      },
    ]
  ),
  qx = sp(function e(t) {
    op(this, e),
      up(this, 'api', ''),
      up(this, 'attributes', {}),
      up(this, 'callStatus', ''),
      up(this, 'capabilityCode', void 0),
      up(this, 'initReady', void 0),
      (this.api = t.api),
      (this.attributes = t.attributes),
      (this.callStatus = t.callStatus),
      (this.capabilityCode = t.capabilityCode),
      (this.initReady = t.initReady),
      (this.sdkAppID = t.sdkAppID);
  }),
  Vx = new WeakMap(),
  Bx = (function () {
    return sp(
      function e() {
        var t, n;
        op(this, e),
          (function (e, t, n) {
            (function (e, t) {
              if (t.has(e))
                throw new TypeError(
                  'Cannot initialize the same private elements twice on an object'
                );
            })(e, t),
              t.set(e, n);
          })(this, Vx, void 0),
          (n = []),
          (t = Vx).set(ep(t, this), n);
      },
      [
        {
          key: 'addAlertHandler',
          value: function (e) {
            rp(Vx, this).push(e);
          },
        },
        {
          key: 'check',
          value:
            ((e = np(
              _p().mark(function e(t, n) {
                var i;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          i = 0;
                        case 1:
                          if (!(i < rp(Vx, this).length)) {
                            e.next = 7;
                            break;
                          }
                          return (e.next = 4), rp(Vx, this)[i].check(t, n);
                        case 4:
                          i++, (e.next = 1);
                          break;
                        case 7:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (t, n) {
              return e.apply(this, arguments);
            }),
        },
        {
          key: 'checkSync',
          value: function (e, t) {
            for (var n = 0; n < rp(Vx, this).length; n++)
              rp(Vx, this)[n].check(e, t);
          },
        },
      ]
    );
    var e;
  })(),
  Hx = (function () {
    return sp(
      function e(t, n) {
        op(this, e),
          up(this, 'rule', void 0),
          up(this, 'notification', void 0),
          (this.rule = t),
          (this.notification = n);
      },
      [
        {
          key: 'check',
          value:
            ((e = np(
              _p().mark(function e(t) {
                return _p().wrap(function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return e.abrupt('return');
                      case 1:
                      case 'end':
                        return e.stop();
                    }
                }, e);
              })
            )),
            function (t) {
              return e.apply(this, arguments);
            }),
        },
      ]
    );
    var e;
  })(),
  jx = (function () {
    function e(t, n) {
      return op(this, e), ip(this, e, [t, n]);
    }
    return (
      dp(e, Hx),
      sp(e, [
        {
          key: 'check',
          value: function (e) {
            var t = this.rule.getParamsMatchedRule(e.api);
            if (t && e.attributes) {
              var n = kx(e.attributes, t);
              if (void 0 !== n)
                for (var i = 0, o = Object.keys(n); i < o.length; i++) {
                  var r = o[i];
                  Object.prototype.hasOwnProperty.call(n, r) &&
                    this.notification.notify(e, BO.ERROR_PARAM_INVALID, n[r]);
                }
            }
          },
        },
      ])
    );
  })(),
  Kx = (function () {
    function e(t, n) {
      return op(this, e), ip(this, e, [t, n]);
    }
    return (
      dp(e, Hx),
      sp(e, [
        {
          key: 'check',
          value: function (e) {
            if (e.callStatus) {
              var t = this.rule.getStatusMatchedRule(e.api);
              t &&
                !t.includes(e.callStatus) &&
                this.notification.notify(e, BO.ERROR_REQUEST_REFUSED);
            }
          },
        },
      ])
    );
  })(),
  Wx = (function () {
    function e(t, n) {
      return op(this, e), ip(this, e, [t, n]);
    }
    return (
      dp(e, Hx),
      sp(e, [
        {
          key: 'check',
          value:
            ((t = np(
              _p().mark(function e(t) {
                var n,
                  i,
                  o,
                  r = arguments;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            ((n = r.length > 1 && void 0 !== r[1] ? r[1] : {}),
                            !t.capabilityCode)
                          ) {
                            e.next = 19;
                            break;
                          }
                          return (
                            (e.prev = 2),
                            (e.next = 5),
                            n.tim.callExperimentalAPI(
                              'isCommercialAbilityEnabled',
                              t.capabilityCode
                            )
                          );
                        case 5:
                          !1 === e.sent.data.enabled &&
                            this.notification.notify(
                              t,
                              BO.ERROR_PACKAGE_NOT_SUPPORTED
                            ),
                            (e.next = 19);
                          break;
                        case 9:
                          if (
                            ((e.prev = 9),
                            (e.t0 = e.catch(2)),
                            2905 !== e.t0.code)
                          ) {
                            e.next = 15;
                            break;
                          }
                          this.notification.notify(
                            t,
                            BO.ERROR_TIM_VERSION_OUTDATED
                          ),
                            (e.next = 19);
                          break;
                        case 15:
                          throw (
                            ((i = null),
                            (o = 0),
                            t.capabilityCode === AR.PRO
                              ? ((i = ''
                                  .concat(
                                    ((a = t.sdkAppID),
                                    (s = void 0),
                                    (s = QU(a)
                                      ? ''.concat(
                                          uG.ERROR_PACKAGE_NOT_SUPPORTED
                                        )
                                      : ''.concat(
                                          cG.ERROR_PACKAGE_NOT_SUPPORTED
                                        )),
                                    (s = s.replace(
                                      '${purchaseAddress}',
                                      eG(a)
                                    ))),
                                    ' <ERROR_PACKAGE_NOT_SUPPORTED: '
                                  )
                                  .concat(BO.ERROR_PACKAGE_NOT_SUPPORTED, '>')),
                                (o = BO.ERROR_PACKAGE_NOT_SUPPORTED))
                              : ((i = ''
                                  .concat(
                                    Gx(t.sdkAppID),
                                    ' <ERROR_PACKAGE_NOT_PURCHASED: '
                                  )
                                  .concat(BO.ERROR_PACKAGE_NOT_PURCHASED, '>')),
                                (o = BO.ERROR_PACKAGE_NOT_PURCHASED)),
                            new hG({ code: o, message: i }))
                          );
                        case 19:
                        case 'end':
                          return e.stop();
                      }
                    var a, s;
                  },
                  e,
                  this,
                  [[2, 9]]
                );
              })
            )),
            function (e) {
              return t.apply(this, arguments);
            }),
        },
      ])
    );
    var t;
  })(),
  zx = (function () {
    function e(t, n) {
      return op(this, e), ip(this, e, [t, n]);
    }
    return (
      dp(e, Hx),
      sp(e, [
        {
          key: 'check',
          value: function (e, t) {
            void 0 !== e.initReady &&
              this.rule.getInitReadyRule(e.api) !== e.initReady &&
              this.notification.notify(e, BO.ERROR_INIT_FAIL);
          },
        },
      ])
    );
  })(),
  $x = (function () {
    function e() {
      op(this, e),
        up(this, 'alertRule', void 0),
        up(this, 'notification', void 0),
        up(this, 'alert', void 0);
    }
    return sp(
      e,
      [
        {
          key: 'initializeBeans',
          value: function () {
            (this.alertRule = new xx()),
              (this.notification = new Fx()),
              (this.alert = new Bx()),
              this.alert.addAlertHandler(
                new jx(this.alertRule, this.notification)
              ),
              this.alert.addAlertHandler(
                new zx(this.alertRule, this.notification)
              ),
              this.alert.addAlertHandler(
                new Wx(this.alertRule, this.notification)
              ),
              this.alert.addAlertHandler(
                new Kx(this.alertRule, this.notification)
              );
          },
        },
        {
          key: 'getAlert',
          value: function () {
            return this.alert;
          },
        },
      ],
      [
        {
          key: 'getInstance',
          value: function () {
            return (
              this.instance ||
                ((this.instance = new e()), this.instance.initializeBeans()),
              this.instance
            );
          },
        },
      ]
    );
  })();
up($x, 'instance', void 0);
var Yx = jp,
  Jx = qh,
  Xx = lh,
  Zx = lf,
  Qx = xM,
  eF = Lp,
  tF = Function,
  nF = Yx([].concat),
  iF = Yx([].join),
  oF = {},
  rF = eF
    ? tF.bind
    : function (e) {
        var t = Jx(this),
          n = t.prototype,
          i = Qx(arguments, 1),
          o = function () {
            var n = nF(i, Qx(arguments));
            return this instanceof o
              ? (function (e, t, n) {
                  if (!Zx(oF, t)) {
                    for (var i = [], o = 0; o < t; o++) i[o] = 'a[' + o + ']';
                    oF[t] = tF('C,a', 'return new C(' + iF(i, ',') + ')');
                  }
                  return oF[t](e, n);
                })(t, n.length, n)
              : t.apply(e, n);
          };
        return Xx(n) && (o.prototype = n), o;
      };
function aF(e) {
  var t = xR;
  switch (e) {
    case 1:
      t = 'audio';
      break;
    case 2:
      t = 'video';
  }
  return t;
}
function sF(e) {
  var t = e;
  return t === DR ? (t = 'caller') : t === SR && (t = 'callee'), t;
}
Cv(
  { target: 'Function', proto: !0, forced: Function.bind !== rF },
  { bind: rF }
);
var cF = sp(
    function e(t) {
      op(this, e),
        up(this, '_eventStatController', void 0),
        up(this, '_callData', void 0),
        up(this, '_ssoLog', void 0),
        (this._eventStatController = new CG()),
        vG.bindController(this._eventStatController),
        this.initializeCallData(t),
        (this._ssoLog = new vG('quality_report'));
    },
    [
      {
        key: 'setCallData',
        value: function (e) {
          this._callData = e;
        },
      },
      {
        key: 'getCallData',
        value: function () {
          return this._callData;
        },
      },
      {
        key: 'setInviteID',
        value: function (e) {
          this._callData.inviteID = e;
        },
      },
      {
        key: 'setTotalTime',
        value: function (e) {
          this._callData.totalTime = ''.concat(e);
        },
      },
      {
        key: 'setAbilityBit',
        value: function (e) {
          this._callData.abilityBit = !!e;
        },
      },
      {
        key: 'setEnterRoomTime',
        value: function (e) {
          this._callData.enterRoomTime = EG(e);
        },
      },
      {
        key: 'setSendSignalingTime',
        value: function (e) {
          this._callData.sendSignalingTime = EG(e);
        },
      },
      {
        key: 'setCallAcceptTime',
        value: function (e) {
          this._callData.callAcceptTime = EG(e);
        },
      },
      {
        key: 'setExitRoomTime',
        value: function (e) {
          this._callData.exitRoomTime = EG(e);
        },
      },
      {
        key: 'setCallEndTime',
        value: function (e) {
          this._callData.callEndTime = EG(e);
        },
      },
      {
        key: 'setCodeAndMessage',
        value: function (e, t) {
          (this._callData.code = e || 0), (this._callData.message = t || '');
        },
      },
      {
        key: 'setCallScene',
        value: function (e) {
          this._callData.callScene = e || '';
        },
      },
      {
        key: 'getResult',
        value: function () {
          return this._callData.result;
        },
      },
      {
        key: 'setResult',
        value: function (e) {
          this._callData.result = e || '';
        },
      },
      {
        key: 'setUserID',
        value: function (e) {
          this._callData.userID = e || '';
        },
      },
      {
        key: 'packageCallDataToKibana',
        value: function () {
          var e = aF(this._callData.callType),
            t = sF(this._callData.callRole);
          return ''
            .concat("CallData{version='")
            .concat(this._callData.version, ', platform=')
            .concat(this._callData.platform, ', framework=')
            .concat(this._callData.framework, ', sdk_app_id=')
            .concat(this._callData.sdkAppId, ', user_id=')
            .concat(this._callData.userID, ', room_id=')
            .concat(this._callData.roomID, ', invite_id=')
            .concat(this._callData.inviteID, ', invitee_list=')
            .concat(this._callData.inviteeList, ', media_type=')
            .concat(e, ', role=')
            .concat(t, ', call_scene=')
            .concat(this._callData.callScene, ', result=')
            .concat(this._callData.result, ', total_time=')
            .concat(this._callData.totalTime, ', total_score=')
            .concat(this._callData.totalScore, ', ability_bit=')
            .concat(this._callData.abilityBit, ', enter_room=')
            .concat(this._callData.enterRoomTime, ', send_signaling=')
            .concat(this._callData.sendSignalingTime, ', call_accept=')
            .concat(this._callData.callAcceptTime, ', exit_room=')
            .concat(this._callData.exitRoomTime, ', call_end=')
            .concat(this._callData.callEndTime, ', code=')
            .concat(this._callData.code, ', message=')
            .concat(this._callData.message, ', network=')
            .concat(this._callData.network, ', audio=')
            .concat(this._callData.audio, ', video=')
            .concat(this._callData.video, '}');
        },
      },
      {
        key: 'initializeCallData',
        value: function () {
          var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {},
            t = e.version,
            n = void 0 === t ? '' : t,
            i = e.sdkAppId,
            o = void 0 === i ? 0 : i,
            r = e.userID,
            a = void 0 === r ? '' : r,
            s = zU(),
            c = Qw ? 'uniminiprogram' : 'wxminiprogram';
          this._callData = {
            version: n,
            platform: s,
            framework: c,
            sdkAppId: o,
            userID: a,
            roomID: 0,
            inviteID: '',
            callRole: '',
            callScene: '',
            callType: 0,
            inviteeList: [],
            result: xR,
            totalTime: 0,
            totalScore: 0,
            code: 0,
            message: '',
            abilityBit: !1,
            enterRoomTime: '',
            sendSignalingTime: '',
            callAcceptTime: '',
            exitRoomTime: '',
            callEndTime: '',
            network: 0,
            audio: 0,
            video: 0,
          };
        },
      },
      {
        key: 'reset',
        value: function () {
          this.initializeCallData(), (this._ssoLog = null);
        },
      },
      {
        key: 'clearCallDataAfterUpload',
        value: function () {
          var e = this.getCallData(),
            t = e.version,
            n = e.sdkAppId,
            i = e.userID;
          this.initializeCallData({ version: t, sdkAppId: n, userID: i });
        },
      },
      {
        key: 'uploadToKibana',
        value: function () {
          try {
            this._ssoLog.setText(this.packageCallDataToKibana()).setEnd(),
              this.clearCallDataAfterUpload();
          } catch (ic) {}
        },
      },
    ]
  ),
  uF = sp(
    function e(t, n) {
      op(this, e),
        up(this, '_eventEmitter', void 0),
        up(this, '_callDataReport', void 0),
        (this._eventEmitter = t.emitter),
        (this._callDataReport = n),
        this.registerListener();
    },
    [
      {
        key: 'registerListener',
        value: function () {
          this._eventEmitter.on(CR.CALL_END, this.onCallEnd.bind(this)),
            this._eventEmitter.on(
              CR.CALLING_CANCEL,
              this.onCallingCancel.bind(this)
            ),
            this._eventEmitter.on(CR.NO_RESP, this.onNoResponse.bind(this)),
            this._eventEmitter.on(CR.LINE_BUSY, this.onLineBusy.bind(this)),
            this._eventEmitter.on(CR.REJECT, this.onReject.bind(this));
        },
      },
      {
        key: 'removeLister',
        value: function () {
          this._eventEmitter.off(CR.CALL_END, this.onCallEnd.bind(this)),
            this._eventEmitter.off(
              CR.CALLING_CANCEL,
              this.onCallingCancel.bind(this)
            ),
            this._eventEmitter.off(CR.NO_RESP, this.onNoResponse.bind(this)),
            this._eventEmitter.off(CR.LINE_BUSY, this.onLineBusy.bind(this)),
            this._eventEmitter.off(CR.REJECT, this.onReject.bind(this));
        },
      },
      {
        key: 'onCallEnd',
        value: function (e) {
          var t = e.data.totalTime,
            n = void 0 === t ? 0 : t;
          this._callDataReport.setTotalTime(n),
            this._callDataReport.setCallEndTime(new Date().getTime()),
            this._callDataReport.setResult(PR),
            this._callDataReport.setCodeAndMessage(),
            this._callDataReport.uploadToKibana();
        },
      },
      {
        key: 'onCallingCancel',
        value: function () {
          this._callDataReport.getResult() ||
            this._callDataReport.setResult('cancel'),
            this._callDataReport.setCodeAndMessage(),
            this._callDataReport.uploadToKibana();
        },
      },
      {
        key: 'onNoResponse',
        value: function () {
          this._callDataReport.setResult(UR);
        },
      },
      {
        key: 'onLineBusy',
        value: function () {
          this._callDataReport.setResult(GR);
        },
      },
      {
        key: 'onReject',
        value: function () {
          this._callDataReport.setResult(wR);
        },
      },
    ]
  );
function lF(e) {
  return dF.apply(this, arguments);
}
function dF() {
  return (
    (dF = np(
      _p().mark(function e(t) {
        return _p().wrap(function (e) {
          for (;;)
            switch ((e.prev = e.next)) {
              case 0:
                if (t === ER.AUDIO || t === ER.VIDEO) {
                  e.next = 2;
                  break;
                }
                return e.abrupt('return');
              case 2:
                return e.abrupt(
                  'return',
                  new Promise(
                    (function () {
                      var e = np(
                        _p().mark(function e(n, i) {
                          var o, r, a, s, c, u, l, d, p, h, f;
                          return _p().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (o = {
                                        microphone: !0,
                                        camera: t === ER.VIDEO,
                                      }),
                                      (r = JU(o)) ||
                                        t !== ER.AUDIO ||
                                        ((a = YR.AUDIO_CALL_MODAL_TITLE),
                                        (s = YR.AUDIO_CALL_MODAL_CONTENT),
                                        hF(a, s),
                                        i({
                                          callType: t,
                                          hasAppDevicePermission: r,
                                        })),
                                      r ||
                                        t !== ER.VIDEO ||
                                        ((c = YR.VIDEO_CALL_MODAL_TITLE),
                                        (u = YR.VIDEO_CALL_MODAL_CONTENT),
                                        hF(c, u),
                                        i({
                                          callType: t,
                                          hasAppDevicePermission: r,
                                        })),
                                      (e.next = 6),
                                      $U(o)
                                    );
                                  case 6:
                                    if ((l = e.sent) || t !== ER.AUDIO) {
                                      e.next = 19;
                                      break;
                                    }
                                    return (
                                      (e.prev = 8),
                                      (e.next = 11),
                                      fF({ scope: XR.RECORD })
                                    );
                                  case 11:
                                    e.next = 19;
                                    break;
                                  case 13:
                                    (e.prev = 13),
                                      (e.t0 = e.catch(8)),
                                      (d = $R.MIC_TITLE),
                                      (p = $R.MIC_CONTENT),
                                      pF(d, p),
                                      i({ callType: t, text: d });
                                  case 19:
                                    if (l || t !== ER.VIDEO) {
                                      e.next = 30;
                                      break;
                                    }
                                    return (
                                      (e.prev = 20),
                                      (e.next = 23),
                                      oG([
                                        fF({ scope: XR.RECORD }),
                                        fF({ scope: XR.CAMERA }),
                                      ])
                                    );
                                  case 23:
                                    e.sent.find(function (e) {
                                      return (
                                        'rejected' ===
                                        (null == e ? void 0 : e.status)
                                      );
                                    }) &&
                                      ((h = $R.CAMERA_TITLE),
                                      (f = $R.CAMERA_CONTENT),
                                      pF(h, f),
                                      i({ callType: t, text: h })),
                                      (e.next = 30);
                                    break;
                                  case 27:
                                    (e.prev = 27),
                                      (e.t1 = e.catch(20)),
                                      console.debug(e.t1);
                                  case 30:
                                    n();
                                  case 31:
                                  case 'end':
                                    return e.stop();
                                }
                            },
                            e,
                            null,
                            [
                              [8, 13],
                              [20, 27],
                            ]
                          );
                        })
                      );
                      return function (t, n) {
                        return e.apply(this, arguments);
                      };
                    })()
                  )
                );
              case 3:
              case 'end':
                return e.stop();
            }
        }, e);
      })
    )),
    dF.apply(this, arguments)
  );
}
function pF(e, t) {
  $n.showModal({
    title: e,
    content: t,
    confirmText: $R.CONFIRM_TEXT,
    success: function (e) {
      e.confirm && $n.openSetting();
    },
  });
}
function hF(e, t) {
  $n.showModal({
    title: e,
    content: t,
    confirmText: YR.CONFIRM_MODAL_TEXT,
    success: function (e) {
      e.confirm && $n.openAppAuthorizeSetting();
    },
  });
}
function fF(e) {
  return gF.apply(this, arguments);
}
function gF() {
  return (gF = np(
    _p().mark(function e(t) {
      return _p().wrap(function (e) {
        for (;;)
          switch ((e.prev = e.next)) {
            case 0:
              if ($n.$TUICallKitPlugin) {
                e.next = 5;
                break;
              }
              return (e.next = 3), $n.authorize(t);
            case 3:
              e.next = 7;
              break;
            case 5:
              return (e.next = 7), $n.authorizeForMiniProgram(t);
            case 7:
            case 'end':
              return e.stop();
          }
      }, e);
    })
  )).apply(this, arguments);
}
var _F = Cv,
  vF = jp,
  mF = E_,
  yF = Wb,
  IF = Ib,
  MF = kp,
  CF = RangeError,
  TF = String,
  EF = Math.floor,
  DF = vF(IF),
  SF = vF(''.slice),
  kF = vF((1).toFixed),
  RF = function (e, t, n) {
    return 0 === t ? n : t % 2 == 1 ? RF(e, t - 1, n * e) : RF(e * e, t / 2, n);
  },
  LF = function (e, t, n) {
    for (var i = -1, o = n; ++i < 6; )
      (o += t * e[i]), (e[i] = o % 1e7), (o = EF(o / 1e7));
  },
  AF = function (e, t) {
    for (var n = 6, i = 0; --n >= 0; )
      (i += e[n]), (e[n] = EF(i / t)), (i = (i % t) * 1e7);
  },
  OF = function (e) {
    for (var t = 6, n = ''; --t >= 0; )
      if ('' !== n || 0 === t || 0 !== e[t]) {
        var i = TF(e[t]);
        n = '' === n ? i : n + DF('0', 7 - i.length) + i;
      }
    return n;
  };
_F(
  {
    target: 'Number',
    proto: !0,
    forced:
      MF(function () {
        return (
          '0.000' !== kF(8e-5, 3) ||
          '1' !== kF(0.9, 0) ||
          '1.25' !== kF(1.255, 2) ||
          '1000000000000000128' !== kF(0xde0b6b3a7640080, 0)
        );
      }) ||
      !MF(function () {
        kF({});
      }),
  },
  {
    toFixed: function (e) {
      var t,
        n,
        i,
        o,
        r = yF(this),
        a = mF(e),
        s = [0, 0, 0, 0, 0, 0],
        c = '',
        u = '0';
      if (a < 0 || a > 20) throw new CF('Incorrect fraction digits');
      if (r != r) return 'NaN';
      if (r <= -1e21 || r >= 1e21) return TF(r);
      if ((r < 0 && ((c = '-'), (r = -r)), r > 1e-21))
        if (
          ((n =
            (t =
              (function (e) {
                for (var t = 0, n = e; n >= 4096; ) (t += 12), (n /= 4096);
                for (; n >= 2; ) (t += 1), (n /= 2);
                return t;
              })(r * RF(2, 69, 1)) - 69) < 0
              ? r * RF(2, -t, 1)
              : r / RF(2, t, 1)),
          (n *= 4503599627370496),
          (t = 52 - t) > 0)
        ) {
          for (LF(s, 0, n), i = a; i >= 7; ) LF(s, 1e7, 0), (i -= 7);
          for (LF(s, RF(10, i, 1), 0), i = t - 1; i >= 23; )
            AF(s, 1 << 23), (i -= 23);
          AF(s, 1 << i), LF(s, 1, 1), AF(s, 2), (u = OF(s));
        } else LF(s, 0, n), LF(s, 1 << -t, 0), (u = OF(s) + DF('0', a));
      return a > 0
        ? c +
            ((o = u.length) <= a
              ? '0.' + DF('0', a - o) + u
              : SF(u, 0, o - a) + '.' + SF(u, o - a))
        : c + u;
    },
  }
);
var bF = sp(
  function e() {
    op(this, e);
  },
  null,
  [
    {
      key: 'generateTaskID',
      value: function () {
        return (this.currentTaskID += 1);
      },
    },
    {
      key: 'run',
      value: function () {
        var e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : UR,
          t = arguments.length > 1 ? arguments[1] : void 0,
          n = arguments.length > 2 ? arguments[2] : void 0;
        (n = fp(
          fp(
            {},
            'interval' === e
              ? { delay: 2e3, count: 0, backgroundTask: !0 }
              : 'raf' === e
                ? { fps: 60, delay: 16.6, count: 0, backgroundTask: !0 }
                : { delay: 2e3, count: 0, backgroundTask: !0 }
          ),
          n
        )),
          FU(t) && (n = fp(fp({}, n), t)),
          BU(e) && ((t = e), (e = UR));
        var i = fp(
          {
            taskID: this.generateTaskID(),
            loopCount: 0,
            intervalID: null,
            timeoutID: null,
            rafID: null,
            taskName: e,
            callback: t,
          },
          n
        );
        return this.taskMap.set(i.taskID, i), this[e](i), i.taskID;
      },
    },
    {
      key: 'interval',
      value: function (e) {
        var t = this;
        return (e.intervalID = setInterval(function () {
          e.callback(), (e.loopCount += 1), t.isBreakLoop(e);
        }, e.delay));
      },
    },
    {
      key: 'timeout',
      value: function (e) {
        var t = this,
          n = function () {
            if ((e.callback(), (e.loopCount += 1), !t.isBreakLoop(e)))
              return (e.timeoutID = setTimeout(n, e.delay));
          };
        return (e.timeoutID = setTimeout(n, e.delay));
      },
    },
    {
      key: 'raf',
      value: function (e) {
        var t = this;
        e.delay = (1e3 / e.fps).toFixed(2);
        var n,
          i = ZU(),
          o = function () {
            if (document.hidden && e.backgroundTask) {
              if (
                ((n = ZU() - i),
                (i = ZU()),
                e.callback(),
                (e.loopCount += 1),
                t.isBreakLoop(e))
              )
                return;
              return (e.timeoutID = setTimeout(
                o,
                e.delay - Math.floor(n % e.delay)
              ));
            }
            if (
              ((n = ZU() - i) >= e.delay &&
                ((i = ZU() - Math.floor(n % e.delay)),
                e.callback(),
                (e.loopCount += 1)),
              !t.isBreakLoop(e))
            )
              return (e.rafID = requestAnimationFrame(o));
          };
        if (((e.rafID = requestAnimationFrame(o)), e.backgroundTask)) {
          var r = function () {
            if (document.hidden) {
              var t = ZU() - i;
              t >= e.delay ? o() : (e.timeoutID = setTimeout(o, e.delay - t));
            }
          };
          document.addEventListener('visibilitychange', r),
            (e.onVisibilitychange = r),
            document.hidden && r();
        }
        return e.taskID;
      },
    },
    {
      key: 'hasTask',
      value: function (e) {
        return this.taskMap.has(e);
      },
    },
    {
      key: 'clearTask',
      value: function (e) {
        if (!this.taskMap.has(e)) return !0;
        var t = this.taskMap.get(e),
          n = t.intervalID,
          i = t.timeoutID,
          o = t.onVisibilitychange;
        return (
          n && clearInterval(n),
          i && clearTimeout(i),
          o && document.removeEventListener('visibilitychange', o),
          this.taskMap.delete(e),
          !0
        );
      },
    },
    {
      key: 'isBreakLoop',
      value: function (e) {
        return (
          !this.taskMap.has(e.taskID) ||
          (0 !== e.count &&
            e.loopCount >= e.count &&
            (this.clearTask(e.taskID), !0))
        );
      },
    },
  ]
);
up(bF, 'taskMap', new Map()), up(bF, 'currentTaskID', 1);
var NF = { serviceCommand: ''.concat('callkit_records_svr', '.*') },
  PF = 'sendTRTCCustomData',
  wF = (function () {
    return sp(
      function e(t) {
        op(this, e),
          up(this, '_callRecordData', void 0),
          up(this, '_tim', void 0),
          up(this, '_heartbeat', void 0),
          up(this, '_lastHeartBeatTime', void 0),
          up(this, '_bodyStatus', void 0),
          (this._tim = t.tim),
          (this._heartbeat = -1),
          (this._lastHeartBeatTime = -1),
          (this._bodyStatus = WR),
          this.initializeCallData(t);
      },
      [
        {
          key: 'getCallRecordData',
          value: function () {
            return this._callRecordData;
          },
        },
        {
          key: 'initializeCallData',
          value: function (e) {
            var t = e || {},
              n = t.version,
              i = void 0 === n ? '' : n,
              o = t.userID,
              r = void 0 === o ? '' : o,
              a = { name: Jw.platform, version: Jw.version },
              s = {
                version: 1,
                command: jR,
                sdk_version: i,
                seq: 0,
                os_name: KR,
                os_version: a.version || '',
                device_name: a.name || '',
                framework: KR,
                call_type: '',
                media_type: '',
                client_ts: 0,
                role: '',
                user_id: r,
                room_id: '',
                call_id: '',
                group_id: '',
                room_id_type: 1,
              };
            this._callRecordData = {
              head: s,
              body: { event_type: '', code: 0, message: '', invitee_list: [] },
            };
          },
        },
        {
          key: 'reset',
          value: function () {
            this.initializeCallData();
          },
        },
        {
          key: '_setCallType',
          value: function (e) {
            e &&
              (this._callRecordData.head = fp(
                fp({}, this._callRecordData.head),
                {},
                { call_type: e }
              ));
          },
        },
        {
          key: '_setMediaType',
          value: function (e) {
            e &&
              (this._callRecordData.head = fp(
                fp({}, this._callRecordData.head),
                {},
                { media_type: aF(e) }
              ));
          },
        },
        {
          key: '_setCallRole',
          value: function (e) {
            e &&
              (this._callRecordData.head = fp(
                fp({}, this._callRecordData.head),
                {},
                { role: e }
              ));
          },
        },
        {
          key: '_setUserID',
          value: function (e) {
            e &&
              (this._callRecordData.head = fp(
                fp({}, this._callRecordData.head),
                {},
                { user_id: e }
              ));
          },
        },
        {
          key: '_setRoomID',
          value: function (e) {
            e &&
              (this._callRecordData.head = fp(
                fp({}, this._callRecordData.head),
                {},
                { room_id: ''.concat(e) }
              ));
          },
        },
        {
          key: '_setInviteID',
          value: function () {
            var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : '';
            e &&
              (this._callRecordData.head = fp(
                fp({}, this._callRecordData.head),
                {},
                { call_id: e }
              ));
          },
        },
        {
          key: '_setGroupId',
          value: function (e) {
            qU(e) ||
              (this._callRecordData.head = fp(
                fp({}, this._callRecordData.head),
                {},
                { group_id: e }
              ));
          },
        },
        {
          key: '_getGroupId',
          value: function () {
            return this._callRecordData.head.group_id;
          },
        },
        {
          key: '_setRoomIdType',
          value: function (e) {
            e &&
              (this._callRecordData.head = fp(
                fp({}, this._callRecordData.head),
                {},
                { room_id_type: e }
              ));
          },
        },
        {
          key: '_setEventType',
          value: function (e) {
            e &&
              (this._callRecordData.body = fp(
                fp({}, this._callRecordData.body),
                {},
                { event_type: e }
              ));
          },
        },
        {
          key: '_setInviteeList',
          value: function () {
            var e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : [];
            this._callRecordData.body = fp(
              fp({}, this._callRecordData.body),
              {},
              { invitee_list: e }
            );
          },
        },
        {
          key: '_setSeq',
          value: function () {
            var e = this.getCallRecordData().head.seq;
            this._callRecordData.head = fp(
              fp({}, this._callRecordData.head),
              {},
              { seq: e + 1 }
            );
          },
        },
        {
          key: 'setBodyStatus',
          value: function (e) {
            if (e) {
              var t = WR;
              switch (e) {
                case TR.CALLING:
                  t = WR;
                  break;
                case TR.CONNECTED:
                  t = 'calling';
              }
              this._bodyStatus = t;
            }
          },
        },
        {
          key: 'eventUpload',
          value:
            ((i = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d, p, h, f, g, _, v, m, y;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            ((i = t.eventType),
                            (o = t.callType),
                            (r = t.mediaType),
                            (a = t.callRole),
                            (s = t.userID),
                            (c = t.roomID),
                            (u = t.inviteID),
                            (l = t.groupId),
                            (d = t.strRoomId),
                            (p = void 0 === d ? '' : d),
                            (h = t.inviteeList),
                            (f = void 0 === h ? [] : h),
                            i)
                          ) {
                            e.next = 3;
                            break;
                          }
                          return e.abrupt('return');
                        case 3:
                          return (
                            (this._callRecordData.head = fp(
                              fp({}, this._callRecordData.head),
                              {},
                              {
                                command: jR,
                                client_ts: Math.floor(Date.now() / 1e3),
                              }
                            )),
                            this._setCallType(o),
                            this._setMediaType(r),
                            this._setCallRole(a),
                            this._setUserID(s),
                            this._setInviteID(u),
                            this._setGroupId(l),
                            c > 0
                              ? (this._setRoomID(''.concat(c)),
                                this._setRoomIdType(1))
                              : 0 === c &&
                                xU(p) &&
                                p.length > 0 &&
                                (this._setRoomID(p), this._setRoomIdType(2)),
                            this._setEventType(i),
                            this._setInviteeList(f),
                            this._setSeq(),
                            (g = this.getCallRecordData()),
                            (_ = g.head),
                            (v = g.body),
                            (m = {
                              head: fp(fp({}, _), {}, { role: sF(_.role) }),
                              body: v,
                            }),
                            (y = fp(
                              fp({}, NF),
                              {},
                              { data: JSON.stringify(m) }
                            )),
                            (e.next = 19),
                            null == this ||
                            null === (n = this._tim) ||
                            void 0 === n
                              ? void 0
                              : n.callExperimentalAPI(PF, y)
                          );
                        case 19:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return i.apply(this, arguments);
            }),
        },
        {
          key: 'eventUploadNotSave',
          value:
            ((n = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d, p, h, f, g, _, v;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            (i = t.eventType),
                            (o = t.callType),
                            (r = t.mediaType),
                            (a = t.callRole),
                            (s = t.roomID),
                            (c = t.groupId),
                            (u = t.strRoomId),
                            (l = void 0 === u ? '' : u),
                            (d = t.inviteID),
                            this._setSeq(),
                            (p = this.getCallRecordData()),
                            (h = p.head),
                            (f = p.body),
                            (g = h.room_id_type),
                            s > 0 && (g = 1),
                            0 === s && l && (g = 2),
                            (_ = {
                              head: fp(
                                fp({}, h),
                                {},
                                {
                                  role: sF(a),
                                  call_id: d,
                                  call_type: o,
                                  media_type: aF(r),
                                  room_id: 1 === g ? ''.concat(s) : l,
                                  client_ts: Math.floor(Date.now() / 1e3),
                                  group_id: c || this._getGroupId(),
                                  room_id_type: g,
                                }
                              ),
                              body: fp(fp({}, f), {}, { event_type: i }),
                            }),
                            (v = fp(
                              fp({}, NF),
                              {},
                              { data: JSON.stringify(_) }
                            )),
                            (e.next = 10),
                            null == this ||
                            null === (n = this._tim) ||
                            void 0 === n
                              ? void 0
                              : n.callExperimentalAPI(PF, v)
                          );
                        case 10:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return n.apply(this, arguments);
            }),
        },
        {
          key: 'heartBeatUpload',
          value:
            ((t = np(
              _p().mark(function e() {
                var t, n, i, o;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._setSeq(),
                            (n = this._callRecordData.head),
                            (i = {
                              head: fp(
                                fp({}, n),
                                {},
                                {
                                  role: sF(n.role),
                                  clientTs: Date.now(),
                                  command: 'heartbeat',
                                }
                              ),
                              body: { status: this._bodyStatus },
                            }),
                            (o = fp(fp({}, NF), {}, { data: i })),
                            (e.next = 6),
                            null == this ||
                            null === (t = this._tim) ||
                            void 0 === t
                              ? void 0
                              : t.callExperimentalAPI(PF, o)
                          );
                        case 6:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function () {
              return t.apply(this, arguments);
            }),
        },
        {
          key: 'startHeartbeat',
          value: function () {
            -1 === this._heartbeat &&
              (wU.info('start heart beat...'),
              this.heartBeatUpload(),
              (this._heartbeat = bF.run(UR, this.doHeartbeat.bind(this), {
                delay: 2e3,
                count: 0,
                backgroundTask: !0,
              })));
          },
        },
        {
          key: 'stopHeartbeat',
          value: function () {
            -1 !== this._heartbeat &&
              (wU.info('stop heart beat'),
              bF.clearTask(this._heartbeat),
              (this._heartbeat = -1),
              (this._lastHeartBeatTime = -1),
              (this._bodyStatus = WR));
          },
        },
        {
          key: 'doHeartbeat',
          value:
            ((e = np(
              _p().mark(function e() {
                var t;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          this.heartBeatUpload(),
                            (t = Date.now()),
                            this._lastHeartBeatTime > 0 &&
                              t - this._lastHeartBeatTime > 1e4 &&
                              wU.warn(
                                'heartbeat took '.concat(
                                  t - this._lastHeartBeatTime
                                )
                              ),
                            (this._lastHeartBeatTime = t);
                        case 4:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function () {
              return e.apply(this, arguments);
            }),
        },
      ]
    );
    var e, t, n, i;
  })(),
  UF = sp(
    function e(t, n) {
      op(this, e),
        up(this, '_eventEmitter', void 0),
        up(this, '_callRecordDataReport', void 0),
        up(this, '_isCallAccepted', void 0),
        (this._eventEmitter = t),
        (this._callRecordDataReport = n),
        (this._isCallAccepted = !1),
        this.registerListener();
    },
    [
      {
        key: 'registerListener',
        value: function () {
          this._eventEmitter.on(
            CR.ON_CALL_RECEIVED,
            this.onCallReceived.bind(this)
          ),
            this._eventEmitter.on(
              CR.USER_ACCEPT,
              this.onCallAccepted.bind(this)
            ),
            this._eventEmitter.on(CR.CALL_END, this.onCallEnd.bind(this)),
            this._eventEmitter.on(
              CR.CALLING_CANCEL,
              this.onCallingCancel.bind(this)
            ),
            this._eventEmitter.on(CR.NO_RESP, this.onNoResponse.bind(this)),
            this._eventEmitter.on(CR.LINE_BUSY, this.onLineBusy.bind(this)),
            this._eventEmitter.on(CR.REJECT, this.onReject.bind(this));
        },
      },
      {
        key: 'removeLister',
        value: function () {
          this._eventEmitter.off(CR.ON_CALL_RECEIVED, this.onCallReceived),
            this._eventEmitter.off(CR.USER_ACCEPT, this.onCallAccepted),
            this._eventEmitter.off(CR.CALL_END, this.onCallEnd),
            this._eventEmitter.off(CR.CALLING_CANCEL, this.onCallingCancel),
            this._eventEmitter.off(CR.NO_RESP, this.onNoResponse),
            this._eventEmitter.off(CR.LINE_BUSY, this.onLineBusy),
            this._eventEmitter.off(CR.REJECT, this.onReject);
        },
      },
      {
        key: 'onCallReceived',
        value: function () {
          this._callRecordDataReport.startHeartbeat();
        },
      },
      {
        key: 'onCallAccepted',
        value: function () {
          var e = this._callRecordDataReport.getCallRecordData().head;
          if ((null == e ? void 0 : e.role) === bR) {
            if (this._isCallAccepted && e.call_type === qR) return;
            this._isCallAccepted = !0;
            var t = { eventType: 'call_accepted' };
            this._callRecordDataReport.eventUpload(t),
              this._callRecordDataReport.setBodyStatus(TR.CONNECTED);
          }
        },
      },
      {
        key: 'onCallEnd',
        value: function () {
          var e = { eventType: 'call_end' };
          (this._isCallAccepted = !1),
            this._callRecordDataReport.eventUpload(e),
            this._callRecordDataReport.stopHeartbeat();
        },
      },
      {
        key: 'onCallingCancel',
        value: function (e) {
          var t = this._callRecordDataReport.getCallRecordData().head,
            n = t.role === bR ? 'cancel_call' : 'call_canceled';
          this._isCallAccepted = !1;
          var i = (e.data || {}).reason;
          ((void 0 === i ? '' : i) === PR ||
            (t.role === bR && t.call_type === qR)) &&
            this._callRecordDataReport.eventUpload({ eventType: n }),
            this._callRecordDataReport.stopHeartbeat();
        },
      },
      {
        key: 'onNoResponse',
        value: function () {
          this._uploadInC2C(UR);
        },
      },
      {
        key: 'onLineBusy',
        value: function () {
          this._uploadInC2C(GR);
        },
      },
      {
        key: 'onReject',
        value: function () {
          this._uploadInC2C(wR);
        },
      },
      {
        key: '_uploadInC2C',
        value: function (e) {
          var t = this._callRecordDataReport.getCallRecordData().head;
          if ((null == t ? void 0 : t.call_type) === FR) {
            var n = '';
            switch (e) {
              case UR:
                n = t.role === bR ? 'call_missed' : BR;
                break;
              case wR:
                n = t.role === bR && 'call_rejected';
                break;
              case GR:
                n = t.role === bR ? 'call_busy' : BR;
                break;
              default:
                return;
            }
            this._callRecordDataReport.eventUpload({ eventType: n });
          }
        },
      },
    ]
  ),
  GF = {};
function xF(e) {
  var t = e.key,
    n = e.timeout,
    i = void 0 === n ? 0 : n,
    o = e.errorMessage,
    r = void 0 === o ? '' : o,
    a = null,
    s = null,
    c = null,
    u = new Promise(function (e, t) {
      (a = function () {
        c && clearTimeout(c), e();
      }),
        (s = function (e) {
          c && clearTimeout(c), t(e);
        });
    });
  return (
    i > 0 &&
      (c = setTimeout(function () {
        BU(s) && s({ message: r });
      }, i)),
    (GF[t] = { resolve: a, reject: s, promise: u }),
    u
  );
}
function FF(e) {
  return GF[e] || {};
}
var qF = lL(),
  VF = (function () {
    function e(t) {
      op(this, e),
        up(this, '_initReady', !1),
        up(this, '_timExternal', !1),
        up(this, '_initialCallId', ''),
        up(this, '_beautyLevel', 4),
        up(this, '_isEnableMultiDeviceAbility', !1),
        up(this, '_loginResolveList', []),
        up(this, '_logLevel', 1),
        up(this, '_excludeFromHistoryMessage', void 0),
        up(this, '_uniqueLoginId', ''),
        (this.data = {
          config: { sdkAppID: t.sdkAppID, userID: '', userSig: '', type: 1 },
        }),
        this.initData(),
        (this.EVENT = CR),
        (this.MEDIA_TYPE = ER),
        (this.CALL_TYPE = ER),
        (this._emitter = new TG()),
        (this.TRTC = new Zd(this, { TUIScene: 'TUICallEngine' }));
      var n = 'TUICallEngine';
      14 === (null == t ? void 0 : t.component) && (n = 'TUICallKit'),
        15 === (null == t ? void 0 : t.component) && (n = 'TIMCallKit'),
        this._initLogger(t);
      try {
        (($n && $n._isTIMCallKit) ||
          ($n && $n.getStorageSync && $n.getStorageSync('_isTIMCallKit')) ||
          (getApp &&
            getApp() &&
            getApp().globalData &&
            getApp().globalData._isTIMCallKit)) &&
          (n = 'TIMCallKit');
      } catch (ic) {
        console.error(ic);
      }
      ($n.TUIScene = n),
        (this._callDataReport = new cF({ version: MR, sdkAppId: t.sdkAppID })),
        (this._dataReportObserver = new uF(
          { emitter: this._emitter },
          this._callDataReport
        )),
        t.tim
          ? ((this._chat = t.tim),
            (this._timExternal = !0),
            BU(t.tim.addSignalingListener) ||
              (this._logger.info('constructor.start', {
                text: { data: t },
                type: 'api',
              }),
              wU.error(
                'constructor.start, you need to pass in an instance of @tencentcloud/chat, \n          please use @tencentcloud/chat instead of tim-js-sdk. 需要传入 @tencentcloud/chat 的实例'
              )))
          : $n.$TIM
            ? ((this._chat = $n.$TIM), (this._timExternal = !0))
            : (this._chat = Yd.create({ SDKAppID: t.sdkAppID })),
        (this._callRecordReport = new wF({ version: MR, tim: this._chat })),
        (this._recordReportObserver = new UF(
          this._emitter,
          this._callRecordReport
        )),
        'devtools' === $n.getSystemInfoSync().platform &&
          wU.warn(
            ''.concat(
              '微信开发者工具不支持原生推拉流组件(即 <live-pusher> 和 <live-player> 标签)，请使用真机调试或者扫码预览。'
            )
          ),
        $n.setStorageSync('sdkAppId', t.sdkAppID),
        (this.TSignalingClient = new gG({
          chat: this._chat,
          tuiCallEngine: this,
        })),
        (this.TRTCCallingDelegate = new dL({ emitter: this._emitter })),
        (this._eventStatController = new CG()),
        this.setLogLevel(this._logLevel);
      var i = new vG('sdkConstruct');
      vG.bindController(this._eventStatController),
        i.setText('version='.concat(MR)).setEnd(),
        this._logger.info('constructor.start', {
          text: { data: t },
          type: 'api',
        }),
        wU.info('SDK Version:'.concat(MR, ', SDKAppID:').concat(t.sdkAppID));
    }
    return sp(
      e,
      [
        {
          key: 'destroyInstance',
          value:
            ((W = np(
              _p().mark(function t() {
                return _p().wrap(
                  function (t) {
                    for (;;)
                      switch ((t.prev = t.next)) {
                        case 0:
                          if (e.instance) {
                            t.next = 2;
                            break;
                          }
                          return t.abrupt('return');
                        case 2:
                          return (
                            this._callDataReport &&
                              this._callDataReport.reset &&
                              this._callDataReport.reset(),
                            this._dataReportObserver &&
                              this._dataReportObserver.reset &&
                              this._dataReportObserver.removeLister(),
                            this._callRecordReport &&
                              this._callRecordReport.reset(),
                            this._recordReportObserver &&
                              this._recordReportObserver.removeLister(),
                            (t.next = 8),
                            e.instance.destroyed()
                          );
                        case 8:
                          e.instance = null;
                          try {
                            $n.removeStorageSync('sdkAppId'),
                              $n.removeStorageSync('userId');
                          } catch (n) {
                            console.error(n);
                          }
                        case 10:
                        case 'end':
                          return t.stop();
                      }
                  },
                  t,
                  this
                );
              })
            )),
            function () {
              return W.apply(this, arguments);
            }),
        },
        {
          key: '_initLogger',
          value: function (e) {
            var t = this;
            $n.getSystemInfo({
              success: function (e) {
                var t = e.brand,
                  n = e.model,
                  i = e.language,
                  o = e.platform,
                  r = e.version;
                qF.updateGetReportData(function () {
                  return {
                    useragent: {
                      brand: t,
                      model: n,
                      language: i,
                      platform: o,
                      version: r,
                    },
                  };
                });
              },
            }),
              (this._logger = qF),
              this._logger.updateGetReportData(function () {
                return {
                  app: 'TUICallEngine-mini',
                  version: MR,
                  platform: KR,
                  sdkappid: e.sdkAppID,
                  time: +new Date(),
                  userid: t.getUserID(),
                  uniqueloginid: t._uniqueLoginId,
                  roomid: String(t.getRoomId() || t.getStrRoomId()),
                  callinfo: {
                    inviteid: t.getInitialCallId(),
                    callrole: t.isInviter() ? bR : NR,
                    groupid: t.getGroupId(),
                    calltype: t.getCallType(),
                    handledInviteeList: t.getHandledInviteeList(),
                    unHandledInviteeList: t.getUnHandledInviteeList(),
                  },
                  callkitversion: e.callkitVersion || xR,
                  framework: e.frameWork || xR,
                  isfromchat: e.chat ? 'true' : 'false',
                };
              });
          },
        },
        {
          key: 'setLogLevel',
          value: function (e) {
            'number' != typeof e || isNaN(e)
              ? wU.error('setLogLevel parameter must be a number(0~4)')
              : ((this._logLevel = e),
                wU.setLevel(e),
                this.TSignalingClient.setLogLevel(e),
                this.TRTC && this.TRTC.setLogLevel(e));
          },
        },
        {
          key: 'initData',
          value: function () {
            var e = {
              callStatus: TR.IDLE,
              soundMode:
                this.data.config.type === ER.AUDIO ? LR.EAR : LR.SPEAKER,
              active: !1,
              invitation: { inviteID: '', inviter: '', type: '', roomID: '' },
              startTalkTime: 0,
              localUser: null,
              remoteUsers: [],
              remoteID: '',
              roomId: 0,
              strRoomId: '',
              timer: null,
              chatTimeNum: 0,
              chatTime: '00:00:00',
              screen: 'pusher',
              _callTimeout: 30,
              pusher: {},
              playerList: [],
              isInviter: !0,
              unHandledInviteeList: [],
              handledInviteeList: [],
              _inviterInviteID: {},
              _audioVideoSwitchIdList: [],
              _acceptedUserObject: {},
              isGroupCall: !1,
              groupID: '',
              switchCallModeStatus: !0,
              enterRoomStatus: !1,
              devicePermission: !1,
              _initialInviteData: {},
              netWorkQualityList: [],
            };
            this.setIsEnableMultiDeviceAbility(!1),
              (this.data = fp(fp({}, this.data), e));
          },
        },
        {
          key: 'handleNewInvitationReceived',
          value:
            ((K = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d, p, h, f, g, _;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            ((r = this.getCallStatus()),
                            this._logger.info(
                              'TSignaling.NEW_INVITATION_RECEIVED',
                              {
                                text: {
                                  data: fp(
                                    fp({}, t),
                                    {},
                                    { currentCallStatus: r }
                                  ),
                                },
                                type: 'event',
                              }
                            ),
                            wU.info(
                              'onNewInvitationReceived - params:',
                              t,
                              'currentCallStatus:'.concat(r)
                            ),
                            (a = t.data),
                            (s = a.inviter),
                            (c = a.inviteeList),
                            (u = a.data),
                            (l = a.inviteID),
                            (d = a.groupID),
                            this.setInitialInviteData(JSON.parse(u)),
                            XU((p = JSON.parse(u)).businessID))
                          ) {
                            e.next = 8;
                            break;
                          }
                          return e.abrupt('return');
                        case 8:
                          if (
                            ((h =
                              (null == p ||
                              null === (n = p.data) ||
                              void 0 === n
                                ? void 0
                                : n.initialCallId) || ''),
                            this.getUserID() !== s)
                          ) {
                            e.next = 11;
                            break;
                          }
                          return e.abrupt('return');
                        case 11:
                          if (
                            (f = !!d) ||
                            !(
                              (null != p &&
                                null !== (i = p.data) &&
                                void 0 !== i &&
                                i.consumed) ||
                              (null != p && p.consumed)
                            )
                          ) {
                            e.next = 14;
                            break;
                          }
                          return e.abrupt('return');
                        case 14:
                          if (
                            ((g = {
                              inviter: s,
                              inviteeList: c,
                              inviteID: l,
                              isGroupCall: f,
                              inviteData: p,
                              groupID: d,
                              initialCallId: h,
                              currentCallStatus: r,
                              inCallUserIDs:
                                (null == p ? void 0 : p.inCallUserIDs) || [],
                            }),
                            'hangup' !==
                              (null == p ||
                              null === (o = p.data) ||
                              void 0 === o
                                ? void 0
                                : o.cmd))
                          ) {
                            e.next = 22;
                            break;
                          }
                          if (
                            (wU.info(
                              'hangup - params:',
                              s,
                              p,
                              this.getHandledInviteeList(),
                              this.getUnHandledInviteeList(),
                              r,
                              f
                            ),
                            r !== TR.IDLE)
                          ) {
                            e.next = 19;
                            break;
                          }
                          return e.abrupt('return');
                        case 19:
                          return (e.next = 21), this.handleHangupSignal(g);
                        case 21:
                          return e.abrupt('return');
                        case 22:
                          if (f || !this.judgeSwitchCallMode(p)) {
                            e.next = 28;
                            break;
                          }
                          if (
                            r === TR.IDLE ||
                            p.room_id !== this.data.invitation.roomID
                          ) {
                            e.next = 27;
                            break;
                          }
                          return (
                            (e.next = 26),
                            this.handleSwitchCallModeTSignaling(l, p)
                          );
                        case 26:
                          this.addAudioVideoSwitchIdList(l);
                        case 27:
                          return e.abrupt('return');
                        case 28:
                          if (r === TR.IDLE) {
                            e.next = 35;
                            break;
                          }
                          return (
                            (e.next = 31),
                            this.TSignalingClient.reject({
                              inviteID: l,
                              type: u.call_type,
                              lineBusy: 'line_busy',
                            })
                          );
                        case 31:
                          return (
                            (_ = e.sent),
                            this.TRTCCallingDelegate.onCallMessage(_),
                            this.getCallRecordReport().eventUploadNotSave({
                              inviteID: h || l,
                              callRole: NR,
                              eventType: 'ignore_call',
                              roomID: p.room_id,
                              mediaType: p.call_type,
                              callType: d ? qR : FR,
                              groupId: d,
                              strRoomId: p.str_room_id || p.data.str_room_id,
                            }),
                            e.abrupt('return')
                          );
                        case 35:
                          this.handleInvitedSignal(g);
                        case 36:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return K.apply(this, arguments);
            }),
        },
        {
          key: 'handleHangupSignal',
          value:
            ((j = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d, p, h, f;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            ((n = t.inviter),
                            (i = t.currentCallStatus),
                            (o = t.inviteData),
                            (r = t.inviteeList),
                            (a = this.isGroupCall()),
                            (s = this.isInviter()),
                            i !== TR.CALLING)
                          ) {
                            e.next = 11;
                            break;
                          }
                          if (
                            ((c = this.getUnHandledInviteeList()),
                            (u = this.getHandledInviteeList()),
                            -1 !== c.indexOf(n) &&
                              this.deleteUnHandledInviteeList([n]),
                            -1 !== u.indexOf(n))
                          ) {
                            e.next = 9;
                            break;
                          }
                          return e.abrupt('return');
                        case 9:
                          e.next = 15;
                          break;
                        case 11:
                          if (
                            (this.deleteHandledInviteeList([n]),
                            !(
                              -1 ===
                                (l = this.getHandledInviteeList()).indexOf(n) &&
                              l.length > 1
                            ))
                          ) {
                            e.next = 15;
                            break;
                          }
                          return e.abrupt('return');
                        case 15:
                          if (
                            ((d = this.generateCallEndData({
                              totalTime: o.call_end || 0,
                            })),
                            a)
                          ) {
                            e.next = 22;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onCallEnd(d),
                            (e.next = 20),
                            this._resetTUICallEngine()
                          );
                        case 20:
                        case 31:
                          e.next = 46;
                          break;
                        case 22:
                          if (
                            (this.deleteHandledInviteeList([n]),
                            (this.data.playerList = this.data.playerList.filter(
                              function (e) {
                                return e.userID !== n;
                              }
                            )),
                            (p = this.getHandledInviteeList()),
                            (h = this.getUnHandledInviteeList()),
                            !s)
                          ) {
                            e.next = 33;
                            break;
                          }
                          if (1 !== p.length || 0 !== h.length) {
                            e.next = 31;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onCallEnd(d),
                            (e.next = 31),
                            this._resetTUICallEngine()
                          );
                        case 33:
                          if (i !== TR.CALLING) {
                            e.next = 41;
                            break;
                          }
                          if (
                            (-1 !== r.indexOf(this.getUserID()) &&
                              this.TRTCCallingDelegate.onUserLeave({
                                userID: n,
                                playerList: this.data.playerList,
                              }),
                            0 !== p.length || 1 !== h.length)
                          ) {
                            e.next = 41;
                            break;
                          }
                          return (
                            (f = this.generateEventData()),
                            this.TRTCCallingDelegate.onCancel(
                              fp(
                                fp(
                                  {
                                    inviteID: this.data.invitation.inviteID,
                                    invitee: this.getUserID(),
                                    userID: this.getUserID(),
                                  },
                                  f
                                ),
                                {},
                                { reason: PR }
                              )
                            ),
                            (e.next = 41),
                            this._resetTUICallEngine()
                          );
                        case 41:
                          if (i !== TR.CONNECTED) {
                            e.next = 46;
                            break;
                          }
                          if (1 !== p.length || 0 !== h.length) {
                            e.next = 46;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onCallEnd(d),
                            (e.next = 46),
                            this._resetTUICallEngine()
                          );
                        case 46:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return j.apply(this, arguments);
            }),
        },
        {
          key: 'handleSwitchCallModeTSignaling',
          value:
            ((H = np(
              _p().mark(function e(t, n) {
                var i, o, r;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            (i = { inviteID: t, type: n.call_type }),
                            (o = { cmd: 'switchToVideo' }),
                            n.call_type === ER.VIDEO &&
                              ((i.switch_to_audio_call =
                                'switch_to_audio_call'),
                              (o.cmd = 'switchToAudio')),
                            (e.next = 5),
                            this.TSignalingClient.accept(i, o)
                          );
                        case 5:
                          (r = e.sent),
                            this.setSwitchCallModeStatus(!1),
                            this.handleCallMode(n.call_type, r);
                        case 8:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e, t) {
              return H.apply(this, arguments);
            }),
        },
        {
          key: 'judgeSwitchCallMode',
          value: function (e) {
            return (
              (e.switch_to_audio_call &&
                'switch_to_audio_call' === e.switch_to_audio_call) ||
              (e.data && 'switchToAudio' === e.data.cmd) ||
              (e.data && 'switchToVideo' === e.data.cmd)
            );
          },
        },
        {
          key: 'handleCallMode',
          value: function (e, t) {
            wU.info('handleCallMode - type', e);
            var n = e !== ER.VIDEO;
            this.setPusherAttributesHandler({ enableCamera: n }),
              n
                ? ((this.data.config.type = ER.VIDEO),
                  (this.data.invitation.type = ER.VIDEO))
                : ((this.data.config.type = ER.AUDIO),
                  (this.data.invitation.type = ER.AUDIO)),
              this.TRTCCallingDelegate.onCallMode({
                type: this.data.config.type,
                message: t.data.message,
              }),
              this.setSwitchCallModeStatus(!0);
          },
        },
        {
          key: 'handleInvitedSignal',
          value:
            ((B = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d, p, h, f, g, _, v, m, y;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          (n = t.inviter),
                            (i = t.inviteeList),
                            (o = t.isGroupCall),
                            (r = t.groupID),
                            (a = t.inviteID),
                            (s = t.inviteData),
                            (c = t.inCallUserIDs),
                            (u = void 0 === c ? [] : c),
                            (l = t.initialCallId),
                            (d = void 0 === l ? '' : l),
                            (this.data.remoteID = n),
                            (this.data.config.type = s.call_type),
                            (this.data.invitation.inviteID = a),
                            (this.data.invitation.inviter = n),
                            (this.data.invitation.type = s.call_type),
                            (this.data.invitation.roomID = s.room_id),
                            (this.data.isInviter = !1),
                            (this.data.isGroupCall = o),
                            this.setRoomId(s.room_id),
                            this.setStrRoomId(
                              s.str_room_id || s.data.str_room_id
                            ),
                            this.addHandledInviteeList([n]),
                            this.addUnHandledInviteeList(
                              [].concat(mp(i), mp(u))
                            ),
                            this.addAcceptedUserList(a, [n]),
                            this.addInviterInviteId(a, [n].concat(mp(i))),
                            this.setInitialCallId(d),
                            (p = u.filter(function (e) {
                              return -1 === i.indexOf(e);
                            })),
                            o && this.setGroupId(r),
                            this.changeCallStatus(TR.CALLING),
                            wU.info(
                              'NEW_INVITATION_RECEIVED invitation: ',
                              this.data.callStatus,
                              this.data.invitation
                            ),
                            (h = {
                              sponsor: n,
                              inviteeList: i,
                              userIDList: [].concat(mp(i), mp(p)),
                              isFromGroup: o,
                              inviteID: a,
                              groupID: r,
                              inviteData: {
                                version: s.version,
                                callType: s.call_type,
                                roomID: s.room_id,
                              },
                              userData: s.userData,
                              calleeIdList: i,
                              callMediaType: s.call_type,
                            }),
                            this.setPusherAttributesHandler({
                              enableCamera: this.data.config.type === ER.VIDEO,
                            }),
                            (f = fp(
                              fp(
                                {},
                                (f = this.getCallDataReport().getCallData())
                              ),
                              {},
                              {
                                userId: this.getUserID(),
                                roomID: s.room_id,
                                inviteID: a,
                                callRole: SR,
                                callType: s.call_type,
                                inviteeList: i,
                              }
                            )),
                            (g = {
                              eventType: 'receive_call',
                              callType: r ? qR : FR,
                              mediaType: s.call_type,
                              callRole: NR,
                              userID: this.getUserID(),
                              roomID: s.room_id,
                              inviteID: d || a,
                              groupId: this.getGroupId(),
                              strRoomId: this.getStrRoomId(),
                            }),
                            this.getCallRecordReport().eventUpload(g),
                            this.getCallDataReport().setCallData(f),
                            (_ = this.generateEventData() || {}),
                            this.TRTCCallingDelegate.onInvited(
                              fp(fp({}, _), h)
                            ),
                            (v = new Date().getTime()),
                            (m = v);
                        case 31:
                          if (!(m - v < 100)) {
                            e.next = 42;
                            break;
                          }
                          return (
                            (e.next = 34),
                            new Promise(function (e, t) {
                              return setTimeout(e, 10);
                            })
                          );
                        case 34:
                          if (-1 !== this.getInviterInviteIdList().indexOf(a)) {
                            e.next = 39;
                            break;
                          }
                          return (
                            this._logger.warn(
                              'onNewInvitationReceived border case',
                              {
                                text: { data: { handleParams: t } },
                                type: 'api',
                              }
                            ),
                            (e.next = 38),
                            this._resetTUICallEngine()
                          );
                        case 38:
                          return e.abrupt('return');
                        case 39:
                          (m = new Date().getTime()), (e.next = 31);
                          break;
                        case 42:
                          return (
                            (e.next = 44),
                            this.getSelfIMCallStatus([this.getUserID()])
                          );
                        case 44:
                          if ((y = e.sent) === TR.IDLE) {
                            e.next = 48;
                            break;
                          }
                          return (
                            this._logger.error('onNewInvitationReceived', {
                              text: {
                                data: { handleParams: t, customStatus: y },
                              },
                              type: 'event',
                            }),
                            e.abrupt('return')
                          );
                        case 48:
                          return (
                            (e.next = 50), this.setSelfIMCallStatus(TR.CALLING)
                          );
                        case 50:
                          return (e.next = 52), $U({ camera: !0 });
                        case 52:
                          (this.data.devicePermission = e.sent),
                            this.data.devicePermission &&
                              this.data.config.type === ER.VIDEO &&
                              this.setPusherAttributesHandler({
                                enableCamera: !0,
                              });
                        case 54:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return B.apply(this, arguments);
            }),
        },
        {
          key: 'addInviterInviteId',
          value: function (e, t) {
            0 !== t.length &&
              (0 === (this.data._inviterInviteID[e] || []).length
                ? (this.data._inviterInviteID[e] = t)
                : (this.data._inviterInviteID[e] = [].concat(
                    mp(this.data._inviterInviteID[e]),
                    mp(t)
                  )));
          },
        },
        {
          key: 'handleInviteeAccepted',
          value:
            ((V = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('TSignaling.INVITEE_ACCEPTED', {
                              text: {
                                data: fp(
                                  fp({}, t),
                                  {},
                                  { currentCallStatus: this.data.callStatus }
                                ),
                                type: 'event',
                              },
                            }),
                            wU.info('onInviteeAccepted - params:', t),
                            XU(
                              null == (n = JSON.parse(t.data.data))
                                ? void 0
                                : n.businessID
                            ))
                          ) {
                            e.next = 5;
                            break;
                          }
                          return e.abrupt('return');
                        case 5:
                          if (
                            ((i = t.data.invitee),
                            (o = t.data.inviteID),
                            -1 !==
                              this.getTotalInviterInviteIdList().indexOf(o))
                          ) {
                            e.next = 9;
                            break;
                          }
                          return e.abrupt('return');
                        case 9:
                          if (this.data.callStatus !== TR.IDLE) {
                            e.next = 11;
                            break;
                          }
                          return e.abrupt('return');
                        case 11:
                          if (
                            this.isGroupCall() ||
                            !this.judgeSwitchCallMode(n) ||
                            this.data.switchCallModeStatus
                          ) {
                            e.next = 14;
                            break;
                          }
                          return (
                            this.handleCallMode(this.data.invitation.type),
                            e.abrupt('return')
                          );
                        case 14:
                          if (
                            ((r = this.getCallStatus()),
                            i !== this.getUserID() || r !== TR.CALLING)
                          ) {
                            e.next = 21;
                            break;
                          }
                          return (
                            (a = this.generateEventData()),
                            this.TRTCCallingDelegate.onCancel(
                              fp(
                                {
                                  inviteID: this.data.invitation.inviteID,
                                  invitee: i,
                                  userID: i,
                                },
                                a
                              )
                            ),
                            (e.next = 20),
                            this._resetTUICallEngine()
                          );
                        case 20:
                          return e.abrupt('return');
                        case 21:
                          return (
                            this.isInviter() &&
                              this.data.callStatus === TR.CALLING &&
                              this.changeCallStatus(TR.CONNECTED),
                            this.getCallDataReport().setCallAcceptTime(
                              new Date().getTime()
                            ),
                            this.addHandledInviteeList([i]),
                            this.deleteUnHandledInviteeList([i]),
                            this.addAcceptedUserList(o, [i]),
                            (e.next = 28),
                            this.getUserProfile(
                              this.data.unHandledInviteeList.map(function (e) {
                                return { userID: e };
                              })
                            )
                          );
                        case 28:
                          (s = e.sent),
                            this.TRTCCallingDelegate.onUserAccept({
                              userID: i,
                              userList: s,
                            });
                        case 30:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return V.apply(this, arguments);
            }),
        },
        {
          key: 'handleInviteeRejected',
          value:
            ((q = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d, p, h, f, g, _, v;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('TSignaling.INVITEE_REJECTED', {
                              text: { data: t },
                              type: 'event',
                            }),
                            wU.info('onInviteeRejected - params', t),
                            (i = t.data.inviteID),
                            XU(
                              null == (o = JSON.parse(t.data.data))
                                ? void 0
                                : o.businessID
                            ))
                          ) {
                            e.next = 6;
                            break;
                          }
                          return e.abrupt('return');
                        case 6:
                          if (
                            this.isGroupCall() ||
                            this.getSwitchCallModeStatus() ||
                            -1 === this.getAudioVideoSwitchIdList().indexOf(i)
                          ) {
                            e.next = 10;
                            break;
                          }
                          return (
                            wU.info(
                              'onInviteeRejected - Audio and video switching is not available'
                            ),
                            this.setSwitchCallModeStatus(!0),
                            e.abrupt('return')
                          );
                        case 10:
                          if (
                            ((r = t.data.invitee),
                            (a = t.data.inviter),
                            (s = this.getUserID()),
                            (c = this.getCallStatus()),
                            -1 !== this.getInviterInviteIdList().indexOf(i))
                          ) {
                            e.next = 19;
                            break;
                          }
                          if (
                            !this.isInviter() ||
                            -1 === this.getInviterInviteIdUserList().indexOf(r)
                          ) {
                            e.next = 17;
                            break;
                          }
                          return e.abrupt('return');
                        case 17:
                          return (
                            this.deleteUnHandledInviteeList([r]),
                            e.abrupt('return')
                          );
                        case 19:
                          if (c !== TR.IDLE) {
                            e.next = 21;
                            break;
                          }
                          return e.abrupt('return');
                        case 21:
                          if (
                            ((u = this.generateEventData()),
                            s !== r || c !== TR.CALLING)
                          ) {
                            e.next = 27;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onCancel(
                              fp(
                                {
                                  inviteID: this.data.invitation.inviteID,
                                  invitee: r,
                                  userID: r,
                                },
                                u
                              )
                            ),
                            (e.next = 26),
                            this._resetTUICallEngine()
                          );
                        case 26:
                          return e.abrupt('return');
                        case 27:
                          if (
                            ((l = this.isGroupCall()),
                            (d = this.isInviter()),
                            this.deleteUnHandledInviteeList([r]),
                            (p = this.getUnHandledInviteeList()),
                            (h = this.getHandledInviteeList()),
                            (f = fp(
                              {
                                inviteID: this.data.invitation.inviteID,
                                invitee: s,
                                userID: s,
                              },
                              u
                            )),
                            (g = {
                              inviteID: this.data.invitation.inviteID,
                              invitee: r,
                              userID: r,
                            }),
                            (_ = this.data.invitation),
                            c !== TR.CONNECTED)
                          ) {
                            e.next = 38;
                            break;
                          }
                          if (-1 === h.indexOf(r)) {
                            e.next = 38;
                            break;
                          }
                          return e.abrupt('return');
                        case 38:
                          if (
                            !(
                              'line_busy' === o.line_busy ||
                              '' === o.line_busy ||
                              (null != o &&
                                null !== (n = o.data) &&
                                void 0 !== n &&
                                n.message &&
                                'lineBusy' === o.data.message)
                            )
                          ) {
                            e.next = 52;
                            break;
                          }
                          if (
                            (a === _.inviter &&
                              this.TRTCCallingDelegate.onLineBusy({
                                inviteID: this.data.invitation.inviteID,
                                invitee: r,
                                userID: r,
                              }),
                            l)
                          ) {
                            e.next = 46;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onCancel(
                              fp(fp({}, f), {}, { reason: GR })
                            ),
                            (e.next = 44),
                            this._resetTUICallEngine()
                          );
                        case 44:
                          e.next = 50;
                          break;
                        case 46:
                          if (0 !== p.length || 1 !== h.length) {
                            e.next = 50;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onCancel(
                              fp(fp({}, f), {}, { reason: GR })
                            ),
                            (e.next = 50),
                            this._resetTUICallEngine()
                          );
                        case 50:
                        case 57:
                          e.next = 78;
                          break;
                        case 52:
                          if (l) {
                            e.next = 59;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onReject(g),
                            this.TRTCCallingDelegate.onCancel(
                              fp(fp({}, f), {}, { reason: wR })
                            ),
                            (e.next = 57),
                            this._resetTUICallEngine()
                          );
                        case 59:
                          if (
                            (this.TRTCCallingDelegate.onReject(g),
                            c !== TR.CALLING)
                          ) {
                            e.next = 72;
                            break;
                          }
                          if (!d) {
                            e.next = 68;
                            break;
                          }
                          if (0 !== p.length || 1 !== h.length) {
                            e.next = 66;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onCancel(
                              fp(fp({}, f), {}, { reason: wR })
                            ),
                            (e.next = 66),
                            this._resetTUICallEngine()
                          );
                        case 66:
                          e.next = 72;
                          break;
                        case 68:
                          if (1 !== p.length || 0 !== h.length) {
                            e.next = 72;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onCancel(
                              fp(fp({}, f), {}, { reason: wR })
                            ),
                            (e.next = 72),
                            this._resetTUICallEngine()
                          );
                        case 72:
                          if (c !== TR.CONNECTED) {
                            e.next = 78;
                            break;
                          }
                          if (0 !== p.length || 1 !== h.length) {
                            e.next = 78;
                            break;
                          }
                          return (
                            (v = this.generateCallEndData()),
                            this.TRTCCallingDelegate.onCallEnd(v),
                            (e.next = 78),
                            this._resetTUICallEngine()
                          );
                        case 78:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return q.apply(this, arguments);
            }),
        },
        {
          key: 'handleInvitationCancelled',
          value:
            ((F = np(
              _p().mark(function e(t) {
                var n, i;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info(
                              'TSignaling.INVITATION_CANCELLED',
                              { text: { data: t, type: 'event' } }
                            ),
                            this.data.invitation.inviteID === t.data.inviteID)
                          ) {
                            e.next = 3;
                            break;
                          }
                          return e.abrupt('return');
                        case 3:
                          if (
                            XU(
                              null == (n = JSON.parse(t.data.data))
                                ? void 0
                                : n.businessID
                            )
                          ) {
                            e.next = 6;
                            break;
                          }
                          return e.abrupt('return');
                        case 6:
                          if (this.data.callStatus !== TR.IDLE) {
                            e.next = 8;
                            break;
                          }
                          return e.abrupt('return');
                        case 8:
                          if (
                            -1 !==
                            this.getInviterInviteIdList().indexOf(
                              t.data.inviteID
                            )
                          ) {
                            e.next = 10;
                            break;
                          }
                          return e.abrupt('return');
                        case 10:
                          return (
                            wU.info(
                              'onInvitationCancelled',
                              'inviteID:'
                                .concat(t.data.inviteID, ' inviter:')
                                .concat(t.data.inviter, ' data:')
                                .concat(t.data.data)
                            ),
                            (i = this.generateEventData()),
                            this.TRTCCallingDelegate.onCancel(
                              fp(
                                fp(
                                  {
                                    inviteID: this.data.invitation.inviteID,
                                    invitee: t.data.inviter,
                                    userID: t.data.inviter,
                                  },
                                  i
                                ),
                                {},
                                { reason: PR }
                              )
                            ),
                            (e.next = 15),
                            this._resetTUICallEngine()
                          );
                        case 15:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return F.apply(this, arguments);
            }),
        },
        {
          key: 'handleInvitationTimeout',
          value:
            ((x = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d, p, h, f, g, _, v, m, y;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info(
                              'TSignaling.INVITATION_TIMEOUT',
                              { text: { data: t, type: 'event' } }
                            ),
                            (i = t.data),
                            (o = i.inviter),
                            (r = i.inviteeList),
                            (a = void 0 === r ? [] : r),
                            (s = i.inviteID),
                            (c = this.getUserID()),
                            (u = this.isGroupCall()),
                            (l = this.isInviter()),
                            (d = this.getCallStatus()),
                            this.deleteUnHandledInviteeList(a),
                            wU.warn(
                              'onInvitationTimeout - params:',
                              t,
                              'currentUserID:'
                                .concat(c, ' isInviter:')
                                .concat(l, ' isGroupCall:')
                                .concat(u, ' \n      currentCallStatus:')
                                .concat(d, ' inviteID:')
                                .concat(
                                  null == this ||
                                    null === (n = this._newInvitationData) ||
                                    void 0 === n
                                    ? void 0
                                    : n.inviteID
                                )
                            ),
                            -1 !== this.getInviterInviteIdList().indexOf(s))
                          ) {
                            e.next = 10;
                            break;
                          }
                          return e.abrupt('return');
                        case 10:
                          if (d !== TR.IDLE) {
                            e.next = 12;
                            break;
                          }
                          return e.abrupt('return');
                        case 12:
                          if (d !== TR.CONNECTED || u) {
                            e.next = 14;
                            break;
                          }
                          return e.abrupt('return');
                        case 14:
                          if (
                            ((p = this.getHandledInviteeList()),
                            (h = this.getUnHandledInviteeList()),
                            (f = {
                              groupID: this.getGroupId(),
                              inviteID: this.data.invitation.inviteID,
                              sponsor: o,
                              timeoutUserList: a,
                              userIDList: a,
                            }),
                            (g = this.generateEventData()),
                            (_ = fp(
                              fp(
                                {
                                  inviteID: this.data.invitation.inviteID,
                                  invitee: c,
                                  userID: c,
                                },
                                g
                              ),
                              {},
                              { reason: UR }
                            )),
                            u)
                          ) {
                            e.next = 25;
                            break;
                          }
                          return (
                            l
                              ? (this.TRTCCallingDelegate.onNoResp(f),
                                this.TRTCCallingDelegate.onCancel(_))
                              : (this.TRTCCallingDelegate.onCancel(_),
                                (v =
                                  this.getCallRecordReport().getCallRecordData()
                                    .head),
                                this.getCallRecordReport().eventUpload(
                                  fp(
                                    fp({}, v),
                                    {},
                                    {
                                      eventType: BR,
                                      inviteID: this.getInitialCallId(),
                                    }
                                  )
                                )),
                            (e.next = 23),
                            this._resetTUICallEngine()
                          );
                        case 23:
                          e.next = 50;
                          break;
                        case 25:
                          if (d !== TR.CALLING) {
                            e.next = 43;
                            break;
                          }
                          if (!l) {
                            e.next = 34;
                            break;
                          }
                          if (
                            (this.TRTCCallingDelegate.onNoResp(f),
                            0 !== h.length)
                          ) {
                            e.next = 32;
                            break;
                          }
                          return (
                            this.TRTCCallingDelegate.onCancel(_),
                            (e.next = 32),
                            this._resetTUICallEngine()
                          );
                        case 32:
                          e.next = 43;
                          break;
                        case 34:
                          if (-1 !== a.indexOf(c)) {
                            e.next = 38;
                            break;
                          }
                          this.TRTCCallingDelegate.onNoResp(f), (e.next = 41);
                          break;
                        case 38:
                          return (
                            this.TRTCCallingDelegate.onCancel(_),
                            (e.next = 41),
                            this._resetTUICallEngine()
                          );
                        case 41:
                          (m =
                            this.getCallRecordReport().getCallRecordData()
                              .head),
                            this.getCallRecordReport().eventUpload(
                              fp(
                                fp({}, m),
                                {},
                                {
                                  eventType: BR,
                                  inviteID: this.getInitialCallId(),
                                }
                              )
                            );
                        case 43:
                          if (d !== TR.CONNECTED) {
                            e.next = 50;
                            break;
                          }
                          if (
                            (this.TRTCCallingDelegate.onNoResp(f),
                            1 !== p.length || 0 !== h.length)
                          ) {
                            e.next = 50;
                            break;
                          }
                          return (
                            (y = this.generateCallEndData()),
                            this.TRTCCallingDelegate.onCallEnd(y),
                            (e.next = 50),
                            this._resetTUICallEngine()
                          );
                        case 50:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return x.apply(this, arguments);
            }),
        },
        {
          key: 'handleSDKReady',
          value:
            ((G = np(
              _p().mark(function e() {
                var t = this;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('ChatSdkEvent.SDK_READY', {
                              text: { type: 'event' },
                            }),
                            wU.info('TSignaling SDK ready'),
                            this._loginResolveList.forEach(function (e) {
                              return e.resolve(e.value);
                            }),
                            (this._loginResolveList = []),
                            this.TRTCCallingDelegate.onSdkReady({
                              message: 'SDK ready',
                            }),
                            (e.next = 7),
                            this.setSelfIMCallStatus(TR.IDLE)
                          );
                        case 7:
                          this._chat
                            .getMyProfile()
                            .then(function (e) {
                              t.data.localUser = e.data;
                            })
                            .catch(function (e) {
                              wU.warn('getMyProfile error:', e);
                            });
                        case 9:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function () {
              return G.apply(this, arguments);
            }),
        },
        {
          key: 'handleKickedOut',
          value:
            ((U = np(
              _p().mark(function e() {
                var t, n, i;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('ChatSdkEvent.KICKED_OUT', {
                              text: { type: 'event' },
                            }),
                            this.getCallStatus() !== TR.CONNECTED)
                          ) {
                            e.next = 6;
                            break;
                          }
                          return (
                            (t = this.generateCallEndData()),
                            this.TRTCCallingDelegate.onCallEnd(t),
                            (e.next = 6),
                            this._resetTUICallEngine()
                          );
                        case 6:
                          if (this.getCallStatus() !== TR.CALLING) {
                            e.next = 14;
                            break;
                          }
                          return (
                            (n = this.getUserID()),
                            (i = this.generateEventData()),
                            this.TRTCCallingDelegate.onCancel(
                              fp(
                                fp(
                                  {
                                    inviteID: this.data.invitation.inviteID,
                                    invitee: n,
                                    userID: n,
                                  },
                                  i
                                ),
                                {},
                                { reason: 'banned' }
                              )
                            ),
                            (e.next = 12),
                            this.cancel()
                          );
                        case 12:
                          return (e.next = 14), this._resetTUICallEngine();
                        case 14:
                          (this._initReady = !1),
                            this.TRTCCallingDelegate.onKickedOut({
                              message: 'kicked out',
                            });
                        case 16:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function () {
              return U.apply(this, arguments);
            }),
        },
        {
          key: '_addTSignalingEvent',
          value: function () {
            var e,
              t,
              n,
              i,
              o,
              r = Yd.EVENT,
              a = Yd.TSignaling;
            null === (e = this._chat) ||
              void 0 === e ||
              e.addSignalingListener(
                a.NEW_INVITATION_RECEIVED,
                this.handleNewInvitationReceived,
                this
              ),
              null === (t = this._chat) ||
                void 0 === t ||
                t.addSignalingListener(
                  a.INVITEE_ACCEPTED,
                  this.handleInviteeAccepted,
                  this
                ),
              null === (n = this._chat) ||
                void 0 === n ||
                n.addSignalingListener(
                  a.INVITEE_REJECTED,
                  this.handleInviteeRejected,
                  this
                ),
              null === (i = this._chat) ||
                void 0 === i ||
                i.addSignalingListener(
                  a.INVITATION_CANCELLED,
                  this.handleInvitationCancelled,
                  this
                ),
              null === (o = this._chat) ||
                void 0 === o ||
                o.addSignalingListener(
                  a.INVITATION_TIMEOUT,
                  this.handleInvitationTimeout,
                  this
                ),
              this._chat.on(r.SDK_READY, this.handleSDKReady, this),
              this._chat.on(r.KICKED_OUT, this.handleKickedOut, this),
              this._chat.on(
                r.USER_STATUS_UPDATED,
                this.onUserStatusUpdated,
                this
              );
          },
        },
        {
          key: '_removeTSignalingEvent',
          value: function () {
            var e,
              t,
              n,
              i,
              o,
              r = Yd.EVENT,
              a = Yd.TSignaling;
            null === (e = this._chat) ||
              void 0 === e ||
              e.removeSignalingListener(
                a.NEW_INVITATION_RECEIVED,
                this.handleNewInvitationReceived
              ),
              null === (t = this._chat) ||
                void 0 === t ||
                t.removeSignalingListener(
                  a.INVITEE_ACCEPTED,
                  this.handleInviteeAccepted
                ),
              null === (n = this._chat) ||
                void 0 === n ||
                n.removeSignalingListener(
                  a.INVITEE_REJECTED,
                  this.handleInviteeRejected
                ),
              null === (i = this._chat) ||
                void 0 === i ||
                i.removeSignalingListener(
                  a.INVITATION_CANCELLED,
                  this.handleInvitationCancelled
                ),
              null === (o = this._chat) ||
                void 0 === o ||
                o.removeSignalingListener(
                  a.INVITATION_TIMEOUT,
                  this.handleInvitationTimeout
                ),
              this._chat.off(r.SDK_READY, this.handleSDKReady),
              this._chat.off(r.KICKED_OUT, this.handleKickedOut),
              this._chat.off(r.USER_STATUS_UPDATED, this.onUserStatusUpdated);
          },
        },
        {
          key: 'onLocalJoin',
          value: function () {
            var e = FF('enterRoom').resolve;
            this._logger.info('TRTC.EVENT.LOCAL_JOIN', {
              text: { type: 'event', data: { userId: this.getUserID() } },
            });
            var t = this.generateEventData();
            this.TRTCCallingDelegate.onCallBegin(t), BU(e) && e();
          },
        },
        {
          key: 'onRemoteUserJoin',
          value:
            ((w = np(
              _p().mark(function e(t) {
                var n, i, o, r;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('TRTC.EVENT.REMOTE_USER_JOIN', {
                              text: {
                                type: 'event',
                                data: null == t ? void 0 : t.data,
                              },
                            }),
                            (n = t.data),
                            (i = n.userID),
                            (o = n.userList),
                            (r = n.playerList),
                            wU.info('REMOTE_USER_JOIN', t, i),
                            this.getCallStatus() === TR.CONNECTED ||
                              !this.isInviter())
                          ) {
                            e.next = 6;
                            break;
                          }
                          return (
                            (e.next = 6), this.setSelfIMCallStatus(TR.CONNECTED)
                          );
                        case 6:
                          if (
                            (this.addHandledInviteeList([i]),
                            this.deleteUnHandledInviteeList([i]),
                            this.changeCallStatus(TR.CONNECTED),
                            !(r.length > 0))
                          ) {
                            e.next = 15;
                            break;
                          }
                          return (e.next = 12), this.getUserProfile(r);
                        case 12:
                          (e.t0 = e.sent), (e.next = 16);
                          break;
                        case 15:
                          e.t0 = this.data.playerList;
                        case 16:
                          (this.data.playerList = e.t0),
                            this.data.startTalkTime ||
                              (this.data.startTalkTime = Date.now()),
                            this.TRTCCallingDelegate.onUserEnter({
                              userID: t.data.userID,
                              playerList: this.data.playerList,
                            }),
                            wU.log(
                              'REMOTE_USER_JOIN',
                              'playerList:',
                              this.data.playerList,
                              'userList:',
                              o
                            );
                        case 20:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return w.apply(this, arguments);
            }),
        },
        {
          key: 'onRemoteUserLeave',
          value:
            ((P = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('TRTC.EVENT.REMOTE_USER_LEAVE', {
                              text: {
                                type: 'event',
                                data: null == t ? void 0 : t.data,
                              },
                            }),
                            this.getCallStatus() !== TR.IDLE)
                          ) {
                            e.next = 3;
                            break;
                          }
                          return e.abrupt('return');
                        case 3:
                          if (
                            ((n = t.data.userID),
                            wU.info('REMOTE_USER_LEAVE', t, t.data.userID),
                            this.deleteHandledInviteeList([n]),
                            (this.data.playerList = this.data.playerList.filter(
                              function (e) {
                                return e.userID !== n;
                              }
                            )),
                            this.TRTCCallingDelegate.onUserLeave({
                              userID: n,
                              playerList: this.data.playerList,
                            }),
                            this.getCallDataReport().setExitRoomTime(
                              new Date().getTime()
                            ),
                            this.data.isGroupCall)
                          ) {
                            e.next = 18;
                            break;
                          }
                          return (
                            (e.next = 12),
                            this.TSignalingClient.hangup({
                              userIDList: [n],
                              callType: this.data.config.type,
                              callEnd: this.generateCallTotalTime(),
                            })
                          );
                        case 12:
                          return (
                            (i = this.generateCallEndData()),
                            this.TRTCCallingDelegate.onCallEnd(i),
                            wU.log('REMOTE_USER_LEAVE', 'playerList:'),
                            (e.next = 17),
                            this._resetTUICallEngine()
                          );
                        case 17:
                          return e.abrupt('return');
                        case 18:
                          if (
                            ((o = this.getHandledInviteeList()),
                            (r = this.getUnHandledInviteeList()),
                            (a = this.getUserID()),
                            1 !== o.length || o[0] !== a || 0 !== r.length)
                          ) {
                            e.next = 26;
                            break;
                          }
                          return (
                            (s = this.generateCallEndData()),
                            this.TRTCCallingDelegate.onCallEnd(s),
                            (e.next = 26),
                            this._resetTUICallEngine()
                          );
                        case 26:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return P.apply(this, arguments);
            }),
        },
        {
          key: 'onLocalNetStateUpdate',
          value: function (e) {
            this.data.pusher = e.data.pusher;
            var t = this.data.pusher,
              n = t.userID,
              i = void 0 === n ? '' : n,
              o = t.netStatus,
              r = void 0 === o ? {} : o,
              a = {
                userId: i,
                quality: null == r ? void 0 : r.netQualityLevel,
              };
            (this.data.netWorkQualityList = iG(
              this.data.netWorkQualityList,
              a,
              zR
            )),
              this.TRTCCallingDelegate.onUserNetworkQualityChanged(
                this.data.netWorkQualityList
              ),
              this.TRTCCallingDelegate.onUserUpdate({
                pusher: this.data.pusher,
                playerList: this.data.playerList,
              });
          },
        },
        {
          key: 'onRemoteNetStateUpdate',
          value:
            ((N = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          (this.data.playerList = t.data.playerList),
                            (n = cp(this.data.playerList));
                          try {
                            for (n.s(); !(i = n.n()).done; )
                              (o = i.value),
                                (r = o.userID),
                                (a = void 0 === r ? '' : r),
                                (s = o.netStatus),
                                (u = {
                                  userId: a,
                                  quality:
                                    null == (c = void 0 === s ? {} : s)
                                      ? void 0
                                      : c.netQualityLevel,
                                }),
                                (this.data.netWorkQualityList = iG(
                                  this.data.netWorkQualityList,
                                  u,
                                  zR
                                ));
                          } catch (l) {
                            n.e(l);
                          } finally {
                            n.f();
                          }
                          this.TRTCCallingDelegate.onUserNetworkQualityChanged(
                            this.data.netWorkQualityList
                          ),
                            this.TRTCCallingDelegate.onUserUpdate({
                              pusher: this.data.pusher,
                              playerList: this.data.playerList,
                            });
                        case 5:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return N.apply(this, arguments);
            }),
        },
        {
          key: 'onUserStatusUpdated',
          value:
            ((b = np(
              _p().mark(function e(t) {
                var n,
                  i,
                  o,
                  r = this;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('onUserStatusUpdated', {
                              text: { data: t },
                              type: 'event',
                            }),
                            (n = (t.data || []).find(function (e) {
                              return e.userID === r.getUserID();
                            })))
                          ) {
                            e.next = 4;
                            break;
                          }
                          return e.abrupt('return');
                        case 4:
                          if (
                            ((i = tL[n.customStatus]),
                            (o = this.getCallStatus()) === TR.IDLE)
                          ) {
                            e.next = 10;
                            break;
                          }
                          if (i === o) {
                            e.next = 10;
                            break;
                          }
                          return (e.next = 10), this.setSelfIMCallStatus(o);
                        case 10:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return b.apply(this, arguments);
            }),
        },
        {
          key: 'onError',
          value: function (e) {
            wU.warn('onError', e), this.TRTCCallingDelegate.onError(e);
          },
        },
        {
          key: 'onRemoteVideoAdd',
          value: function (e) {
            this._logger.info('TRTC.EVENT.REMOTE_VIDEO_ADD', {
              text: { type: 'event', data: null == e ? void 0 : e.data },
            }),
              wU.info('* room REMOTE_VIDEO_ADD', e);
            var t = e.data.player;
            this.setPlayerAttributesHandler(t, { muteVideo: !1 });
          },
        },
        {
          key: 'onRemoteVideoRemove',
          value: function (e) {
            this._logger.info('TRTC.EVENT.REMOTE_VIDEO_REMOVE', {
              text: { type: 'event', data: null == e ? void 0 : e.data },
            }),
              wU.info('* room REMOTE_VIDEO_REMOVE', e);
            var t = e.data.player;
            this.setPlayerAttributesHandler(t, { muteVideo: !0 });
          },
        },
        {
          key: 'onRemoteAudioAdd',
          value:
            ((O = np(
              _p().mark(function e(t) {
                var n;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('TRTC.EVENT.REMOTE_AUDIO_ADD', {
                              text: {
                                type: 'event',
                                data: null == t ? void 0 : t.data,
                              },
                            }),
                            wU.info('* room REMOTE_AUDIO_ADD', t),
                            (e.next = 4),
                            this.getUserProfile([t.data.player])
                          );
                        case 4:
                          (n = e.sent),
                            this.setPlayerAttributesHandler(n[0], {
                              muteAudio: !1,
                            });
                        case 6:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return O.apply(this, arguments);
            }),
        },
        {
          key: 'onRemoteAudioRemove',
          value: function (e) {
            this._logger.info('TRTC.EVENT.REMOTE_AUDIO_REMOVE', {
              text: { type: 'event', data: null == e ? void 0 : e.data },
            }),
              wU.info('* room REMOTE_AUDIO_REMOVE', e);
            var t = e.data.player;
            this.setPlayerAttributesHandler(t, { muteAudio: !0 });
          },
        },
        {
          key: 'onRemoteAudioVolumeUpdate',
          value:
            ((A = np(
              _p().mark(function e(t) {
                var n;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          wU.info('* room REMOTE_AUDIO_VOLUME_UPDATE', t),
                            (n = t.data.playerList),
                            (this.data.playerList = this._updateUserProfile(
                              this.data.playerList,
                              n
                            )),
                            this.TRTCCallingDelegate.onUserUpdate({
                              pusher: this.data.pusher,
                              playerList: this.data.playerList,
                            });
                        case 4:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return A.apply(this, arguments);
            }),
        },
        {
          key: 'onLocalAudioVolumeUpdate',
          value: function (e) {
            var t = e.data.pusher;
            (this.data.pusher = t),
              this.TRTCCallingDelegate.onUserUpdate({
                pusher: this.data.pusher,
                playerList: this.data.playerList,
              });
          },
        },
        {
          key: 'onMessageSentByMe',
          value: function (e) {
            this.TRTCCallingDelegate.onMessageSentByMe(e);
          },
        },
        {
          key: '_addTRTCEvent',
          value: function () {
            this.TRTC.on(this.TRTC.EVENT.LOCAL_JOIN, this.onLocalJoin, this),
              this.TRTC.on(
                this.TRTC.EVENT.REMOTE_USER_JOIN,
                this.onRemoteUserJoin,
                this
              ),
              this.TRTC.on(
                this.TRTC.EVENT.REMOTE_USER_LEAVE,
                this.onRemoteUserLeave,
                this
              ),
              this.TRTC.on(
                this.TRTC.EVENT.LOCAL_NET_STATE_UPDATE,
                this.onLocalNetStateUpdate,
                this
              ),
              this.TRTC.on(
                this.TRTC.EVENT.REMOTE_NET_STATE_UPDATE,
                this.onRemoteNetStateUpdate,
                this
              ),
              this.TRTC.on(this.TRTC.EVENT.ERROR, this.onError, this),
              this.TRTC.on(
                this.TRTC.EVENT.REMOTE_VIDEO_ADD,
                this.onRemoteVideoAdd,
                this
              ),
              this.TRTC.on(
                this.TRTC.EVENT.REMOTE_VIDEO_REMOVE,
                this.onRemoteVideoRemove,
                this
              ),
              this.TRTC.on(
                this.TRTC.EVENT.REMOTE_AUDIO_ADD,
                this.onRemoteAudioAdd,
                this
              ),
              this.TRTC.on(
                this.TRTC.EVENT.REMOTE_AUDIO_REMOVE,
                this.onRemoteAudioRemove,
                this
              ),
              this.TRTC.on(
                this.TRTC.EVENT.REMOTE_AUDIO_VOLUME_UPDATE,
                this.onRemoteAudioVolumeUpdate,
                this
              ),
              this.TRTC.on(
                this.TRTC.EVENT.LOCAL_AUDIO_VOLUME_UPDATE,
                this.onLocalAudioVolumeUpdate,
                this
              );
          },
        },
        {
          key: '_removeTRTCEvent',
          value: function () {
            this.TRTC.off(this.TRTC.EVENT.LOCAL_JOIN, this.onLocalJoin),
              this.TRTC.off(
                this.TRTC.EVENT.REMOTE_USER_JOIN,
                this.onRemoteUserJoin
              ),
              this.TRTC.off(
                this.TRTC.EVENT.REMOTE_USER_LEAVE,
                this.onRemoteUserLeave
              ),
              this.TRTC.off(
                this.TRTC.EVENT.LOCAL_NET_STATE_UPDATE,
                this.onLocalNetStateUpdate
              ),
              this.TRTC.off(
                this.TRTC.EVENT.REMOTE_NET_STATE_UPDATE,
                this.onRemoteNetStateUpdate
              ),
              this.TRTC.off(this.TRTC.EVENT.ERROR, this.onError),
              this.TRTC.off(
                this.TRTC.EVENT.REMOTE_VIDEO_ADD,
                this.onRemoteVideoAdd
              ),
              this.TRTC.off(
                this.TRTC.EVENT.REMOTE_VIDEO_REMOVE,
                this.onRemoteVideoRemove
              ),
              this.TRTC.off(
                this.TRTC.EVENT.REMOTE_AUDIO_ADD,
                this.onRemoteAudioAdd
              ),
              this.TRTC.off(
                this.TRTC.EVENT.REMOTE_AUDIO_REMOVE,
                this.onRemoteAudioRemove
              ),
              this.TRTC.off(
                this.TRTC.EVENT.REMOTE_AUDIO_VOLUME_UPDATE,
                this.onRemoteAudioVolumeUpdate
              ),
              this.TRTC.off(
                this.TRTC.EVENT.LOCAL_AUDIO_VOLUME_UPDATE,
                this.onLocalAudioVolumeUpdate
              );
          },
        },
        {
          key: 'initTRTC',
          value: function () {
            this._logger.info('initTRTC.start', { type: 'api' });
            var e = this.TRTC.createPusher();
            this.setBeautyLevel(this._beautyLevel),
              (this.data.pusher = e.pusherAttributes);
          },
        },
        {
          key: 'enterRoom',
          value:
            ((L = np(
              _p().mark(function e(t) {
                var n, i;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('enterRoom.start', {
                              text: { data: t },
                              type: 'api',
                            }),
                            (n = xF({
                              key: 'enterRoom',
                              timeout: 15e3,
                              errorMessage: 'enter room timeout',
                            })),
                            this._addTRTCEvent(),
                            (i = fp(
                              fp({}, this.data.config),
                              {},
                              {
                                roomID: this.getRoomId(),
                                enableMic: !0,
                                autopush: !0,
                                enableAgc: !0,
                                enableAns: !0,
                                enableCamera: t.callType === ER.VIDEO,
                              }
                            )),
                            xU(nG(this.getRoomId(), this.getStrRoomId())) &&
                              (i.strRoomID = this.getStrRoomId()),
                            (this.data.enterRoomStatus = !0),
                            (this.data.pusher = this.TRTC.enterRoom(i)),
                            this.setPusherAttributesHandler({
                              enableCamera: t.callType === ER.VIDEO,
                            }),
                            this.getCurrentPusherInstance().start(),
                            this._logger.info('enterRoom.updatePusher.start'),
                            this.TRTCCallingDelegate.onUserUpdate({
                              pusher: this.data.pusher,
                            }),
                            e.abrupt('return', n)
                          );
                        case 12:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return L.apply(this, arguments);
            }),
        },
        {
          key: 'setBeautyLevel',
          value: function (e) {
            $x
              .getInstance()
              .getAlert()
              .checkSync(
                new qx({ api: 'setBeautyLevel', attributes: { level: e } })
              ),
              (this._beautyLevel = e),
              this._initReady &&
                this.setPusherAttributesHandler({
                  beautyLevel: this._beautyLevel,
                });
          },
        },
        {
          key: 'exitRoom',
          value:
            ((R = np(
              _p().mark(function e() {
                var t;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('exitRoom.start', {
                              type: 'api',
                            }),
                            (e.next = 3),
                            this.getCurrentPusherInstance().stop()
                          );
                        case 3:
                          return (e.next = 5), this.TRTC.exitRoom();
                        case 5:
                          (t = e.sent),
                            (this.data.pusher = t.pusher),
                            (this.data.playerList = t.playerList),
                            (this.data.unHandledInviteeList = []),
                            (this.data.enterRoomStatus = !1),
                            this.initTRTC(),
                            this._removeTRTCEvent();
                        case 12:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function () {
              return R.apply(this, arguments);
            }),
        },
        {
          key: 'setPusherAttributesHandler',
          value: function (e) {
            this._logger.info('setPusherAttributesHandler.start', {
              text: { data: e },
              type: 'api',
            }),
              (this.data.pusher = this.TRTC.setPusherAttributes(e)),
              this.TRTCCallingDelegate.onUserUpdate({
                pusher: this.data.pusher,
                playerList: this.data.playerList,
              });
          },
        },
        {
          key: 'setPlayerAttributesHandler',
          value:
            ((k = np(
              _p().mark(function e(t, n) {
                var i;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          this._logger.info(
                            'setPlayerAttributesHandler.start',
                            { text: { data: n }, type: 'api' }
                          ),
                            (i = this.TRTC.setPlayerAttributes(t.streamID, n)),
                            wU.warn('setPlayerAttributesHandler', i),
                            (this.data.playerList =
                              i.length > 0
                                ? this._updateUserProfile(
                                    this.data.playerList,
                                    i
                                  )
                                : this.data.playerList),
                            this.data.playerList.length > 0 &&
                              0 === i.length &&
                              ((this.data.playerList[0].hasAudio = !1),
                              (this.data.playerList[0].hasVideo = !1)),
                            this.TRTCCallingDelegate.onUserUpdate({
                              pusher: this.data.pusher,
                              playerList: this.data.playerList,
                            });
                        case 6:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e, t) {
              return k.apply(this, arguments);
            }),
        },
        {
          key: '_mutePlayerAudio',
          value: function (e) {
            this._logger.info('_mutePlayerAudio.start', {
              text: { data: e },
              type: 'api',
            });
            var t = e.currentTarget.dataset.value;
            t.hasAudio && t.muteAudio
              ? this.setPlayerAttributesHandler(t, { muteAudio: !1 })
              : !t.hasAudio ||
                t.muteAudio ||
                this.setPlayerAttributesHandler(t, { muteAudio: !0 });
          },
        },
        {
          key: '_mutePlayerVideo',
          value: function (e) {
            this._logger.info('_mutePlayerVideo.start', {
              text: { data: e },
              type: 'api',
            });
            var t = e.currentTarget.dataset.value;
            t.hasVideo && t.muteVideo
              ? this.setPlayerAttributesHandler(t, { muteVideo: !1 })
              : !t.hasVideo ||
                t.muteVideo ||
                this.setPlayerAttributesHandler(t, { muteVideo: !0 });
          },
        },
        {
          key: '_pusherAudioHandler',
          value: function () {
            this._logger.info('_pusherAudioHandler.start', {
              type: 'api',
              text: { data: { enableMic: this.data.pusher.enableMic } },
            }),
              this.data.pusher.enableMic
                ? (this.setPusherAttributesHandler({ enableMic: !1 }),
                  this.getCurrentPusherInstance().setMICVolume({ volume: 0 }))
                : (this.setPusherAttributesHandler({ enableMic: !0 }),
                  this.getCurrentPusherInstance().setMICVolume({
                    volume: 100,
                  }));
          },
        },
        {
          key: '_pusherVideoHandler',
          value: function () {
            this._logger.info('_pusherVideoHandler.start', {
              type: 'api',
              text: { data: { enableCamera: this.data.pusher.enableCamera } },
            }),
              this.data.pusher.enableCamera
                ? this.setPusherAttributesHandler({ enableCamera: !1 })
                : this.setPusherAttributesHandler({ enableCamera: !0 });
          },
        },
        {
          key: 'init',
          value:
            ((S = np(
              _p().mark(function e(t) {
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            $x
                              .getInstance()
                              .getAlert()
                              .checkSync(
                                new qx({ api: 'init', attributes: t })
                              ),
                            (e.next = 3),
                            this.login(t)
                          );
                        case 3:
                          return e.abrupt('return', e.sent);
                        case 4:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return S.apply(this, arguments);
            }),
        },
        {
          key: 'login',
          value:
            ((D = np(
              _p().mark(function e(t) {
                var n = this;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            (this._uniqueLoginId = sG(6)),
                            this._logger.updateGetReportData(function () {
                              return {
                                userid: t.userID,
                                uniqueloginid: n._uniqueLoginId,
                              };
                            }),
                            this._logger.info('login.start', {
                              type: 'api',
                              text: {
                                data: fp(fp({}, t), {}, { userSig: '' }),
                              },
                            }),
                            (this.data.config.userID = t.userID),
                            (this.data.config.userSig = t.userSig),
                            e.abrupt(
                              'return',
                              new Promise(function (e, i) {
                                var o;
                                n._chat
                                  .login({
                                    userID: t.userID,
                                    userSig: t.userSig,
                                  })
                                  .then(
                                    ((o = np(
                                      _p().mark(function i(o) {
                                        var r;
                                        return _p().wrap(function (i) {
                                          for (;;)
                                            switch ((i.prev = i.next)) {
                                              case 0:
                                                return (
                                                  $n.setStorageSync(
                                                    'userId',
                                                    ''.concat(t.userID)
                                                  ),
                                                  n._callDataReport.setUserID(
                                                    t.userID
                                                  ),
                                                  (n._initReady = !0),
                                                  (i.next = 5),
                                                  n._resetTUICallEngine()
                                                );
                                              case 5:
                                                n._addTSignalingEvent(),
                                                  n.initTRTC(),
                                                  null !== (r = o.data) &&
                                                    void 0 !== r &&
                                                    r.repeatLogin &&
                                                    (n._logger.info(
                                                      'login.success',
                                                      {
                                                        text: {
                                                          error:
                                                            'The TIM login status has been inherited into Call',
                                                        },
                                                        type: 'api',
                                                      }
                                                    ),
                                                    wU.info(
                                                      'login - success: The TIM login status has been inherited into Call. IM 登录状态已成功被 Call 继承。'
                                                    ),
                                                    n._chat.isReady() &&
                                                      n.TRTCCallingDelegate.onSdkReady(
                                                        { message: 'SDK ready' }
                                                      ),
                                                    e()),
                                                  n._loginResolveList.push({
                                                    resolve: e,
                                                    value: o,
                                                  });
                                              case 9:
                                              case 'end':
                                                return i.stop();
                                            }
                                        }, i);
                                      })
                                    )),
                                    function (e) {
                                      return o.apply(this, arguments);
                                    })
                                  )
                                  .catch(function (t) {
                                    var o = t || {},
                                      r = o.code,
                                      a = o.message;
                                    2024 === r || 2025 === r
                                      ? (n._logger.warn('login.fail', {
                                          text: {
                                            error: ''.concat(r, ', ').concat(a),
                                          },
                                          type: 'api',
                                        }),
                                        wU.warn(
                                          'login failed: '
                                            .concat(r, ', ')
                                            .concat(a, '.')
                                        ),
                                        n._loginResolveList.push({
                                          resolve: e,
                                          value: {
                                            code: 0,
                                            message: 'success',
                                          },
                                        }))
                                      : (n._logger.error('login.fail', {
                                          text: {
                                            error: ''.concat(r, ', ').concat(a),
                                          },
                                          type: 'api',
                                        }),
                                        i(t));
                                  });
                              })
                            )
                          );
                        case 6:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return D.apply(this, arguments);
            }),
        },
        {
          key: 'logout',
          value:
            ((E = np(
              _p().mark(function e() {
                var t, n, i;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('logout.start', {
                              type: 'api',
                              text: {
                                data: {
                                  userID: this.data.config.userID,
                                  initReady: this._initReady,
                                },
                              },
                            }),
                            this._initReady)
                          ) {
                            e.next = 3;
                            break;
                          }
                          return e.abrupt('return');
                        case 3:
                          return (
                            (this._loginResolveList = []),
                            (this._uniqueLoginId = ''),
                            (t = this.data.config),
                            (n = t.userID),
                            (i = t.userSig),
                            (e.prev = 6),
                            (e.next = 9),
                            this._chat.logout({ userID: n, userSig: i })
                          );
                        case 9:
                          wU.info('logout', 'IM logout success'), (e.next = 16);
                          break;
                        case 12:
                          (e.prev = 12),
                            (e.t0 = e.catch(6)),
                            this._logger.error('logout.fail', {
                              type: 'api',
                              text: { error: e.t0 },
                            }),
                            wU.error('logout', 'IM logout failure');
                        case 16:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[6, 12]]
                );
              })
            )),
            function () {
              return E.apply(this, arguments);
            }),
        },
        {
          key: 'on',
          value: function (e, t, n) {
            $x
              .getInstance()
              .getAlert()
              .checkSync(
                new qx({
                  api: 'on',
                  attributes: { eventCode: e, handler: t, context: n },
                })
              ),
              this._emitter.on(e, t, n);
          },
        },
        {
          key: 'off',
          value: function (e, t) {
            $x
              .getInstance()
              .getAlert()
              .checkSync(
                new qx({ api: 'off', attributes: { eventCode: e, handler: t } })
              ),
              this._emitter.off(e, t);
          },
        },
        {
          key: 'call',
          value:
            ((T = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d, p;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('call.start', {
                              type: 'api',
                              text: { data: t },
                            }),
                            (n = t.userID),
                            (i = t.type),
                            (o = t.roomID),
                            (r = t.strRoomID),
                            (a = t.timeout),
                            (e.next = 4),
                            $x
                              .getInstance()
                              .getAlert()
                              .check(
                                new qx({
                                  api: 'call',
                                  attributes: t,
                                  initReady: this._initReady,
                                  callStatus: this.data.callStatus,
                                  capabilityCode: AR.BASE,
                                  sdkAppID: this.data.config.sdkAppID,
                                }),
                                { tim: this._chat }
                              )
                          );
                        case 4:
                          return (e.prev = 4), (e.next = 7), lF(i);
                        case 7:
                          e.next = 13;
                          break;
                        case 9:
                          return (
                            (e.prev = 9),
                            (e.t0 = e.catch(4)),
                            this._logger.error('call.fail', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            e.abrupt('return')
                          );
                        case 13:
                          if (this.getUserID() !== n) {
                            e.next = 17;
                            break;
                          }
                          throw (
                            (this._logger.error('call.fail', {
                              text: {
                                error: 'Called id can not be yourself. userId:'
                                  .concat(this.getUserID(), ', inviteeId:')
                                  .concat(n),
                              },
                              type: 'api',
                            }),
                            wU.error(
                              "call failed. Called id can't be yourself. userId:"
                                .concat(this.getUserID(), ', inviteeId:')
                                .concat(n)
                            ),
                            new Error(
                              "call failed. Called id can't be yourself. userId:"
                                .concat(this.getUserID(), ', inviteeId:')
                                .concat(n)
                            ))
                          );
                        case 17:
                          return (
                            (e.next = 19),
                            this.getSelfIMCallStatus([this.getUserID()])
                          );
                        case 19:
                          if ((s = e.sent) === TR.IDLE) {
                            e.next = 23;
                            break;
                          }
                          throw (
                            (this._logger.error('call.failed', {
                              text: { data: { params: t, customStatus: s } },
                              type: 'api',
                            }),
                            new hG({
                              code: BO.ERROR_REQUEST_REFUSED,
                              messageParams: { value: s },
                              fnName: 'call',
                            }))
                          );
                        case 23:
                          return (
                            this._callDataReport.setAbilityBit(!0),
                            this._callDataReport.setCallScene('SingleCall'),
                            (c = {
                              callType: FR,
                              mediaType: i,
                              inviteeList: [n],
                            }),
                            (e.prev = 26),
                            this.analyzeAndSetRoomId(o, r),
                            (this.data.config.type = i),
                            (this.data.invitation.inviter =
                              this.data.config.userID),
                            (this.data.invitation.type = i),
                            (this.data.invitation.roomID = this.getRoomId()),
                            (this.data.isInviter = !0),
                            (this.data.remoteID = n),
                            this.setGroupId(''),
                            this.setCallTimeout(
                              qU(a) ? this.getCallTimeout() : a
                            ),
                            this.changeCallStatus(TR.CALLING),
                            (u = +new Date()),
                            (e.next = 40),
                            this.enterRoom({ callType: i })
                          );
                        case 40:
                          return (
                            (l = +new Date()),
                            this._logger.info('enterRoom.success', {
                              text: {
                                data: { roomID: o, callType: i, cost: l - u },
                              },
                              type: 'api',
                            }),
                            (e.next = 44),
                            this.TSignalingClient.invite(
                              fp(
                                fp({}, t),
                                {},
                                {
                                  roomID: this.getRoomId(),
                                  strRoomId: this.getStrRoomId(),
                                  timeout: this.getCallTimeout(),
                                }
                              )
                            )
                          );
                        case 44:
                          if (
                            ((d = e.sent),
                            this._callDataReport.setEnterRoomTime(
                              new Date().getTime()
                            ),
                            (p = fp(
                              fp({}, (p = this._callDataReport.getCallData())),
                              {},
                              {
                                userId: n,
                                roomID: this.getRoomId(),
                                timeout: this.getCallTimeout(),
                                callRole: DR,
                                callType: i,
                                inviteeList: [n],
                              }
                            )),
                            this._callDataReport.setCallData(p),
                            this._callDataReport.setSendSignalingTime(
                              new Date().getTime()
                            ),
                            wU.info(
                              'call(userID: '
                                .concat(n, ', type: ')
                                .concat(i, ') success, ')
                                .concat(d)
                            ),
                            0 !== d.code)
                          ) {
                            e.next = 62;
                            break;
                          }
                          (this.data.invitation.inviteID = d.inviteID),
                            this.addInviterInviteId(d.inviteID, [
                              this.data.config.userID,
                              n,
                            ]),
                            this.addUnHandledInviteeList([n]),
                            this.addHandledInviteeList([this.getUserID()]),
                            this._callDataReport.setInviteID(d.inviteID),
                            this.setInitialCallId(d.inviteID),
                            this._callRecordUpload(fp({ eventType: VR }, c)),
                            this._callRecordReport.startHeartbeat(),
                            (e.next = 68);
                          break;
                        case 62:
                          return (
                            this._callDataReport.setCodeAndMessage(
                              d.code,
                              d.message
                            ),
                            this._callDataReport.uploadToKibana(),
                            this._callRecordUpload(fp({ eventType: HR }, c)),
                            this._logger.error('call.fail', {
                              text: { error: d },
                              type: 'api',
                            }),
                            (e.next = 68),
                            this._resetTUICallEngine()
                          );
                        case 68:
                          return e.abrupt('return', {
                            data: d.data,
                            pusher: this.data.pusher,
                            roomID: this.getRoomId(),
                            strRoomID: this.getStrRoomId(),
                          });
                        case 71:
                          return (
                            (e.prev = 71),
                            (e.t1 = e.catch(26)),
                            e.t1.code === BO.ERROR_BLACKLIST
                              ? (this.TRTCCallingDelegate.onError(
                                  BO.ERROR_BLACKLIST,
                                  e.t1.message
                                ),
                                this._callDataReport.setCodeAndMessage(
                                  BO.ERROR_BLACKLIST,
                                  e.t1.message
                                ))
                              : this._callDataReport.setCodeAndMessage(
                                  BO.UNKNOWN,
                                  JSON.stringify(e.t1)
                                ),
                            this._callDataReport.uploadToKibana(),
                            this._callRecordUpload(fp({ eventType: HR }, c)),
                            this._logger.error('call.fail', {
                              text: { error: e.t1 },
                              type: 'api',
                            }),
                            wU.error(
                              'call(userID:'
                                .concat(n, ',type:')
                                .concat(i, ") failed', error: ")
                                .concat(e.t1)
                            ),
                            (e.next = 80),
                            this._resetTUICallEngine()
                          );
                        case 80:
                          throw new Error(e.t1);
                        case 81:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [
                    [4, 9],
                    [26, 71],
                  ]
                );
              })
            )),
            function (e) {
              return T.apply(this, arguments);
            }),
        },
        {
          key: 'groupCall',
          value:
            ((C = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u, l, d;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('groupCall.start', {
                              type: 'api',
                              text: { data: t },
                            }),
                            (n = t.type),
                            (i = t.roomID),
                            (o = t.strRoomID),
                            (r = t.userIDList),
                            (a = t.timeout),
                            (e.next = 4),
                            $x
                              .getInstance()
                              .getAlert()
                              .check(
                                new qx({
                                  api: 'groupCall',
                                  attributes: t,
                                  initReady: this._initReady,
                                  callStatus: this.data.callStatus,
                                  capabilityCode: AR.PRO,
                                  sdkAppID: this.data.config.sdkAppID,
                                }),
                                { tim: this._chat }
                              )
                          );
                        case 4:
                          return (e.prev = 4), (e.next = 7), lF(n);
                        case 7:
                          e.next = 13;
                          break;
                        case 9:
                          return (
                            (e.prev = 9),
                            (e.t0 = e.catch(4)),
                            this._logger.error('groupCall.fail', {
                              type: 'api',
                              text: { error: e.t0 },
                            }),
                            e.abrupt('return')
                          );
                        case 13:
                          if (-1 === r.indexOf(this.getUserID())) {
                            e.next = 16;
                            break;
                          }
                          throw (
                            (this._logger.error('groupCall.fail', {
                              type: 'api',
                              text: {
                                error: 'Called list can not contain yourself',
                              },
                            }),
                            new Error(
                              "groupCall failed. Called list can't contain yourself. userID:"
                                .concat(this.getUserID(), ', inviteeIDList:')
                                .concat(r)
                            ))
                          );
                        case 16:
                          return (
                            (e.next = 18),
                            this.getSelfIMCallStatus([this.getUserID()])
                          );
                        case 18:
                          if ((s = e.sent) === TR.IDLE) {
                            e.next = 22;
                            break;
                          }
                          throw (
                            (this._logger.error('groupCall.fail', {
                              text: { data: { params: t, customStatus: s } },
                              type: 'api',
                            }),
                            new hG({
                              code: BO.ERROR_REQUEST_REFUSED,
                              messageParams: { value: s },
                              fnName: 'groupCall',
                            }))
                          );
                        case 22:
                          return (
                            this._callDataReport.setCallScene('groupCall'),
                            this.analyzeAndSetRoomId(i, o),
                            (c = {
                              callType: qR,
                              mediaType: n,
                              inviteeList: t.userIDList,
                            }),
                            (this.data.config.type = t.type),
                            (this.data.invitation.inviter =
                              this.data.config.userID),
                            (this.data.invitation.type = n),
                            (this.data.invitation.roomID = this.getRoomId()),
                            (this.data.isInviter = !0),
                            (this.data.isGroupCall = !0),
                            this.setGroupId(t.groupID),
                            this.setCallTimeout(
                              qU(a) ? this.getCallTimeout() : a
                            ),
                            this.changeCallStatus(TR.CALLING),
                            (e.prev = 34),
                            (u = +new Date()),
                            (e.next = 38),
                            this.enterRoom({ callType: n })
                          );
                        case 38:
                          return (
                            (l = +new Date()),
                            this._logger.info('enterRoom.success', {
                              text: {
                                data: { roomID: i, callType: n, cost: l - u },
                              },
                              type: 'api',
                            }),
                            (e.next = 42),
                            this.TSignalingClient.inviteGroup(
                              fp(
                                fp({}, t),
                                {},
                                {
                                  roomID: this.getRoomId(),
                                  strRoomID: this.getStrRoomId(),
                                  timeout: this.getCallTimeout(),
                                }
                              )
                            )
                          );
                        case 42:
                          return (
                            (d = e.sent),
                            (this.data.invitation.inviteID = d.inviteID),
                            this.addUnHandledInviteeList(t.userIDList),
                            this.addHandledInviteeList([this.getUserID()]),
                            this.addInviterInviteId(
                              d.inviteID,
                              [this.data.config.userID].concat(mp(t.userIDList))
                            ),
                            this.setInitialCallId(d.inviteID),
                            this._callRecordUpload(fp({ eventType: VR }, c)),
                            this._callRecordReport.startHeartbeat(),
                            wU.log('groupCall OK', d),
                            e.abrupt('return', {
                              data: d.data,
                              pusher: this.data.pusher,
                              roomID: this.getRoomId(),
                              strRoomID: this.getStrRoomId(),
                            })
                          );
                        case 54:
                          return (
                            (e.prev = 54),
                            (e.t1 = e.catch(34)),
                            this._logger.error('groupCall.fail', {
                              text: { error: e.t1 },
                              type: 'api',
                            }),
                            wU.error('groupCall failed', e.t1),
                            this._callRecordUpload(fp({ eventType: HR }, c)),
                            (e.next = 61),
                            this._resetTUICallEngine()
                          );
                        case 61:
                          throw new Error(e.t1);
                        case 62:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [
                    [4, 9],
                    [34, 54],
                  ]
                );
              })
            )),
            function (e) {
              return C.apply(this, arguments);
            }),
        },
        {
          key: 'joinInGroupCall',
          value:
            ((M = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s, c, u;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('joinInGroupCall.start', {
                              text: { data: t },
                              type: 'api',
                            }),
                            (n = t.roomID),
                            (i = t.strRoomID),
                            (o = t.type),
                            (r = t.groupID),
                            (e.next = 4),
                            $x
                              .getInstance()
                              .getAlert()
                              .check(
                                new qx({
                                  api: 'joinInGroupCall',
                                  attributes: t,
                                  initReady: this._initReady,
                                  capabilityCode: AR.PRO,
                                  sdkAppID: this.data.config.sdkAppID,
                                }),
                                { tim: this._chat }
                              )
                          );
                        case 4:
                          return (
                            (e.next = 6),
                            this.getSelfIMCallStatus([this.getUserID()])
                          );
                        case 6:
                          if ((a = e.sent) === TR.IDLE) {
                            e.next = 10;
                            break;
                          }
                          throw (
                            (this._logger.error('joinInGroupCall.failed', {
                              text: { data: { params: t, customStatus: a } },
                              type: 'api',
                            }),
                            new hG({
                              code: BO.ERROR_REQUEST_REFUSED,
                              messageParams: { value: a },
                              fnName: 'joinInGroupCall',
                            }))
                          );
                        case 10:
                          return (e.prev = 10), (e.next = 13), lF(o);
                        case 13:
                          e.next = 19;
                          break;
                        case 15:
                          return (
                            (e.prev = 15),
                            (e.t0 = e.catch(10)),
                            this._logger.error('joinInGroupCall.failed', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            e.abrupt('return')
                          );
                        case 19:
                          return (
                            (e.prev = 19),
                            (this.data.config.type = o),
                            (this.data.invitation.type = o),
                            wU.info(
                              'joinInGroupCall roomID:'
                                .concat(n, ',type:')
                                .concat(o, ',userID:')
                                .concat(this.getUserID())
                            ),
                            this.changeCallStatus(TR.CALLING),
                            this.addHandledInviteeList([this.getUserID()]),
                            this.setGroupId(r),
                            this.analyzeAndSetRoomId(n, i),
                            (this.data.isGroupCall = !0),
                            (this.data.isInviter = !1),
                            (s = +new Date()),
                            (e.next = 32),
                            this.enterRoom({ callType: o })
                          );
                        case 32:
                          return (
                            (c = +new Date()),
                            this._logger.info('enterRoom.success', {
                              text: {
                                data: { roomID: n, callType: o, cost: c - s },
                              },
                              type: 'api',
                            }),
                            (e.next = 36),
                            this.setSelfIMCallStatus(TR.CONNECTED)
                          );
                        case 36:
                          return (
                            this.changeCallStatus(TR.CONNECTED),
                            this.getCallRecordReport().setBodyStatus(
                              TR.CONNECTED
                            ),
                            (u = {
                              eventType: 'join_in_group_call',
                              callType: qR,
                              mediaType: this._callType,
                            }),
                            this._callRecordUpload(u),
                            this._callRecordReport.startHeartbeat(),
                            e.abrupt('return', this.data.pusher)
                          );
                        case 44:
                          return (
                            (e.prev = 44),
                            (e.t1 = e.catch(19)),
                            this._logger.error('joinInGroupCall.failed', {
                              text: { error: e.t1 },
                              type: 'api',
                            }),
                            (e.next = 49),
                            this._resetTUICallEngine()
                          );
                        case 49:
                          throw new Error(
                            'joinInGroupCall failed error: '.concat(e.t1)
                          );
                        case 50:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [
                    [10, 15],
                    [19, 44],
                  ]
                );
              })
            )),
            function (e) {
              return M.apply(this, arguments);
            }),
        },
        {
          key: 'inviteUser',
          value:
            ((I = np(
              _p().mark(function e(t) {
                var n,
                  i,
                  o,
                  r,
                  a,
                  s,
                  c,
                  u,
                  l,
                  d = this;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('inviteUser.start', {
                              text: { data: t },
                              type: 'api',
                            }),
                            (e.next = 3),
                            $x
                              .getInstance()
                              .getAlert()
                              .check(
                                new qx({
                                  api: 'inviteUser',
                                  attributes: t,
                                  initReady: this._initReady,
                                  capabilityCode: AR.PRO,
                                  sdkAppID: this.data.config.sdkAppID,
                                }),
                                { tim: this._chat }
                              )
                          );
                        case 3:
                          if (
                            ((n = t.userIDList),
                            (i = void 0 === n ? [] : n),
                            this.isGroupCall())
                          ) {
                            e.next = 8;
                            break;
                          }
                          throw (
                            (this._logger.error('inviteUser.fail', {
                              text: {
                                error: 'inviteUser - groupID:'
                                  .concat(this.getGroupId(), ', roomID:')
                                  .concat(this.data.roomID, ', type:')
                                  .concat(this.data.callType),
                              },
                              type: 'api',
                            }),
                            wU.error(
                              'inviteUser - groupID:'
                                .concat(this.getGroupId(), ', roomID:')
                                .concat(this.data.roomID, ', type:')
                                .concat(this.data.callType)
                            ),
                            new Error(
                              'inviteUser - groupID:'
                                .concat(this.getGroupId(), ', roomID:')
                                .concat(this.data.roomID, ', type:')
                                .concat(this.data.callType)
                            ))
                          );
                        case 8:
                          if (
                            this.isInviter() ||
                            this.data.callStatus === TR.CONNECTED
                          ) {
                            e.next = 12;
                            break;
                          }
                          throw (
                            (this._logger.error('inviteUser.fail', {
                              text: {
                                error: 'inviteUser - current status:'.concat(
                                  this.data.callStatus,
                                  ' not support'
                                ),
                              },
                              type: 'api',
                            }),
                            wU.error(
                              'inviteUser - current status:'.concat(
                                this.data.callStatus,
                                ' not support'
                              )
                            ),
                            new Error(
                              'inviteUser - current status:'.concat(
                                this.data.callStatus,
                                ' not support'
                              )
                            ))
                          );
                        case 12:
                          if (0 !== i.length) {
                            e.next = 16;
                            break;
                          }
                          throw (
                            (this._logger.error('inviteUser.fail', {
                              text: { error: 'userIDList is empty' },
                              type: 'api',
                            }),
                            wU.error('inviteUser - userIDList is empty'),
                            new Error('inviteUser - userIDList is empty'))
                          );
                        case 16:
                          if (
                            ((o = this.getHandledInviteeList()),
                            (r = this.getUnHandledInviteeList()),
                            (a = [].concat(mp(o), mp(r))),
                            0 !==
                              (s = i.filter(function (e) {
                                return -1 === a.indexOf(e);
                              })).length)
                          ) {
                            e.next = 24;
                            break;
                          }
                          return (
                            this._logger.error('inviteUser.fail', {
                              text: {
                                data: { userIDList: i },
                                error: 'userIDList in call list',
                              },
                              type: 'api',
                            }),
                            wU.error(
                              'inviteUser failed - userIDList in call list. userIDList:'.concat(
                                JSON.stringify(i)
                              )
                            ),
                            e.abrupt(
                              'return',
                              Promise.reject(
                                'inviteUser failed - userIDList in call list. userIDList:'.concat(
                                  JSON.stringify(i)
                                )
                              )
                            )
                          );
                        case 24:
                          return (
                            (i = s),
                            (e.prev = 25),
                            (c = this.data.handledInviteeList.filter(
                              function (e) {
                                return e !== d.getUserID();
                              }
                            )),
                            (e.next = 29),
                            this.TSignalingClient.inviteGroup({
                              groupID: this.getGroupId(),
                              userIDList: i,
                              type: this.data.invitation.type,
                              roomID: this.getRoomId(),
                              strRoomId: this.getStrRoomId(),
                              timeout: this.getCallTimeout(),
                              inCallUserIDs: [].concat(
                                mp(this.data.unHandledInviteeList),
                                mp(c)
                              ),
                              initialCallId: this.getInitialCallId(),
                            })
                          );
                        case 29:
                          if (
                            ((u = e.sent),
                            wU.log('inviteUser res', u),
                            0 !== u.code)
                          ) {
                            e.next = 38;
                            break;
                          }
                          return (
                            this.addUnHandledInviteeList(i),
                            this.addInviterInviteId(
                              u.inviteID,
                              [this.data.config.userID].concat(mp(i))
                            ),
                            (l = {
                              eventType: 'invite_user',
                              callType: qR,
                              mediaType: this._callType,
                              inviteeList: i,
                            }),
                            this._callRecordUpload(l),
                            this._callRecordReport.startHeartbeat(),
                            e.abrupt('return', u)
                          );
                        case 38:
                          e.next = 44;
                          break;
                        case 40:
                          throw (
                            ((e.prev = 40),
                            (e.t0 = e.catch(25)),
                            this._logger.error('inviteUser.fail', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            new Error(
                              'inviteUser failed, userId:'
                                .concat(this.getUserID(), ', inviteeIdList:')
                                .concat(i, ', error: ')
                                .concat(e.t0)
                            ))
                          );
                        case 44:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[25, 40]]
                );
              })
            )),
            function (e) {
              return I.apply(this, arguments);
            }),
        },
        {
          key: 'accept',
          value:
            ((y = np(
              _p().mark(function e() {
                var t = this;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('accept.start', { type: 'api' }),
                            (e.next = 3),
                            $x
                              .getInstance()
                              .getAlert()
                              .check(
                                new qx({
                                  api: 'accept',
                                  initReady: this._initReady,
                                  callStatus: this.data.callStatus,
                                  sdkAppID: this.data.config.sdkAppID,
                                })
                              )
                          );
                        case 3:
                          return (
                            (e.prev = 3),
                            (e.next = 6),
                            lF(this.data.config.type)
                          );
                        case 6:
                          e.next = 12;
                          break;
                        case 8:
                          return (
                            (e.prev = 8),
                            (e.t0 = e.catch(3)),
                            this._logger.error('accept.fail', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            e.abrupt('return')
                          );
                        case 12:
                          return e.abrupt(
                            'return',
                            new Promise(function (e, n) {
                              if (
                                (wU.info(
                                  'accept() inviteID: ',
                                  t.data.invitation.inviteID
                                ),
                                t.data.config.type !== ER.VIDEO ||
                                  t.data.isGroupCall)
                              )
                                t.handleAccept(e, n);
                              else if (t.data.devicePermission) {
                                t.setPusherAttributesHandler({
                                  enableCamera: !1,
                                });
                                var i = setTimeout(
                                  np(
                                    _p().mark(function o() {
                                      return _p().wrap(function (o) {
                                        for (;;)
                                          switch ((o.prev = o.next)) {
                                            case 0:
                                              clearTimeout(i),
                                                t.handleAccept(e, n);
                                            case 2:
                                            case 'end':
                                              return o.stop();
                                          }
                                      }, o);
                                    })
                                  ),
                                  0
                                );
                              } else t.handleAccept(e, n);
                            })
                          );
                        case 13:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[3, 8]]
                );
              })
            )),
            function () {
              return y.apply(this, arguments);
            }),
        },
        {
          key: 'handleAccept',
          value:
            ((m = np(
              _p().mark(function e(t, n) {
                var i, o, r, a;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('handleAccept.start', {
                              type: 'api',
                            }),
                            this._callDataReport.setEnterRoomTime(
                              new Date().getTime()
                            ),
                            (i = this.data.invitation.inviteID),
                            (o = +new Date()),
                            (e.prev = 4),
                            (e.next = 7),
                            this.enterRoom({ callType: this.data.config.type })
                          );
                        case 7:
                          e.next = 17;
                          break;
                        case 9:
                          return (
                            (e.prev = 9),
                            (e.t0 = e.catch(4)),
                            this._logger.error('accept.fail', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            wU.error('accept failed', e.t0),
                            (e.next = 15),
                            this._resetTUICallEngine()
                          );
                        case 15:
                          return n(e.t0), e.abrupt('return');
                        case 17:
                          return (
                            (r = +new Date()),
                            this._logger.info('enterRoom.success', {
                              text: {
                                data: {
                                  roomID: this.data.invitation.roomID,
                                  callType: this.data.config.type,
                                  cost: r - o,
                                },
                              },
                              type: 'api',
                            }),
                            (e.next = 21),
                            this.modifyInvitation(i)
                          );
                        case 21:
                          return (
                            (e.next = 23),
                            this.TSignalingClient.accept({
                              inviteID: i,
                              type: this.data.config.type,
                            })
                          );
                        case 23:
                          if (0 !== (a = e.sent).code) {
                            e.next = 37;
                            break;
                          }
                          return (
                            wU.log('accept OK'),
                            (e.next = 28),
                            this.setSelfIMCallStatus(TR.CONNECTED)
                          );
                        case 28:
                          this.addHandledInviteeList([this.getUserID()]),
                            this.deleteUnHandledInviteeList([this.getUserID()]),
                            this.addAcceptedUserList(i, [this.getUserID()]),
                            this._callRecordUpload({
                              eventType: 'accept_call',
                            }),
                            t({
                              message: a.data.message,
                              pusher: this.data.pusher,
                            }),
                            this.changeCallStatus(TR.CONNECTED),
                            this.getCallRecordReport().setBodyStatus(
                              TR.CONNECTED
                            ),
                            (e.next = 43);
                          break;
                        case 37:
                          return (
                            this.isGroupCall() &&
                              (this._callDataReport.setCodeAndMessage(
                                BO.NOT_MEDIA_ACCESS,
                                JSON.stringify(a.data.message)
                              ),
                              this._callDataReport.uploadToKibana()),
                            this._logger.error('accept.fail', {
                              text: { error: a },
                              type: 'api',
                            }),
                            wU.error('accept failed', a),
                            n(a),
                            (e.next = 43),
                            this._resetTUICallEngine()
                          );
                        case 43:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[4, 9]]
                );
              })
            )),
            function (e, t) {
              return m.apply(this, arguments);
            }),
        },
        {
          key: 'reject',
          value:
            ((v = np(
              _p().mark(function e() {
                var t, n, i;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('reject.start', {
                              text: {
                                data: {
                                  invitation: this.data.invitation,
                                  type: this.data.config.type,
                                },
                              },
                              type: 'api',
                            }),
                            (e.next = 3),
                            $x
                              .getInstance()
                              .getAlert()
                              .checkSync(
                                new qx({
                                  api: 'reject',
                                  callStatus: this.data.callStatus,
                                  initReady: this._initReady,
                                })
                              )
                          );
                        case 3:
                          if (!(t = this.data.invitation.inviteID)) {
                            e.next = 15;
                            break;
                          }
                          return (
                            (e.next = 7),
                            this.TSignalingClient.reject({
                              inviteID: t,
                              type: this.data.config.type,
                            })
                          );
                        case 7:
                          return (
                            (n = e.sent),
                            wU.log('reject OK', n),
                            (i = this.generateEventData()),
                            this.TRTCCallingDelegate.onCancel(
                              fp(
                                fp(
                                  {
                                    inviteID: t,
                                    invitee: this.getUserID(),
                                    userID: this.getUserID(),
                                  },
                                  i
                                ),
                                {},
                                { reason: wR }
                              )
                            ),
                            this._callRecordUpload({
                              eventType: 'reject_call',
                            }),
                            (e.next = 14),
                            this._resetTUICallEngine()
                          );
                        case 14:
                          return e.abrupt('return', n);
                        case 15:
                          return (
                            this._logger.error('reject.fail', {
                              text: { error: '未收到邀请，无法拒绝' },
                              type: 'api',
                            }),
                            wU.warn('未收到邀请，无法拒绝'),
                            e.abrupt('return', '未收到邀请，无法拒绝')
                          );
                        case 18:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function () {
              return v.apply(this, arguments);
            }),
        },
        {
          key: 'hangup',
          value:
            ((_ = np(
              _p().mark(function e() {
                var t,
                  n,
                  i,
                  o,
                  r,
                  a,
                  s,
                  c,
                  u,
                  l,
                  d,
                  p,
                  h,
                  f,
                  g,
                  _,
                  v,
                  m,
                  y = this;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('hangup.start', {
                              text: {
                                data: {
                                  isGroupCall: this.isGroupCall(),
                                  isInviter: this.isInviter(),
                                  currentUserID: this.getUserID(),
                                  totalTime: this.generateCallTotalTime(),
                                  callType: this.getCallType(),
                                },
                              },
                              type: 'api',
                            }),
                            (e.next = 3),
                            $x
                              .getInstance()
                              .getAlert()
                              .checkSync(
                                new qx({
                                  api: 'hangup',
                                  callStatus: this.data.callStatus,
                                  initReady: this._initReady,
                                })
                              )
                          );
                        case 3:
                          if (
                            (wU.warn(
                              ' - callStatus:'
                                .concat(
                                  this.data.callStatus,
                                  ' _inviterInviteID:'
                                )
                                .concat(JSON.stringify(this.data.invitation))
                            ),
                            this.data.callStatus !== TR.IDLE)
                          ) {
                            e.next = 7;
                            break;
                          }
                          throw (
                            (this._logger.error('hangup.fail', {
                              text: {
                                data: { currentStatus: this.data.callStatus },
                                error: 'hangup failed. current status:',
                              },
                              type: 'api',
                            }),
                            new Error(
                              'hangup failed. current status:'.concat(
                                this.data.callStatus
                              )
                            ))
                          );
                        case 7:
                          if (
                            this.data.callStatus !== TR.CALLING ||
                            0 !== this.getInviterInviteIdList().length
                          ) {
                            e.next = 10;
                            break;
                          }
                          throw (
                            (this._logger.error('hangup.fail', {
                              text: {
                                error:
                                  'call/groupCall incomplete。please wait cancel',
                              },
                              type: 'api',
                            }),
                            new Error(
                              'call/groupCall incomplete。please wait cancel'
                            ))
                          );
                        case 10:
                          if (
                            ((t = this.isGroupCall()),
                            (n = this.isInviter()),
                            (i = this.getUserID()),
                            (o = this.generateCallTotalTime()),
                            (r = this.getCallType()),
                            (s = this.getInviterInviteIdList()),
                            this.data.callStatus !== TR.CONNECTED)
                          ) {
                            e.next = 31;
                            break;
                          }
                          if (((e.prev = 17), 0 !== s.length)) {
                            e.next = 23;
                            break;
                          }
                          return (
                            (c = this.generateCallEndData({
                              callMediaType: r,
                              totalTime: o,
                            })),
                            this.TRTCCallingDelegate.onCallEnd(c),
                            (e.next = 23),
                            this._resetTUICallEngine()
                          );
                        case 23:
                          e.next = 31;
                          break;
                        case 25:
                          return (
                            (e.prev = 25),
                            (e.t0 = e.catch(17)),
                            (e.next = 29),
                            this._resetTUICallEngine()
                          );
                        case 29:
                          throw (
                            (this._logger.error('hangup.fail', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            new Error(e.t0))
                          );
                        case 31:
                          if (
                            ((u = this.getHandledInviteeList()),
                            (l = this.getUnHandledInviteeList()),
                            (d = this.generateEventData()),
                            (e.prev = 34),
                            t)
                          ) {
                            e.next = 53;
                            break;
                          }
                          if (((p = this.generateCallEndData()), !n)) {
                            e.next = 48;
                            break;
                          }
                          if (1 !== l.length) {
                            e.next = 45;
                            break;
                          }
                          return (e.next = 41), this.cancel();
                        case 41:
                          (a = e.sent),
                            this.TRTCCallingDelegate.onCancel(
                              fp(
                                fp(
                                  {
                                    inviteID: this.data.invitation.inviteID,
                                    invitee: i,
                                    userID: i,
                                  },
                                  d
                                ),
                                {},
                                { reason: PR }
                              )
                            ),
                            (e.next = 46);
                          break;
                        case 45:
                          this.TRTCCallingDelegate.onCallEnd(p);
                        case 46:
                          e.next = 49;
                          break;
                        case 48:
                          this.TRTCCallingDelegate.onCallEnd(p);
                        case 49:
                          return (e.next = 51), this._resetTUICallEngine();
                        case 51:
                          e.next = 82;
                          break;
                        case 53:
                          if (
                            ((h = this.getCallStatus()),
                            (f = {
                              callType: this.getCallType(),
                              isGroupCall: this.isGroupCall(),
                              groupID: this.getGroupId(),
                              userIDList: [].concat(
                                mp(
                                  u.filter(function (e) {
                                    return e !== i;
                                  })
                                ),
                                mp(l)
                              ),
                              callEnd: this.generateCallTotalTime(),
                            }),
                            !n)
                          ) {
                            e.next = 73;
                            break;
                          }
                          if (h !== TR.CALLING) {
                            e.next = 63;
                            break;
                          }
                          return (
                            (e.next = 59),
                            this.cancel(this.getInviterInviteIdList())
                          );
                        case 59:
                          return (
                            (a = e.sent),
                            this.TRTCCallingDelegate.onCancel(
                              fp(
                                fp(
                                  {
                                    inviteID: this.data.invitation.inviteID,
                                    invitee: i,
                                    userID: i,
                                  },
                                  d
                                ),
                                {},
                                { reason: PR }
                              )
                            ),
                            (e.next = 63),
                            this._resetTUICallEngine()
                          );
                        case 63:
                          if (h !== TR.CONNECTED) {
                            e.next = 71;
                            break;
                          }
                          (g = _p().mark(function e() {
                            var t, n, o, r, c, d, p;
                            return _p().wrap(function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((t = s[_]),
                                      (n = y.getInviterInviteIdUserList(t)),
                                      !(
                                        (o = y.getAcceptedUserList(t)).length >
                                        0
                                      ))
                                    ) {
                                      e.next = 22;
                                      break;
                                    }
                                    if (
                                      ((r = o.filter(function (e) {
                                        return -1 !== u.indexOf(e);
                                      })),
                                      (c = n.filter(function (e) {
                                        return -1 !== l.indexOf(e);
                                      })),
                                      (f.userIDList = []
                                        .concat(mp(r), mp(c))
                                        .filter(function (e) {
                                          return e !== i;
                                        })),
                                      wU.warn(
                                        'inviter emit hangup signal, notify userIDList:'.concat(
                                          JSON.stringify(f.userIDList)
                                        )
                                      ),
                                      (d = y.generateCallEndData()),
                                      y.TRTCCallingDelegate.onCallEnd(d),
                                      0 === f.userIDList.length)
                                    ) {
                                      e.next = 15;
                                      break;
                                    }
                                    return (
                                      (e.next = 12),
                                      y.TSignalingClient.hangup(f)
                                    );
                                  case 12:
                                    (a = e.sent), (e.next = 20);
                                    break;
                                  case 15:
                                    if (!(u.length > 1)) {
                                      e.next = 20;
                                      break;
                                    }
                                    return (
                                      (f.userIDList = u.filter(function (e) {
                                        return e !== i;
                                      })),
                                      (e.next = 19),
                                      y.TSignalingClient.hangup(f)
                                    );
                                  case 19:
                                    a = e.sent;
                                  case 20:
                                    e.next = 29;
                                    break;
                                  case 22:
                                    if (
                                      ((p = y.getUnHandledInviteeList()),
                                      !(
                                        n.filter(function (e) {
                                          return -1 !== p.indexOf(e);
                                        }).length > 0
                                      ))
                                    ) {
                                      e.next = 29;
                                      break;
                                    }
                                    return (
                                      wU.warn(
                                        'inviter emit cancel signal, userIdList:'.concat(
                                          n
                                        )
                                      ),
                                      (e.next = 28),
                                      y.cancel([t])
                                    );
                                  case 28:
                                    a = e.sent;
                                  case 29:
                                  case 'end':
                                    return e.stop();
                                }
                            }, e);
                          })),
                            (_ = 0);
                        case 66:
                          if (!(_ < s.length)) {
                            e.next = 71;
                            break;
                          }
                          return e.delegateYield(g(), 't1', 68);
                        case 68:
                          _++, (e.next = 66);
                          break;
                        case 71:
                          e.next = 80;
                          break;
                        case 73:
                          (v = _p().mark(function e() {
                            var t, n, o, r, c, d, p;
                            return _p().wrap(function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (
                                      ((t = s[m]),
                                      (n = y.getInviterInviteIdUserList(t)),
                                      !(
                                        (o = y.getAcceptedUserList(t)).length >
                                        0
                                      ))
                                    ) {
                                      e.next = 22;
                                      break;
                                    }
                                    if (
                                      ((r = o.filter(function (e) {
                                        return -1 !== u.indexOf(e);
                                      })),
                                      (c = n.filter(function (e) {
                                        return -1 !== l.indexOf(e);
                                      })),
                                      (f.userIDList = []
                                        .concat(mp(r), mp(c))
                                        .filter(function (e) {
                                          return e !== i;
                                        })),
                                      wU.warn(
                                        'invitee emit hangup signal, notify userIDList:'.concat(
                                          JSON.stringify(f.userIDList)
                                        )
                                      ),
                                      (d = y.generateCallEndData()),
                                      y.TRTCCallingDelegate.onCallEnd(d),
                                      0 === f.userIDList.length)
                                    ) {
                                      e.next = 15;
                                      break;
                                    }
                                    return (
                                      (e.next = 12),
                                      y.TSignalingClient.hangup(f)
                                    );
                                  case 12:
                                    (a = e.sent), (e.next = 20);
                                    break;
                                  case 15:
                                    if (!(u.length > 1)) {
                                      e.next = 20;
                                      break;
                                    }
                                    return (
                                      (f.userIDList = u.filter(function (e) {
                                        return e !== i;
                                      })),
                                      (e.next = 19),
                                      y.TSignalingClient.hangup(f)
                                    );
                                  case 19:
                                    a = e.sent;
                                  case 20:
                                    e.next = 29;
                                    break;
                                  case 22:
                                    if (
                                      ((p = y.getUnHandledInviteeList()),
                                      !(
                                        n.filter(function (e) {
                                          return -1 !== p.indexOf(e);
                                        }).length > 0
                                      ))
                                    ) {
                                      e.next = 29;
                                      break;
                                    }
                                    return (
                                      wU.warn(
                                        'invitee emit cancel signal, inviteID:'.concat(
                                          t
                                        )
                                      ),
                                      (e.next = 28),
                                      y.cancel([t])
                                    );
                                  case 28:
                                    a = e.sent;
                                  case 29:
                                  case 'end':
                                    return e.stop();
                                }
                            }, e);
                          })),
                            (m = 0);
                        case 75:
                          if (!(m < s.length)) {
                            e.next = 80;
                            break;
                          }
                          return e.delegateYield(v(), 't2', 77);
                        case 77:
                          m++, (e.next = 75);
                          break;
                        case 80:
                          return (e.next = 82), this._resetTUICallEngine();
                        case 82:
                          return e.abrupt('return', a);
                        case 85:
                          throw (
                            ((e.prev = 85),
                            (e.t3 = e.catch(34)),
                            this._logger.error('hangup.fail', {
                              text: { error: e.t3 },
                              type: 'api',
                            }),
                            wU.warn('hangup failed, error: '.concat(e.t3)),
                            new Error('hangup failed, error: '.concat(e.t3)))
                          );
                        case 90:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [
                    [17, 25],
                    [34, 85],
                  ]
                );
              })
            )),
            function () {
              return _.apply(this, arguments);
            }),
        },
        {
          key: 'cancel',
          value:
            ((g = np(
              _p().mark(function e(t) {
                var n, i, o, r, a;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('cancel.start', {
                              text: { data: { inviteIDList: t } },
                              type: 'api',
                            }),
                            wU.info(
                              'cancel _inviterInviteID',
                              this.data_inviterInviteID
                            ),
                            (n = []),
                            (e.prev = 3),
                            0 === (t || []).length &&
                              (t = this.getInviterInviteIdList().slice(0, 1)),
                            (e.next = 7),
                            this.modifyInvitation(t[0])
                          );
                        case 7:
                          i = 0;
                        case 8:
                          if (!(i < t.length)) {
                            e.next = 17;
                            break;
                          }
                          return (
                            (o = t[i]),
                            (e.next = 12),
                            this.TSignalingClient.cancel({
                              inviteID: o,
                              callType: this.data.invitation.type,
                            })
                          );
                        case 12:
                          (r = e.sent), n.push(r);
                        case 14:
                          i++, (e.next = 8);
                          break;
                        case 17:
                          e.next = 23;
                          break;
                        case 19:
                          throw (
                            ((e.prev = 19),
                            (e.t0 = e.catch(3)),
                            this._logger.error('cancel.fail', {
                              text: { error: e.t0 },
                              type: 'api',
                            }),
                            new Error('_cancel failed, error: '.concat(e.t0)))
                          );
                        case 23:
                          return (
                            (a = 'cancel '.concat(
                              JSON.stringify(n),
                              ' succeeded'
                            )),
                            wU.log('cancel '.concat(a)),
                            e.abrupt('return', n)
                          );
                        case 26:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[3, 19]]
                );
              })
            )),
            function (e) {
              return g.apply(this, arguments);
            }),
        },
        {
          key: 'setRoomId',
          value: function (e) {
            this.data.roomId = e;
          },
        },
        {
          key: 'getRoomId',
          value: function () {
            return this.data.roomId;
          },
        },
        {
          key: 'setStrRoomId',
          value: function (e) {
            this.data.strRoomId = e;
          },
        },
        {
          key: 'getStrRoomId',
          value: function () {
            return this.data.strRoomId || '';
          },
        },
        {
          key: 'getCallType',
          value: function () {
            return this.data.invitation.type;
          },
        },
        {
          key: 'setGroupId',
          value: function (e) {
            this.data.groupID = e;
          },
        },
        {
          key: 'getGroupId',
          value: function () {
            return this.data.groupID;
          },
        },
        {
          key: 'isGroupCall',
          value: function () {
            return this.data.isGroupCall;
          },
        },
        {
          key: 'getUserID',
          value: function () {
            return this.data.config.userID;
          },
        },
        {
          key: 'isInviter',
          value: function () {
            return this.data.isInviter;
          },
        },
        {
          key: 'getHandledInviteeList',
          value: function () {
            return this.data.handledInviteeList || [];
          },
        },
        {
          key: 'getCallDataReport',
          value: function () {
            return this._callDataReport;
          },
        },
        {
          key: 'getCallRecordReport',
          value: function () {
            return this._callRecordReport;
          },
        },
        {
          key: 'getUnHandledInviteeList',
          value: function () {
            return this.data.unHandledInviteeList || [];
          },
        },
        {
          key: 'getCallStatus',
          value: function () {
            return this.data.callStatus;
          },
        },
        {
          key: 'setInitialInviteData',
          value: function (e) {
            this._initialInviteData = e;
          },
        },
        {
          key: 'modifyInvitation',
          value:
            ((f = np(
              _p().mark(function e(t) {
                var n;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (!this.isGroupCall()) {
                            e.next = 2;
                            break;
                          }
                          return e.abrupt('return');
                        case 2:
                          return (
                            (n = fp(
                              fp({}, this._initialInviteData.data),
                              {},
                              { consumed: !0 }
                            )),
                            (e.prev = 3),
                            (e.next = 6),
                            this._chat.modifyInvitation({
                              inviteID: t,
                              data: JSON.stringify(
                                fp(
                                  fp({}, this._initialInviteData),
                                  {},
                                  { data: n }
                                )
                              ),
                            })
                          );
                        case 6:
                          e.next = 11;
                          break;
                        case 8:
                          (e.prev = 8),
                            (e.t0 = e.catch(3)),
                            wU.error('modifyInvitation fail '.concat(e.t0));
                        case 11:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[3, 8]]
                );
              })
            )),
            function (e) {
              return f.apply(this, arguments);
            }),
        },
        {
          key: 'getInviterInviteID',
          value: function (e) {
            return this.data._inviterInviteID[e] || [];
          },
        },
        {
          key: 'addAcceptedUserList',
          value: function (e, t) {
            var n = this;
            if (0 !== t.length)
              if (e)
                0 === (this.data._acceptedUserObject[e] || []).length
                  ? (this.data._acceptedUserObject[e] = t)
                  : t.forEach(function (t) {
                      -1 === n.data._acceptedUserObject[e].indexOf(t) &&
                        n.data._acceptedUserObject[e].push(t);
                    });
              else
                for (
                  var i = this.getInviterInviteIdList(),
                    o = function () {
                      var e = i[r],
                        o = n.getInviterInviteIdUserList(e),
                        a = t.filter(function (e) {
                          return -1 !== o.indexOf(e);
                        });
                      0 === (n._acceptedUserObject[e] || []).length
                        ? (n.data._acceptedUserObject[e] = a)
                        : a.forEach(function (t) {
                            -1 === n.data._acceptedUserObject[e].indexOf(t) &&
                              n.data._acceptedUserObject[e].push(t);
                          });
                    },
                    r = 0;
                  r < i.length;
                  r++
                )
                  o();
          },
        },
        {
          key: 'getAcceptedUserList',
          value: function (e) {
            return this.data._acceptedUserObject[e] || [];
          },
        },
        {
          key: 'getInviterInviteIdList',
          value: function () {
            return Object.keys(this.data._inviterInviteID || {});
          },
        },
        {
          key: 'getTotalInviterInviteIdList',
          value: function () {
            var e = this.getInviterInviteIdList();
            return [].concat(mp(this.data._audioVideoSwitchIdList), mp(e));
          },
        },
        {
          key: 'getInviterInviteIdUserList',
          value: function (e) {
            var t = this,
              n = [];
            return (
              e
                ? (n = this.data._inviterInviteID[e] || [])
                : this.getInviterInviteIdList().forEach(function (e) {
                    n = [].concat(mp(n), mp(t.getInviterInviteIdUserList(e)));
                  }),
              n
            );
          },
        },
        {
          key: 'addAudioVideoSwitchIdList',
          value: function (e) {
            e && this.data._audioVideoSwitchIdList.push(e);
          },
        },
        {
          key: 'getAudioVideoSwitchIdList',
          value: function () {
            return this.data._audioVideoSwitchIdList || [];
          },
        },
        {
          key: 'addUnHandledInviteeList',
          value: function (e) {
            var t = this;
            0 !== e.length &&
              (e.forEach(function (e) {
                -1 === t.data.unHandledInviteeList.indexOf(e) &&
                  t.data.unHandledInviteeList.push(e);
              }),
              (this.data.unHandledInviteeList = Array.from(
                new Set(this.data.unHandledInviteeList)
              )));
          },
        },
        {
          key: 'deleteUnHandledInviteeList',
          value: function (e) {
            var t = this;
            0 !== e.length &&
              e.forEach(function (e) {
                t.data.unHandledInviteeList =
                  t.data.unHandledInviteeList.filter(function (t) {
                    return t !== e;
                  });
              });
          },
        },
        {
          key: 'addHandledInviteeList',
          value: function (e) {
            var t = this;
            0 !== e.length &&
              (e.forEach(function (e) {
                -1 === t.data.handledInviteeList.indexOf(e) &&
                  t.data.handledInviteeList.push(e);
              }),
              (this.data.handledInviteeList = Array.from(
                new Set(this.data.handledInviteeList)
              )));
          },
        },
        {
          key: 'deleteHandledInviteeList',
          value: function (e) {
            var t = this;
            0 !== e.length &&
              e.forEach(function (e) {
                t.data.handledInviteeList = t.data.handledInviteeList.filter(
                  function (t) {
                    return t !== e;
                  }
                );
              });
          },
        },
        {
          key: 'getSwitchCallModeStatus',
          value: function () {
            return this.data.switchCallModeStatus;
          },
        },
        {
          key: 'changeCallStatus',
          value: function (e) {
            var t = this;
            switch (
              (this._logger.info('changeCallStatus.start', {
                text: { data: { status: e } },
                type: 'api',
              }),
              (this.data.callStatus = e),
              e)
            ) {
              case TR.CONNECTED:
                if (this.data.timer) return;
                this.data.timer = setInterval(function () {
                  var e, n, i, o, r;
                  (t.data.chatTime =
                    ((r = t.data.chatTimeNum) >= 3600
                      ? ((n =
                          parseInt(r / 3600) < 10
                            ? '0'.concat(parseInt(r / 3600))
                            : parseInt(r / 3600)),
                        (i =
                          parseInt((r % 60) / 60) < 10
                            ? '0'.concat(parseInt((r % 60) / 60))
                            : parseInt((r % 60) / 60)),
                        (o = r % 3600 < 10 ? '0'.concat(r % 3600) : r % 3600) >
                          60 &&
                          ((i =
                            parseInt(o / 60) < 10
                              ? '0'.concat(parseInt(o / 60))
                              : parseInt(o / 60)),
                          (o = o % 60 < 10 ? '0'.concat(o % 60) : o % 60)),
                        (e = ''.concat(n, ':').concat(i, ':').concat(o)))
                      : r >= 60 && r < 3600
                        ? ((i =
                            parseInt(r / 60) < 10
                              ? '0'.concat(parseInt(r / 60))
                              : parseInt(r / 60)),
                          (o = r % 60 < 10 ? '0'.concat(r % 60) : r % 60),
                          (e = '00:'.concat(i, ':').concat(o)))
                        : r < 60 &&
                          ((o = r < 10 ? '0'.concat(r) : r),
                          (e = '00:00:'.concat(o))),
                    e)),
                    (t.data.chatTimeNum += 1),
                    (t.data.pusher.chatTime = t.data.chatTime),
                    (t.data.pusher.chatTimeNum = t.data.chatTimeNum),
                    t.TRTCCallingDelegate.onUserUpdate({
                      pusher: t.data.pusher,
                      playerList: t.data.playerList,
                    });
                }, 1e3);
                break;
              case TR.IDLE:
                clearInterval(this.data.timer),
                  (this.data.timer = null),
                  (this.data.chatTime = '00:00:00'),
                  (this.data.chatTimeNum = 0);
            }
          },
        },
        {
          key: '_resetTUICallEngine',
          value:
            ((h = np(
              _p().mark(function e(t, n) {
                var i, o;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            ((i = FF('enterRoom')),
                            (o = i.reject),
                            BU(o) &&
                              (this._logger.info(
                                '_resetTUICallEngine.resolve',
                                {
                                  text: { data: { callEnd: t, type: n } },
                                  type: 'api',
                                }
                              ),
                              o({ message: 'enter room reset' })),
                            this.getCallStatus() === TR.IDLE)
                          ) {
                            e.next = 7;
                            break;
                          }
                          if (
                            ((this.data.callStatus = TR.IDLE),
                            !this.getIsLogin())
                          ) {
                            e.next = 7;
                            break;
                          }
                          return (
                            (e.next = 7), this.setSelfIMCallStatus(TR.IDLE)
                          );
                        case 7:
                          if (
                            (this._logger.info('_resetTUICallEngine.start', {
                              text: { data: { callEnd: t, type: n } },
                              type: 'api',
                            }),
                            this.changeCallStatus(TR.IDLE),
                            wU.info(
                              ' _resetTUICallEngine()',
                              this.data.enterRoomStatus
                            ),
                            !this.data.enterRoomStatus)
                          ) {
                            e.next = 13;
                            break;
                          }
                          return (e.next = 13), this.exitRoom(t, n);
                        case 13:
                          (this.data.config.type = ER.AUDIO),
                            (this._initialCallId = ''),
                            this.initData();
                        case 16:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e, t) {
              return h.apply(this, arguments);
            }),
        },
        {
          key: 'startRemoteView',
          value:
            ((p = np(
              _p().mark(function e(t) {
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          this._logger.info('startRemoteView.start', {
                            text: { data: { userID: t } },
                            type: 'api',
                          }),
                            this.data.playerList.forEach(function (e) {
                              if (e.userID === t)
                                return (
                                  (e.muteVideo = !1),
                                  void wU.info(
                                    'startRemoteView('.concat(t, ')')
                                  )
                                );
                            });
                        case 2:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return p.apply(this, arguments);
            }),
        },
        {
          key: 'stopRemoteView',
          value: function (e) {
            this._logger.info('stopRemoteView.start', {
              text: { data: { userID: e } },
              type: 'api',
            }),
              this.data.playerList.forEach(function (t) {
                if (t.userID === e)
                  return (
                    (t.muteVideo = !0),
                    void wU.info('stopRemoteView('.concat(e, ')'))
                  );
              });
          },
        },
        {
          key: 'openCamera',
          value: function () {
            this._logger.info('openCamera.start', {
              text: { data: { enableCamera: this.data.pusher.enableCamera } },
              type: 'api',
            }),
              $x
                .getInstance()
                .getAlert()
                .checkSync(
                  new qx({
                    api: 'openCamera',
                    callStatus: this.data.callStatus,
                    initReady: this._initReady,
                  })
                ),
              this.data.pusher.enableCamera || this._pusherVideoHandler(),
              wU.info('openCamera() pusher: '.concat(this.data.pusher));
          },
        },
        {
          key: 'closeCamera',
          value: function () {
            this._logger.info('closeCamera.start', {
              text: { data: { enableCamera: this.data.pusher.enableCamera } },
              type: 'api',
            }),
              $x
                .getInstance()
                .getAlert()
                .checkSync(
                  new qx({
                    api: 'closeCamera',
                    callStatus: this.data.callStatus,
                    initReady: this._initReady,
                  })
                ),
              this.data.pusher.enableCamera && this._pusherVideoHandler(),
              wU.info('closeCamera() pusher: '.concat(this.data.pusher));
          },
        },
        {
          key: 'switchCamera',
          value: function () {
            this._logger.info('switchCamera.start', {
              text: { data: { frontCamera: this.data.pusher.frontCamera } },
              type: 'api',
            }),
              $x
                .getInstance()
                .getAlert()
                .checkSync(
                  new qx({
                    api: 'switchCamera',
                    callStatus: this.data.callStatus,
                    initReady: this._initReady,
                  })
                ),
              this.getCurrentPusherInstance().switchCamera(),
              wU.info(
                'switchCamera(), frontCamera'.concat(
                  this.data.pusher.frontCamera
                )
              );
          },
        },
        {
          key: 'openMicrophone',
          value: function () {
            this._logger.info('openMicrophone.start', {
              text: { data: { enableMic: this.data.pusher.enableMic } },
              type: 'api',
            }),
              $x
                .getInstance()
                .getAlert()
                .checkSync(
                  new qx({
                    api: 'openMicrophone',
                    callStatus: this.data.callStatus,
                    initReady: this._initReady,
                  })
                ),
              this.data.pusher.enableMic || this._pusherAudioHandler(),
              wU.info('openMicrophone() pusher: '.concat(this.data.pusher));
          },
        },
        {
          key: 'closeMicrophone',
          value: function () {
            this._logger.info('closeMicrophone.start', {
              text: { data: { enableMic: this.data.pusher.enableMic } },
              type: 'api',
            }),
              $x
                .getInstance()
                .getAlert()
                .checkSync(
                  new qx({
                    api: 'closeMicrophone',
                    callStatus: this.data.callStatus,
                    initReady: this._initReady,
                  })
                ),
              this.data.pusher.enableMic && this._pusherAudioHandler(),
              wU.info('closeMicrophone() pusher: '.concat(this.data.pusher));
          },
        },
        {
          key: 'selectAudioPlaybackDevice',
          value: function (e) {
            this._logger.info('selectAudioPlaybackDevice.start', {
              text: { data: { type: e } },
              type: 'api',
            }),
              $x
                .getInstance()
                .getAlert()
                .checkSync(
                  new qx({
                    api: 'selectAudioPlaybackDevice',
                    callStatus: this.data.callStatus,
                    attributes: { type: e },
                    initReady: this._initReady,
                  })
                );
            var t = !1;
            switch (e) {
              case 'speaker':
                t = !0;
                break;
              case 'ear':
                t = !1;
            }
            return this.setHandsFree(t);
          },
        },
        {
          key: 'setHandsFree',
          value: function (e) {
            return (
              (this.data.soundMode = e ? 'speaker' : 'ear'),
              wU.info('setHandsFree() result: '.concat(this.data.soundMode)),
              this.data.soundMode
            );
          },
        },
        {
          key: 'switchAudioCall',
          value:
            ((d = np(
              _p().mark(function e() {
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('switchAudioCall.start', {
                              type: 'api',
                            }),
                            !this.isGroupCall())
                          ) {
                            e.next = 5;
                            break;
                          }
                          return (
                            this._logger.error('switchAudioCall.fail', {
                              text: {
                                error:
                                  'switchToAudioCall is not applicable to groupCall',
                              },
                              type: 'api',
                            }),
                            wU.warn(
                              'switchToAudioCall is not applicable to groupCall.'
                            ),
                            e.abrupt('return')
                          );
                        case 5:
                          if (this.data.invitation.type !== ER.AUDIO) {
                            e.next = 9;
                            break;
                          }
                          return (
                            this._logger.error('switchAudioCall.fail', {
                              text: { error: 'the call mode is audio call' },
                              type: 'api',
                            }),
                            wU.warn('Now the call mode is audio call.'),
                            e.abrupt('return')
                          );
                        case 9:
                          if (this.data.switchCallModeStatus) {
                            e.next = 13;
                            break;
                          }
                          return (
                            this._logger.error('switchAudioCall.fail', {
                              text: { error: 'audio and video call switching' },
                              type: 'api',
                            }),
                            wU.warn('audio and video call switching.'),
                            e.abrupt('return')
                          );
                        case 13:
                          return (
                            this.setSwitchCallModeStatus(!1),
                            this.setPusherAttributesHandler({
                              enableCamera: !1,
                            }),
                            e.abrupt(
                              'return',
                              this.TSignalingClient.switchCallMode({
                                userID:
                                  this.data.unHandledInviteeList[0] ||
                                  this.data.playerList[0].userID,
                                callType: this.data.invitation.type,
                                roomID: this.data.invitation.roomID,
                                mode: RR,
                              })
                            )
                          );
                        case 16:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function () {
              return d.apply(this, arguments);
            }),
        },
        {
          key: 'switchCallMediaType',
          value:
            ((l = np(
              _p().mark(function e(t) {
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info('closeMicrophone.start', {
                              text: { data: { type: t } },
                              type: 'api',
                            }),
                            (e.next = 3),
                            $x
                              .getInstance()
                              .getAlert()
                              .check(
                                new qx({
                                  api: 'switchCallMediaType',
                                  attributes: { type: t },
                                  callStatus: this.data.callStatus,
                                  initReady: this._initReady,
                                  sdkAppID: this.data.config.sdkAppID,
                                })
                              )
                          );
                        case 3:
                          if (!this.isGroupCall()) {
                            e.next = 7;
                            break;
                          }
                          throw (
                            (this._logger.error('switchAudioCall.fail', {
                              text: {
                                error:
                                  'switchToAudioCall is not applicable to groupCall',
                              },
                              type: 'api',
                            }),
                            wU.error(
                              'switchToAudioCall is not applicable to groupCall.'
                            ),
                            new hG(
                              BO.ERROR_SCENE_NOT_SUPPORTED,
                              'switchToAudioCall is not applicable to groupCall.'
                            ))
                          );
                        case 7:
                          if (this.data.switchCallModeStatus) {
                            e.next = 11;
                            break;
                          }
                          return (
                            this._logger.error('switchAudioCall.fail', {
                              text: { error: 'audio and video call switching' },
                              type: 'api',
                            }),
                            wU.warn('audio and video call switching.'),
                            e.abrupt('return')
                          );
                        case 11:
                          (e.t0 = t),
                            (e.next =
                              e.t0 === ER.AUDIO
                                ? 14
                                : e.t0 === ER.VIDEO
                                  ? 17
                                  : 20);
                          break;
                        case 14:
                          return (
                            this.setSwitchCallModeStatus(!1),
                            this.setPusherAttributesHandler({
                              enableCamera: !1,
                            }),
                            e.abrupt(
                              'return',
                              this.TSignalingClient.switchCallMode({
                                userID:
                                  this.data.unHandledInviteeList[0] ||
                                  this.data.playerList[0].userID,
                                callType: this.data.invitation.type,
                                roomID: this.data.invitation.roomID,
                                timeout: this.getCallTimeout(),
                                mode: RR,
                              })
                            )
                          );
                        case 17:
                          throw (
                            (this._logger.error('switchAudioCall.fail', {
                              text: {
                                error:
                                  'Audio switching Video is not supported yet',
                              },
                              type: 'api',
                            }),
                            wU.warn(
                              'Audio switching Video is not supported yet'
                            ),
                            new Error(
                              'Audio switching Video is not supported yet'
                            ))
                          );
                        case 20:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return l.apply(this, arguments);
            }),
        },
        {
          key: 'setSwitchCallModeStatus',
          value: function (e) {
            this.data.switchCallModeStatus = e;
          },
        },
        {
          key: 'switchVideoCall',
          value:
            ((u = np(
              _p().mark(function e() {
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('switchVideoCall.start', {
                              type: 'api',
                            }),
                            !this.isGroupCall())
                          ) {
                            e.next = 5;
                            break;
                          }
                          return (
                            this._logger.error('switchAudioCall.fail', {
                              text: {
                                error:
                                  'switchToAudioCall is not applicable to groupCall',
                              },
                              type: 'api',
                            }),
                            wU.warn(
                              'switchToVideoCall is not applicable to groupCall.'
                            ),
                            e.abrupt('return')
                          );
                        case 5:
                          if (this.data.invitation.type !== ER.VIDEO) {
                            e.next = 9;
                            break;
                          }
                          return (
                            this._logger.error('switchAudioCall.fail', {
                              text: {
                                error: 'Now the call mode is video call',
                              },
                              type: 'api',
                            }),
                            wU.warn('Now the call mode is video call.'),
                            e.abrupt('return')
                          );
                        case 9:
                          if (this.data.switchCallModeStatus) {
                            e.next = 13;
                            break;
                          }
                          return (
                            this._logger.error('switchAudioCall.fail', {
                              text: { error: 'audio and video call switching' },
                              type: 'api',
                            }),
                            wU.warn('audio and video call switching.'),
                            e.abrupt('return')
                          );
                        case 13:
                          return (
                            this.setSwitchCallModeStatus(!1),
                            this.setPusherAttributesHandler({
                              enableCamera: !0,
                            }),
                            e.abrupt(
                              'return',
                              this.TSignalingClient.switchCallMode({
                                userID: this.data.playerList[0].userID,
                                callType: this.data.invitation.type,
                                roomID: this.data.invitation.roomID,
                                mode: 'video',
                              })
                            )
                          );
                        case 16:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function () {
              return u.apply(this, arguments);
            }),
        },
        {
          key: 'setSoundMode',
          value: function (e) {
            var t = !1,
              n = !1;
            switch ((e || ((n = !0), (e = this.data.soundMode)), e)) {
              case 'speaker':
                t = !0;
                break;
              case 'ear':
                t = !1;
            }
            return this.setHandsFree(n ? !t : t);
          },
        },
        {
          key: '_hangUp',
          value: function () {
            this.hangup();
          },
        },
        {
          key: 'getCurrentPusherInstance',
          value: function () {
            return (
              (this.TRTC.getPusherInstance().context =
                $n.createLivePusherContext()),
              this.TRTC.getPusherInstance()
            );
          },
        },
        {
          key: '_pusherStateChangeHandler',
          value: function (e) {
            this.TRTC.pusherEventHandler(e);
          },
        },
        {
          key: '_playerStateChange',
          value: function (e) {
            this._emitter.emit(CR.REMOTE_STATE_UPDATE, e);
          },
        },
        {
          key: '_playerAudioVolumeNotify',
          value: function (e) {
            this.data.playerList.length > 0 &&
              this.TRTC.playerAudioVolumeNotify(e);
          },
        },
        {
          key: '_pusherAudioVolumeNotify',
          value: function (e) {
            this.TRTC.pusherAudioVolumeNotify(e);
          },
        },
        {
          key: '_updateUserProfile',
          value: function (e, t) {
            return 0 === t.length || 0 === e.length
              ? t
              : t.map(function (t) {
                  var n = t,
                    i = e.filter(function (e) {
                      return e.userID === t.userID;
                    });
                  return (
                    (n.avatar = i[0] && i[0].avatar ? i[0].avatar : ''),
                    (n.nick = i[0] && i[0].nick ? i[0].nick : ''),
                    n
                  );
                });
          },
        },
        {
          key: '_getUserProfile',
          value: function (e) {
            var t = this;
            this._chat
              .getUserProfile({ userIDList: e })
              .then(function (e) {
                wU.log('getUserProfile success', e),
                  (t.data.remoteUsers = e.data);
              })
              .catch(function (e) {
                wU.warn('getUserProfile error:', e);
              });
          },
        },
        {
          key: 'getUserProfile',
          value:
            ((c = np(
              _p().mark(function e(t) {
                var n,
                  i,
                  o,
                  r,
                  a = arguments;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            ((n =
                              a.length > 1 && void 0 !== a[1] ? a[1] : 'array'),
                            0 !== t.length)
                          ) {
                            e.next = 3;
                            break;
                          }
                          return e.abrupt('return', []);
                        case 3:
                          return (
                            (i = t.map(function (e) {
                              return e.userID;
                            })),
                            (e.next = 6),
                            this._chat.getUserProfile({ userIDList: i })
                          );
                        case 6:
                          (o = e.sent),
                            (r = null),
                            (e.t0 = n),
                            (e.next =
                              'array' === e.t0 ? 11 : 'map' === e.t0 ? 13 : 16);
                          break;
                        case 11:
                          return (
                            (r = t.map(function (e, t) {
                              return (
                                (e.avatar = o.data[t].avatar),
                                (e.nick = o.data[t].nick),
                                e
                              );
                            })),
                            e.abrupt('break', 16)
                          );
                        case 13:
                          return (
                            (r = {}),
                            t.forEach(function (e, t) {
                              (e.avatar = o.data[t].avatar),
                                (e.nick = o.data[t].nick),
                                (r[e.userID] = e);
                            }),
                            e.abrupt('break', 16)
                          );
                        case 16:
                          return e.abrupt('return', r);
                        case 17:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return c.apply(this, arguments);
            }),
        },
        {
          key: 'setSelfInfo',
          value: function (e, t) {
            return (
              this._logger.info('setSelfInfo.start', {
                text: { data: { nickName: e, avatar: t } },
                type: 'api',
              }),
              $x
                .getInstance()
                .getAlert()
                .checkSync(
                  new qx({
                    api: 'setSelfInfo',
                    attributes: { nickName: e, avatar: t },
                    initReady: this._initReady,
                  })
                ),
              this._chat.updateMyProfile({ nick: e, avatar: t })
            );
          },
        },
        {
          key: 'deviceCheck',
          value:
            ((s = np(
              _p().mark(function e(t) {
                return _p().wrap(function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (e.next = 2), $U(t);
                      case 2:
                        if (((e.t0 = e.sent), !e.t0)) {
                          e.next = 5;
                          break;
                        }
                        e.t0 = JU(t);
                      case 5:
                        return e.abrupt('return', e.t0);
                      case 6:
                      case 'end':
                        return e.stop();
                    }
                }, e);
              })
            )),
            function (e) {
              return s.apply(this, arguments);
            }),
        },
        {
          key: '_pusherNetStatus',
          value: function (e) {
            this.TRTC.pusherNetStatusHandler(e);
          },
        },
        {
          key: '_playNetStatus',
          value: function (e) {
            this.TRTC.playerNetStatus(e);
          },
        },
        {
          key: '_toggleViewSize',
          value: function (e) {
            var t = e.currentTarget.dataset.screen;
            return (
              wU.log('get screen', t, e),
              1 === this.data.playerList.length &&
                t !== this.data.screen &&
                this.data.invitation.type === ER.VIDEO &&
                (this.data.screen = t),
              this.data.screen
            );
          },
        },
        {
          key: 'getTim',
          value: function () {
            return this._chat;
          },
        },
        {
          key: 'destroyed',
          value:
            ((a = np(
              _p().mark(function e() {
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('destroyed.start', {
                              type: 'api',
                            }),
                            this.getCallStatus() === TR.IDLE)
                          ) {
                            e.next = 4;
                            break;
                          }
                          return (e.next = 4), this.handleExceptionExit();
                        case 4:
                          return (e.next = 6), this._resetTUICallEngine();
                        case 6:
                          if (
                            (this._removeTSignalingEvent(),
                            this._removeTRTCEvent(),
                            this._timExternal)
                          ) {
                            e.next = 11;
                            break;
                          }
                          return (e.next = 11), this.logout();
                        case 11:
                          this._initReady = !1;
                        case 12:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function () {
              return a.apply(this, arguments);
            }),
        },
        {
          key: 'handleExceptionExit',
          value:
            ((r = np(
              _p().mark(function e() {
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('handleExceptionExit.start', {
                              text: {
                                data: { callStatus: this.getCallStatus() },
                              },
                              type: 'api',
                            }),
                            (e.prev = 1),
                            this.getCallStatus() !== TR.CALLING)
                          ) {
                            e.next = 10;
                            break;
                          }
                          if (!this.isInviter()) {
                            e.next = 8;
                            break;
                          }
                          return (e.next = 6), this.hangup();
                        case 6:
                          e.next = 10;
                          break;
                        case 8:
                          return (e.next = 10), this.reject();
                        case 10:
                          if (this.getCallStatus() !== TR.CONNECTED) {
                            e.next = 13;
                            break;
                          }
                          return (e.next = 13), this.hangup();
                        case 13:
                          e.next = 19;
                          break;
                        case 15:
                          throw (
                            ((e.prev = 15),
                            (e.t0 = e.catch(1)),
                            this._logger.error('handleExceptionExit.fail', {
                              text: { data: { error: e.t0 } },
                              type: 'api',
                            }),
                            e.t0)
                          );
                        case 19:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[1, 15]]
                );
              })
            )),
            function () {
              return r.apply(this, arguments);
            }),
        },
        {
          key: '_callRecordUpload',
          value: function (e) {
            var t = fp(
              fp({}, e),
              {},
              {
                callRole: this.isInviter() ? bR : NR,
                userID: this.getUserID(),
                roomID: this.getRoomId(),
                inviteID: this.getInitialCallId(),
                strRoomId: this.getStrRoomId(),
                groupId: this.getGroupId(),
              }
            );
            this._callRecordReport.eventUpload(t);
          },
        },
        {
          key: 'generateCallEndData',
          value: function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : {},
              t = e.roomId,
              n = e.callMediaType,
              i = e.callRole,
              o = e.totalTime,
              r = e.userId;
            return (
              (t = t || this.getRoomId()),
              (n = n || this.getCallType()),
              i || (i = this.isInviter() ? DR : SR),
              (o = qU(o) ? this.generateCallTotalTime() : o),
              (r = r || this.getUserID()),
              {
                roomID: t,
                strRoomID: this.getStrRoomId(),
                callMediaType: n,
                callRole: i,
                totalTime: o,
                userID: r,
                callEnd: o,
                message: e.message || '',
              }
            );
          },
        },
        {
          key: 'generateEventData',
          value: function () {
            return {
              callID: this.getInviterInviteIdList()[0],
              roomID: this.getRoomId(),
              strRoomID: this.getStrRoomId(),
              callRole: this.isInviter() ? bR : NR,
              callMediaType: this.getCallType(),
            };
          },
        },
        {
          key: 'enableMultiDeviceAbility',
          value:
            ((o = np(
              _p().mark(function e(t) {
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            this._logger.info(
                              'enableMultiDeviceAbility.start',
                              { text: { data: { enable: t } }, type: 'api' }
                            ),
                            (e.next = 3),
                            $x
                              .getInstance()
                              .getAlert()
                              .check(
                                new qx({
                                  api: 'enableMultiDeviceAbility',
                                  attributes: { enable: t },
                                  initReady: this._initReady,
                                  capabilityCode: AR.PRO,
                                  sdkAppID: this.data.config.sdkAppID,
                                }),
                                { tim: this._chat }
                              )
                          );
                        case 3:
                          this.setIsEnableMultiDeviceAbility(t);
                        case 4:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this
                );
              })
            )),
            function (e) {
              return o.apply(this, arguments);
            }),
        },
        {
          key: 'setInitialCallId',
          value: function (e) {
            this._initialCallId = e;
          },
        },
        {
          key: 'getInitialCallId',
          value: function () {
            return this._initialCallId;
          },
        },
        {
          key: 'getConnectStartTime',
          value: function () {
            return this.data.startTalkTime;
          },
        },
        {
          key: 'getIsLogin',
          value: function () {
            return this._initReady;
          },
        },
        {
          key: 'setIsEnableMultiDeviceAbility',
          value: function (e) {
            this._isEnableMultiDeviceAbility = !!e;
          },
        },
        {
          key: 'getIsEnableMultiDeviceAbility',
          value: function () {
            return this._isEnableMultiDeviceAbility;
          },
        },
        {
          key: 'getInviterID',
          value: function () {
            return this.data.invitation.inviter;
          },
        },
        {
          key: 'setCallTimeout',
          value: function (e) {
            this.data._callTimeout = e;
          },
        },
        {
          key: 'getCallTimeout',
          value: function () {
            return this.data._callTimeout;
          },
        },
        {
          key: 'getExcludeFromHistoryMessage',
          value: function () {
            return this._excludeFromHistoryMessage;
          },
        },
        {
          key: 'generateCallTotalTime',
          value: function () {
            return 0 === this.getConnectStartTime()
              ? 0
              : Math.round((Date.now() - this.getConnectStartTime()) / 1e3);
          },
        },
        {
          key: 'setSelfIMCallStatus',
          value:
            ((i = np(
              _p().mark(function e(t) {
                var n, i, o;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            ((n = this.getIsEnableMultiDeviceAbility()),
                            this._logger.info('setSelfIMCallStatus.start', {
                              text: {
                                data: {
                                  callStatus: t,
                                  isEnableMultiDeviceAbility: n,
                                },
                              },
                              type: 'api',
                            }),
                            n)
                          ) {
                            e.next = 4;
                            break;
                          }
                          return e.abrupt('return');
                        case 4:
                          if (this._chat && t && this.getIsLogin()) {
                            e.next = 6;
                            break;
                          }
                          return e.abrupt('return');
                        case 6:
                          (i = ''),
                            (e.prev = 7),
                            (e.t0 = t),
                            (e.next =
                              e.t0 === TR.CALLING
                                ? 11
                                : e.t0 === TR.CONNECTED
                                  ? 13
                                  : 15);
                          break;
                        case 11:
                          return (i = QR), e.abrupt('break', 15);
                        case 13:
                          return (i = eL), e.abrupt('break', 15);
                        case 15:
                          return (
                            (e.next = 17),
                            null === (o = this._chat) || void 0 === o
                              ? void 0
                              : o.setSelfStatus({ customStatus: i })
                          );
                        case 17:
                          e.next = 22;
                          break;
                        case 19:
                          (e.prev = 19),
                            (e.t1 = e.catch(7)),
                            this._logger.error('setSelfIMCallStatus.fail', {
                              text: { error: e.t1 },
                              type: 'api',
                            });
                        case 22:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[7, 19]]
                );
              })
            )),
            function (e) {
              return i.apply(this, arguments);
            }),
        },
        {
          key: 'getSelfIMCallStatus',
          value:
            ((n = np(
              _p().mark(function e() {
                var t,
                  n,
                  i,
                  o,
                  r,
                  a,
                  s,
                  c,
                  u = arguments;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            ((t = u.length > 0 && void 0 !== u[0] ? u[0] : []),
                            (n = TR.IDLE),
                            this.getIsEnableMultiDeviceAbility())
                          ) {
                            e.next = 4;
                            break;
                          }
                          return e.abrupt('return', n);
                        case 4:
                          if (
                            ((e.prev = 4),
                            this._logger.info('getSelfIMCallStatus.start', {
                              text: { data: t },
                              type: 'api',
                            }),
                            this._chat && 0 !== t.length && this.getIsLogin())
                          ) {
                            e.next = 8;
                            break;
                          }
                          return e.abrupt('return', n);
                        case 8:
                          return (
                            (e.next = 10),
                            null === (i = this._chat) || void 0 === i
                              ? void 0
                              : i.getUserStatus({ userIDList: t })
                          );
                        case 10:
                          if (0 !== (o = e.sent).code) {
                            e.next = 21;
                            break;
                          }
                          (r = o.data || {}),
                            (a = r.successUserList),
                            (s = (void 0 === a ? [] : a)[0] || {}),
                            (c = s.customStatus),
                            (e.t0 = c),
                            (e.next = e.t0 === QR ? 17 : e.t0 === eL ? 19 : 21);
                          break;
                        case 17:
                          return (n = TR.CALLING), e.abrupt('break', 21);
                        case 19:
                          return (n = TR.CONNECTED), e.abrupt('break', 21);
                        case 21:
                          e.next = 26;
                          break;
                        case 23:
                          (e.prev = 23),
                            (e.t1 = e.catch(4)),
                            this._logger.error('getSelfIMCallStatus.fail', {
                              text: { error: e.t1 },
                              type: 'api',
                            });
                        case 26:
                          return e.abrupt('return', n);
                        case 27:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[4, 23]]
                );
              })
            )),
            function () {
              return n.apply(this, arguments);
            }),
        },
        {
          key: 'reportLog',
          value: function (e) {
            try {
              if (FU(e)) {
                var t,
                  n,
                  i = e || {},
                  o = i.name,
                  r = void 0 === o ? '' : o,
                  a = i.data,
                  s = i.error,
                  c = i.type,
                  u = void 0 === c ? 'api' : c,
                  l = i.level,
                  d = void 0 === l ? 'info' : l,
                  p = 'error' === d ? { error: s, data: a } : { data: a };
                null === (t = this._logger) ||
                  void 0 === t ||
                  null === (n = t[d]) ||
                  void 0 === n ||
                  n.call(t, r, { text: p, type: u });
              }
            } catch (h) {
              console.debug('reportLog fail: ', h);
            }
          },
        },
        {
          key: 'analyzeAndSetRoomId',
          value: function (e, t) {
            var n = nG(e, t);
            GU(n) && this.setRoomId(n), t && this.setStrRoomId(t);
          },
        },
        {
          key: 'callExperimentalAPI',
          value:
            ((t = np(
              _p().mark(function e(t) {
                var n, i, o, r, a, s;
                return _p().wrap(
                  function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          if (
                            (this._logger.info('callExperimentalAPI', {
                              text: { data: t },
                              type: 'api',
                            }),
                            (n = aG(t)) !== t)
                          ) {
                            e.next = 4;
                            break;
                          }
                          return e.abrupt('return');
                        case 4:
                          if (
                            ((i = n.api),
                            (o = n.params),
                            (r = void 0 === o ? {} : o),
                            i && r)
                          ) {
                            e.next = 7;
                            break;
                          }
                          return e.abrupt('return');
                        case 7:
                          (e.prev = 7),
                            (e.t0 = i),
                            (e.next =
                              'setExcludeFromHistoryMessage' === e.t0
                                ? 11
                                : 14);
                          break;
                        case 11:
                          return (
                            (a = r.excludeFromHistoryMessage),
                            (s = void 0 !== a && a),
                            (this._excludeFromHistoryMessage = s),
                            e.abrupt('break', 15)
                          );
                        case 14:
                          return e.abrupt('break', 15);
                        case 15:
                          e.next = 20;
                          break;
                        case 17:
                          throw ((e.prev = 17), (e.t1 = e.catch(7)), e.t1);
                        case 20:
                        case 'end':
                          return e.stop();
                      }
                  },
                  e,
                  this,
                  [[7, 17]]
                );
              })
            )),
            function (e) {
              return t.apply(this, arguments);
            }),
        },
      ],
      [
        {
          key: 'createInstance',
          value: function (t) {
            return (
              qF.updateEsConfig({
                url: ''
                  .concat(
                    'https://webim.tim.qq.com/v4/imopenstat/tweb_trtccalling_report',
                    '?sdkappid='
                  )
                  .concat(null == t ? void 0 : t.sdkAppID),
                table: 'timweb-trtccalling',
              }),
              $x
                .getInstance()
                .getAlert()
                .checkSync(new qx({ api: 'createInstance', attributes: t })),
              e.instance || (e.instance = new e(t)),
              e.instance.initData(),
              e.instance
            );
          },
        },
      ]
    );
    var t,
      n,
      i,
      o,
      r,
      a,
      s,
      c,
      u,
      l,
      d,
      p,
      h,
      f,
      g,
      _,
      v,
      m,
      y,
      I,
      M,
      C,
      T,
      E,
      D,
      S,
      k,
      R,
      L,
      A,
      O,
      b,
      N,
      P,
      w,
      U,
      G,
      x,
      F,
      q,
      V,
      B,
      H,
      j,
      K,
      W;
  })();
up(VF, 'instance', null),
  up(VF, 'AUDIO_PLAYBACK_DEVICE', LR),
  up(VF, 'MEDIA_TYPE', ER),
  up(VF, 'EVENT', CR),
  up(VF, 'STATUS', TR);
var BF = { exports: {} };
!(function (e, t) {
  var n;
  (n = function () {
    function e(e, t) {
      var n = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var i = Object.getOwnPropertySymbols(e);
        t &&
          (i = i.filter(function (t) {
            return Object.getOwnPropertyDescriptor(e, t).enumerable;
          })),
          n.push.apply(n, i);
      }
      return n;
    }
    function t(t) {
      for (var n = 1; n < arguments.length; n++) {
        var i = null != arguments[n] ? arguments[n] : {};
        n % 2
          ? e(Object(i), !0).forEach(function (e) {
              r(t, e, i[e]);
            })
          : Object.getOwnPropertyDescriptors
            ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i))
            : e(Object(i)).forEach(function (e) {
                Object.defineProperty(
                  t,
                  e,
                  Object.getOwnPropertyDescriptor(i, e)
                );
              });
      }
      return t;
    }
    function n(e) {
      return (n =
        'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
          ? function (e) {
              return typeof e;
            }
          : function (e) {
              return e &&
                'function' == typeof Symbol &&
                e.constructor === Symbol &&
                e !== Symbol.prototype
                ? 'symbol'
                : typeof e;
            })(e);
    }
    function i(e, t) {
      if (!(e instanceof t))
        throw new TypeError('Cannot call a class as a function');
    }
    function o(e, t, n) {
      return (
        t &&
          (function (e, t) {
            for (var n = 0; n < t.length; n++) {
              var i = t[n];
              (i.enumerable = i.enumerable || !1),
                (i.configurable = !0),
                'value' in i && (i.writable = !0),
                Object.defineProperty(e, i.key, i);
            }
          })(e.prototype, t),
        Object.defineProperty(e, 'prototype', { writable: !1 }),
        e
      );
    }
    function r(e, t, n) {
      return (
        t in e
          ? Object.defineProperty(e, t, {
              value: n,
              enumerable: !0,
              configurable: !0,
              writable: !0,
            })
          : (e[t] = n),
        e
      );
    }
    var a =
        void 0 !== $n &&
        'function' == typeof $n.getSystemInfoSync &&
        Boolean($n.getSystemInfoSync().fontSizeSetting),
      s =
        'undefined' != typeof qq &&
        'function' == typeof qq.getSystemInfoSync &&
        Boolean(qq.getSystemInfoSync().fontSizeSetting),
      c =
        'undefined' != typeof tt &&
        'function' == typeof tt.getSystemInfoSync &&
        Boolean(tt.getSystemInfoSync().fontSizeSetting),
      u =
        'undefined' != typeof swan &&
        'function' == typeof swan.getSystemInfoSync &&
        Boolean(swan.getSystemInfoSync().fontSizeSetting),
      l =
        'undefined' != typeof my &&
        'function' == typeof my.getSystemInfoSync &&
        Boolean(my.getSystemInfoSync().fontSizeSetting),
      d =
        void 0 !== Yn &&
        'undefined' == typeof window &&
        'function' == typeof Yn.requireNativePlugin,
      p = d && 'ios' === Yn.getDeviceInfo().platform.toLocaleLowerCase(),
      h =
        (d && Yn.getDeviceInfo().platform.toLocaleLowerCase(),
        a || s || c || u || l || d),
      f = s ? qq : c ? tt : u ? swan : l ? my : a ? $n : d ? Yn : {},
      g = function (e) {
        if ('object' !== n(e) || null === e) return !1;
        var t = Object.getPrototypeOf(e);
        if (null === t) return !0;
        for (var i = t; null !== Object.getPrototypeOf(i); )
          i = Object.getPrototypeOf(i);
        return t === i;
      };
    function _(e) {
      if (null == e) return !0;
      if ('boolean' == typeof e) return !1;
      if ('number' == typeof e) return 0 === e;
      if ('string' == typeof e) return 0 === e.length;
      if ('function' == typeof e) return 0 === e.length;
      if (Array.isArray(e)) return 0 === e.length;
      if (e instanceof Error) return '' === e.message;
      if (g(e)) {
        for (var t in e)
          if (Object.prototype.hasOwnProperty.call(e, t)) return !1;
        return !0;
      }
      return !1;
    }
    var v = (function () {
        function e() {
          i(this, e);
        }
        return (
          o(e, [
            {
              key: 'request',
              value: function (e, t) {
                var n = this,
                  i = e.downloadUrl || '',
                  o = (e.method || 'PUT').toUpperCase(),
                  r = e.url;
                if (e.qs) {
                  var a = (function (e) {
                    var t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : '&',
                      n =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : '=';
                    return _(e)
                      ? ''
                      : g(e)
                        ? Object.keys(e)
                            .map(function (i) {
                              var o = encodeURIComponent(i) + n;
                              return Array.isArray(e[i])
                                ? e[i]
                                    .map(function (e) {
                                      return o + encodeURIComponent(e);
                                    })
                                    .join(t)
                                : o + encodeURIComponent(e[i]);
                            })
                            .filter(Boolean)
                            .join(t)
                        : void 0;
                  })(e.qs);
                  a &&
                    (r += ''
                      .concat(-1 === r.indexOf('?') ? '?' : '&')
                      .concat(a));
                }
                var s = new XMLHttpRequest();
                s.open(o, r, !0), (s.responseType = e.dataType || 'text');
                var c = e.headers || {};
                if (!_(c))
                  for (var u in c)
                    c.hasOwnProperty(u) &&
                      'content-length' !== u.toLowerCase() &&
                      'user-agent' !== u.toLowerCase() &&
                      'origin' !== u.toLowerCase() &&
                      'host' !== u.toLowerCase() &&
                      s.setRequestHeader(u, c[u]);
                return (
                  (s.onload = function () {
                    if (200 === s.status)
                      t(null, n._xhrRes(s, n._xhrBody(s, i)));
                    else {
                      var e = {
                        code: s.status,
                        message: JSON.stringify(s.responseText),
                      };
                      t(e, n._xhrRes(s, n._xhrBody(s)));
                    }
                  }),
                  (s.onerror = function (e) {
                    var i = n._xhrBody(s),
                      o = {
                        code: s.status,
                        message: JSON.stringify(s.responseText),
                      };
                    i ||
                      s.statusText ||
                      0 !== s.status ||
                      (e.message = 'CORS blocked or network error'),
                      t(o, n._xhrRes(s, i)),
                      (o = null);
                  }),
                  e.onProgress &&
                    s.upload &&
                    (s.upload.onprogress = function (t) {
                      var n = t.total,
                        i = t.loaded,
                        o = Math.floor((100 * i) / n);
                      e.onProgress({
                        total: n,
                        loaded: i,
                        percent: (o >= 100 ? 100 : o) / 100,
                      });
                    }),
                  s.send(e.resources),
                  s
                );
              },
            },
            {
              key: '_xhrRes',
              value: function (e, t) {
                var n = {};
                return (
                  e
                    .getAllResponseHeaders()
                    .trim()
                    .split('\n')
                    .forEach(function (e) {
                      if (e) {
                        var t = e.indexOf(':'),
                          i = e.substr(0, t).trim().toLowerCase(),
                          o = e.substr(t + 1).trim();
                        n[i] = o;
                      }
                    }),
                  {
                    statusCode: e.status,
                    statusMessage: e.statusText,
                    headers: n,
                    data: t,
                  }
                );
              },
            },
            {
              key: '_xhrBody',
              value: function (e, t) {
                return 200 === e.status && t
                  ? { location: t }
                  : { response: e.responseText };
              },
            },
          ]),
          e
        );
      })(),
      m = ['unknown', 'image', 'video', 'audio', 'log'],
      y = ['name'],
      I = (function () {
        function e() {
          i(this, e);
        }
        return (
          o(e, [
            {
              key: 'request',
              value: function (e, n) {
                var i = this,
                  o = e.resources,
                  r = void 0 === o ? '' : o,
                  a = e.headers,
                  s = void 0 === a ? {} : a,
                  c = e.url,
                  u = e.downloadUrl,
                  d = void 0 === u ? '' : u,
                  h = c,
                  g = null,
                  _ = d.match(/^(https?:\/\/[^/]+\/)([^/]*\/?)(.*)$/),
                  v = decodeURIComponent(_[3]),
                  I = v.indexOf('?') > -1 ? v.split('?')[0] : v,
                  M = {
                    key: e.fileKey ? e.fileKey : I,
                    success_action_status: 200,
                    'Content-Type': '',
                  },
                  C = {};
                if (p) {
                  var T = c.split('?sign=');
                  if (T.length > 1) {
                    var E = T[1];
                    (h = ''
                      .concat(T[0], '?sign=')
                      .concat(encodeURIComponent(''.concat(E)))),
                      (C.sign = decodeURIComponent(E)),
                      (C.signature = decodeURIComponent(E));
                  }
                }
                var D = {
                  url: h,
                  header: s,
                  name: 'file',
                  filePath: r,
                  formData: t(t({}, M), C),
                  timeout: e.timeout || 3e5,
                };
                if (l) {
                  var S = D;
                  S.name,
                    (D = t(
                      t(
                        {},
                        (function (e, t) {
                          if (null == e) return {};
                          var n,
                            i,
                            o = (function (e, t) {
                              if (null == e) return {};
                              var n,
                                i,
                                o = {},
                                r = Object.keys(e);
                              for (i = 0; i < r.length; i++)
                                (n = r[i]), t.indexOf(n) >= 0 || (o[n] = e[n]);
                              return o;
                            })(e, t);
                          if (Object.getOwnPropertySymbols) {
                            var r = Object.getOwnPropertySymbols(e);
                            for (i = 0; i < r.length; i++)
                              (n = r[i]),
                                t.indexOf(n) >= 0 ||
                                  (Object.prototype.propertyIsEnumerable.call(
                                    e,
                                    n
                                  ) &&
                                    (o[n] = e[n]));
                          }
                          return o;
                        })(S, y)
                      ),
                      {},
                      { fileName: 'file', fileType: m[e.fileType] }
                    ));
                }
                return (
                  (g = f.uploadFile(
                    t(
                      t({}, D),
                      {},
                      {
                        success: function (e) {
                          i._handleResponse({
                            response: e,
                            downloadUrl: d,
                            callback: n,
                          });
                        },
                        fail: function (e) {
                          i._handleResponse({
                            response: e,
                            downloadUrl: d,
                            callback: n,
                          });
                        },
                      }
                    )
                  )).onProgressUpdate &&
                    g.onProgressUpdate(function (t) {
                      e.onProgress &&
                        e.onProgress({
                          total: t.totalBytesExpectedToSend,
                          loaded: t.totalBytesSent,
                          percent: Math.floor(t.progress) / 100,
                        });
                    }),
                  g
                );
              },
            },
            {
              key: '_handleResponse',
              value: function (e) {
                var n = e.downloadUrl,
                  i = e.response,
                  o = e.callback,
                  r = i.header,
                  a = {};
                if (r)
                  for (var s in r)
                    r.hasOwnProperty(s) && (a[s.toLowerCase()] = r[s]);
                var c = +i.statusCode;
                200 === c
                  ? o(null, {
                      statusCode: c,
                      headers: a,
                      data: t(t({}, i.data), {}, { location: n }),
                    })
                  : o(
                      { code: c, message: JSON.stringify(i.data) },
                      { statusCode: c, headers: a, data: void 0 }
                    );
              },
            },
          ]),
          e
        );
      })();
    return (function () {
      function e() {
        i(this, e),
          console.log('TIMUploadPlugin.VERSION: '.concat('1.3.0')),
          (this.retry = 1),
          (this.tryCount = 0),
          (this.systemClockOffset = 0),
          (this.httpRequest = h ? new I() : new v());
      }
      return (
        o(e, [
          {
            key: 'uploadFile',
            value: function (e, t) {
              var n = this;
              return this.httpRequest.request(e, function (i, o) {
                i && n.tryCount < n.retry && n.allowRetry(i)
                  ? (n.tryCount++, n.uploadFile(e, t))
                  : ((n.tryCount = 0), t(i, o));
              });
            },
          },
          {
            key: 'allowRetry',
            value: function (e) {
              var t = !1,
                n = !1;
              if (e) {
                var i =
                  (e.headers && (e.headers.date || e.headers.Date)) ||
                  (e.error && e.error.ServerTime);
                try {
                  var o = e.error && e.error.Code,
                    r = e.error && e.error.Message;
                  ('RequestTimeTooSkewed' === o ||
                    ('AccessDenied' === o && 'Request has expired' === r)) &&
                    (n = !0);
                } catch (c) {}
                if (n && i) {
                  var a = Date.now(),
                    s = Date.parse(i);
                  Math.abs(a + this.systemClockOffset - s) >= 3e4 &&
                    ((this.systemClockOffset = s - a), (t = !0));
                } else 5 === Math.floor(e.statusCode / 100) && (t = !0);
              }
              return t;
            },
          },
        ]),
        e
      );
    })();
  }),
    (BF.exports = n());
})();
const HF = Qs(BF.exports);
var jF = { exports: {} };
jF.exports = (function () {
  function e(e, t) {
    if (!(e instanceof t))
      throw new TypeError('Cannot call a class as a function');
  }
  function t(e, t) {
    for (var n = 0; n < t.length; n++) {
      var i = t[n];
      (i.enumerable = i.enumerable || !1),
        (i.configurable = !0),
        'value' in i && (i.writable = !0),
        Object.defineProperty(
          e,
          ((o = void 0),
          'symbol' ==
          typeof (o = (function (e, t) {
            if ('object' != typeof e || null === e) return e;
            var n = e[Symbol.toPrimitive];
            if (void 0 !== n) {
              var i = n.call(e, t || 'default');
              if ('object' != typeof i) return i;
              throw new TypeError(
                '@@toPrimitive must return a primitive value.'
              );
            }
            return ('string' === t ? String : Number)(e);
          })(i.key, 'string'))
            ? o
            : String(o)),
          i
        );
    }
    var o;
  }
  function n(e, n, i) {
    return (
      n && t(e.prototype, n),
      Object.defineProperty(e, 'prototype', { writable: !1 }),
      e
    );
  }
  function i(e, t) {
    return (
      (function (e) {
        if (Array.isArray(e)) return e;
      })(e) ||
      (function (e, t) {
        var n =
          null == e
            ? null
            : ('undefined' != typeof Symbol && e[Symbol.iterator]) ||
              e['@@iterator'];
        if (null != n) {
          var i,
            o,
            r,
            a,
            s = [],
            c = !0,
            u = !1;
          try {
            if (((r = (n = n.call(e)).next), 0 === t));
            else
              for (
                ;
                !(c = (i = r.call(n)).done) &&
                (s.push(i.value), s.length !== t);
                c = !0
              );
          } catch (l) {
            (u = !0), (o = l);
          } finally {
            try {
              if (!c && null != n.return && ((a = n.return()), Object(a) !== a))
                return;
            } finally {
              if (u) throw o;
            }
          }
          return s;
        }
      })(e, t) ||
      r(e, t) ||
      (function () {
        throw new TypeError(
          'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
        );
      })()
    );
  }
  function o(e) {
    return (
      (function (e) {
        if (Array.isArray(e)) return a(e);
      })(e) ||
      (function (e) {
        if (
          ('undefined' != typeof Symbol && null != e[Symbol.iterator]) ||
          null != e['@@iterator']
        )
          return Array.from(e);
      })(e) ||
      r(e) ||
      (function () {
        throw new TypeError(
          'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
        );
      })()
    );
  }
  function r(e, t) {
    if (e) {
      if ('string' == typeof e) return a(e, t);
      var n = Object.prototype.toString.call(e).slice(8, -1);
      return (
        'Object' === n && e.constructor && (n = e.constructor.name),
        'Map' === n || 'Set' === n
          ? Array.from(e)
          : 'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            ? a(e, t)
            : void 0
      );
    }
  }
  function a(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for (var n = 0, i = new Array(t); n < t; n++) i[n] = e[n];
    return i;
  }
  function s(e, t) {
    var n =
      ('undefined' != typeof Symbol && e[Symbol.iterator]) || e['@@iterator'];
    if (!n) {
      if (Array.isArray(e) || (n = r(e)) || t) {
        n && (e = n);
        var i = 0,
          o = function () {};
        return {
          s: o,
          n: function () {
            return i >= e.length ? { done: !0 } : { done: !1, value: e[i++] };
          },
          e: function (e) {
            throw e;
          },
          f: o,
        };
      }
      throw new TypeError(
        'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
      );
    }
    var a,
      s = !0,
      c = !1;
    return {
      s: function () {
        n = n.call(e);
      },
      n: function () {
        var e = n.next();
        return (s = e.done), e;
      },
      e: function (e) {
        (c = !0), (a = e);
      },
      f: function () {
        try {
          s || null == n.return || n.return();
        } finally {
          if (c) throw a;
        }
      },
    };
  }
  var c,
    u,
    l = (function () {
      for (
        var e =
            ' \t\r\n~!@#$%^&*()_+-=【】、{}|;\':"，。、《》？αβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ。，、；：？！…—·ˉ¨‘’“”々～‖∶＂＇｀｜〃〔〕〈〉《》「」『』．〖〗【】（）［］｛｝ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩①②③④⑤⑥⑦⑧⑨⑩⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇≈≡≠＝≤≥＜＞≮≯∷±＋－×÷／∫∮∝∞∧∨∑∏∪∩∈∵∴⊥∥∠⌒⊙≌∽√§№☆★○●◎◇◆□℃‰€■△▲※→←↑↓〓¤°＃＆＠＼︿＿￣―♂♀┌┍┎┐┑┒┓─┄┈├┝┞┟┠┡┢┣│┆┊┬┭┮┯┰┱┲┳┼┽┾┿╀╁╂╃└┕┖┗┘┙┚┛━┅┉┤┥┦┧┨┩┪┫┃┇┋┴┵┶┷┸┹┺┻╋╊╉╈╇╆╅╄',
          t = new Map(),
          n = 0,
          i = e.length;
        n < i;
        n++
      )
        t.set(e.charCodeAt(0), !0);
      return t;
    })(),
    d = (function () {
      function t(n) {
        e(this, t);
        var i,
          r = n.input,
          a = n.isArray,
          s = n.isMap;
        (this._trieTree = {}),
          a(r) ? (i = r) : s(r) && ((i = o(r.keys())), (this._map = r));
        for (var c = 0, u = i.length; c < u; c++)
          if (i[c]) {
            for (
              var l = this._trieTree, d = i[c], p = 0, h = d.length;
              p < h;
              p++
            )
              l[d[p]] || (l[d[p]] = {}), (l = l[d[p]]);
            l.isEnd = !0;
          }
      }
      return (
        n(t, [
          {
            key: 'filter',
            value: function (e) {
              var t = e.text,
                n = e.replacingEnabled;
              if (0 === Object.keys(this._trieTree).length)
                return { isMatched: !1, modifiedText: t };
              for (
                var i = this._trieTree,
                  o = t.toLowerCase(),
                  r = '',
                  a = !1,
                  s = o.length,
                  c = 0;
                c < s;
                c++
              )
                if (!0 !== l.get(o.charCodeAt(c))) {
                  for (var u = 0, d = '', p = !1, h = c; h < s; h++) {
                    if (!i[o[h]]) {
                      i = this._trieTree;
                      break;
                    }
                    if (((d += o[h]), i[o[h]].isEnd)) {
                      (p = !0), (u = h - c), (i = this._trieTree);
                      break;
                    }
                    i = i[o[h]];
                  }
                  if ((u > 1 && (c += u), p)) {
                    if (((a = !0), !n)) break;
                    var f = this._map.get(d) || '*';
                    r = t.replace(new RegExp(d, 'gi'), f);
                  }
                }
              return { isMatched: a, modifiedText: r };
            },
          },
          {
            key: 'reset',
            value: function () {
              (this._trieTree = {}), (this._map = null);
            },
          },
        ]),
        t
      );
    })(),
    p =
      'undefined' != typeof globalThis
        ? globalThis
        : 'undefined' != typeof window
          ? window
          : void 0 !== Zs
            ? Zs
            : 'undefined' != typeof self
              ? self
              : {},
    h = {},
    f =
      ((c = function (e, t) {
        var n, i, o, r, a, s, c, u, l, d, f, g, _;
        e.exports =
          ((s =
            s ||
            (function (e, t) {
              var n;
              if (
                ('undefined' != typeof window &&
                  window.crypto &&
                  (n = window.crypto),
                !n &&
                  'undefined' != typeof window &&
                  window.msCrypto &&
                  (n = window.msCrypto),
                !n && void 0 !== p && p.crypto && (n = p.crypto),
                !n)
              )
                try {
                  n = h;
                } catch (Ic) {}
              var i = function () {
                  if (n) {
                    if ('function' == typeof n.getRandomValues)
                      try {
                        return n.getRandomValues(new Uint32Array(1))[0];
                      } catch (Ic) {}
                    if ('function' == typeof n.randomBytes)
                      try {
                        return n.randomBytes(4).readInt32LE();
                      } catch (Ic) {}
                  }
                  throw new Error(
                    'Native crypto module could not be used to get secure random number.'
                  );
                },
                o =
                  Object.create ||
                  (function () {
                    function e() {}
                    return function (t) {
                      var n;
                      return (
                        (e.prototype = t),
                        (n = new e()),
                        (e.prototype = null),
                        n
                      );
                    };
                  })(),
                r = {},
                a = (r.lib = {}),
                s = (a.Base = {
                  extend: function (e) {
                    var t = o(this);
                    return (
                      e && t.mixIn(e),
                      (t.hasOwnProperty('init') && this.init !== t.init) ||
                        (t.init = function () {
                          t.$super.init.apply(this, arguments);
                        }),
                      (t.init.prototype = t),
                      (t.$super = this),
                      t
                    );
                  },
                  create: function () {
                    var e = this.extend();
                    return e.init.apply(e, arguments), e;
                  },
                  init: function () {},
                  mixIn: function (e) {
                    for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                    e.hasOwnProperty('toString') &&
                      (this.toString = e.toString);
                  },
                  clone: function () {
                    return this.init.prototype.extend(this);
                  },
                }),
                c = (a.WordArray = s.extend({
                  init: function (e, t) {
                    (e = this.words = e || []),
                      (this.sigBytes = null != t ? t : 4 * e.length);
                  },
                  toString: function (e) {
                    return (e || l).stringify(this);
                  },
                  concat: function (e) {
                    var t = this.words,
                      n = e.words,
                      i = this.sigBytes,
                      o = e.sigBytes;
                    if ((this.clamp(), i % 4))
                      for (var r = 0; r < o; r++) {
                        var a = (n[r >>> 2] >>> (24 - (r % 4) * 8)) & 255;
                        t[(i + r) >>> 2] |= a << (24 - ((i + r) % 4) * 8);
                      }
                    else
                      for (r = 0; r < o; r += 4) t[(i + r) >>> 2] = n[r >>> 2];
                    return (this.sigBytes += o), this;
                  },
                  clamp: function () {
                    var t = this.words,
                      n = this.sigBytes;
                    (t[n >>> 2] &= 4294967295 << (32 - (n % 4) * 8)),
                      (t.length = e.ceil(n / 4));
                  },
                  clone: function () {
                    var e = s.clone.call(this);
                    return (e.words = this.words.slice(0)), e;
                  },
                  random: function (e) {
                    for (var t = [], n = 0; n < e; n += 4) t.push(i());
                    return new c.init(t, e);
                  },
                })),
                u = (r.enc = {}),
                l = (u.Hex = {
                  stringify: function (e) {
                    for (
                      var t = e.words, n = e.sigBytes, i = [], o = 0;
                      o < n;
                      o++
                    ) {
                      var r = (t[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                      i.push((r >>> 4).toString(16)),
                        i.push((15 & r).toString(16));
                    }
                    return i.join('');
                  },
                  parse: function (e) {
                    for (var t = e.length, n = [], i = 0; i < t; i += 2)
                      n[i >>> 3] |=
                        parseInt(e.substr(i, 2), 16) << (24 - (i % 8) * 4);
                    return new c.init(n, t / 2);
                  },
                }),
                d = (u.Latin1 = {
                  stringify: function (e) {
                    for (
                      var t = e.words, n = e.sigBytes, i = [], o = 0;
                      o < n;
                      o++
                    ) {
                      var r = (t[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                      i.push(String.fromCharCode(r));
                    }
                    return i.join('');
                  },
                  parse: function (e) {
                    for (var t = e.length, n = [], i = 0; i < t; i++)
                      n[i >>> 2] |=
                        (255 & e.charCodeAt(i)) << (24 - (i % 4) * 8);
                    return new c.init(n, t);
                  },
                }),
                f = (u.Utf8 = {
                  stringify: function (e) {
                    try {
                      return decodeURIComponent(escape(d.stringify(e)));
                    } catch (t) {
                      throw new Error('Malformed UTF-8 data');
                    }
                  },
                  parse: function (e) {
                    return d.parse(unescape(encodeURIComponent(e)));
                  },
                }),
                g = (a.BufferedBlockAlgorithm = s.extend({
                  reset: function () {
                    (this._data = new c.init()), (this._nDataBytes = 0);
                  },
                  _append: function (e) {
                    'string' == typeof e && (e = f.parse(e)),
                      this._data.concat(e),
                      (this._nDataBytes += e.sigBytes);
                  },
                  _process: function (t) {
                    var n,
                      i = this._data,
                      o = i.words,
                      r = i.sigBytes,
                      a = this.blockSize,
                      s = r / (4 * a),
                      u =
                        (s = t
                          ? e.ceil(s)
                          : e.max((0 | s) - this._minBufferSize, 0)) * a,
                      l = e.min(4 * u, r);
                    if (u) {
                      for (var d = 0; d < u; d += a) this._doProcessBlock(o, d);
                      (n = o.splice(0, u)), (i.sigBytes -= l);
                    }
                    return new c.init(n, l);
                  },
                  clone: function () {
                    var e = s.clone.call(this);
                    return (e._data = this._data.clone()), e;
                  },
                  _minBufferSize: 0,
                })),
                _ =
                  ((a.Hasher = g.extend({
                    cfg: s.extend(),
                    init: function (e) {
                      (this.cfg = this.cfg.extend(e)), this.reset();
                    },
                    reset: function () {
                      g.reset.call(this), this._doReset();
                    },
                    update: function (e) {
                      return this._append(e), this._process(), this;
                    },
                    finalize: function (e) {
                      return e && this._append(e), this._doFinalize();
                    },
                    blockSize: 16,
                    _createHelper: function (e) {
                      return function (t, n) {
                        return new e.init(n).finalize(t);
                      };
                    },
                    _createHmacHelper: function (e) {
                      return function (t, n) {
                        return new _.HMAC.init(e, n).finalize(t);
                      };
                    },
                  })),
                  (r.algo = {}));
              return r;
            })(Math)),
          (a = (r = s).lib.WordArray),
          (r.enc.Base64 = {
            stringify: function (e) {
              var t = e.words,
                n = e.sigBytes,
                i = this._map;
              e.clamp();
              for (var o = [], r = 0; r < n; r += 3)
                for (
                  var a =
                      (((t[r >>> 2] >>> (24 - (r % 4) * 8)) & 255) << 16) |
                      (((t[(r + 1) >>> 2] >>> (24 - ((r + 1) % 4) * 8)) &
                        255) <<
                        8) |
                      ((t[(r + 2) >>> 2] >>> (24 - ((r + 2) % 4) * 8)) & 255),
                    s = 0;
                  s < 4 && r + 0.75 * s < n;
                  s++
                )
                  o.push(i.charAt((a >>> (6 * (3 - s))) & 63));
              var c = i.charAt(64);
              if (c) for (; o.length % 4; ) o.push(c);
              return o.join('');
            },
            parse: function (e) {
              var t = e.length,
                n = this._map,
                i = this._reverseMap;
              if (!i) {
                i = this._reverseMap = [];
                for (var o = 0; o < n.length; o++) i[n.charCodeAt(o)] = o;
              }
              var r = n.charAt(64);
              if (r) {
                var s = e.indexOf(r);
                -1 !== s && (t = s);
              }
              return (function (e, t, n) {
                for (var i = [], o = 0, r = 0; r < t; r++)
                  if (r % 4) {
                    var s =
                      (n[e.charCodeAt(r - 1)] << ((r % 4) * 2)) |
                      (n[e.charCodeAt(r)] >>> (6 - (r % 4) * 2));
                    (i[o >>> 2] |= s << (24 - (o % 4) * 8)), o++;
                  }
                return a.create(i, o);
              })(e, t, i);
            },
            _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
          }),
          (function (e) {
            var t = s,
              n = t.lib,
              i = n.WordArray,
              o = n.Hasher,
              r = t.algo,
              a = [];
            !(function () {
              for (var t = 0; t < 64; t++)
                a[t] = (4294967296 * e.abs(e.sin(t + 1))) | 0;
            })();
            var c = (r.MD5 = o.extend({
              _doReset: function () {
                this._hash = new i.init([
                  1732584193, 4023233417, 2562383102, 271733878,
                ]);
              },
              _doProcessBlock: function (e, t) {
                for (var n = 0; n < 16; n++) {
                  var i = t + n,
                    o = e[i];
                  e[i] =
                    (16711935 & ((o << 8) | (o >>> 24))) |
                    (4278255360 & ((o << 24) | (o >>> 8)));
                }
                var r = this._hash.words,
                  s = e[t + 0],
                  c = e[t + 1],
                  h = e[t + 2],
                  f = e[t + 3],
                  g = e[t + 4],
                  _ = e[t + 5],
                  v = e[t + 6],
                  m = e[t + 7],
                  y = e[t + 8],
                  I = e[t + 9],
                  M = e[t + 10],
                  C = e[t + 11],
                  T = e[t + 12],
                  E = e[t + 13],
                  D = e[t + 14],
                  S = e[t + 15],
                  k = r[0],
                  R = r[1],
                  L = r[2],
                  A = r[3];
                (k = u(k, R, L, A, s, 7, a[0])),
                  (A = u(A, k, R, L, c, 12, a[1])),
                  (L = u(L, A, k, R, h, 17, a[2])),
                  (R = u(R, L, A, k, f, 22, a[3])),
                  (k = u(k, R, L, A, g, 7, a[4])),
                  (A = u(A, k, R, L, _, 12, a[5])),
                  (L = u(L, A, k, R, v, 17, a[6])),
                  (R = u(R, L, A, k, m, 22, a[7])),
                  (k = u(k, R, L, A, y, 7, a[8])),
                  (A = u(A, k, R, L, I, 12, a[9])),
                  (L = u(L, A, k, R, M, 17, a[10])),
                  (R = u(R, L, A, k, C, 22, a[11])),
                  (k = u(k, R, L, A, T, 7, a[12])),
                  (A = u(A, k, R, L, E, 12, a[13])),
                  (L = u(L, A, k, R, D, 17, a[14])),
                  (k = l(
                    k,
                    (R = u(R, L, A, k, S, 22, a[15])),
                    L,
                    A,
                    c,
                    5,
                    a[16]
                  )),
                  (A = l(A, k, R, L, v, 9, a[17])),
                  (L = l(L, A, k, R, C, 14, a[18])),
                  (R = l(R, L, A, k, s, 20, a[19])),
                  (k = l(k, R, L, A, _, 5, a[20])),
                  (A = l(A, k, R, L, M, 9, a[21])),
                  (L = l(L, A, k, R, S, 14, a[22])),
                  (R = l(R, L, A, k, g, 20, a[23])),
                  (k = l(k, R, L, A, I, 5, a[24])),
                  (A = l(A, k, R, L, D, 9, a[25])),
                  (L = l(L, A, k, R, f, 14, a[26])),
                  (R = l(R, L, A, k, y, 20, a[27])),
                  (k = l(k, R, L, A, E, 5, a[28])),
                  (A = l(A, k, R, L, h, 9, a[29])),
                  (L = l(L, A, k, R, m, 14, a[30])),
                  (k = d(
                    k,
                    (R = l(R, L, A, k, T, 20, a[31])),
                    L,
                    A,
                    _,
                    4,
                    a[32]
                  )),
                  (A = d(A, k, R, L, y, 11, a[33])),
                  (L = d(L, A, k, R, C, 16, a[34])),
                  (R = d(R, L, A, k, D, 23, a[35])),
                  (k = d(k, R, L, A, c, 4, a[36])),
                  (A = d(A, k, R, L, g, 11, a[37])),
                  (L = d(L, A, k, R, m, 16, a[38])),
                  (R = d(R, L, A, k, M, 23, a[39])),
                  (k = d(k, R, L, A, E, 4, a[40])),
                  (A = d(A, k, R, L, s, 11, a[41])),
                  (L = d(L, A, k, R, f, 16, a[42])),
                  (R = d(R, L, A, k, v, 23, a[43])),
                  (k = d(k, R, L, A, I, 4, a[44])),
                  (A = d(A, k, R, L, T, 11, a[45])),
                  (L = d(L, A, k, R, S, 16, a[46])),
                  (k = p(
                    k,
                    (R = d(R, L, A, k, h, 23, a[47])),
                    L,
                    A,
                    s,
                    6,
                    a[48]
                  )),
                  (A = p(A, k, R, L, m, 10, a[49])),
                  (L = p(L, A, k, R, D, 15, a[50])),
                  (R = p(R, L, A, k, _, 21, a[51])),
                  (k = p(k, R, L, A, T, 6, a[52])),
                  (A = p(A, k, R, L, f, 10, a[53])),
                  (L = p(L, A, k, R, M, 15, a[54])),
                  (R = p(R, L, A, k, c, 21, a[55])),
                  (k = p(k, R, L, A, y, 6, a[56])),
                  (A = p(A, k, R, L, S, 10, a[57])),
                  (L = p(L, A, k, R, v, 15, a[58])),
                  (R = p(R, L, A, k, E, 21, a[59])),
                  (k = p(k, R, L, A, g, 6, a[60])),
                  (A = p(A, k, R, L, C, 10, a[61])),
                  (L = p(L, A, k, R, h, 15, a[62])),
                  (R = p(R, L, A, k, I, 21, a[63])),
                  (r[0] = (r[0] + k) | 0),
                  (r[1] = (r[1] + R) | 0),
                  (r[2] = (r[2] + L) | 0),
                  (r[3] = (r[3] + A) | 0);
              },
              _doFinalize: function () {
                var t = this._data,
                  n = t.words,
                  i = 8 * this._nDataBytes,
                  o = 8 * t.sigBytes;
                n[o >>> 5] |= 128 << (24 - (o % 32));
                var r = e.floor(i / 4294967296),
                  a = i;
                (n[15 + (((o + 64) >>> 9) << 4)] =
                  (16711935 & ((r << 8) | (r >>> 24))) |
                  (4278255360 & ((r << 24) | (r >>> 8)))),
                  (n[14 + (((o + 64) >>> 9) << 4)] =
                    (16711935 & ((a << 8) | (a >>> 24))) |
                    (4278255360 & ((a << 24) | (a >>> 8)))),
                  (t.sigBytes = 4 * (n.length + 1)),
                  this._process();
                for (var s = this._hash, c = s.words, u = 0; u < 4; u++) {
                  var l = c[u];
                  c[u] =
                    (16711935 & ((l << 8) | (l >>> 24))) |
                    (4278255360 & ((l << 24) | (l >>> 8)));
                }
                return s;
              },
              clone: function () {
                var e = o.clone.call(this);
                return (e._hash = this._hash.clone()), e;
              },
            }));
            function u(e, t, n, i, o, r, a) {
              var s = e + ((t & n) | (~t & i)) + o + a;
              return ((s << r) | (s >>> (32 - r))) + t;
            }
            function l(e, t, n, i, o, r, a) {
              var s = e + ((t & i) | (n & ~i)) + o + a;
              return ((s << r) | (s >>> (32 - r))) + t;
            }
            function d(e, t, n, i, o, r, a) {
              var s = e + (t ^ n ^ i) + o + a;
              return ((s << r) | (s >>> (32 - r))) + t;
            }
            function p(e, t, n, i, o, r, a) {
              var s = e + (n ^ (t | ~i)) + o + a;
              return ((s << r) | (s >>> (32 - r))) + t;
            }
            (t.MD5 = o._createHelper(c)), (t.HmacMD5 = o._createHmacHelper(c));
          })(Math),
          (u = (c = s).lib),
          (l = u.WordArray),
          (d = u.Hasher),
          (f = c.algo),
          (g = []),
          (_ = f.SHA1 =
            d.extend({
              _doReset: function () {
                this._hash = new l.init([
                  1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                ]);
              },
              _doProcessBlock: function (e, t) {
                for (
                  var n = this._hash.words,
                    i = n[0],
                    o = n[1],
                    r = n[2],
                    a = n[3],
                    s = n[4],
                    c = 0;
                  c < 80;
                  c++
                ) {
                  if (c < 16) g[c] = 0 | e[t + c];
                  else {
                    var u = g[c - 3] ^ g[c - 8] ^ g[c - 14] ^ g[c - 16];
                    g[c] = (u << 1) | (u >>> 31);
                  }
                  var l = ((i << 5) | (i >>> 27)) + s + g[c];
                  (l +=
                    c < 20
                      ? 1518500249 + ((o & r) | (~o & a))
                      : c < 40
                        ? 1859775393 + (o ^ r ^ a)
                        : c < 60
                          ? ((o & r) | (o & a) | (r & a)) - 1894007588
                          : (o ^ r ^ a) - 899497514),
                    (s = a),
                    (a = r),
                    (r = (o << 30) | (o >>> 2)),
                    (o = i),
                    (i = l);
                }
                (n[0] = (n[0] + i) | 0),
                  (n[1] = (n[1] + o) | 0),
                  (n[2] = (n[2] + r) | 0),
                  (n[3] = (n[3] + a) | 0),
                  (n[4] = (n[4] + s) | 0);
              },
              _doFinalize: function () {
                var e = this._data,
                  t = e.words,
                  n = 8 * this._nDataBytes,
                  i = 8 * e.sigBytes;
                return (
                  (t[i >>> 5] |= 128 << (24 - (i % 32))),
                  (t[14 + (((i + 64) >>> 9) << 4)] = Math.floor(
                    n / 4294967296
                  )),
                  (t[15 + (((i + 64) >>> 9) << 4)] = n),
                  (e.sigBytes = 4 * t.length),
                  this._process(),
                  this._hash
                );
              },
              clone: function () {
                var e = d.clone.call(this);
                return (e._hash = this._hash.clone()), e;
              },
            })),
          (c.SHA1 = d._createHelper(_)),
          (c.HmacSHA1 = d._createHmacHelper(_)),
          (function (e) {
            var t = s,
              n = t.lib,
              i = n.WordArray,
              o = n.Hasher,
              r = t.algo,
              a = [],
              c = [];
            !(function () {
              function t(t) {
                for (var n = e.sqrt(t), i = 2; i <= n; i++)
                  if (!(t % i)) return !1;
                return !0;
              }
              function n(e) {
                return (4294967296 * (e - (0 | e))) | 0;
              }
              for (var i = 2, o = 0; o < 64; )
                t(i) &&
                  (o < 8 && (a[o] = n(e.pow(i, 0.5))),
                  (c[o] = n(e.pow(i, 1 / 3))),
                  o++),
                  i++;
            })();
            var u = [],
              l = (r.SHA256 = o.extend({
                _doReset: function () {
                  this._hash = new i.init(a.slice(0));
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var n = this._hash.words,
                      i = n[0],
                      o = n[1],
                      r = n[2],
                      a = n[3],
                      s = n[4],
                      l = n[5],
                      d = n[6],
                      p = n[7],
                      h = 0;
                    h < 64;
                    h++
                  ) {
                    if (h < 16) u[h] = 0 | e[t + h];
                    else {
                      var f = u[h - 15],
                        g =
                          ((f << 25) | (f >>> 7)) ^
                          ((f << 14) | (f >>> 18)) ^
                          (f >>> 3),
                        _ = u[h - 2],
                        v =
                          ((_ << 15) | (_ >>> 17)) ^
                          ((_ << 13) | (_ >>> 19)) ^
                          (_ >>> 10);
                      u[h] = g + u[h - 7] + v + u[h - 16];
                    }
                    var m = (i & o) ^ (i & r) ^ (o & r),
                      y =
                        ((i << 30) | (i >>> 2)) ^
                        ((i << 19) | (i >>> 13)) ^
                        ((i << 10) | (i >>> 22)),
                      I =
                        p +
                        (((s << 26) | (s >>> 6)) ^
                          ((s << 21) | (s >>> 11)) ^
                          ((s << 7) | (s >>> 25))) +
                        ((s & l) ^ (~s & d)) +
                        c[h] +
                        u[h];
                    (p = d),
                      (d = l),
                      (l = s),
                      (s = (a + I) | 0),
                      (a = r),
                      (r = o),
                      (o = i),
                      (i = (I + (y + m)) | 0);
                  }
                  (n[0] = (n[0] + i) | 0),
                    (n[1] = (n[1] + o) | 0),
                    (n[2] = (n[2] + r) | 0),
                    (n[3] = (n[3] + a) | 0),
                    (n[4] = (n[4] + s) | 0),
                    (n[5] = (n[5] + l) | 0),
                    (n[6] = (n[6] + d) | 0),
                    (n[7] = (n[7] + p) | 0);
                },
                _doFinalize: function () {
                  var t = this._data,
                    n = t.words,
                    i = 8 * this._nDataBytes,
                    o = 8 * t.sigBytes;
                  return (
                    (n[o >>> 5] |= 128 << (24 - (o % 32))),
                    (n[14 + (((o + 64) >>> 9) << 4)] = e.floor(i / 4294967296)),
                    (n[15 + (((o + 64) >>> 9) << 4)] = i),
                    (t.sigBytes = 4 * n.length),
                    this._process(),
                    this._hash
                  );
                },
                clone: function () {
                  var e = o.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              }));
            (t.SHA256 = o._createHelper(l)),
              (t.HmacSHA256 = o._createHmacHelper(l));
          })(Math),
          (function () {
            var e = s,
              t = e.lib.WordArray,
              n = e.enc;
            function i(e) {
              return ((e << 8) & 4278255360) | ((e >>> 8) & 16711935);
            }
            (n.Utf16 = n.Utf16BE =
              {
                stringify: function (e) {
                  for (
                    var t = e.words, n = e.sigBytes, i = [], o = 0;
                    o < n;
                    o += 2
                  ) {
                    var r = (t[o >>> 2] >>> (16 - (o % 4) * 8)) & 65535;
                    i.push(String.fromCharCode(r));
                  }
                  return i.join('');
                },
                parse: function (e) {
                  for (var n = e.length, i = [], o = 0; o < n; o++)
                    i[o >>> 1] |= e.charCodeAt(o) << (16 - (o % 2) * 16);
                  return t.create(i, 2 * n);
                },
              }),
              (n.Utf16LE = {
                stringify: function (e) {
                  for (
                    var t = e.words, n = e.sigBytes, o = [], r = 0;
                    r < n;
                    r += 2
                  ) {
                    var a = i((t[r >>> 2] >>> (16 - (r % 4) * 8)) & 65535);
                    o.push(String.fromCharCode(a));
                  }
                  return o.join('');
                },
                parse: function (e) {
                  for (var n = e.length, o = [], r = 0; r < n; r++)
                    o[r >>> 1] |= i(e.charCodeAt(r) << (16 - (r % 2) * 16));
                  return t.create(o, 2 * n);
                },
              });
          })(),
          (function () {
            if ('function' == typeof ArrayBuffer) {
              var e = s.lib.WordArray,
                t = e.init;
              (e.init = function (e) {
                if (
                  (e instanceof ArrayBuffer && (e = new Uint8Array(e)),
                  (e instanceof Int8Array ||
                    ('undefined' != typeof Uint8ClampedArray &&
                      e instanceof Uint8ClampedArray) ||
                    e instanceof Int16Array ||
                    e instanceof Uint16Array ||
                    e instanceof Int32Array ||
                    e instanceof Uint32Array ||
                    e instanceof Float32Array ||
                    e instanceof Float64Array) &&
                    (e = new Uint8Array(e.buffer, e.byteOffset, e.byteLength)),
                  e instanceof Uint8Array)
                ) {
                  for (var n = e.byteLength, i = [], o = 0; o < n; o++)
                    i[o >>> 2] |= e[o] << (24 - (o % 4) * 8);
                  t.call(this, i, n);
                } else t.apply(this, arguments);
              }).prototype = e;
            }
          })(),
          /** @preserve
            (c) 2012 by C��dric Mesnil. All rights reserved.
             Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
                 - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
                - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
             THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            */
          (function (e) {
            var t = s,
              n = t.lib,
              i = n.WordArray,
              o = n.Hasher,
              r = t.algo,
              a = i.create([
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13,
                1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15,
                8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13,
                3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8,
                11, 6, 15, 13,
              ]),
              c = i.create([
                5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3,
                7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14,
                6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5,
                12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13,
                14, 0, 3, 9, 11,
              ]),
              u = i.create([
                11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8,
                13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14,
                9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9,
                8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12,
                13, 14, 11, 8, 5, 6,
              ]),
              l = i.create([
                8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13,
                15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11,
                8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14,
                6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8,
                13, 6, 5, 15, 13, 11, 11,
              ]),
              d = i.create([0, 1518500249, 1859775393, 2400959708, 2840853838]),
              p = i.create([1352829926, 1548603684, 1836072691, 2053994217, 0]),
              h = (r.RIPEMD160 = o.extend({
                _doReset: function () {
                  this._hash = i.create([
                    1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (var n = 0; n < 16; n++) {
                    var i = t + n,
                      o = e[i];
                    e[i] =
                      (16711935 & ((o << 8) | (o >>> 24))) |
                      (4278255360 & ((o << 24) | (o >>> 8)));
                  }
                  var r,
                    s,
                    h,
                    I,
                    M,
                    C,
                    T,
                    E,
                    D,
                    S,
                    k,
                    R = this._hash.words,
                    L = d.words,
                    A = p.words,
                    O = a.words,
                    b = c.words,
                    N = u.words,
                    P = l.words;
                  for (
                    C = r = R[0],
                      T = s = R[1],
                      E = h = R[2],
                      D = I = R[3],
                      S = M = R[4],
                      n = 0;
                    n < 80;
                    n += 1
                  )
                    (k = (r + e[t + O[n]]) | 0),
                      (k +=
                        n < 16
                          ? f(s, h, I) + L[0]
                          : n < 32
                            ? g(s, h, I) + L[1]
                            : n < 48
                              ? _(s, h, I) + L[2]
                              : n < 64
                                ? v(s, h, I) + L[3]
                                : m(s, h, I) + L[4]),
                      (k = ((k = y((k |= 0), N[n])) + M) | 0),
                      (r = M),
                      (M = I),
                      (I = y(h, 10)),
                      (h = s),
                      (s = k),
                      (k = (C + e[t + b[n]]) | 0),
                      (k +=
                        n < 16
                          ? m(T, E, D) + A[0]
                          : n < 32
                            ? v(T, E, D) + A[1]
                            : n < 48
                              ? _(T, E, D) + A[2]
                              : n < 64
                                ? g(T, E, D) + A[3]
                                : f(T, E, D) + A[4]),
                      (k = ((k = y((k |= 0), P[n])) + S) | 0),
                      (C = S),
                      (S = D),
                      (D = y(E, 10)),
                      (E = T),
                      (T = k);
                  (k = (R[1] + h + D) | 0),
                    (R[1] = (R[2] + I + S) | 0),
                    (R[2] = (R[3] + M + C) | 0),
                    (R[3] = (R[4] + r + T) | 0),
                    (R[4] = (R[0] + s + E) | 0),
                    (R[0] = k);
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    n = 8 * this._nDataBytes,
                    i = 8 * e.sigBytes;
                  (t[i >>> 5] |= 128 << (24 - (i % 32))),
                    (t[14 + (((i + 64) >>> 9) << 4)] =
                      (16711935 & ((n << 8) | (n >>> 24))) |
                      (4278255360 & ((n << 24) | (n >>> 8)))),
                    (e.sigBytes = 4 * (t.length + 1)),
                    this._process();
                  for (var o = this._hash, r = o.words, a = 0; a < 5; a++) {
                    var s = r[a];
                    r[a] =
                      (16711935 & ((s << 8) | (s >>> 24))) |
                      (4278255360 & ((s << 24) | (s >>> 8)));
                  }
                  return o;
                },
                clone: function () {
                  var e = o.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              }));
            function f(e, t, n) {
              return e ^ t ^ n;
            }
            function g(e, t, n) {
              return (e & t) | (~e & n);
            }
            function _(e, t, n) {
              return (e | ~t) ^ n;
            }
            function v(e, t, n) {
              return (e & n) | (t & ~n);
            }
            function m(e, t, n) {
              return e ^ (t | ~n);
            }
            function y(e, t) {
              return (e << t) | (e >>> (32 - t));
            }
            (t.RIPEMD160 = o._createHelper(h)),
              (t.HmacRIPEMD160 = o._createHmacHelper(h));
          })(),
          (function () {
            var e = s,
              t = e.lib.Base,
              n = e.enc.Utf8;
            e.algo.HMAC = t.extend({
              init: function (e, t) {
                (e = this._hasher = new e.init()),
                  'string' == typeof t && (t = n.parse(t));
                var i = e.blockSize,
                  o = 4 * i;
                t.sigBytes > o && (t = e.finalize(t)), t.clamp();
                for (
                  var r = (this._oKey = t.clone()),
                    a = (this._iKey = t.clone()),
                    s = r.words,
                    c = a.words,
                    u = 0;
                  u < i;
                  u++
                )
                  (s[u] ^= 1549556828), (c[u] ^= 909522486);
                (r.sigBytes = a.sigBytes = o), this.reset();
              },
              reset: function () {
                var e = this._hasher;
                e.reset(), e.update(this._iKey);
              },
              update: function (e) {
                return this._hasher.update(e), this;
              },
              finalize: function (e) {
                var t = this._hasher,
                  n = t.finalize(e);
                return t.reset(), t.finalize(this._oKey.clone().concat(n));
              },
            });
          })(),
          (function () {
            var e = s,
              t = e.lib,
              n = t.Base,
              i = t.WordArray,
              o = e.algo,
              r = o.SHA1,
              a = o.HMAC,
              c = (o.PBKDF2 = n.extend({
                cfg: n.extend({ keySize: 4, hasher: r, iterations: 1 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var n = this.cfg,
                      o = a.create(n.hasher, e),
                      r = i.create(),
                      s = i.create([1]),
                      c = r.words,
                      u = s.words,
                      l = n.keySize,
                      d = n.iterations;
                    c.length < l;

                  ) {
                    var p = o.update(t).finalize(s);
                    o.reset();
                    for (
                      var h = p.words, f = h.length, g = p, _ = 1;
                      _ < d;
                      _++
                    ) {
                      (g = o.finalize(g)), o.reset();
                      for (var v = g.words, m = 0; m < f; m++) h[m] ^= v[m];
                    }
                    r.concat(p), u[0]++;
                  }
                  return (r.sigBytes = 4 * l), r;
                },
              }));
            e.PBKDF2 = function (e, t, n) {
              return c.create(n).compute(e, t);
            };
          })(),
          (function () {
            var e = s,
              t = e.lib,
              n = t.Base,
              i = t.WordArray,
              o = e.algo,
              r = o.MD5,
              a = (o.EvpKDF = n.extend({
                cfg: n.extend({ keySize: 4, hasher: r, iterations: 1 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var n,
                      o = this.cfg,
                      r = o.hasher.create(),
                      a = i.create(),
                      s = a.words,
                      c = o.keySize,
                      u = o.iterations;
                    s.length < c;

                  ) {
                    n && r.update(n), (n = r.update(e).finalize(t)), r.reset();
                    for (var l = 1; l < u; l++) (n = r.finalize(n)), r.reset();
                    a.concat(n);
                  }
                  return (a.sigBytes = 4 * c), a;
                },
              }));
            e.EvpKDF = function (e, t, n) {
              return a.create(n).compute(e, t);
            };
          })(),
          (function () {
            var e = s,
              t = e.lib.WordArray,
              n = e.algo,
              i = n.SHA256,
              o = (n.SHA224 = i.extend({
                _doReset: function () {
                  this._hash = new t.init([
                    3238371032, 914150663, 812702999, 4144912697, 4290775857,
                    1750603025, 1694076839, 3204075428,
                  ]);
                },
                _doFinalize: function () {
                  var e = i._doFinalize.call(this);
                  return (e.sigBytes -= 4), e;
                },
              }));
            (e.SHA224 = i._createHelper(o)),
              (e.HmacSHA224 = i._createHmacHelper(o));
          })(),
          (function (e) {
            var t = s,
              n = t.lib,
              i = n.Base,
              o = n.WordArray,
              r = (t.x64 = {});
            (r.Word = i.extend({
              init: function (e, t) {
                (this.high = e), (this.low = t);
              },
            })),
              (r.WordArray = i.extend({
                init: function (e, t) {
                  (e = this.words = e || []),
                    (this.sigBytes = null != t ? t : 8 * e.length);
                },
                toX32: function () {
                  for (
                    var e = this.words, t = e.length, n = [], i = 0;
                    i < t;
                    i++
                  ) {
                    var r = e[i];
                    n.push(r.high), n.push(r.low);
                  }
                  return o.create(n, this.sigBytes);
                },
                clone: function () {
                  for (
                    var e = i.clone.call(this),
                      t = (e.words = this.words.slice(0)),
                      n = t.length,
                      o = 0;
                    o < n;
                    o++
                  )
                    t[o] = t[o].clone();
                  return e;
                },
              }));
          })(),
          (function (e) {
            var t = s,
              n = t.lib,
              i = n.WordArray,
              o = n.Hasher,
              r = t.x64.Word,
              a = t.algo,
              c = [],
              u = [],
              l = [];
            !(function () {
              for (var e = 1, t = 0, n = 0; n < 24; n++) {
                c[e + 5 * t] = (((n + 1) * (n + 2)) / 2) % 64;
                var i = (2 * e + 3 * t) % 5;
                (e = t % 5), (t = i);
              }
              for (e = 0; e < 5; e++)
                for (t = 0; t < 5; t++)
                  u[e + 5 * t] = t + ((2 * e + 3 * t) % 5) * 5;
              for (var o = 1, a = 0; a < 24; a++) {
                for (var s = 0, d = 0, p = 0; p < 7; p++) {
                  if (1 & o) {
                    var h = (1 << p) - 1;
                    h < 32 ? (d ^= 1 << h) : (s ^= 1 << (h - 32));
                  }
                  128 & o ? (o = (o << 1) ^ 113) : (o <<= 1);
                }
                l[a] = r.create(s, d);
              }
            })();
            var d = [];
            !(function () {
              for (var e = 0; e < 25; e++) d[e] = r.create();
            })();
            var p = (a.SHA3 = o.extend({
              cfg: o.cfg.extend({ outputLength: 512 }),
              _doReset: function () {
                for (var e = (this._state = []), t = 0; t < 25; t++)
                  e[t] = new r.init();
                this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
              },
              _doProcessBlock: function (e, t) {
                for (
                  var n = this._state, i = this.blockSize / 2, o = 0;
                  o < i;
                  o++
                ) {
                  var r = e[t + 2 * o],
                    a = e[t + 2 * o + 1];
                  (r =
                    (16711935 & ((r << 8) | (r >>> 24))) |
                    (4278255360 & ((r << 24) | (r >>> 8)))),
                    (a =
                      (16711935 & ((a << 8) | (a >>> 24))) |
                      (4278255360 & ((a << 24) | (a >>> 8)))),
                    ((R = n[o]).high ^= a),
                    (R.low ^= r);
                }
                for (var s = 0; s < 24; s++) {
                  for (var p = 0; p < 5; p++) {
                    for (var h = 0, f = 0, g = 0; g < 5; g++)
                      (h ^= (R = n[p + 5 * g]).high), (f ^= R.low);
                    var _ = d[p];
                    (_.high = h), (_.low = f);
                  }
                  for (p = 0; p < 5; p++) {
                    var v = d[(p + 4) % 5],
                      m = d[(p + 1) % 5],
                      y = m.high,
                      I = m.low;
                    for (
                      h = v.high ^ ((y << 1) | (I >>> 31)),
                        f = v.low ^ ((I << 1) | (y >>> 31)),
                        g = 0;
                      g < 5;
                      g++
                    )
                      ((R = n[p + 5 * g]).high ^= h), (R.low ^= f);
                  }
                  for (var M = 1; M < 25; M++) {
                    var C = (R = n[M]).high,
                      T = R.low,
                      E = c[M];
                    E < 32
                      ? ((h = (C << E) | (T >>> (32 - E))),
                        (f = (T << E) | (C >>> (32 - E))))
                      : ((h = (T << (E - 32)) | (C >>> (64 - E))),
                        (f = (C << (E - 32)) | (T >>> (64 - E))));
                    var D = d[u[M]];
                    (D.high = h), (D.low = f);
                  }
                  var S = d[0],
                    k = n[0];
                  for (S.high = k.high, S.low = k.low, p = 0; p < 5; p++)
                    for (g = 0; g < 5; g++) {
                      var R = n[(M = p + 5 * g)],
                        L = d[M],
                        A = d[((p + 1) % 5) + 5 * g],
                        O = d[((p + 2) % 5) + 5 * g];
                      (R.high = L.high ^ (~A.high & O.high)),
                        (R.low = L.low ^ (~A.low & O.low));
                    }
                  R = n[0];
                  var b = l[s];
                  (R.high ^= b.high), (R.low ^= b.low);
                }
              },
              _doFinalize: function () {
                var t = this._data,
                  n = t.words,
                  o = (this._nDataBytes, 8 * t.sigBytes),
                  r = 32 * this.blockSize;
                (n[o >>> 5] |= 1 << (24 - (o % 32))),
                  (n[((e.ceil((o + 1) / r) * r) >>> 5) - 1] |= 128),
                  (t.sigBytes = 4 * n.length),
                  this._process();
                for (
                  var a = this._state,
                    s = this.cfg.outputLength / 8,
                    c = s / 8,
                    u = [],
                    l = 0;
                  l < c;
                  l++
                ) {
                  var d = a[l],
                    p = d.high,
                    h = d.low;
                  (p =
                    (16711935 & ((p << 8) | (p >>> 24))) |
                    (4278255360 & ((p << 24) | (p >>> 8)))),
                    (h =
                      (16711935 & ((h << 8) | (h >>> 24))) |
                      (4278255360 & ((h << 24) | (h >>> 8)))),
                    u.push(h),
                    u.push(p);
                }
                return new i.init(u, s);
              },
              clone: function () {
                for (
                  var e = o.clone.call(this),
                    t = (e._state = this._state.slice(0)),
                    n = 0;
                  n < 25;
                  n++
                )
                  t[n] = t[n].clone();
                return e;
              },
            }));
            (t.SHA3 = o._createHelper(p)),
              (t.HmacSHA3 = o._createHmacHelper(p));
          })(Math),
          (function () {
            var e = s,
              t = e.lib.Hasher,
              n = e.x64,
              i = n.Word,
              o = n.WordArray,
              r = e.algo;
            function a() {
              return i.create.apply(i, arguments);
            }
            var c = [
                a(1116352408, 3609767458),
                a(1899447441, 602891725),
                a(3049323471, 3964484399),
                a(3921009573, 2173295548),
                a(961987163, 4081628472),
                a(1508970993, 3053834265),
                a(2453635748, 2937671579),
                a(2870763221, 3664609560),
                a(3624381080, 2734883394),
                a(310598401, 1164996542),
                a(607225278, 1323610764),
                a(1426881987, 3590304994),
                a(1925078388, 4068182383),
                a(2162078206, 991336113),
                a(2614888103, 633803317),
                a(3248222580, 3479774868),
                a(3835390401, 2666613458),
                a(4022224774, 944711139),
                a(264347078, 2341262773),
                a(604807628, 2007800933),
                a(770255983, 1495990901),
                a(1249150122, 1856431235),
                a(1555081692, 3175218132),
                a(1996064986, 2198950837),
                a(2554220882, 3999719339),
                a(2821834349, 766784016),
                a(2952996808, 2566594879),
                a(3210313671, 3203337956),
                a(3336571891, 1034457026),
                a(3584528711, 2466948901),
                a(113926993, 3758326383),
                a(338241895, 168717936),
                a(666307205, 1188179964),
                a(773529912, 1546045734),
                a(1294757372, 1522805485),
                a(1396182291, 2643833823),
                a(1695183700, 2343527390),
                a(1986661051, 1014477480),
                a(2177026350, 1206759142),
                a(2456956037, 344077627),
                a(2730485921, 1290863460),
                a(2820302411, 3158454273),
                a(3259730800, 3505952657),
                a(3345764771, 106217008),
                a(3516065817, 3606008344),
                a(3600352804, 1432725776),
                a(4094571909, 1467031594),
                a(275423344, 851169720),
                a(430227734, 3100823752),
                a(506948616, 1363258195),
                a(659060556, 3750685593),
                a(883997877, 3785050280),
                a(958139571, 3318307427),
                a(1322822218, 3812723403),
                a(1537002063, 2003034995),
                a(1747873779, 3602036899),
                a(1955562222, 1575990012),
                a(2024104815, 1125592928),
                a(2227730452, 2716904306),
                a(2361852424, 442776044),
                a(2428436474, 593698344),
                a(2756734187, 3733110249),
                a(3204031479, 2999351573),
                a(3329325298, 3815920427),
                a(3391569614, 3928383900),
                a(3515267271, 566280711),
                a(3940187606, 3454069534),
                a(4118630271, 4000239992),
                a(116418474, 1914138554),
                a(174292421, 2731055270),
                a(289380356, 3203993006),
                a(460393269, 320620315),
                a(685471733, 587496836),
                a(852142971, 1086792851),
                a(1017036298, 365543100),
                a(1126000580, 2618297676),
                a(1288033470, 3409855158),
                a(1501505948, 4234509866),
                a(1607167915, 987167468),
                a(1816402316, 1246189591),
              ],
              u = [];
            !(function () {
              for (var e = 0; e < 80; e++) u[e] = a();
            })();
            var l = (r.SHA512 = t.extend({
              _doReset: function () {
                this._hash = new o.init([
                  new i.init(1779033703, 4089235720),
                  new i.init(3144134277, 2227873595),
                  new i.init(1013904242, 4271175723),
                  new i.init(2773480762, 1595750129),
                  new i.init(1359893119, 2917565137),
                  new i.init(2600822924, 725511199),
                  new i.init(528734635, 4215389547),
                  new i.init(1541459225, 327033209),
                ]);
              },
              _doProcessBlock: function (e, t) {
                for (
                  var n = this._hash.words,
                    i = n[0],
                    o = n[1],
                    r = n[2],
                    a = n[3],
                    s = n[4],
                    l = n[5],
                    d = n[6],
                    p = n[7],
                    h = i.high,
                    f = i.low,
                    g = o.high,
                    _ = o.low,
                    v = r.high,
                    m = r.low,
                    y = a.high,
                    I = a.low,
                    M = s.high,
                    C = s.low,
                    T = l.high,
                    E = l.low,
                    D = d.high,
                    S = d.low,
                    k = p.high,
                    R = p.low,
                    L = h,
                    A = f,
                    O = g,
                    b = _,
                    N = v,
                    P = m,
                    w = y,
                    U = I,
                    G = M,
                    x = C,
                    F = T,
                    q = E,
                    V = D,
                    B = S,
                    H = k,
                    j = R,
                    K = 0;
                  K < 80;
                  K++
                ) {
                  var W,
                    z,
                    $ = u[K];
                  if (K < 16)
                    (z = $.high = 0 | e[t + 2 * K]),
                      (W = $.low = 0 | e[t + 2 * K + 1]);
                  else {
                    var Y = u[K - 15],
                      J = Y.high,
                      X = Y.low,
                      Z =
                        ((J >>> 1) | (X << 31)) ^
                        ((J >>> 8) | (X << 24)) ^
                        (J >>> 7),
                      Q =
                        ((X >>> 1) | (J << 31)) ^
                        ((X >>> 8) | (J << 24)) ^
                        ((X >>> 7) | (J << 25)),
                      ee = u[K - 2],
                      te = ee.high,
                      ne = ee.low,
                      ie =
                        ((te >>> 19) | (ne << 13)) ^
                        ((te << 3) | (ne >>> 29)) ^
                        (te >>> 6),
                      oe =
                        ((ne >>> 19) | (te << 13)) ^
                        ((ne << 3) | (te >>> 29)) ^
                        ((ne >>> 6) | (te << 26)),
                      re = u[K - 7],
                      ae = re.high,
                      se = re.low,
                      ce = u[K - 16],
                      ue = ce.high,
                      le = ce.low;
                    (z =
                      (z =
                        (z = Z + ae + ((W = Q + se) >>> 0 < Q >>> 0 ? 1 : 0)) +
                        ie +
                        ((W += oe) >>> 0 < oe >>> 0 ? 1 : 0)) +
                      ue +
                      ((W += le) >>> 0 < le >>> 0 ? 1 : 0)),
                      ($.high = z),
                      ($.low = W);
                  }
                  var de,
                    pe = (G & F) ^ (~G & V),
                    he = (x & q) ^ (~x & B),
                    fe = (L & O) ^ (L & N) ^ (O & N),
                    ge = (A & b) ^ (A & P) ^ (b & P),
                    _e =
                      ((L >>> 28) | (A << 4)) ^
                      ((L << 30) | (A >>> 2)) ^
                      ((L << 25) | (A >>> 7)),
                    ve =
                      ((A >>> 28) | (L << 4)) ^
                      ((A << 30) | (L >>> 2)) ^
                      ((A << 25) | (L >>> 7)),
                    me =
                      ((G >>> 14) | (x << 18)) ^
                      ((G >>> 18) | (x << 14)) ^
                      ((G << 23) | (x >>> 9)),
                    ye =
                      ((x >>> 14) | (G << 18)) ^
                      ((x >>> 18) | (G << 14)) ^
                      ((x << 23) | (G >>> 9)),
                    Ie = c[K],
                    Me = Ie.high,
                    Ce = Ie.low,
                    Te = H + me + ((de = j + ye) >>> 0 < j >>> 0 ? 1 : 0),
                    Ee = ve + ge;
                  (H = V),
                    (j = B),
                    (V = F),
                    (B = q),
                    (F = G),
                    (q = x),
                    (G =
                      (w +
                        (Te =
                          (Te =
                            (Te =
                              Te + pe + ((de += he) >>> 0 < he >>> 0 ? 1 : 0)) +
                            Me +
                            ((de += Ce) >>> 0 < Ce >>> 0 ? 1 : 0)) +
                          z +
                          ((de += W) >>> 0 < W >>> 0 ? 1 : 0)) +
                        ((x = (U + de) | 0) >>> 0 < U >>> 0 ? 1 : 0)) |
                      0),
                    (w = N),
                    (U = P),
                    (N = O),
                    (P = b),
                    (O = L),
                    (b = A),
                    (L =
                      (Te +
                        (_e + fe + (Ee >>> 0 < ve >>> 0 ? 1 : 0)) +
                        ((A = (de + Ee) | 0) >>> 0 < de >>> 0 ? 1 : 0)) |
                      0);
                }
                (f = i.low = f + A),
                  (i.high = h + L + (f >>> 0 < A >>> 0 ? 1 : 0)),
                  (_ = o.low = _ + b),
                  (o.high = g + O + (_ >>> 0 < b >>> 0 ? 1 : 0)),
                  (m = r.low = m + P),
                  (r.high = v + N + (m >>> 0 < P >>> 0 ? 1 : 0)),
                  (I = a.low = I + U),
                  (a.high = y + w + (I >>> 0 < U >>> 0 ? 1 : 0)),
                  (C = s.low = C + x),
                  (s.high = M + G + (C >>> 0 < x >>> 0 ? 1 : 0)),
                  (E = l.low = E + q),
                  (l.high = T + F + (E >>> 0 < q >>> 0 ? 1 : 0)),
                  (S = d.low = S + B),
                  (d.high = D + V + (S >>> 0 < B >>> 0 ? 1 : 0)),
                  (R = p.low = R + j),
                  (p.high = k + H + (R >>> 0 < j >>> 0 ? 1 : 0));
              },
              _doFinalize: function () {
                var e = this._data,
                  t = e.words,
                  n = 8 * this._nDataBytes,
                  i = 8 * e.sigBytes;
                return (
                  (t[i >>> 5] |= 128 << (24 - (i % 32))),
                  (t[30 + (((i + 128) >>> 10) << 5)] = Math.floor(
                    n / 4294967296
                  )),
                  (t[31 + (((i + 128) >>> 10) << 5)] = n),
                  (e.sigBytes = 4 * t.length),
                  this._process(),
                  this._hash.toX32()
                );
              },
              clone: function () {
                var e = t.clone.call(this);
                return (e._hash = this._hash.clone()), e;
              },
              blockSize: 32,
            }));
            (e.SHA512 = t._createHelper(l)),
              (e.HmacSHA512 = t._createHmacHelper(l));
          })(),
          (function () {
            var e = s,
              t = e.x64,
              n = t.Word,
              i = t.WordArray,
              o = e.algo,
              r = o.SHA512,
              a = (o.SHA384 = r.extend({
                _doReset: function () {
                  this._hash = new i.init([
                    new n.init(3418070365, 3238371032),
                    new n.init(1654270250, 914150663),
                    new n.init(2438529370, 812702999),
                    new n.init(355462360, 4144912697),
                    new n.init(1731405415, 4290775857),
                    new n.init(2394180231, 1750603025),
                    new n.init(3675008525, 1694076839),
                    new n.init(1203062813, 3204075428),
                  ]);
                },
                _doFinalize: function () {
                  var e = r._doFinalize.call(this);
                  return (e.sigBytes -= 16), e;
                },
              }));
            (e.SHA384 = r._createHelper(a)),
              (e.HmacSHA384 = r._createHmacHelper(a));
          })(),
          s.lib.Cipher ||
            (function (e) {
              var t = s,
                n = t.lib,
                i = n.Base,
                o = n.WordArray,
                r = n.BufferedBlockAlgorithm,
                a = t.enc,
                c = (a.Utf8, a.Base64),
                u = t.algo.EvpKDF,
                l = (n.Cipher = r.extend({
                  cfg: i.extend(),
                  createEncryptor: function (e, t) {
                    return this.create(this._ENC_XFORM_MODE, e, t);
                  },
                  createDecryptor: function (e, t) {
                    return this.create(this._DEC_XFORM_MODE, e, t);
                  },
                  init: function (e, t, n) {
                    (this.cfg = this.cfg.extend(n)),
                      (this._xformMode = e),
                      (this._key = t),
                      this.reset();
                  },
                  reset: function () {
                    r.reset.call(this), this._doReset();
                  },
                  process: function (e) {
                    return this._append(e), this._process();
                  },
                  finalize: function (e) {
                    return e && this._append(e), this._doFinalize();
                  },
                  keySize: 4,
                  ivSize: 4,
                  _ENC_XFORM_MODE: 1,
                  _DEC_XFORM_MODE: 2,
                  _createHelper: (function () {
                    function e(e) {
                      return 'string' == typeof e ? y : v;
                    }
                    return function (t) {
                      return {
                        encrypt: function (n, i, o) {
                          return e(i).encrypt(t, n, i, o);
                        },
                        decrypt: function (n, i, o) {
                          return e(i).decrypt(t, n, i, o);
                        },
                      };
                    };
                  })(),
                })),
                d =
                  ((n.StreamCipher = l.extend({
                    _doFinalize: function () {
                      return this._process(!0);
                    },
                    blockSize: 1,
                  })),
                  (t.mode = {})),
                p = (n.BlockCipherMode = i.extend({
                  createEncryptor: function (e, t) {
                    return this.Encryptor.create(e, t);
                  },
                  createDecryptor: function (e, t) {
                    return this.Decryptor.create(e, t);
                  },
                  init: function (e, t) {
                    (this._cipher = e), (this._iv = t);
                  },
                })),
                h = (d.CBC = (function () {
                  var e = p.extend();
                  function t(e, t, n) {
                    var i,
                      o = this._iv;
                    o ? ((i = o), (this._iv = void 0)) : (i = this._prevBlock);
                    for (var r = 0; r < n; r++) e[t + r] ^= i[r];
                  }
                  return (
                    (e.Encryptor = e.extend({
                      processBlock: function (e, n) {
                        var i = this._cipher,
                          o = i.blockSize;
                        t.call(this, e, n, o),
                          i.encryptBlock(e, n),
                          (this._prevBlock = e.slice(n, n + o));
                      },
                    })),
                    (e.Decryptor = e.extend({
                      processBlock: function (e, n) {
                        var i = this._cipher,
                          o = i.blockSize,
                          r = e.slice(n, n + o);
                        i.decryptBlock(e, n),
                          t.call(this, e, n, o),
                          (this._prevBlock = r);
                      },
                    })),
                    e
                  );
                })()),
                f = ((t.pad = {}).Pkcs7 = {
                  pad: function (e, t) {
                    for (
                      var n = 4 * t,
                        i = n - (e.sigBytes % n),
                        r = (i << 24) | (i << 16) | (i << 8) | i,
                        a = [],
                        s = 0;
                      s < i;
                      s += 4
                    )
                      a.push(r);
                    var c = o.create(a, i);
                    e.concat(c);
                  },
                  unpad: function (e) {
                    var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                    e.sigBytes -= t;
                  },
                }),
                g =
                  ((n.BlockCipher = l.extend({
                    cfg: l.cfg.extend({ mode: h, padding: f }),
                    reset: function () {
                      var e;
                      l.reset.call(this);
                      var t = this.cfg,
                        n = t.iv,
                        i = t.mode;
                      this._xformMode == this._ENC_XFORM_MODE
                        ? (e = i.createEncryptor)
                        : ((e = i.createDecryptor), (this._minBufferSize = 1)),
                        this._mode && this._mode.__creator == e
                          ? this._mode.init(this, n && n.words)
                          : ((this._mode = e.call(i, this, n && n.words)),
                            (this._mode.__creator = e));
                    },
                    _doProcessBlock: function (e, t) {
                      this._mode.processBlock(e, t);
                    },
                    _doFinalize: function () {
                      var e,
                        t = this.cfg.padding;
                      return (
                        this._xformMode == this._ENC_XFORM_MODE
                          ? (t.pad(this._data, this.blockSize),
                            (e = this._process(!0)))
                          : ((e = this._process(!0)), t.unpad(e)),
                        e
                      );
                    },
                    blockSize: 4,
                  })),
                  (n.CipherParams = i.extend({
                    init: function (e) {
                      this.mixIn(e);
                    },
                    toString: function (e) {
                      return (e || this.formatter).stringify(this);
                    },
                  }))),
                _ = ((t.format = {}).OpenSSL = {
                  stringify: function (e) {
                    var t = e.ciphertext,
                      n = e.salt;
                    return (
                      n
                        ? o.create([1398893684, 1701076831]).concat(n).concat(t)
                        : t
                    ).toString(c);
                  },
                  parse: function (e) {
                    var t,
                      n = c.parse(e),
                      i = n.words;
                    return (
                      1398893684 == i[0] &&
                        1701076831 == i[1] &&
                        ((t = o.create(i.slice(2, 4))),
                        i.splice(0, 4),
                        (n.sigBytes -= 16)),
                      g.create({ ciphertext: n, salt: t })
                    );
                  },
                }),
                v = (n.SerializableCipher = i.extend({
                  cfg: i.extend({ format: _ }),
                  encrypt: function (e, t, n, i) {
                    i = this.cfg.extend(i);
                    var o = e.createEncryptor(n, i),
                      r = o.finalize(t),
                      a = o.cfg;
                    return g.create({
                      ciphertext: r,
                      key: n,
                      iv: a.iv,
                      algorithm: e,
                      mode: a.mode,
                      padding: a.padding,
                      blockSize: e.blockSize,
                      formatter: i.format,
                    });
                  },
                  decrypt: function (e, t, n, i) {
                    return (
                      (i = this.cfg.extend(i)),
                      (t = this._parse(t, i.format)),
                      e.createDecryptor(n, i).finalize(t.ciphertext)
                    );
                  },
                  _parse: function (e, t) {
                    return 'string' == typeof e ? t.parse(e, this) : e;
                  },
                })),
                m = ((t.kdf = {}).OpenSSL = {
                  execute: function (e, t, n, i) {
                    i || (i = o.random(8));
                    var r = u.create({ keySize: t + n }).compute(e, i),
                      a = o.create(r.words.slice(t), 4 * n);
                    return (
                      (r.sigBytes = 4 * t), g.create({ key: r, iv: a, salt: i })
                    );
                  },
                }),
                y = (n.PasswordBasedCipher = v.extend({
                  cfg: v.cfg.extend({ kdf: m }),
                  encrypt: function (e, t, n, i) {
                    var o = (i = this.cfg.extend(i)).kdf.execute(
                      n,
                      e.keySize,
                      e.ivSize
                    );
                    i.iv = o.iv;
                    var r = v.encrypt.call(this, e, t, o.key, i);
                    return r.mixIn(o), r;
                  },
                  decrypt: function (e, t, n, i) {
                    (i = this.cfg.extend(i)), (t = this._parse(t, i.format));
                    var o = i.kdf.execute(n, e.keySize, e.ivSize, t.salt);
                    return (i.iv = o.iv), v.decrypt.call(this, e, t, o.key, i);
                  },
                }));
            })(),
          (s.mode.CFB = (function () {
            var e = s.lib.BlockCipherMode.extend();
            function t(e, t, n, i) {
              var o,
                r = this._iv;
              r
                ? ((o = r.slice(0)), (this._iv = void 0))
                : (o = this._prevBlock),
                i.encryptBlock(o, 0);
              for (var a = 0; a < n; a++) e[t + a] ^= o[a];
            }
            return (
              (e.Encryptor = e.extend({
                processBlock: function (e, n) {
                  var i = this._cipher,
                    o = i.blockSize;
                  t.call(this, e, n, o, i),
                    (this._prevBlock = e.slice(n, n + o));
                },
              })),
              (e.Decryptor = e.extend({
                processBlock: function (e, n) {
                  var i = this._cipher,
                    o = i.blockSize,
                    r = e.slice(n, n + o);
                  t.call(this, e, n, o, i), (this._prevBlock = r);
                },
              })),
              e
            );
          })()),
          (s.mode.ECB =
            (((o = s.lib.BlockCipherMode.extend()).Encryptor = o.extend({
              processBlock: function (e, t) {
                this._cipher.encryptBlock(e, t);
              },
            })),
            (o.Decryptor = o.extend({
              processBlock: function (e, t) {
                this._cipher.decryptBlock(e, t);
              },
            })),
            o)),
          (s.pad.AnsiX923 = {
            pad: function (e, t) {
              var n = e.sigBytes,
                i = 4 * t,
                o = i - (n % i),
                r = n + o - 1;
              e.clamp(),
                (e.words[r >>> 2] |= o << (24 - (r % 4) * 8)),
                (e.sigBytes += o);
            },
            unpad: function (e) {
              var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
              e.sigBytes -= t;
            },
          }),
          (s.pad.Iso10126 = {
            pad: function (e, t) {
              var n = 4 * t,
                i = n - (e.sigBytes % n);
              e.concat(s.lib.WordArray.random(i - 1)).concat(
                s.lib.WordArray.create([i << 24], 1)
              );
            },
            unpad: function (e) {
              var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
              e.sigBytes -= t;
            },
          }),
          (s.pad.Iso97971 = {
            pad: function (e, t) {
              e.concat(s.lib.WordArray.create([2147483648], 1)),
                s.pad.ZeroPadding.pad(e, t);
            },
            unpad: function (e) {
              s.pad.ZeroPadding.unpad(e), e.sigBytes--;
            },
          }),
          (s.mode.OFB =
            ((i = (n = s.lib.BlockCipherMode.extend()).Encryptor =
              n.extend({
                processBlock: function (e, t) {
                  var n = this._cipher,
                    i = n.blockSize,
                    o = this._iv,
                    r = this._keystream;
                  o &&
                    ((r = this._keystream = o.slice(0)), (this._iv = void 0)),
                    n.encryptBlock(r, 0);
                  for (var a = 0; a < i; a++) e[t + a] ^= r[a];
                },
              })),
            (n.Decryptor = i),
            n)),
          (s.pad.NoPadding = { pad: function () {}, unpad: function () {} }),
          (function (e) {
            var t = s,
              n = t.lib.CipherParams,
              i = t.enc.Hex;
            t.format.Hex = {
              stringify: function (e) {
                return e.ciphertext.toString(i);
              },
              parse: function (e) {
                var t = i.parse(e);
                return n.create({ ciphertext: t });
              },
            };
          })(),
          (function () {
            var e = s,
              t = e.lib.BlockCipher,
              n = e.algo,
              i = [],
              o = [],
              r = [],
              a = [],
              c = [],
              u = [],
              l = [],
              d = [],
              p = [],
              h = [];
            !(function () {
              for (var e = [], t = 0; t < 256; t++)
                e[t] = t < 128 ? t << 1 : (t << 1) ^ 283;
              var n = 0,
                s = 0;
              for (t = 0; t < 256; t++) {
                var f = s ^ (s << 1) ^ (s << 2) ^ (s << 3) ^ (s << 4);
                (f = (f >>> 8) ^ (255 & f) ^ 99), (i[n] = f), (o[f] = n);
                var g = e[n],
                  _ = e[g],
                  v = e[_],
                  m = (257 * e[f]) ^ (16843008 * f);
                (r[n] = (m << 24) | (m >>> 8)),
                  (a[n] = (m << 16) | (m >>> 16)),
                  (c[n] = (m << 8) | (m >>> 24)),
                  (u[n] = m),
                  (m =
                    (16843009 * v) ^ (65537 * _) ^ (257 * g) ^ (16843008 * n)),
                  (l[f] = (m << 24) | (m >>> 8)),
                  (d[f] = (m << 16) | (m >>> 16)),
                  (p[f] = (m << 8) | (m >>> 24)),
                  (h[f] = m),
                  n ? ((n = g ^ e[e[e[v ^ g]]]), (s ^= e[e[s]])) : (n = s = 1);
              }
            })();
            var f = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
              g = (n.AES = t.extend({
                _doReset: function () {
                  if (!this._nRounds || this._keyPriorReset !== this._key) {
                    for (
                      var e = (this._keyPriorReset = this._key),
                        t = e.words,
                        n = e.sigBytes / 4,
                        o = 4 * ((this._nRounds = n + 6) + 1),
                        r = (this._keySchedule = []),
                        a = 0;
                      a < o;
                      a++
                    )
                      a < n
                        ? (r[a] = t[a])
                        : ((u = r[a - 1]),
                          a % n
                            ? n > 6 &&
                              a % n == 4 &&
                              (u =
                                (i[u >>> 24] << 24) |
                                (i[(u >>> 16) & 255] << 16) |
                                (i[(u >>> 8) & 255] << 8) |
                                i[255 & u])
                            : ((u =
                                (i[(u = (u << 8) | (u >>> 24)) >>> 24] << 24) |
                                (i[(u >>> 16) & 255] << 16) |
                                (i[(u >>> 8) & 255] << 8) |
                                i[255 & u]),
                              (u ^= f[(a / n) | 0] << 24)),
                          (r[a] = r[a - n] ^ u));
                    for (
                      var s = (this._invKeySchedule = []), c = 0;
                      c < o;
                      c++
                    ) {
                      if (((a = o - c), c % 4)) var u = r[a];
                      else u = r[a - 4];
                      s[c] =
                        c < 4 || a <= 4
                          ? u
                          : l[i[u >>> 24]] ^
                            d[i[(u >>> 16) & 255]] ^
                            p[i[(u >>> 8) & 255]] ^
                            h[i[255 & u]];
                    }
                  }
                },
                encryptBlock: function (e, t) {
                  this._doCryptBlock(e, t, this._keySchedule, r, a, c, u, i);
                },
                decryptBlock: function (e, t) {
                  var n = e[t + 1];
                  (e[t + 1] = e[t + 3]),
                    (e[t + 3] = n),
                    this._doCryptBlock(
                      e,
                      t,
                      this._invKeySchedule,
                      l,
                      d,
                      p,
                      h,
                      o
                    ),
                    (n = e[t + 1]),
                    (e[t + 1] = e[t + 3]),
                    (e[t + 3] = n);
                },
                _doCryptBlock: function (e, t, n, i, o, r, a, s) {
                  for (
                    var c = this._nRounds,
                      u = e[t] ^ n[0],
                      l = e[t + 1] ^ n[1],
                      d = e[t + 2] ^ n[2],
                      p = e[t + 3] ^ n[3],
                      h = 4,
                      f = 1;
                    f < c;
                    f++
                  ) {
                    var g =
                        i[u >>> 24] ^
                        o[(l >>> 16) & 255] ^
                        r[(d >>> 8) & 255] ^
                        a[255 & p] ^
                        n[h++],
                      _ =
                        i[l >>> 24] ^
                        o[(d >>> 16) & 255] ^
                        r[(p >>> 8) & 255] ^
                        a[255 & u] ^
                        n[h++],
                      v =
                        i[d >>> 24] ^
                        o[(p >>> 16) & 255] ^
                        r[(u >>> 8) & 255] ^
                        a[255 & l] ^
                        n[h++],
                      m =
                        i[p >>> 24] ^
                        o[(u >>> 16) & 255] ^
                        r[(l >>> 8) & 255] ^
                        a[255 & d] ^
                        n[h++];
                    (u = g), (l = _), (d = v), (p = m);
                  }
                  (g =
                    ((s[u >>> 24] << 24) |
                      (s[(l >>> 16) & 255] << 16) |
                      (s[(d >>> 8) & 255] << 8) |
                      s[255 & p]) ^
                    n[h++]),
                    (_ =
                      ((s[l >>> 24] << 24) |
                        (s[(d >>> 16) & 255] << 16) |
                        (s[(p >>> 8) & 255] << 8) |
                        s[255 & u]) ^
                      n[h++]),
                    (v =
                      ((s[d >>> 24] << 24) |
                        (s[(p >>> 16) & 255] << 16) |
                        (s[(u >>> 8) & 255] << 8) |
                        s[255 & l]) ^
                      n[h++]),
                    (m =
                      ((s[p >>> 24] << 24) |
                        (s[(u >>> 16) & 255] << 16) |
                        (s[(l >>> 8) & 255] << 8) |
                        s[255 & d]) ^
                      n[h++]),
                    (e[t] = g),
                    (e[t + 1] = _),
                    (e[t + 2] = v),
                    (e[t + 3] = m);
                },
                keySize: 8,
              }));
            e.AES = t._createHelper(g);
          })(),
          (function () {
            var e = s,
              t = e.lib,
              n = t.WordArray,
              i = t.BlockCipher,
              o = e.algo,
              r = [
                57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59,
                51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31,
                23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29,
                21, 13, 5, 28, 20, 12, 4,
              ],
              a = [
                14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26,
                8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45,
                33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32,
              ],
              c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
              u = [
                {
                  0: 8421888,
                  268435456: 32768,
                  536870912: 8421378,
                  805306368: 2,
                  1073741824: 512,
                  1342177280: 8421890,
                  1610612736: 8389122,
                  1879048192: 8388608,
                  2147483648: 514,
                  2415919104: 8389120,
                  2684354560: 33280,
                  2952790016: 8421376,
                  3221225472: 32770,
                  3489660928: 8388610,
                  3758096384: 0,
                  4026531840: 33282,
                  134217728: 0,
                  402653184: 8421890,
                  671088640: 33282,
                  939524096: 32768,
                  1207959552: 8421888,
                  1476395008: 512,
                  1744830464: 8421378,
                  2013265920: 2,
                  2281701376: 8389120,
                  2550136832: 33280,
                  2818572288: 8421376,
                  3087007744: 8389122,
                  3355443200: 8388610,
                  3623878656: 32770,
                  3892314112: 514,
                  4160749568: 8388608,
                  1: 32768,
                  268435457: 2,
                  536870913: 8421888,
                  805306369: 8388608,
                  1073741825: 8421378,
                  1342177281: 33280,
                  1610612737: 512,
                  1879048193: 8389122,
                  2147483649: 8421890,
                  2415919105: 8421376,
                  2684354561: 8388610,
                  2952790017: 33282,
                  3221225473: 514,
                  3489660929: 8389120,
                  3758096385: 32770,
                  4026531841: 0,
                  134217729: 8421890,
                  402653185: 8421376,
                  671088641: 8388608,
                  939524097: 512,
                  1207959553: 32768,
                  1476395009: 8388610,
                  1744830465: 2,
                  2013265921: 33282,
                  2281701377: 32770,
                  2550136833: 8389122,
                  2818572289: 514,
                  3087007745: 8421888,
                  3355443201: 8389120,
                  3623878657: 0,
                  3892314113: 33280,
                  4160749569: 8421378,
                },
                {
                  0: 1074282512,
                  16777216: 16384,
                  33554432: 524288,
                  50331648: 1074266128,
                  67108864: 1073741840,
                  83886080: 1074282496,
                  100663296: 1073758208,
                  117440512: 16,
                  134217728: 540672,
                  150994944: 1073758224,
                  167772160: 1073741824,
                  184549376: 540688,
                  201326592: 524304,
                  218103808: 0,
                  234881024: 16400,
                  251658240: 1074266112,
                  8388608: 1073758208,
                  25165824: 540688,
                  41943040: 16,
                  58720256: 1073758224,
                  75497472: 1074282512,
                  92274688: 1073741824,
                  109051904: 524288,
                  125829120: 1074266128,
                  142606336: 524304,
                  159383552: 0,
                  176160768: 16384,
                  192937984: 1074266112,
                  209715200: 1073741840,
                  226492416: 540672,
                  243269632: 1074282496,
                  260046848: 16400,
                  268435456: 0,
                  285212672: 1074266128,
                  301989888: 1073758224,
                  318767104: 1074282496,
                  335544320: 1074266112,
                  352321536: 16,
                  369098752: 540688,
                  385875968: 16384,
                  402653184: 16400,
                  419430400: 524288,
                  436207616: 524304,
                  452984832: 1073741840,
                  469762048: 540672,
                  486539264: 1073758208,
                  503316480: 1073741824,
                  520093696: 1074282512,
                  276824064: 540688,
                  293601280: 524288,
                  310378496: 1074266112,
                  327155712: 16384,
                  343932928: 1073758208,
                  360710144: 1074282512,
                  377487360: 16,
                  394264576: 1073741824,
                  411041792: 1074282496,
                  427819008: 1073741840,
                  444596224: 1073758224,
                  461373440: 524304,
                  478150656: 0,
                  494927872: 16400,
                  511705088: 1074266128,
                  528482304: 540672,
                },
                {
                  0: 260,
                  1048576: 0,
                  2097152: 67109120,
                  3145728: 65796,
                  4194304: 65540,
                  5242880: 67108868,
                  6291456: 67174660,
                  7340032: 67174400,
                  8388608: 67108864,
                  9437184: 67174656,
                  10485760: 65792,
                  11534336: 67174404,
                  12582912: 67109124,
                  13631488: 65536,
                  14680064: 4,
                  15728640: 256,
                  524288: 67174656,
                  1572864: 67174404,
                  2621440: 0,
                  3670016: 67109120,
                  4718592: 67108868,
                  5767168: 65536,
                  6815744: 65540,
                  7864320: 260,
                  8912896: 4,
                  9961472: 256,
                  11010048: 67174400,
                  12058624: 65796,
                  13107200: 65792,
                  14155776: 67109124,
                  15204352: 67174660,
                  16252928: 67108864,
                  16777216: 67174656,
                  17825792: 65540,
                  18874368: 65536,
                  19922944: 67109120,
                  20971520: 256,
                  22020096: 67174660,
                  23068672: 67108868,
                  24117248: 0,
                  25165824: 67109124,
                  26214400: 67108864,
                  27262976: 4,
                  28311552: 65792,
                  29360128: 67174400,
                  30408704: 260,
                  31457280: 65796,
                  32505856: 67174404,
                  17301504: 67108864,
                  18350080: 260,
                  19398656: 67174656,
                  20447232: 0,
                  21495808: 65540,
                  22544384: 67109120,
                  23592960: 256,
                  24641536: 67174404,
                  25690112: 65536,
                  26738688: 67174660,
                  27787264: 65796,
                  28835840: 67108868,
                  29884416: 67109124,
                  30932992: 67174400,
                  31981568: 4,
                  33030144: 65792,
                },
                {
                  0: 2151682048,
                  65536: 2147487808,
                  131072: 4198464,
                  196608: 2151677952,
                  262144: 0,
                  327680: 4198400,
                  393216: 2147483712,
                  458752: 4194368,
                  524288: 2147483648,
                  589824: 4194304,
                  655360: 64,
                  720896: 2147487744,
                  786432: 2151678016,
                  851968: 4160,
                  917504: 4096,
                  983040: 2151682112,
                  32768: 2147487808,
                  98304: 64,
                  163840: 2151678016,
                  229376: 2147487744,
                  294912: 4198400,
                  360448: 2151682112,
                  425984: 0,
                  491520: 2151677952,
                  557056: 4096,
                  622592: 2151682048,
                  688128: 4194304,
                  753664: 4160,
                  819200: 2147483648,
                  884736: 4194368,
                  950272: 4198464,
                  1015808: 2147483712,
                  1048576: 4194368,
                  1114112: 4198400,
                  1179648: 2147483712,
                  1245184: 0,
                  1310720: 4160,
                  1376256: 2151678016,
                  1441792: 2151682048,
                  1507328: 2147487808,
                  1572864: 2151682112,
                  1638400: 2147483648,
                  1703936: 2151677952,
                  1769472: 4198464,
                  1835008: 2147487744,
                  1900544: 4194304,
                  1966080: 64,
                  2031616: 4096,
                  1081344: 2151677952,
                  1146880: 2151682112,
                  1212416: 0,
                  1277952: 4198400,
                  1343488: 4194368,
                  1409024: 2147483648,
                  1474560: 2147487808,
                  1540096: 64,
                  1605632: 2147483712,
                  1671168: 4096,
                  1736704: 2147487744,
                  1802240: 2151678016,
                  1867776: 4160,
                  1933312: 2151682048,
                  1998848: 4194304,
                  2064384: 4198464,
                },
                {
                  0: 128,
                  4096: 17039360,
                  8192: 262144,
                  12288: 536870912,
                  16384: 537133184,
                  20480: 16777344,
                  24576: 553648256,
                  28672: 262272,
                  32768: 16777216,
                  36864: 537133056,
                  40960: 536871040,
                  45056: 553910400,
                  49152: 553910272,
                  53248: 0,
                  57344: 17039488,
                  61440: 553648128,
                  2048: 17039488,
                  6144: 553648256,
                  10240: 128,
                  14336: 17039360,
                  18432: 262144,
                  22528: 537133184,
                  26624: 553910272,
                  30720: 536870912,
                  34816: 537133056,
                  38912: 0,
                  43008: 553910400,
                  47104: 16777344,
                  51200: 536871040,
                  55296: 553648128,
                  59392: 16777216,
                  63488: 262272,
                  65536: 262144,
                  69632: 128,
                  73728: 536870912,
                  77824: 553648256,
                  81920: 16777344,
                  86016: 553910272,
                  90112: 537133184,
                  94208: 16777216,
                  98304: 553910400,
                  102400: 553648128,
                  106496: 17039360,
                  110592: 537133056,
                  114688: 262272,
                  118784: 536871040,
                  122880: 0,
                  126976: 17039488,
                  67584: 553648256,
                  71680: 16777216,
                  75776: 17039360,
                  79872: 537133184,
                  83968: 536870912,
                  88064: 17039488,
                  92160: 128,
                  96256: 553910272,
                  100352: 262272,
                  104448: 553910400,
                  108544: 0,
                  112640: 553648128,
                  116736: 16777344,
                  120832: 262144,
                  124928: 537133056,
                  129024: 536871040,
                },
                {
                  0: 268435464,
                  256: 8192,
                  512: 270532608,
                  768: 270540808,
                  1024: 268443648,
                  1280: 2097152,
                  1536: 2097160,
                  1792: 268435456,
                  2048: 0,
                  2304: 268443656,
                  2560: 2105344,
                  2816: 8,
                  3072: 270532616,
                  3328: 2105352,
                  3584: 8200,
                  3840: 270540800,
                  128: 270532608,
                  384: 270540808,
                  640: 8,
                  896: 2097152,
                  1152: 2105352,
                  1408: 268435464,
                  1664: 268443648,
                  1920: 8200,
                  2176: 2097160,
                  2432: 8192,
                  2688: 268443656,
                  2944: 270532616,
                  3200: 0,
                  3456: 270540800,
                  3712: 2105344,
                  3968: 268435456,
                  4096: 268443648,
                  4352: 270532616,
                  4608: 270540808,
                  4864: 8200,
                  5120: 2097152,
                  5376: 268435456,
                  5632: 268435464,
                  5888: 2105344,
                  6144: 2105352,
                  6400: 0,
                  6656: 8,
                  6912: 270532608,
                  7168: 8192,
                  7424: 268443656,
                  7680: 270540800,
                  7936: 2097160,
                  4224: 8,
                  4480: 2105344,
                  4736: 2097152,
                  4992: 268435464,
                  5248: 268443648,
                  5504: 8200,
                  5760: 270540808,
                  6016: 270532608,
                  6272: 270540800,
                  6528: 270532616,
                  6784: 8192,
                  7040: 2105352,
                  7296: 2097160,
                  7552: 0,
                  7808: 268435456,
                  8064: 268443656,
                },
                {
                  0: 1048576,
                  16: 33555457,
                  32: 1024,
                  48: 1049601,
                  64: 34604033,
                  80: 0,
                  96: 1,
                  112: 34603009,
                  128: 33555456,
                  144: 1048577,
                  160: 33554433,
                  176: 34604032,
                  192: 34603008,
                  208: 1025,
                  224: 1049600,
                  240: 33554432,
                  8: 34603009,
                  24: 0,
                  40: 33555457,
                  56: 34604032,
                  72: 1048576,
                  88: 33554433,
                  104: 33554432,
                  120: 1025,
                  136: 1049601,
                  152: 33555456,
                  168: 34603008,
                  184: 1048577,
                  200: 1024,
                  216: 34604033,
                  232: 1,
                  248: 1049600,
                  256: 33554432,
                  272: 1048576,
                  288: 33555457,
                  304: 34603009,
                  320: 1048577,
                  336: 33555456,
                  352: 34604032,
                  368: 1049601,
                  384: 1025,
                  400: 34604033,
                  416: 1049600,
                  432: 1,
                  448: 0,
                  464: 34603008,
                  480: 33554433,
                  496: 1024,
                  264: 1049600,
                  280: 33555457,
                  296: 34603009,
                  312: 1,
                  328: 33554432,
                  344: 1048576,
                  360: 1025,
                  376: 34604032,
                  392: 33554433,
                  408: 34603008,
                  424: 0,
                  440: 34604033,
                  456: 1049601,
                  472: 1024,
                  488: 33555456,
                  504: 1048577,
                },
                {
                  0: 134219808,
                  1: 131072,
                  2: 134217728,
                  3: 32,
                  4: 131104,
                  5: 134350880,
                  6: 134350848,
                  7: 2048,
                  8: 134348800,
                  9: 134219776,
                  10: 133120,
                  11: 134348832,
                  12: 2080,
                  13: 0,
                  14: 134217760,
                  15: 133152,
                  2147483648: 2048,
                  2147483649: 134350880,
                  2147483650: 134219808,
                  2147483651: 134217728,
                  2147483652: 134348800,
                  2147483653: 133120,
                  2147483654: 133152,
                  2147483655: 32,
                  2147483656: 134217760,
                  2147483657: 2080,
                  2147483658: 131104,
                  2147483659: 134350848,
                  2147483660: 0,
                  2147483661: 134348832,
                  2147483662: 134219776,
                  2147483663: 131072,
                  16: 133152,
                  17: 134350848,
                  18: 32,
                  19: 2048,
                  20: 134219776,
                  21: 134217760,
                  22: 134348832,
                  23: 131072,
                  24: 0,
                  25: 131104,
                  26: 134348800,
                  27: 134219808,
                  28: 134350880,
                  29: 133120,
                  30: 2080,
                  31: 134217728,
                  2147483664: 131072,
                  2147483665: 2048,
                  2147483666: 134348832,
                  2147483667: 133152,
                  2147483668: 32,
                  2147483669: 134348800,
                  2147483670: 134217728,
                  2147483671: 134219808,
                  2147483672: 134350880,
                  2147483673: 134217760,
                  2147483674: 134219776,
                  2147483675: 0,
                  2147483676: 133120,
                  2147483677: 2080,
                  2147483678: 131104,
                  2147483679: 134350848,
                },
              ],
              l = [
                4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504,
                2147483679,
              ],
              d = (o.DES = i.extend({
                _doReset: function () {
                  for (var e = this._key.words, t = [], n = 0; n < 56; n++) {
                    var i = r[n] - 1;
                    t[n] = (e[i >>> 5] >>> (31 - (i % 32))) & 1;
                  }
                  for (var o = (this._subKeys = []), s = 0; s < 16; s++) {
                    var u = (o[s] = []),
                      l = c[s];
                    for (n = 0; n < 24; n++)
                      (u[(n / 6) | 0] |=
                        t[(a[n] - 1 + l) % 28] << (31 - (n % 6))),
                        (u[4 + ((n / 6) | 0)] |=
                          t[28 + ((a[n + 24] - 1 + l) % 28)] << (31 - (n % 6)));
                    for (u[0] = (u[0] << 1) | (u[0] >>> 31), n = 1; n < 7; n++)
                      u[n] = u[n] >>> (4 * (n - 1) + 3);
                    u[7] = (u[7] << 5) | (u[7] >>> 27);
                  }
                  var d = (this._invSubKeys = []);
                  for (n = 0; n < 16; n++) d[n] = o[15 - n];
                },
                encryptBlock: function (e, t) {
                  this._doCryptBlock(e, t, this._subKeys);
                },
                decryptBlock: function (e, t) {
                  this._doCryptBlock(e, t, this._invSubKeys);
                },
                _doCryptBlock: function (e, t, n) {
                  (this._lBlock = e[t]),
                    (this._rBlock = e[t + 1]),
                    p.call(this, 4, 252645135),
                    p.call(this, 16, 65535),
                    h.call(this, 2, 858993459),
                    h.call(this, 8, 16711935),
                    p.call(this, 1, 1431655765);
                  for (var i = 0; i < 16; i++) {
                    for (
                      var o = n[i],
                        r = this._lBlock,
                        a = this._rBlock,
                        s = 0,
                        c = 0;
                      c < 8;
                      c++
                    )
                      s |= u[c][((a ^ o[c]) & l[c]) >>> 0];
                    (this._lBlock = a), (this._rBlock = r ^ s);
                  }
                  var d = this._lBlock;
                  (this._lBlock = this._rBlock),
                    (this._rBlock = d),
                    p.call(this, 1, 1431655765),
                    h.call(this, 8, 16711935),
                    h.call(this, 2, 858993459),
                    p.call(this, 16, 65535),
                    p.call(this, 4, 252645135),
                    (e[t] = this._lBlock),
                    (e[t + 1] = this._rBlock);
                },
                keySize: 2,
                ivSize: 2,
                blockSize: 2,
              }));
            function p(e, t) {
              var n = ((this._lBlock >>> e) ^ this._rBlock) & t;
              (this._rBlock ^= n), (this._lBlock ^= n << e);
            }
            function h(e, t) {
              var n = ((this._rBlock >>> e) ^ this._lBlock) & t;
              (this._lBlock ^= n), (this._rBlock ^= n << e);
            }
            e.DES = i._createHelper(d);
            var f = (o.TripleDES = i.extend({
              _doReset: function () {
                var e = this._key.words;
                if (2 !== e.length && 4 !== e.length && e.length < 6)
                  throw new Error(
                    'Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.'
                  );
                var t = e.slice(0, 2),
                  i = e.length < 4 ? e.slice(0, 2) : e.slice(2, 4),
                  o = e.length < 6 ? e.slice(0, 2) : e.slice(4, 6);
                (this._des1 = d.createEncryptor(n.create(t))),
                  (this._des2 = d.createEncryptor(n.create(i))),
                  (this._des3 = d.createEncryptor(n.create(o)));
              },
              encryptBlock: function (e, t) {
                this._des1.encryptBlock(e, t),
                  this._des2.decryptBlock(e, t),
                  this._des3.encryptBlock(e, t);
              },
              decryptBlock: function (e, t) {
                this._des3.decryptBlock(e, t),
                  this._des2.encryptBlock(e, t),
                  this._des1.decryptBlock(e, t);
              },
              keySize: 6,
              ivSize: 2,
              blockSize: 2,
            }));
            e.TripleDES = i._createHelper(f);
          })(),
          (function () {
            var e = s,
              t = e.lib.StreamCipher,
              n = e.algo,
              i = (n.RC4 = t.extend({
                _doReset: function () {
                  for (
                    var e = this._key,
                      t = e.words,
                      n = e.sigBytes,
                      i = (this._S = []),
                      o = 0;
                    o < 256;
                    o++
                  )
                    i[o] = o;
                  o = 0;
                  for (var r = 0; o < 256; o++) {
                    var a = o % n,
                      s = (t[a >>> 2] >>> (24 - (a % 4) * 8)) & 255;
                    r = (r + i[o] + s) % 256;
                    var c = i[o];
                    (i[o] = i[r]), (i[r] = c);
                  }
                  this._i = this._j = 0;
                },
                _doProcessBlock: function (e, t) {
                  e[t] ^= o.call(this);
                },
                keySize: 8,
                ivSize: 0,
              }));
            function o() {
              for (
                var e = this._S, t = this._i, n = this._j, i = 0, o = 0;
                o < 4;
                o++
              ) {
                n = (n + e[(t = (t + 1) % 256)]) % 256;
                var r = e[t];
                (e[t] = e[n]),
                  (e[n] = r),
                  (i |= e[(e[t] + e[n]) % 256] << (24 - 8 * o));
              }
              return (this._i = t), (this._j = n), i;
            }
            e.RC4 = t._createHelper(i);
            var r = (n.RC4Drop = i.extend({
              cfg: i.cfg.extend({ drop: 192 }),
              _doReset: function () {
                i._doReset.call(this);
                for (var e = this.cfg.drop; e > 0; e--) o.call(this);
              },
            }));
            e.RC4Drop = t._createHelper(r);
          })(),
          /** @preserve
           * Counter block mode compatible with  Dr Brian Gladman fileenc.c
           * derived from CryptoJS.mode.CTR
           * Jan Hruby jhruby.web@gmail.com
           */
          (s.mode.CTRGladman = (function () {
            var e = s.lib.BlockCipherMode.extend();
            function t(e) {
              if (255 & ~(e >> 24)) e += 1 << 24;
              else {
                var t = (e >> 16) & 255,
                  n = (e >> 8) & 255,
                  i = 255 & e;
                255 === t
                  ? ((t = 0),
                    255 === n ? ((n = 0), 255 === i ? (i = 0) : ++i) : ++n)
                  : ++t,
                  (e = 0),
                  (e += t << 16),
                  (e += n << 8),
                  (e += i);
              }
              return e;
            }
            var n = (e.Encryptor = e.extend({
              processBlock: function (e, n) {
                var i,
                  o = this._cipher,
                  r = o.blockSize,
                  a = this._iv,
                  s = this._counter;
                a && ((s = this._counter = a.slice(0)), (this._iv = void 0)),
                  0 === ((i = s)[0] = t(i[0])) && (i[1] = t(i[1]));
                var c = s.slice(0);
                o.encryptBlock(c, 0);
                for (var u = 0; u < r; u++) e[n + u] ^= c[u];
              },
            }));
            return (e.Decryptor = n), e;
          })()),
          (function () {
            var e = s,
              t = e.lib.StreamCipher,
              n = e.algo,
              i = [],
              o = [],
              r = [],
              a = (n.Rabbit = t.extend({
                _doReset: function () {
                  for (
                    var e = this._key.words, t = this.cfg.iv, n = 0;
                    n < 4;
                    n++
                  )
                    e[n] =
                      (16711935 & ((e[n] << 8) | (e[n] >>> 24))) |
                      (4278255360 & ((e[n] << 24) | (e[n] >>> 8)));
                  var i = (this._X = [
                      e[0],
                      (e[3] << 16) | (e[2] >>> 16),
                      e[1],
                      (e[0] << 16) | (e[3] >>> 16),
                      e[2],
                      (e[1] << 16) | (e[0] >>> 16),
                      e[3],
                      (e[2] << 16) | (e[1] >>> 16),
                    ]),
                    o = (this._C = [
                      (e[2] << 16) | (e[2] >>> 16),
                      (4294901760 & e[0]) | (65535 & e[1]),
                      (e[3] << 16) | (e[3] >>> 16),
                      (4294901760 & e[1]) | (65535 & e[2]),
                      (e[0] << 16) | (e[0] >>> 16),
                      (4294901760 & e[2]) | (65535 & e[3]),
                      (e[1] << 16) | (e[1] >>> 16),
                      (4294901760 & e[3]) | (65535 & e[0]),
                    ]);
                  for (this._b = 0, n = 0; n < 4; n++) c.call(this);
                  for (n = 0; n < 8; n++) o[n] ^= i[(n + 4) & 7];
                  if (t) {
                    var r = t.words,
                      a = r[0],
                      s = r[1],
                      u =
                        (16711935 & ((a << 8) | (a >>> 24))) |
                        (4278255360 & ((a << 24) | (a >>> 8))),
                      l =
                        (16711935 & ((s << 8) | (s >>> 24))) |
                        (4278255360 & ((s << 24) | (s >>> 8))),
                      d = (u >>> 16) | (4294901760 & l),
                      p = (l << 16) | (65535 & u);
                    for (
                      o[0] ^= u,
                        o[1] ^= d,
                        o[2] ^= l,
                        o[3] ^= p,
                        o[4] ^= u,
                        o[5] ^= d,
                        o[6] ^= l,
                        o[7] ^= p,
                        n = 0;
                      n < 4;
                      n++
                    )
                      c.call(this);
                  }
                },
                _doProcessBlock: function (e, t) {
                  var n = this._X;
                  c.call(this),
                    (i[0] = n[0] ^ (n[5] >>> 16) ^ (n[3] << 16)),
                    (i[1] = n[2] ^ (n[7] >>> 16) ^ (n[5] << 16)),
                    (i[2] = n[4] ^ (n[1] >>> 16) ^ (n[7] << 16)),
                    (i[3] = n[6] ^ (n[3] >>> 16) ^ (n[1] << 16));
                  for (var o = 0; o < 4; o++)
                    (i[o] =
                      (16711935 & ((i[o] << 8) | (i[o] >>> 24))) |
                      (4278255360 & ((i[o] << 24) | (i[o] >>> 8)))),
                      (e[t + o] ^= i[o]);
                },
                blockSize: 4,
                ivSize: 2,
              }));
            function c() {
              for (var e = this._X, t = this._C, n = 0; n < 8; n++) o[n] = t[n];
              for (
                t[0] = (t[0] + 1295307597 + this._b) | 0,
                  t[1] =
                    (t[1] + 3545052371 + (t[0] >>> 0 < o[0] >>> 0 ? 1 : 0)) | 0,
                  t[2] =
                    (t[2] + 886263092 + (t[1] >>> 0 < o[1] >>> 0 ? 1 : 0)) | 0,
                  t[3] =
                    (t[3] + 1295307597 + (t[2] >>> 0 < o[2] >>> 0 ? 1 : 0)) | 0,
                  t[4] =
                    (t[4] + 3545052371 + (t[3] >>> 0 < o[3] >>> 0 ? 1 : 0)) | 0,
                  t[5] =
                    (t[5] + 886263092 + (t[4] >>> 0 < o[4] >>> 0 ? 1 : 0)) | 0,
                  t[6] =
                    (t[6] + 1295307597 + (t[5] >>> 0 < o[5] >>> 0 ? 1 : 0)) | 0,
                  t[7] =
                    (t[7] + 3545052371 + (t[6] >>> 0 < o[6] >>> 0 ? 1 : 0)) | 0,
                  this._b = t[7] >>> 0 < o[7] >>> 0 ? 1 : 0,
                  n = 0;
                n < 8;
                n++
              ) {
                var i = e[n] + t[n],
                  a = 65535 & i,
                  s = i >>> 16,
                  c = ((((a * a) >>> 17) + a * s) >>> 15) + s * s,
                  u = (((4294901760 & i) * i) | 0) + (((65535 & i) * i) | 0);
                r[n] = c ^ u;
              }
              (e[0] =
                (r[0] +
                  ((r[7] << 16) | (r[7] >>> 16)) +
                  ((r[6] << 16) | (r[6] >>> 16))) |
                0),
                (e[1] = (r[1] + ((r[0] << 8) | (r[0] >>> 24)) + r[7]) | 0),
                (e[2] =
                  (r[2] +
                    ((r[1] << 16) | (r[1] >>> 16)) +
                    ((r[0] << 16) | (r[0] >>> 16))) |
                  0),
                (e[3] = (r[3] + ((r[2] << 8) | (r[2] >>> 24)) + r[1]) | 0),
                (e[4] =
                  (r[4] +
                    ((r[3] << 16) | (r[3] >>> 16)) +
                    ((r[2] << 16) | (r[2] >>> 16))) |
                  0),
                (e[5] = (r[5] + ((r[4] << 8) | (r[4] >>> 24)) + r[3]) | 0),
                (e[6] =
                  (r[6] +
                    ((r[5] << 16) | (r[5] >>> 16)) +
                    ((r[4] << 16) | (r[4] >>> 16))) |
                  0),
                (e[7] = (r[7] + ((r[6] << 8) | (r[6] >>> 24)) + r[5]) | 0);
            }
            e.Rabbit = t._createHelper(a);
          })(),
          (s.mode.CTR = (function () {
            var e = s.lib.BlockCipherMode.extend(),
              t = (e.Encryptor = e.extend({
                processBlock: function (e, t) {
                  var n = this._cipher,
                    i = n.blockSize,
                    o = this._iv,
                    r = this._counter;
                  o && ((r = this._counter = o.slice(0)), (this._iv = void 0));
                  var a = r.slice(0);
                  n.encryptBlock(a, 0), (r[i - 1] = (r[i - 1] + 1) | 0);
                  for (var s = 0; s < i; s++) e[t + s] ^= a[s];
                },
              }));
            return (e.Decryptor = t), e;
          })()),
          (function () {
            var e = s,
              t = e.lib.StreamCipher,
              n = e.algo,
              i = [],
              o = [],
              r = [],
              a = (n.RabbitLegacy = t.extend({
                _doReset: function () {
                  var e = this._key.words,
                    t = this.cfg.iv,
                    n = (this._X = [
                      e[0],
                      (e[3] << 16) | (e[2] >>> 16),
                      e[1],
                      (e[0] << 16) | (e[3] >>> 16),
                      e[2],
                      (e[1] << 16) | (e[0] >>> 16),
                      e[3],
                      (e[2] << 16) | (e[1] >>> 16),
                    ]),
                    i = (this._C = [
                      (e[2] << 16) | (e[2] >>> 16),
                      (4294901760 & e[0]) | (65535 & e[1]),
                      (e[3] << 16) | (e[3] >>> 16),
                      (4294901760 & e[1]) | (65535 & e[2]),
                      (e[0] << 16) | (e[0] >>> 16),
                      (4294901760 & e[2]) | (65535 & e[3]),
                      (e[1] << 16) | (e[1] >>> 16),
                      (4294901760 & e[3]) | (65535 & e[0]),
                    ]);
                  this._b = 0;
                  for (var o = 0; o < 4; o++) c.call(this);
                  for (o = 0; o < 8; o++) i[o] ^= n[(o + 4) & 7];
                  if (t) {
                    var r = t.words,
                      a = r[0],
                      s = r[1],
                      u =
                        (16711935 & ((a << 8) | (a >>> 24))) |
                        (4278255360 & ((a << 24) | (a >>> 8))),
                      l =
                        (16711935 & ((s << 8) | (s >>> 24))) |
                        (4278255360 & ((s << 24) | (s >>> 8))),
                      d = (u >>> 16) | (4294901760 & l),
                      p = (l << 16) | (65535 & u);
                    for (
                      i[0] ^= u,
                        i[1] ^= d,
                        i[2] ^= l,
                        i[3] ^= p,
                        i[4] ^= u,
                        i[5] ^= d,
                        i[6] ^= l,
                        i[7] ^= p,
                        o = 0;
                      o < 4;
                      o++
                    )
                      c.call(this);
                  }
                },
                _doProcessBlock: function (e, t) {
                  var n = this._X;
                  c.call(this),
                    (i[0] = n[0] ^ (n[5] >>> 16) ^ (n[3] << 16)),
                    (i[1] = n[2] ^ (n[7] >>> 16) ^ (n[5] << 16)),
                    (i[2] = n[4] ^ (n[1] >>> 16) ^ (n[7] << 16)),
                    (i[3] = n[6] ^ (n[3] >>> 16) ^ (n[1] << 16));
                  for (var o = 0; o < 4; o++)
                    (i[o] =
                      (16711935 & ((i[o] << 8) | (i[o] >>> 24))) |
                      (4278255360 & ((i[o] << 24) | (i[o] >>> 8)))),
                      (e[t + o] ^= i[o]);
                },
                blockSize: 4,
                ivSize: 2,
              }));
            function c() {
              for (var e = this._X, t = this._C, n = 0; n < 8; n++) o[n] = t[n];
              for (
                t[0] = (t[0] + 1295307597 + this._b) | 0,
                  t[1] =
                    (t[1] + 3545052371 + (t[0] >>> 0 < o[0] >>> 0 ? 1 : 0)) | 0,
                  t[2] =
                    (t[2] + 886263092 + (t[1] >>> 0 < o[1] >>> 0 ? 1 : 0)) | 0,
                  t[3] =
                    (t[3] + 1295307597 + (t[2] >>> 0 < o[2] >>> 0 ? 1 : 0)) | 0,
                  t[4] =
                    (t[4] + 3545052371 + (t[3] >>> 0 < o[3] >>> 0 ? 1 : 0)) | 0,
                  t[5] =
                    (t[5] + 886263092 + (t[4] >>> 0 < o[4] >>> 0 ? 1 : 0)) | 0,
                  t[6] =
                    (t[6] + 1295307597 + (t[5] >>> 0 < o[5] >>> 0 ? 1 : 0)) | 0,
                  t[7] =
                    (t[7] + 3545052371 + (t[6] >>> 0 < o[6] >>> 0 ? 1 : 0)) | 0,
                  this._b = t[7] >>> 0 < o[7] >>> 0 ? 1 : 0,
                  n = 0;
                n < 8;
                n++
              ) {
                var i = e[n] + t[n],
                  a = 65535 & i,
                  s = i >>> 16,
                  c = ((((a * a) >>> 17) + a * s) >>> 15) + s * s,
                  u = (((4294901760 & i) * i) | 0) + (((65535 & i) * i) | 0);
                r[n] = c ^ u;
              }
              (e[0] =
                (r[0] +
                  ((r[7] << 16) | (r[7] >>> 16)) +
                  ((r[6] << 16) | (r[6] >>> 16))) |
                0),
                (e[1] = (r[1] + ((r[0] << 8) | (r[0] >>> 24)) + r[7]) | 0),
                (e[2] =
                  (r[2] +
                    ((r[1] << 16) | (r[1] >>> 16)) +
                    ((r[0] << 16) | (r[0] >>> 16))) |
                  0),
                (e[3] = (r[3] + ((r[2] << 8) | (r[2] >>> 24)) + r[1]) | 0),
                (e[4] =
                  (r[4] +
                    ((r[3] << 16) | (r[3] >>> 16)) +
                    ((r[2] << 16) | (r[2] >>> 16))) |
                  0),
                (e[5] = (r[5] + ((r[4] << 8) | (r[4] >>> 24)) + r[3]) | 0),
                (e[6] =
                  (r[6] +
                    ((r[5] << 16) | (r[5] >>> 16)) +
                    ((r[4] << 16) | (r[4] >>> 16))) |
                  0),
                (e[7] = (r[7] + ((r[6] << 8) | (r[6] >>> 24)) + r[5]) | 0);
            }
            e.RabbitLegacy = t._createHelper(a);
          })(),
          (s.pad.ZeroPadding = {
            pad: function (e, t) {
              var n = 4 * t;
              e.clamp(), (e.sigBytes += n - (e.sigBytes % n || n));
            },
            unpad: function (e) {
              var t = e.words,
                n = e.sigBytes - 1;
              for (n = e.sigBytes - 1; n >= 0; n--)
                if ((t[n >>> 2] >>> (24 - (n % 4) * 8)) & 255) {
                  e.sigBytes = n + 1;
                  break;
                }
            },
          }),
          s);
      }),
      c((u = { exports: {} }), u.exports),
      u.exports);
  return (function () {
    function t(n) {
      e(this, t);
      var i = n.isArray,
        o = n.isMap,
        r = n.isDevMode;
      (this._isArray = i),
        (this._isMap = o),
        (this._isDevMode = r),
        (this._interceptProfanityList = []),
        (this._interceptFilter = null),
        (this._interceptRegExpList = []),
        (this._replacingProfanityMap = new Map()),
        (this._replacingFilter = null),
        (this._replacingRegExpMap = new Map()),
        (this._key = ''),
        (this._iv = ''),
        (this._decryptOptions = void 0),
        (this._n = 'TIMProfanityFilterPlugin'),
        !0 === r &&
          console.log(''.concat(this._n, '.VERSION:').concat('1.1.0'));
    }
    return (
      n(t, [
        {
          key: 'onToken',
          value: function (e) {
            (this._key = f.enc.Utf8.parse(e.slice(0, 32))),
              (this._iv = this._key),
              (this._decryptOptions = {
                iv: this._iv,
                mode: f.mode.CBC,
                padding: f.pad.Pkcs7,
              });
          },
        },
        {
          key: 'onLexiconSliced',
          value: function (e) {
            if (this._isArray(e) && 0 !== e.length) {
              var t,
                n,
                i,
                o = s(e);
              try {
                for (o.s(); !(i = o.n()).done; ) {
                  var r = i.value,
                    a = r.filterType,
                    c = r.profanityType,
                    u = r.profanity,
                    l = r.replacement;
                  (t = this._getDecryptedString(u)),
                    (n = this._getDecryptedString(l)),
                    1 === a
                      ? 1 === c
                        ? this._interceptProfanityList.push(t)
                        : 2 === c && this._interceptRegExpList.push(t)
                      : 2 === a &&
                        (1 === c
                          ? this._replacingProfanityMap.set(t, n)
                          : 2 === c && this._replacingRegExpMap.set(t, n));
                }
              } catch (d) {
                o.e(d);
              } finally {
                o.f();
              }
            }
          },
        },
        {
          key: '_getDecryptedString',
          value: function (e) {
            var t = f.AES.decrypt(e, this._key, this._decryptOptions);
            return f.enc.Utf8.stringify(t).toLowerCase();
          },
        },
        {
          key: 'onLexiconCompleted',
          value: function (e) {
            this.onLexiconSliced(e),
              (this._interceptFilter = new d({
                input: this._interceptProfanityList,
                isArray: this._isArray,
                isMap: this._isMap,
              })),
              (this._replacingFilter = new d({
                input: this._replacingProfanityMap,
                isArray: this._isArray,
                isMap: this._isMap,
              })),
              !0 === this._isDevMode &&
                (console.log(
                  ''.concat(this._n, ' _interceptProfanityList ->'),
                  this._interceptProfanityList
                ),
                console.log(
                  ''.concat(this._n, ' _interceptRegExpList ->'),
                  this._interceptRegExpList
                ),
                console.log(
                  ''.concat(this._n, ' _replacingProfanityMap ->'),
                  this._replacingProfanityMap
                ),
                console.log(
                  ''.concat(this._n, ' _replacingRegExpMap ->'),
                  this._replacingRegExpMap
                ));
          },
        },
        {
          key: 'filter',
          value: function (e) {
            var t = { type: 0, modifiedText: e };
            if ('string' != typeof e)
              return (
                !0 === this._isDevMode &&
                  console.warn(
                    ''.concat(
                      this._n,
                      '.filter invalid params, string required!'
                    )
                  ),
                t
              );
            if (
              !0 ===
              this._interceptFilter.filter({ text: e, replacingEnabled: !1 })
                .isMatched
            )
              return (t.type = 1), t;
            for (
              var n = !1, o = 0, r = this._interceptRegExpList.length;
              o < r;
              o++
            )
              if (
                new RegExp(this._interceptRegExpList[o], 'gi').test(
                  e.toLowerCase()
                )
              ) {
                n = !0;
                break;
              }
            if (n) return (t.type = 1), t;
            var a = this._replacingFilter.filter({
              text: e,
              replacingEnabled: !0,
            });
            !0 === a.isMatched &&
              ((t.type = 2), (t.modifiedText = a.modifiedText));
            var c,
              u = t.modifiedText,
              l = null,
              d = s(this._replacingRegExpMap);
            try {
              for (d.s(); !(c = d.n()).done; ) {
                var p = i(c.value, 2),
                  h = p[0],
                  f = p[1];
                (l = new RegExp(h, 'gi')), (u = u.replace(l, f));
              }
            } catch (g) {
              d.e(g);
            } finally {
              d.f();
            }
            return u !== e && ((t.type = 2), (t.modifiedText = u)), t;
          },
        },
        {
          key: 'reset',
          value: function () {
            (this._isArray = null),
              (this._isMap = null),
              (this._interceptProfanityList.length = 0),
              (this._interceptRegExpList.length = 0),
              this._replacingProfanityMap.clear(),
              this._replacingRegExpMap.clear(),
              (this._key = ''),
              (this._iv = ''),
              (this._decryptOptions = {}),
              this._interceptFilter && this._interceptFilter.reset(),
              this._replacingFilter && this._replacingFilter.reset();
          },
        },
      ]),
      t
    );
  })();
})();
const KF = Qs(jF.exports);
class WF {
  constructor() {
    this.serviceMap = new Map();
  }
  registerService(e, t) {
    this.serviceMap.has(e) ||
      (console.log(`TUIServiceManager.registerService serviceName:${e}`),
      this.serviceMap.set(e, t));
  }
  unregisterService(e) {
    this.serviceMap.has(e) &&
      (console.log(`TUIServiceManager.unregisterService serviceName:${e}`),
      this.serviceMap.delete(e));
  }
  getService(e) {
    return this.serviceMap.get(e);
  }
  callService(e) {
    const { serviceName: t, method: n, params: i, callback: o } = e,
      r = this.getService(t);
    if (
      (console.log(
        `TUIServiceManager.callService serviceName:${t}, service:`,
        r
      ),
      r)
    )
      return r.onCall(n, i, o);
  }
}
class zF {
  constructor() {
    this.extensionMap = new Map();
  }
  registerExtension(e, t) {
    if (
      (console.log(`TUIExtensionManager.registerExtension extensionID:${e}`),
      !this.extensionMap.has(e))
    ) {
      const t = [];
      this.extensionMap.set(e, t);
    }
    const n = this.extensionMap.get(e);
    -1 === n.indexOf(t) && n.push(t);
  }
  unregisterExtension(e, t) {
    if (
      (console.log(`TUIExtensionManager.unregisterExtension extensionID:${e}`),
      this.extensionMap.has(e))
    ) {
      const n = this.extensionMap.get(e),
        i = n.indexOf(t);
      i > -1 && n.splice(i, 1);
    }
  }
  getExtensionList(e, t) {
    const n = t ? `params:${JSON.stringify(t)}` : '';
    console.log(`TUIExtensionManager.getExtensionList extensionID:${e} ${n}`);
    let i = [],
      o = [];
    if (this.extensionMap.has(e)) {
      i = this.extensionMap.get(e);
      for (let n = 0; n < i.length; n++) {
        const r = i[n].onGetExtension(e, t);
        o = o.concat(r);
      }
    }
    return o;
  }
}
const $F = ['vue2', 'vue3'],
  YF = {
    TUILogin: {
      EVENT: { LOGIN_STATE_CHANGED: 'loginStateChanged' },
      EVENT_SUB_KEY: {
        USER_LOGIN_SUCCESS: 'userLoginSuccess',
        USER_LOGOUT_SUCCESS: 'userLogoutSuccess',
        USER_KICKED_OFFLINE: 'userKickedOffline',
        USER_SIG_EXPIRED: 'userSigExpired',
      },
    },
    TUIConversation: {
      SERVICE: {
        NAME: 'TUIConversationService',
        METHOD: {
          CREATE_CONVERSATION: 'createConversation',
          HIDE_CONVERSATION_HEADER: 'hideConversationHeader',
        },
      },
      EXTENSION: {
        CONV_POP_MENU: { EXT_ID: 'conversationPopMenu' },
        CONV_GROUP: { EXT_ID: 'conversationGroup' },
      },
    },
    TUIChat: {
      SERVICE: {
        NAME: 'TUIChatService',
        METHOD: {
          UPDATE_MESSAGE_LIST: 'updateMessageList',
          CLOSE_MESSAGE_POP_MENU: 'closeMessagePopMenu',
          SEND_CUSTOM_MESSAGE: 'sendCustomMessage',
          SEND_TEXT_MESSAGE: 'sendTextMessage',
          SET_CHAT_TYPE: 'setChatType',
        },
      },
      EXTENSION: {
        INPUT_MORE: { EXT_ID: 'inputToolBarMore' },
        MSG_POP_MENU: { EXT_ID: 'messagePopMenu' },
        CHAT_HEADER: { EXT_ID: 'chatHeader' },
      },
      TYPE: {
        C2C: 'C2C',
        GROUP: 'GROUP',
        CUSTOMER_SERVICE: 'customerService',
        ROOM: 'room',
      },
      EVENT: { CHAT_STATE_CHANGED: 'chatStateChanged' },
      EVENT_SUB_KEY: { CHAT_OPENED: 'chatOpened' },
      FEATURE: {
        DownloadFile: 'DownloadFile',
        CopyMessage: 'CopyMessage',
        DeleteMessage: 'DeleteMessage',
        RevokeMessage: 'RevokeMessage',
        QuoteMessage: 'QuoteMessage',
        ForwardMessage: 'ForwardMessage',
        TranslateMessage: 'TranslateMessage',
        VoiceToText: 'VoiceToText',
        MultiSelection: 'MultiSelection',
        EmojiReaction: 'EmojiReaction',
        InputEmoji: 'InputEmoji',
        InputStickers: 'InputStickers',
        InputImage: 'InputImage',
        InputVoice: 'InputVoice',
        InputVideo: 'InputVideo',
        InputFile: 'InputFile',
        InputEvaluation: 'InputEvaluation',
        InputQuickReplies: 'InputQuickReplies',
        InputMention: 'InputMention',
        MessageSearch: 'MessageSearch',
        ReadStatus: 'ReadStatus',
      },
    },
    TUIGroup: {
      SERVICE: {
        NAME: 'TUIGroupService',
        METHOD: {
          CREATE_GROUP: 'createGroup',
          OPEN_GROUP_MANAGEMENT: 'openGroupManagement',
          SELECT_GROUP_MEMBER: 'selectGroupMember',
        },
      },
    },
    TUIContact: {
      SERVICE: {
        NAME: 'TUIContactService',
        METHOD: { SELECT_FRIEND: 'selectFriend' },
      },
      EXTENSION: { CONTACT_LIST: { EXT_ID: 'contactList' } },
    },
    TUISearch: {
      SERVICE: {
        NAME: 'TUISearchService',
        METHOD: {
          SEARCH_GROUP: 'searchGroup',
          SEARCH_USER: 'searchUser',
          SEARCH_FRIEND: 'searchFriend',
          SEARCH_GROUP_MEMBER: 'searchGroupMember',
        },
      },
      EXTENSION: { SEARCH_MORE: { EXT_ID: 'searchMore' } },
    },
    TUICalling: {
      SERVICE: {
        NAME: 'TUICallingService',
        METHOD: { START_CALL: 'startCall' },
      },
    },
    TUIRoom: { SERVICE: { NAME: 'TUIRoomService' } },
    TUIEmojiPlugin: {
      SERVICE: {
        NAME: 'TUIEmojiPluginService',
        METHOD: { CLOSE_EMOJI_DETAIL: 'closeEmojiDetail' },
      },
    },
    TUITranslate: {
      EVENT: { LANGUAGE_CHANGED: 'languageChanged' },
      EVENT_SUB_KEY: { CHANGE_SUCCESS: 'changeSuccess' },
    },
    TUITranslatePlugin: { SERVICE: { NAME: 'TUITranslatePluginService' } },
    TUIVoiceToTextPlugin: { SERVICE: { NAME: 'TUIVoiceToTextPluginService' } },
    TUICustomerServicePlugin: {
      SERVICE: {
        NAME: 'TUICustomerServicePlugin',
        METHOD: {
          ACTIVE_CONVERSATION: 'activeConversation',
          FILTER_MESSAGE: 'filterMessage',
        },
      },
      EXTENSION: {},
    },
    TUIPushPlugin: { SERVICE: { NAME: 'TUIPushPluginService' } },
    TUIChatbotPlugin: { SERVICE: { NAME: 'TUIChatbotPluginService' } },
  },
  JF =
    void 0 !== $n &&
    'function' == typeof $n.getSystemInfoSync &&
    Boolean($n.getSystemInfoSync().fontSizeSetting),
  XF = void 0 !== Yn && 'undefined' == typeof window,
  ZF = void 0 !== Yn,
  QF = (void 0 !== Yn || 'undefined' != typeof window) && !(JF || XF),
  eq = (QF && window && window.navigator && window.navigator.userAgent) || '',
  tq = /Android/i.test(eq),
  nq = /(?:Windows Phone)/.test(eq),
  iq = /(?:SymbianOS)/.test(eq),
  oq = /iPad/i.test(eq) || /iPhone/i.test(eq) || /iPod/i.test(eq),
  rq = tq || nq || iq || oq,
  aq = QF && !rq,
  sq = XF && !JF,
  cq = {
    [YF.TUITranslatePlugin.SERVICE.NAME]: Math.pow(2, 38),
    [YF.TUIVoiceToTextPlugin.SERVICE.NAME]: Math.pow(2, 39),
    [YF.TUICustomerServicePlugin.SERVICE.NAME]: Math.pow(2, 40),
    [YF.TUIPushPlugin.SERVICE.NAME]: Math.pow(2, 41),
    [YF.TUIChatbotPlugin.SERVICE.NAME]: Math.pow(2, 42),
    [YF.TUIEmojiPlugin.SERVICE.NAME]: Math.pow(2, 48),
  };
class uq {
  constructor(e) {
    (this.loginStatusPromise = new Map()),
      (this.SDKAppID = 0),
      (this.userID = ''),
      (this.userSig = ''),
      (this.TUICore = e),
      (this.isOnChatEvent = !1);
  }
  static getInstance(e) {
    return !uq.instance && e && (uq.instance = new uq(e)), uq.instance;
  }
  login(e) {
    const { SDKAppID: t, userID: n, userSig: i, framework: o } = e;
    return (
      (this.chat = Jd.create(
        Object.assign(Object.assign({}, e), { scene: this.getStatScene(o) })
      )),
      (this.EVENT = Jd.EVENT),
      (this.TYPES = Jd.TYPES),
      (this.SDKAppID = t),
      (this.userID = n),
      (this.userSig = i),
      this.offChatEvent(),
      this.onChatEvent(),
      this.registerPlugin(e),
      this.loginChat(e)
    );
  }
  logout() {
    return this.chat
      .logout()
      .then(
        (e) => (
          (this.userID = ''),
          (this.userSig = ''),
          this.TUICore.notifyEvent(
            YF.TUILogin.EVENT.LOGIN_STATE_CHANGED,
            YF.TUILogin.EVENT_SUB_KEY.USER_LOGOUT_SUCCESS
          ),
          Promise.resolve(e)
        )
      );
  }
  destroy() {
    return this.chat
      .destroy()
      .then(
        (e) => (
          (this.userID = ''),
          (this.userSig = ''),
          this.TUICore.notifyEvent(
            YF.TUILogin.EVENT.LOGIN_STATE_CHANGED,
            YF.TUILogin.EVENT_SUB_KEY.USER_LOGOUT_SUCCESS
          ),
          Promise.resolve(e)
        )
      );
  }
  setLogLevel(e) {
    return this.chat.setLogLevel(e);
  }
  getContext() {
    return {
      chat: this.chat,
      SDKAppID: this.SDKAppID,
      userID: this.userID,
      userSig: this.userSig,
    };
  }
  reportPlugin() {
    var e;
    for (const t in cq)
      this.TUICore.getService(t) &&
        (null ===
          (e = this.chat.callExperimentalAPI(
            'isFeatureEnabledForStat',
            cq[t]
          )) ||
          void 0 === e ||
          e.catch((e) => {}));
  }
  loginChat(e) {
    const { userID: t, userSig: n } = e;
    return new Promise((e, i) => {
      this.chat
        .login({ userID: t, userSig: n })
        .then((t) => {
          t.data.repeatLogin && this.chat.isReady() && e(t),
            this.reportPlugin(),
            this.loginStatusPromise.set('login', {
              resolve: e,
              reject: i,
              imResponse: t,
            });
        })
        .catch((e) => {
          i(e);
        });
    });
  }
  onChatEvent() {
    this.chat.on(this.EVENT.SDK_READY, this.onSDKReady, this),
      this.chat.on(this.EVENT.SDK_NOT_READY, this.onSDKNotReady, this),
      this.chat.on(this.EVENT.KICKED_OUT, this.onUserKicked, this),
      (this.isOnChatEvent = !0);
  }
  offChatEvent() {
    this.isOnChatEvent &&
      (this.chat.off(this.EVENT.SDK_READY, this.onSDKReady, this),
      this.chat.off(this.EVENT.SDK_NOT_READY, this.onSDKNotReady, this),
      this.chat.off(this.EVENT.KICKED_OUT, this.onUserKicked, this),
      (this.isOnChatEvent = !1));
  }
  onSDKReady() {
    if (this.loginStatusPromise.has('login')) {
      this.TUICore.notifyEvent(
        YF.TUILogin.EVENT.LOGIN_STATE_CHANGED,
        YF.TUILogin.EVENT_SUB_KEY.USER_LOGIN_SUCCESS
      );
      const e = setTimeout(() => {
        const t = this.loginStatusPromise.get('login');
        t.resolve(t.imResponse),
          clearTimeout(e),
          this.loginStatusPromise.delete('login');
      }, 500);
    }
  }
  onSDKNotReady() {
    this.loginStatusPromise.has('login') &&
      this.loginStatusPromise.get('login').reject(new Error('sdk not ready')),
      this.loginStatusPromise.delete('login');
  }
  onUserKicked(e) {
    e.data.type !== this.TYPES.KICKED_OUT_USERSIG_EXPIRED
      ? this.TUICore.notifyEvent(
          YF.TUILogin.EVENT.LOGIN_STATE_CHANGED,
          YF.TUILogin.EVENT_SUB_KEY.USER_KICKED_OFFLINE
        )
      : this.TUICore.notifyEvent(
          YF.TUILogin.EVENT.LOGIN_STATE_CHANGED,
          YF.TUILogin.EVENT_SUB_KEY.USER_SIG_EXPIRED
        );
  }
  registerPlugin(e) {
    const {
      useUploadPlugin: t = !1,
      useProfanityFilterPlugin: n = !1,
      TUIOfflinePush: i,
      offlinePushConfig: o,
      TIMPush: r,
      pushConfig: a,
    } = e;
    !0 === t && this.chat.registerPlugin({ 'tim-upload-plugin': HF }),
      !0 === n &&
        this.chat.registerPlugin({ 'tim-profanity-filter-plugin': KF }),
      sq &&
        r &&
        a &&
        this.chat.registerPlugin({ 'tim-push': r, pushConfig: a }),
      sq &&
        i &&
        o &&
        this.chat.registerPlugin({
          'tim-offline-push-plugin': i,
          offlinePushConfig: o,
        });
  }
  getStatScene(e) {
    let t;
    return e && $F.indexOf(e) > -1 && (t = this.genStatScene(e)), t;
  }
  genStatScene(e) {
    let t = '';
    return ZF
      ? (aq && (t = `k-${e}-pc-uni`),
        rq && (t = `k-${e}-h5-uni`),
        sq && (t = `k-${e}-app-uni`),
        JF && (t = `k-${e}-mp-uni`),
        t)
      : (aq && (t = `k-${e}-pc`), rq && (t = `k-${e}-h5`), t);
  }
}
class lq {
  constructor() {
    this.eventMap = new Map();
  }
  registerEvent(e, t, n) {
    const i = this.getKey(e, t);
    if (
      (console.log(`TUIEventManager.registerEvent eventName:${e} subKey:${t}`),
      !this.eventMap.has(i))
    ) {
      const e = [];
      this.eventMap.set(i, e);
    }
    const o = this.eventMap.get(i);
    -1 === o.indexOf(n) && (o.push(n), this.renotify(e, t, n));
  }
  unregisterEvent(e, t, n) {
    console.log(`TUIEventManager.unregisterEvent eventName:${e} subKey:${t}`);
    const i = this.getKey(e, t);
    if (this.eventMap.has(i)) {
      const e = this.eventMap.get(i),
        t = e.indexOf(n);
      t > -1 && e.splice(t, 1);
    }
  }
  notifyEvent(e, t, n) {
    const i = this.getKey(e, t),
      o = n ? `params:${JSON.stringify(n)}` : '';
    console.log(`TUIEventManager.notifyEvent eventName:${e} subKey:${t} ${o}`),
      this.eventMap.has(i) &&
        this.eventMap.get(i).forEach((i) => {
          i.onNotifyEvent(e, t, n);
        });
  }
  getKey(e, t) {
    let n = e;
    return t && (n = `${e}-${n}`), n;
  }
  renotify(e, t, n) {
    if (
      e === YF.TUILogin.EVENT.LOGIN_STATE_CHANGED &&
      t === YF.TUILogin.EVENT_SUB_KEY.USER_LOGIN_SUCCESS
    ) {
      const { chat: e } = uq.getInstance().getContext();
      e &&
        e.isReady() &&
        (n.onNotifyEvent(
          YF.TUILogin.EVENT.LOGIN_STATE_CHANGED,
          YF.TUILogin.EVENT_SUB_KEY.USER_LOGIN_SUCCESS
        ),
        console.log('TUIEventManager.renotify success.'));
    }
  }
}
class dq {
  constructor() {
    (this.serviceManager = new WF()),
      (this.extensionManager = new zF()),
      (this.eventManager = new lq());
  }
  static getInstance() {
    return (
      dq.instance ||
        (console.log('TUICore.getInstance ok.'), (dq.instance = new dq())),
      dq.instance
    );
  }
  registerService(e, t) {
    return this.serviceManager.registerService(e, t);
  }
  unregisterService(e) {
    return this.serviceManager.unregisterService(e);
  }
  getService(e) {
    return this.serviceManager.getService(e);
  }
  callService(e) {
    return this.serviceManager.callService(e);
  }
  registerExtension(e, t) {
    return this.extensionManager.registerExtension(e, t);
  }
  unregisterExtension(e, t) {
    return this.extensionManager.unregisterExtension(e, t);
  }
  getExtensionList(e, t) {
    return this.extensionManager.getExtensionList(e, t);
  }
  registerEvent(e, t, n) {
    return this.eventManager.registerEvent(e, t, n);
  }
  unregisterEvent(e, t, n) {
    return this.eventManager.unregisterEvent(e, t, n);
  }
  notifyEvent(e, t, n) {
    return this.eventManager.notifyEvent(e, t, n);
  }
}
console.log('TUICore.VERSION:2.2.4');
const pq = dq.getInstance(),
  hq = uq.getInstance(pq);
var fq = { exports: {} };
fq.exports = function (e, t, n) {
  e = e || {};
  var i = t.prototype,
    o = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years',
    };
  function r(e, t, n, o) {
    return i.fromToBase(e, t, n, o);
  }
  (n.en.relativeTime = o),
    (i.fromToBase = function (t, i, r, a, s) {
      for (
        var c,
          u,
          l,
          d = r.$locale().relativeTime || o,
          p = e.thresholds || [
            { l: 's', r: 44, d: 'second' },
            { l: 'm', r: 89 },
            { l: 'mm', r: 44, d: 'minute' },
            { l: 'h', r: 89 },
            { l: 'hh', r: 21, d: 'hour' },
            { l: 'd', r: 35 },
            { l: 'dd', r: 25, d: 'day' },
            { l: 'M', r: 45 },
            { l: 'MM', r: 10, d: 'month' },
            { l: 'y', r: 17 },
            { l: 'yy', d: 'year' },
          ],
          h = p.length,
          f = 0;
        f < h;
        f += 1
      ) {
        var g = p[f];
        g.d && (c = a ? n(t).diff(r, g.d, !0) : r.diff(t, g.d, !0));
        var _ = (e.rounding || Math.round)(Math.abs(c));
        if (((l = c > 0), _ <= g.r || !g.r)) {
          _ <= 1 && f > 0 && (g = p[f - 1]);
          var v = d[g.l];
          s && (_ = s('' + _)),
            (u = 'string' == typeof v ? v.replace('%d', _) : v(_, i, g.l, l));
          break;
        }
      }
      if (i) return u;
      var m = l ? d.future : d.past;
      return 'function' == typeof m ? m(u) : m.replace('%s', u);
    }),
    (i.to = function (e, t) {
      return r(e, t, this, !0);
    }),
    (i.from = function (e, t) {
      return r(e, t, this);
    });
  var a = function (e) {
    return e.$u ? n.utc() : n();
  };
  (i.toNow = function (e) {
    return this.to(a(this), e);
  }),
    (i.fromNow = function (e) {
      return this.from(a(this), e);
    });
};
const gq = Qs(fq.exports),
  _q = {
    '[NO]': 'emoji_0@2x.png',
    '[OK]': 'emoji_1@2x.png',
    '[下雨]': 'emoji_2@2x.png',
    '[么么哒]': 'emoji_3@2x.png',
    '[乒乓]': 'emoji_4@2x.png',
    '[便便]': 'emoji_5@2x.png',
    '[信封]': 'emoji_6@2x.png',
    '[偷笑]': 'emoji_7@2x.png',
    '[傲慢]': 'emoji_8@2x.png',
    '[再见]': 'emoji_9@2x.png',
    '[冷汗]': 'emoji_10@2x.png',
    '[凋谢]': 'emoji_11@2x.png',
    '[刀]': 'emoji_12@2x.png',
    '[删除]': 'emoji_13@2x.png',
    '[勾引]': 'emoji_14@2x.png',
    '[发呆]': 'emoji_15@2x.png',
    '[发抖]': 'emoji_16@2x.png',
    '[可怜]': 'emoji_17@2x.png',
    '[可爱]': 'emoji_18@2x.png',
    '[右哼哼]': 'emoji_19@2x.png',
    '[右太极]': 'emoji_20@2x.png',
    '[右车头]': 'emoji_21@2x.png',
    '[吐]': 'emoji_22@2x.png',
    '[吓]': 'emoji_23@2x.png',
    '[咒骂]': 'emoji_24@2x.png',
    '[咖啡]': 'emoji_25@2x.png',
    '[啤酒]': 'emoji_26@2x.png',
    '[嘘]': 'emoji_27@2x.png',
    '[回头]': 'emoji_28@2x.png',
    '[困]': 'emoji_29@2x.png',
    '[坏笑]': 'emoji_30@2x.png',
    '[多云]': 'emoji_31@2x.png',
    '[大兵]': 'emoji_32@2x.png',
    '[大哭]': 'emoji_33@2x.png',
    '[太阳]': 'emoji_34@2x.png',
    '[奋斗]': 'emoji_35@2x.png',
    '[奶瓶]': 'emoji_36@2x.png',
    '[委屈]': 'emoji_37@2x.png',
    '[害羞]': 'emoji_38@2x.png',
    '[尴尬]': 'emoji_39@2x.png',
    '[左哼哼]': 'emoji_40@2x.png',
    '[左太极]': 'emoji_41@2x.png',
    '[左车头]': 'emoji_42@2x.png',
    '[差劲]': 'emoji_43@2x.png',
    '[弱]': 'emoji_44@2x.png',
    '[强]': 'emoji_45@2x.png',
    '[彩带]': 'emoji_46@2x.png',
    '[彩球]': 'emoji_47@2x.png',
    '[得意]': 'emoji_48@2x.png',
    '[微笑]': 'emoji_49@2x.png',
    '[心碎了]': 'emoji_50@2x.png',
    '[快哭了]': 'emoji_51@2x.png',
    '[怄火]': 'emoji_52@2x.png',
    '[怒]': 'emoji_53@2x.png',
    '[惊恐]': 'emoji_54@2x.png',
    '[惊讶]': 'emoji_55@2x.png',
    '[憨笑]': 'emoji_56@2x.png',
    '[手枪]': 'emoji_57@2x.png',
    '[打哈欠]': 'emoji_58@2x.png',
    '[抓狂]': 'emoji_59@2x.png',
    '[折磨]': 'emoji_60@2x.png',
    '[抠鼻]': 'emoji_61@2x.png',
    '[抱抱]': 'emoji_62@2x.png',
    '[抱拳]': 'emoji_63@2x.png',
    '[拳头]': 'emoji_64@2x.png',
    '[挥手]': 'emoji_65@2x.png',
    '[握手]': 'emoji_66@2x.png',
    '[撇嘴]': 'emoji_67@2x.png',
    '[擦汗]': 'emoji_68@2x.png',
    '[敲打]': 'emoji_69@2x.png',
    '[晕]': 'emoji_70@2x.png',
    '[月亮]': 'emoji_71@2x.png',
    '[棒棒糖]': 'emoji_72@2x.png',
    '[汽车]': 'emoji_73@2x.png',
    '[沙发]': 'emoji_74@2x.png',
    '[流汗]': 'emoji_75@2x.png',
    '[流泪]': 'emoji_76@2x.png',
    '[激动]': 'emoji_77@2x.png',
    '[灯泡]': 'emoji_78@2x.png',
    '[炸弹]': 'emoji_79@2x.png',
    '[熊猫]': 'emoji_80@2x.png',
    '[爆筋]': 'emoji_81@2x.png',
    '[爱你]': 'emoji_82@2x.png',
    '[爱心]': 'emoji_83@2x.png',
    '[爱情]': 'emoji_84@2x.png',
    '[猪头]': 'emoji_85@2x.png',
    '[猫咪]': 'emoji_86@2x.png',
    '[献吻]': 'emoji_87@2x.png',
    '[玫瑰]': 'emoji_88@2x.png',
    '[瓢虫]': 'emoji_89@2x.png',
    '[疑问]': 'emoji_90@2x.png',
    '[白眼]': 'emoji_91@2x.png',
    '[皮球]': 'emoji_92@2x.png',
    '[睡觉]': 'emoji_93@2x.png',
    '[磕头]': 'emoji_94@2x.png',
    '[示爱]': 'emoji_95@2x.png',
    '[礼品袋]': 'emoji_96@2x.png',
    '[礼物]': 'emoji_97@2x.png',
    '[篮球]': 'emoji_98@2x.png',
    '[米饭]': 'emoji_99@2x.png',
    '[糗大了]': 'emoji_100@2x.png',
    '[红双喜]': 'emoji_101@2x.png',
    '[红灯笼]': 'emoji_102@2x.png',
    '[纸巾]': 'emoji_103@2x.png',
    '[胜利]': 'emoji_104@2x.png',
    '[色]': 'emoji_105@2x.png',
    '[药]': 'emoji_106@2x.png',
    '[菜刀]': 'emoji_107@2x.png',
    '[蛋糕]': 'emoji_108@2x.png',
    '[蜡烛]': 'emoji_109@2x.png',
    '[街舞]': 'emoji_110@2x.png',
    '[衰]': 'emoji_111@2x.png',
    '[西瓜]': 'emoji_112@2x.png',
    '[调皮]': 'emoji_113@2x.png',
    '[象棋]': 'emoji_114@2x.png',
    '[跳绳]': 'emoji_115@2x.png',
    '[跳跳]': 'emoji_116@2x.png',
    '[车厢]': 'emoji_117@2x.png',
    '[转圈]': 'emoji_118@2x.png',
    '[鄙视]': 'emoji_119@2x.png',
    '[酷]': 'emoji_120@2x.png',
    '[钞票]': 'emoji_121@2x.png',
    '[钻戒]': 'emoji_122@2x.png',
    '[闪电]': 'emoji_123@2x.png',
    '[闭嘴]': 'emoji_124@2x.png',
    '[闹钟]': 'emoji_125@2x.png',
    '[阴险]': 'emoji_126@2x.png',
    '[难过]': 'emoji_127@2x.png',
    '[雨伞]': 'emoji_128@2x.png',
    '[青蛙]': 'emoji_129@2x.png',
    '[面条]': 'emoji_130@2x.png',
    '[鞭炮]': 'emoji_131@2x.png',
    '[风车]': 'emoji_132@2x.png',
    '[飞吻]': 'emoji_133@2x.png',
    '[飞机]': 'emoji_134@2x.png',
    '[饥饿]': 'emoji_135@2x.png',
    '[香蕉]': 'emoji_136@2x.png',
    '[骷髅]': 'emoji_137@2x.png',
    '[麦克风]': 'emoji_138@2x.png',
    '[麻将]': 'emoji_139@2x.png',
    '[鼓掌]': 'emoji_140@2x.png',
    '[龇牙]': 'emoji_141@2x.png',
  };
nc.extend(gq);
const vq = (e) => {
    const t = {},
      n = [];
    e.forEach((e) => {
      const n = e.ID || e.id;
      n && (t[n] = e);
    });
    for (const i in t) n.push(t[i]);
    return n.sort((e, t) => e.time - t.time);
  },
  mq = (e) => {
    const t = nc();
    return e
      .map((e) => {
        const n = ((e) => {
          const n = [
              '星期日',
              '星期一',
              '星期二',
              '星期三',
              '星期四',
              '星期五',
              '星期六',
            ],
            i = t.diff(e, 'millisecond');
          return e.isSame(t, 'day')
            ? e.format('HH:mm')
            : i < 6048e5
              ? n[e.day()]
              : e.format('YYYY年MM月DD日 HH:mm');
        })(nc.unix(e.time));
        return { ...e, showTime: !0, timeString: n };
      })
      .map((e, t, n) => {
        if (0 === t) return { ...e, showTime: !1 };
        if (t > 0) {
          const i = nc.unix(n[t - 1].time);
          if (nc.unix(e.time).diff(i, 'second') < 300)
            return { ...e, showTime: !1 };
        }
        return e;
      });
  };
const yq = (function () {
    let e;
    return (e = 'MP-WEIXIN'), (e = 'MP'), 'MP';
  })(),
  Iq = 'H5' === yq,
  Mq = 'MP-ALIPAY' === yq,
  Cq = Object.prototype.toString;
function Tq(e, t) {
  return Cq.call(e) === `[object ${t}]`;
}
function Eq(e) {
  return null !== e && Tq(e, 'Object');
}
function Dq(e) {
  return Tq(e, 'Number');
}
function Sq(e) {
  return Tq(e, 'String');
}
function kq(e) {
  return Tq(e, 'Boolean');
}
function Rq(e) {
  return e && Array.isArray(e);
}
function Lq(e, t) {
  try {
    return t.split('.').reduce((e, t) => e[t], e);
  } catch (n) {
    return '';
  }
}
const Aq = /\B([A-Z])/g,
  Oq = (function (e) {
    const t = Object.create(null);
    return (n) => t[n] || (t[n] = e(n));
  })((e) => e.replace(Aq, '-$1').toLowerCase());
const { hasOwnProperty: bq } = Object.prototype;
function Nq(e, t) {
  return (
    Object.keys(t).forEach((n) => {
      !(function (e, t, n) {
        const i = t[n];
        (function (e) {
          return void 0 !== e;
        })(i) &&
          (bq.call(e, n) && Eq(i) ? (e[n] = Nq(Object(e[n]), i)) : (e[n] = i));
      })(e, t, n);
    }),
    e
  );
}
function Pq() {
  return Math.random().toString(36).slice(-8);
}
function wq(e, t) {
  if (e === t) return !0;
  const n = Eq(e),
    i = Eq(t);
  return n && i
    ? JSON.stringify(e) === JSON.stringify(t)
    : !n && !i && String(e) === String(t);
}
function Uq(e, t) {
  return (
    e === t ||
    (Rq(e) && Rq(t)
      ? (function (e, t) {
          if (e === t) return !0;
          if (!Rq(e) || !Rq(t)) return !1;
          if (e.length !== t.length) return !1;
          for (let n = 0; n < e.length; n++) if (!wq(e[n], t[n])) return !1;
          return !0;
        })(e, t)
      : wq(e, t))
  );
}
function Gq(e, t = new WeakMap()) {
  if (null === e || 'object' != typeof e) return e;
  if (t.has(e)) return t.get(e);
  let n;
  if (e instanceof Date) n = new Date(e.getTime());
  else if (e instanceof RegExp) n = new RegExp(e);
  else if (e instanceof Map)
    n = new Map(Array.from(e, ([e, n]) => [e, Gq(n, t)]));
  else if (e instanceof Set) n = new Set(Array.from(e, (e) => Gq(e, t)));
  else if (Array.isArray(e)) n = e.map((e) => Gq(e, t));
  else if ('[object Object]' === Object.prototype.toString.call(e)) {
    (n = Object.create(Object.getPrototypeOf(e))), t.set(e, n);
    for (const [i, o] of Object.entries(e)) n[i] = Gq(o, t);
  } else n = Object.assign({}, e);
  return t.set(e, n), n;
}
const xq = [Number, String],
  Fq = { type: Boolean, default: !0 };
function Vq(e = []) {
  return { type: Array, default: () => e };
}
function Bq(e) {
  return { type: Object, default: () => e };
}
function Hq(e) {
  return { type: Number, default: e };
}
function jq(e) {
  return { type: xq, default: e };
}
function Kq(e) {
  return { type: String, default: e };
}
const Wq = {
    customClass: { type: [String, Object, Array], default: '' },
    customStyle: { type: [String, Object, Array], default: '' },
  },
  zq = /;(?![^(]*\))/g,
  $q = /:([^]+)/,
  Yq = /\/\*.*?\*\//g;
function Jq(e) {
  const t = {};
  return (
    e
      .replace(Yq, '')
      .split(zq)
      .forEach((e) => {
        if (e) {
          const n = e.split($q);
          n.length > 1 && (t[n[0].trim()] = n[1].trim());
        }
      }),
    t
  );
}
function Xq(e) {
  if (Rq(e)) {
    const n = {};
    for (let i = 0; i < e.length; i++) {
      const o = e[i],
        r = Sq(o) ? Jq(o) : Xq(o);
      if (r)
        for (const e in r)
          (Rq((t = r[e])) || Sq(t)
            ? 0 === t.length
            : t instanceof Map || t instanceof Set
              ? 0 === t.size
              : Eq(t) && 0 === Object.keys(t).length) || (n[e] = r[e]);
    }
    return n;
  }
  var t;
  return Sq(e) || Eq(e) ? e : void 0;
}
function Zq(e) {
  let t = '';
  if (Sq(e)) t = e;
  else if (Rq(e))
    for (let n = 0; n < e.length; n++) {
      const i = Zq(e[n]);
      i && (t += `${i} `);
    }
  else if (Eq(e)) for (const n in e) e[n] && (t += `${n} `);
  return t.trim();
}
function Qq(e, t, n) {
  return Zq([e.customClass, { [t]: !0 }, n]);
}
function eV(e, t) {
  return (function (e) {
    let t = '';
    if (!e || Sq(e)) return t;
    for (const n in e) {
      const i = e[n],
        o = n.startsWith('--') ? n : Oq(n);
      (Sq(i) || 'number' == typeof i) && (t += `${o}:${i};`);
    }
    return t;
  })(Xq([e.customStyle, t]));
}
const tV = window;
const nV =
    void 0 !== tV
      ? tV.requestAnimationFrame ||
        tV.webkitRequestAnimationFrame ||
        function (e) {
          tV.setTimeout(e, 1e3 / 60);
        }
      : function (e) {
          setTimeout(e, 1e3 / 60);
        },
  iV = 'nut',
  oV = {
    center: 'fade',
    top: 'slide-down',
    bottom: 'slide-up',
    left: 'slide-left',
    right: 'slide-right',
  },
  rV = 'update:modelValue',
  aV = 'update:visible',
  sV = 'change',
  cV = 'input',
  uV = 'click',
  lV = 'open',
  dV = 'close',
  pV = 'opened',
  hV = 'closed',
  fV = 'focus',
  gV = 'blur',
  _V = 'confirm',
  vV = 'cancel';
function mV(e) {
  let t = null;
  e || (e = sa()),
    e ||
      console.warn('useSelectorQuery', 'useSelectorQuery必须在setup函数中使用'),
    (t = Yn.createSelectorQuery().in(e));
  return {
    query: t,
    getSelectorNodeInfo: (e) =>
      new Promise((n, i) => {
        t
          ? t
              .select(e)
              .boundingClientRect((t) => {
                t ? n(t) : i(new Error(`未找到对应节点: ${e}`));
              })
              .exec()
          : i(new Error('未找到对应的SelectorQuery实例'));
      }),
    getSelectorNodeInfos: (e) =>
      new Promise((n, i) => {
        t
          ? t
              .selectAll(e)
              .boundingClientRect((t) => {
                const o = t;
                o && o.length > 0 ? n(o) : i(new Error(`未找到对应节点: ${e}`));
              })
              .exec()
          : i(new Error('未找到对应的SelectorQuery实例'));
      }),
  };
}
const yV = 10;
function IV() {
  const e = yo(0),
    t = yo(0),
    n = yo(0),
    i = yo(0),
    o = yo(0),
    r = yo(0),
    a = yo(0),
    s = yo(0),
    c = yo(''),
    u = () => {
      (o.value = 0),
        (r.value = 0),
        (a.value = 0),
        (s.value = 0),
        (c.value = '');
    };
  return {
    move: (u) => {
      const l = u.touches[0];
      (o.value = l.clientX - e.value),
        (r.value = l.clientY - t.value),
        (n.value = l.clientX),
        (i.value = l.clientY),
        (a.value = Math.abs(o.value)),
        (s.value = Math.abs(r.value)),
        c.value ||
          (c.value = (function (e, t) {
            return e > t && e > yV
              ? 'horizontal'
              : t > e && t > yV
                ? 'vertical'
                : '';
          })(a.value, s.value));
    },
    start: (n) => {
      u(), (e.value = n.touches[0].clientX), (t.value = n.touches[0].clientY);
    },
    reset: u,
    startX: e,
    startY: t,
    moveX: n,
    moveY: i,
    deltaX: o,
    deltaY: r,
    offsetX: a,
    offsetY: s,
    direction: c,
    isVertical: () => 'vertical' === c.value,
    isHorizontal: () => 'horizontal' === c.value,
  };
}
function MV(e, t, n) {
  const i = (function (e, t) {
    const n = [],
      i = (e) => {
        Array.isArray(e) &&
          e.forEach((e) => {
            var o;
            if ((r = e) && !0 === r.__v_isVNode) {
              var r;
              if (t) {
                if (e.type && e.type.name === t) return void n.push(e);
              } else n.push(e);
              (null == (o = e.component) ? void 0 : o.subTree) &&
                i(e.component.subTree.children),
                e.children && i(e.children);
            }
          });
      };
    return i(e), n;
  })(e && e.subTree && e.subTree.children, n);
  t.sort((e, t) => i.indexOf(e.vnode) - i.indexOf(t.vnode));
}
function CV(e) {
  const t = pr(e, null);
  if (t) {
    const e = sa(),
      { add: n, remove: i, internalChildren: o } = t;
    n(e), Dr(() => i(e));
    return { parent: t, index: ma(() => o.indexOf(e)) };
  }
  return { parent: null, index: yo(-1) };
}
const TV = Symbol('Form');
const EV = {
    ...Wq,
    disabled: Boolean,
    iconSize: jq(''),
    label: { type: [String, Number, Boolean], default: '' },
    shape: Kq('round'),
    size: Kq('normal'),
  },
  DV = Symbol('nut-radio'),
  SV = {
    ...Wq,
    modelValue: { type: [Number, String, Boolean], default: '' },
    direction: Kq('vertical'),
    textPosition: Kq('right'),
  },
  kV = {
    [sV]: (e) => Sq(e) || Dq(e) || kq(e),
    [rV]: (e) => Sq(e) || Dq(e) || kq(e),
  },
  RV = {
    modelValue: { type: [Number, String, Object] },
    type: Kq('date'),
    showToolbar: Fq,
    title: Kq(''),
    okText: Kq(''),
    cancelText: Kq(''),
    isShowChinese: Boolean,
    minuteStep: Hq(1),
    minDate: {
      type: [Number, String, Object],
      default: () => new Date(new Date().getFullYear() - 10, 0, 1),
    },
    maxDate: {
      type: [Number, String, Object],
      default: () => new Date(new Date().getFullYear() + 10, 11, 31),
    },
    formatter: Function,
    filter: Function,
    threeDimensional: Boolean,
    swipeDuration: jq(1e3),
    visibleOptionNum: jq(7),
    optionHeight: jq(36),
  },
  LV = {
    [rV]: (e) => e instanceof Object,
    [sV]: (e) => e instanceof Object,
    [_V]: (e) => e instanceof Object,
    [vV]: (e) => e instanceof Object,
  },
  AV = {
    ...Wq,
    visible: Boolean,
    zIndex: jq(300),
    duration: jq(300),
    overlayClass: Kq(''),
    overlayStyle: Object,
    lockScroll: Boolean,
    closeOnClickOverlay: Fq,
    destroyOnClose: Boolean,
  },
  OV = { [aV]: (e) => kq(e), [uV]: (e) => e instanceof Object },
  bV = {
    ...AV,
    ...Wq,
    position: Kq('center'),
    transition: { type: String, default: '' },
    popClass: Kq(''),
    closeable: Boolean,
    closeIconPosition: Kq('top-right'),
    closeIcon: Kq('close'),
    destroyOnClose: Fq,
    overlay: Fq,
    round: Boolean,
    safeAreaInsetBottom: Boolean,
    safeAreaInsetTop: Fq,
  },
  NV = {
    [aV]: (e) => kq(e),
    'click-pop': (e) => e instanceof Object,
    'click-close-icon': () => !0,
    [lV]: () => !0,
    [dV]: () => !0,
    [pV]: () => !0,
    opend: () => !0,
    [hV]: () => !0,
    'click-overlay': () => !0,
  };
let PV = 500;
const wV = `${iV}-popup`;
const UV = {
    ...Wq,
    modelValue: Boolean,
    disabled: Boolean,
    textPosition: Kq('right'),
    iconSize: jq(''),
    label: Kq(''),
    indeterminate: Boolean,
    shape: Kq('round'),
  },
  GV = { [sV]: (e, t) => kq(e) || (Sq(e) && Sq(t)), [rV]: (e) => kq(e) },
  xV = Symbol('nut-checkbox'),
  FV = {
    ...Wq,
    modelValue: Bq({}),
    startTime: {
      type: [Number, String],
      validator: (e) => 'invalid date' !== new Date(e).toString().toLowerCase(),
    },
    endTime: {
      type: [Number, String],
      validator: (e) => 'invalid date' !== new Date(e).toString().toLowerCase(),
    },
    millisecond: Boolean,
    format: Kq('HH:mm:ss'),
    autoStart: Fq,
    time: jq(0),
    paused: Boolean,
  },
  qV = {
    [cV]: (e) => e instanceof Object || Sq(e),
    [rV]: (e) => e instanceof Object || Sq(e),
    onEnd: () => !0,
    onRestart: (e) => Dq(e) || Sq(e) || void 0 === e,
    onPaused: (e) => Dq(e) || Sq(e) || void 0 === e,
  },
  VV = {
    en: {
      'uni-load-more.contentdown': 'Pull up to show more',
      'uni-load-more.contentrefresh': 'loading...',
      'uni-load-more.contentnomore': 'No more data',
    },
    'zh-Hans': {
      'uni-load-more.contentdown': '上拉显示更多',
      'uni-load-more.contentrefresh': '正在加载...',
      'uni-load-more.contentnomore': '没有更多数据了',
    },
    'zh-Hant': {
      'uni-load-more.contentdown': '上拉顯示更多',
      'uni-load-more.contentrefresh': '正在加載...',
      'uni-load-more.contentnomore': '沒有更多數據了',
    },
  };
const BV = yo('zh-CN'),
  HV = io({
    'zh-CN': {
      save: '保存',
      confirm: '确认',
      cancel: '取消',
      done: '完成',
      noData: '暂无数据',
      placeholder: '请输入',
      select: '请选择',
      video: { errorTip: '视频加载失败', clickRetry: '点击重试' },
      fixednav: { activeText: '收起导航', unActiveText: '快速导航' },
      pagination: { prev: '上一页', next: '下一页' },
      calendaritem: {
        weekdays: ['日', '一', '二', '三', '四', '五', '六'],
        end: '结束',
        start: '开始',
        title: '日期选择',
        monthTitle: (e, t) => `${e}年${t}月`,
        today: '今天',
      },
      shortpassword: {
        title: '请输入密码',
        desc: '您使用了虚拟资产，请进行验证',
        tips: '忘记密码',
      },
      uploader: {
        ready: '准备完成',
        readyUpload: '准备上传',
        waitingUpload: '等待上传',
        uploading: '上传中',
        success: '上传成功',
        error: '上传失败',
      },
      countdown: { day: '天', hour: '时', minute: '分', second: '秒' },
      address: {
        selectRegion: '请选择所在地区',
        deliveryTo: '配送至',
        chooseAnotherAddress: '选择其他地址',
      },
      signature: {
        reSign: '重签',
        unSupportTpl: '对不起，当前浏览器不支持Canvas，无法使用本控件！',
      },
      ecard: {
        chooseText: '请选择电子卡面值',
        otherValueText: '其他面值',
        placeholder: '请输入1-5000整数',
      },
      timeselect: { pickupTime: '取件时间' },
      sku: {
        buyNow: '立即购买',
        buyNumber: '购买数量',
        addToCart: '加入购物车',
      },
      skuheader: { skuId: '商品编号' },
      addresslist: { addAddress: '新建地址', default: '默认' },
      comment: {
        complaintsText: '我要投诉',
        additionalReview: (e) => `购买${e}天后追评`,
        additionalImages: (e) => `${e}张追评图片`,
      },
      infiniteloading: {
        loading: '加载中...',
        pullTxt: '松开刷新',
        loadMoreTxt: '哎呀，这里是底部了啦',
      },
      datepicker: {
        year: '年',
        month: '月',
        day: '日',
        hour: '时',
        min: '分',
        seconds: '秒',
      },
      audiooperate: {
        back: '倒退',
        start: '开始',
        pause: '暂停',
        forward: '快进',
        mute: '静音',
      },
      pullrefresh: {
        pulling: '下拉刷新',
        loosing: '释放刷新',
        loading: '加载中...',
      },
    },
    'en-US': {
      save: 'Save',
      confirm: 'Confirm',
      cancel: 'Cancel',
      done: 'Done',
      noData: 'No Data',
      placeholder: 'Placeholder',
      select: 'Select',
      video: { errorTip: 'Error Tip', clickRetry: 'Click Retry' },
      fixednav: { activeText: 'Close Nav', unActiveText: 'Open Nav' },
      pagination: { prev: 'Previous', next: 'Next' },
      calendaritem: {
        weekdays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        end: 'End',
        start: 'Start',
        title: 'Calendar',
        monthTitle: (e, t) => `${e}/${t}`,
        today: 'Today',
      },
      shortpassword: {
        title: 'Please input a password',
        desc: 'Verify',
        tips: 'Forget password',
      },
      uploader: {
        ready: 'Ready',
        readyUpload: 'Ready to upload',
        waitingUpload: 'Waiting for upload',
        uploading: 'Uploading',
        success: 'Upload successful',
        error: 'Upload failed',
      },
      countdown: {
        day: ' Day ',
        hour: ' Hour ',
        minute: ' Minute ',
        second: ' Second ',
      },
      address: {
        selectRegion: 'Select Region',
        deliveryTo: 'Delivery To',
        chooseAnotherAddress: 'Choose Another Address',
      },
      signature: {
        reSign: 'Re Sign',
        unSupportTpl:
          "Sorry, the current browser doesn't support canvas, so we can't use this control!",
      },
      ecard: {
        chooseText: 'Select',
        otherValueText: 'Other Value',
        placeholder: 'Placeholder',
      },
      timeselect: { pickupTime: 'Pickup Time' },
      sku: {
        buyNow: 'Buy Now',
        buyNumber: 'Buy Number',
        addToCart: 'Add to Cart',
      },
      skuheader: { skuId: 'Sku Number' },
      addresslist: { addAddress: 'Add New Address', default: 'default' },
      comment: {
        complaintsText: 'I have a complaint',
        additionalReview: (e) => `Review after ${e} days of purchase`,
        additionalImages: (e) => `There are ${e} follow-up comments`,
      },
      infiniteloading: {
        loading: 'Loading...',
        pullTxt: 'Loose to refresh',
        loadMoreTxt: 'Oops, this is the bottom',
      },
      datepicker: {
        year: 'Year',
        month: 'Month',
        day: 'Day',
        hour: 'Hour',
        min: 'Minute',
        seconds: 'Second',
      },
      audiooperate: {
        back: 'Back',
        start: 'Start',
        pause: 'Pause',
        forward: 'Forward',
        mute: 'Mute',
      },
      pullrefresh: {
        pulling: 'Pull to refresh...',
        loosing: 'Loose to refresh...',
        loading: 'Loading...',
      },
    },
  }),
  jV = {
    languages: () => HV[BV.value],
    use(e, t) {
      (BV.value = e), t && (HV[e] = t);
    },
    merge(e) {
      Nq(this.languages(), e);
    },
  };
const KV = {
    ...Wq,
    modelValue: Vq([]),
    columns: Vq([]),
    showToolbar: Fq,
    title: Kq(''),
    okText: Kq(''),
    cancelText: Kq(''),
    threeDimensional: Boolean,
    swipeDuration: jq(1e3),
    visibleOptionNum: jq(7),
    optionHeight: jq(36),
    fieldNames: Bq({}),
  },
  WV = {
    [rV]: (e) => e instanceof Object,
    [sV]: (e) => e instanceof Object,
    [_V]: (e) => e instanceof Object,
    [vV]: (e) => e instanceof Object,
  },
  zV = { text: 'text', value: 'value', children: 'children', className: '' },
  $V = `${iV}-picker`;
const YV = {
    ...bV,
    ...Wq,
    modelValue: Array,
    visible: Boolean,
    options: Vq([]),
    lazy: Boolean,
    lazyLoad: Function,
    valueKey: Kq('value'),
    textKey: Kq('text'),
    childrenKey: Kq('children'),
    convertConfig: Object,
    title: String,
    closeIconPosition: Kq('top-right'),
    closeable: Boolean,
    poppable: Fq,
    titleGutter: jq(0),
    titleSize: Kq('normal'),
    titleEllipsis: Fq,
    titleType: Kq('line'),
  },
  JV = {
    [rV]: (e) => Array.isArray(e),
    [sV]: (e, t) => Array.isArray(e) && Array.isArray(t),
    [aV]: (e) => kq(e),
    pathChange: (e) => Array.isArray(e),
  },
  XV = {
    ...Wq,
    modelValue: String,
    textAlign: String,
    limitShow: Boolean,
    maxLength: [String, Number],
    rows: [String, Number],
    textareaClass: { type: [String, Object, Array], default: '' },
    textareaStyle: { type: [String, Object, Array], default: '' },
    placeholder: String,
    placeholderStyle: Kq(''),
    placeholderClass: Kq('textarea-placeholder'),
    readonly: Boolean,
    disabled: Boolean,
    autosize: { type: [Boolean, Object], default: !1 },
    autofocus: Boolean,
    cursorSpacing: Hq(0),
    cursor: Hq(-1),
    showConfirmBar: Fq,
    selectionStart: Hq(-1),
    selectionEnd: Hq(-1),
    adjustPosition: Fq,
    holdKeyboard: Boolean,
    disableDefaultPadding: Boolean,
    confirmType: Kq('return'),
    confirmHold: Boolean,
    adjustKeyboardTo: Kq('cursor'),
  },
  ZV = {
    [gV]: (e) => e instanceof Object,
    [fV]: (e) => e instanceof Object,
    [sV]: (e, t) => Sq(e) && (Sq(t) || t instanceof Object),
    [rV]: (e, t) => Sq(e) && (Sq(t) || t instanceof Object),
    [_V]: (e) => e instanceof Object,
    [cV]: (e, t) => Sq(e) && t instanceof Object,
  },
  QV = {
    ...Wq,
    popClass: { type: String, default: '' },
    width: jq(''),
    height: jq(''),
    name: Kq(''),
    size: jq(''),
    classPrefix: { type: String, default: 'nut-icon' },
    fontClassName: { type: String, default: 'nutui-iconfont' },
    customColor: { type: String, default: '' },
  },
  eB = { [uV]: (e) => e instanceof Object },
  tB = {
    ...Wq,
    name: Kq('fade'),
    show: Boolean,
    duration: Hq(300),
    timingFunction: Kq('ease'),
    destroyOnClose: Boolean,
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String,
  },
  nB = {
    beforeEnter: () => !0,
    enter: () => !0,
    afterEnter: () => !0,
    beforeLeave: () => !0,
    leave: () => !0,
    afterLeave: () => !0,
    [uV]: (e) => e instanceof Object,
  },
  iB = {
    fade: { enter: 'nutFadeIn', leave: 'nutFadeOut' },
    'fade-up': { enter: 'nutFadeUpIn', leave: 'nutFadeUpOut' },
    'fade-down': { enter: 'nutFadeDownIn', leave: 'nutFadeDownOut' },
    'fade-left': { enter: 'nutFadeLeftIn', leave: 'nutFadeLeftOut' },
    'fade-right': { enter: 'nutFadeRightIn', leave: 'nutFadeRightOut' },
    'slide-up': { enter: 'nutSlideUpIn', leave: 'nutSlideDownOut' },
    'slide-down': { enter: 'nutSlideDownIn', leave: 'nutSlideUpOut' },
    'slide-left': { enter: 'nutSlideLeftIn', leave: 'nutSlideLeftOut' },
    'slide-right': { enter: 'nutSlideRightIn', leave: 'nutSlideRightOut' },
    zoom: { enter: 'nutZoomIn', leave: 'nutZoomOut' },
  },
  oB = `${iV}-transition`;
function rB(e) {
  return Object.keys(iB).includes(e);
}
function aB(e, t, n) {
  return e.map((e) => {
    const {
        value: i = 'value',
        text: o = 'text',
        children: r = 'children',
      } = n,
      { [i]: a, [o]: s, [r]: c, ...u } = e,
      l = {
        loading: !1,
        ...u,
        level: t ? ((t && t.level) || 0) + 1 : 0,
        value: a,
        text: s,
        children: c,
        _parent: t,
      };
    return (
      l.children && l.children.length && (l.children = aB(l.children, l, n)), l
    );
  });
}
function sB(e, t) {
  let n,
    i = 0;
  for (; (n = e[i++]) && !0 !== t(n); )
    n.children && n.children.length && sB(n.children, t);
}
const cB = { topId: null, idKey: 'id', pidKey: 'pid', sortKey: '' };
const uB = {
    ...Wq,
    modelValue: Array,
    visible: Boolean,
    options: Vq([]),
    lazy: Boolean,
    lazyLoad: Function,
    valueKey: Kq('value'),
    textKey: Kq('text'),
    childrenKey: Kq('children'),
    convertConfig: Object,
    title: String,
    closeIconPosition: String,
    closeable: Boolean,
    poppable: Fq,
    titleGutter: jq(0),
    titleSize: Kq('normal'),
    titleEllipsis: Fq,
    titleType: Kq('line'),
  },
  lB = {
    [rV]: (e, t) => Array.isArray(e) && Array.isArray(t),
    [sV]: (e, t) => Array.isArray(e) && Array.isArray(t),
    pathChange: (e) => Array.isArray(e),
  },
  dB = Symbol('tabs'),
  pB = {
    ...Wq,
    modelValue: jq(0),
    customColor: String,
    direction: Kq('horizontal'),
    size: Kq('normal'),
    type: Kq('line'),
    titleScroll: Boolean,
    ellipsis: Fq,
    swipeable: Boolean,
    autoHeight: Boolean,
    background: String,
    animatedTime: jq(300),
    titleGutter: jq(0),
    align: Kq('center'),
  },
  hB = {
    [uV]: (e) => e instanceof Object,
    [sV]: (e) => e instanceof Object,
    [rV]: (e) => Sq(e),
  };
const fB = { ...Wq, title: jq(''), paneKey: jq(''), disabled: Boolean },
  gB = { [uV]: () => !0 };
(exports.APP_TYPE = 'sass_inquiry'),
  (exports.AuthStatus = Ql),
  (exports.AuthType = td),
  (exports.AutoJumpEnum = gd),
  (exports.BLUR_EVENT = gV),
  (exports.CANCEL_EVENT = vV),
  (exports.CHANGE_EVENT = sV),
  (exports.CHECKBOX_KEY = xV),
  (exports.CLICK_EVENT = uV),
  (exports.CONFIRM_EVENT = _V),
  (exports.DEFAULT_TIME = '1900-01-01 00:00:00'),
  (exports.DrugType = dd),
  (exports.DrugTypeDesc = Cd),
  (exports.FOCUS_EVENT = fV),
  (exports.Gender = ud),
  (exports.GenderDesc = Md),
  (exports.INPUT_EVENT = cV),
  (exports.InquiryMode = id),
  (exports.InquiryMsgStatusEnum = cd),
  (exports.InquiryStatusColor = Id),
  (exports.InquiryStatusDesc = md),
  (exports.InquiryStatusEnum = sd),
  (exports.InquiryStatusTips = yd),
  (exports.IsMedicalAuthPatient = ed),
  (exports.LoadMoreStatus = od),
  (exports.O = hq),
  (exports.Operation = ld),
  (exports.OrderChannel = hd),
  (exports.PREFIX = iV),
  (exports.PaymentStatusEnum = ad),
  (exports.PaymentWay = fd),
  (exports.PrescriptionStatus = pd),
  (exports.PrescriptionStatusDesc = vd),
  (exports.PrescriptionStatusEnum = rd),
  (exports.R = pq),
  (exports.RADIO_KEY = DV),
  (exports.SERVICE_CODE = 'inquiry_convenient'),
  (exports.TAB_KEY = dB),
  (exports.TIM = Jd),
  (exports.TIMUploadPlugin = HF),
  (exports.Title = class {
    constructor() {
      (this.title = ''), (this.paneKey = ''), (this.disabled = !1);
    }
  }),
  (exports.Tree = class {
    constructor(e, t) {
      (this.config = {
        value: 'value',
        text: 'text',
        children: 'children',
        ...(t || {}),
      }),
        (this.nodes = aB(e, null, this.config));
    }
    updateChildren(e, t) {
      t
        ? (t.children = aB(e, t, this.config))
        : (this.nodes = aB(e, null, this.config));
    }
    getNodeByValue(e) {
      let t;
      return (
        sB(this.nodes, (n) => {
          if (n.value === e) return (t = n), !0;
        }),
        t
      );
    }
    getPathNodesByValue(e) {
      if (!e.length) return [];
      const t = [];
      let n = this.nodes;
      for (; n && n.length; ) {
        const i = n.find((t) => t.value === e[t.level]);
        if (!i) break;
        t.push(i), (n = i.children);
      }
      return t;
    }
    isLeaf(e, t) {
      const { leaf: n, children: i } = e,
        o = Array.isArray(i) && Boolean(i.length);
      return null == n ? !o && !t : n;
    }
    hasChildren(e, t) {
      return t
        ? Array.isArray(e.children) && Boolean(e.children.length)
        : !this.isLeaf(e, t);
    }
  }),
  (exports.TypeOfFun = function (e) {
    if (null === e) return 'null';
    const t = typeof e;
    if ('undefined' === t || 'string' === t) return t;
    switch (toString.call(e)) {
      case '[object Array]':
        return 'array';
      case '[object Date]':
        return 'date';
      case '[object Boolean]':
        return 'boolean';
      case '[object Number]':
        return 'number';
      case '[object Function]':
        return 'function';
      case '[object RegExp]':
        return 'regexp';
      case '[object Object]':
        return void 0 !== e.nodeType
          ? 3 === e.nodeType
            ? /\S/.test(e.nodeValue)
              ? 'textnode'
              : 'whitespace'
            : 'element'
          : 'object';
      default:
        return 'unknow';
    }
  }),
  (exports.UPDATE_MODEL_EVENT = rV),
  (exports.UPDATE_VISIBLE_EVENT = aV),
  (exports.ZS = VF),
  (exports._export_sfc = (e, t) => {
    const n = e.__vccOpts || e;
    for (const [i, o] of t) n[i] = o;
    return n;
  }),
  (exports.appNavigator = Ad),
  (exports.calculateAge = (e) => {
    const t = e.split('-').map(Number),
      n = t[0],
      i = t[1],
      o = t[2],
      r = new Date(),
      a = r.getFullYear(),
      s = r.getMonth() + 1;
    let c = a - n,
      u = s - i,
      l = r.getDate() - o;
    if (l < 0) {
      u--;
      l += new Date(a, s - 1, 0).getDate();
    }
    return u < 0 && (c--, (u += 12)), { age: c, month: u };
  }),
  (exports.calculateTimeDifference = (e, t) => {
    const n = t.diff(e),
      i = nc.duration(n);
    return {
      days: i.days(),
      hours: i.hours(),
      minutes: i.minutes(),
      seconds: i.seconds(),
      diffValue: n,
    };
  }),
  (exports.cascaderEmits = JV),
  (exports.cascaderProps = YV),
  (exports.cascaderitemEmits = lB),
  (exports.cascaderitemProps = uB),
  (exports.checkboxEmits = GV),
  (exports.checkboxProps = UV),
  (exports.componentName = $V),
  (exports.computed = ma),
  (exports.convertListToOptions = function (e, t) {
    const n = { ...cB, ...(t || {}) },
      { topId: i, idKey: o, pidKey: r, sortKey: a } = n;
    let s = [],
      c = {};
    return (
      e.forEach((e) => {
        e = { ...e };
        const { [o]: t, [r]: n } = e,
          a = (c[n] = c[n] || []);
        s.length || n !== i || (s = a),
          a.push(e),
          (e.children = c[t] || (c[t] = []));
      }),
      a &&
        Object.keys(c).forEach((e) => {
          c[e].length > 1 && c[e].sort((e, t) => e[a] - t[a]);
        }),
      (c = null),
      s
    );
  }),
  (exports.countdownEmits = qV),
  (exports.countdownProps = FV),
  (exports.createSSRApp = ls),
  (exports.datepickerEmits = LV),
  (exports.datepickerProps = RV),
  (exports.dayjs = nc),
  (exports.defineComponent =
    /*! #__NO_SIDE_EFFECTS__ */
    function (e, t) {
      return L(e) ? (() => C({ name: e.name }, t, { setup: e }))() : e;
    }),
  (exports.e = (e, ...t) => C(e, ...t)),
  (exports.encryptPhone = (e) =>
    e && '' !== e.toString().trim()
      ? e.toString().replace(/^(.{3})(?:\d+)(.{4})$/, '$1****$2')
      : '--'),
  (exports.f = (e, t) =>
    (function (e, t) {
      let n;
      if (S(e) || A(e)) {
        n = new Array(e.length);
        for (let i = 0, o = e.length; i < o; i++) n[i] = t(e[i], i, i);
      } else if ('number' == typeof e) {
        n = new Array(e);
        for (let i = 0; i < e; i++) n[i] = t(i + 1, i, i);
      } else if (b(e))
        if (e[Symbol.iterator]) n = Array.from(e, (e, n) => t(e, n, n));
        else {
          const i = Object.keys(e);
          n = new Array(i.length);
          for (let o = 0, r = i.length; o < r; o++) {
            const r = i[o];
            n[o] = t(e[r], r, o);
          }
        }
      else n = [];
      return n;
    })(e, t)),
  (exports.filterImMessage = (e) => {
    const t = e.filter((e) => {
        if (e.isRevoked) return !1;
        if ('TIMTextElem' === e.type) return !0;
        if ('TIMCustomElem' === e.type && e.payload.data) {
          if (1 === JSON.parse(e.payload.data).patientShow) return !0;
        }
        return !1;
      }),
      n = vq(t);
    return mq(n);
  }),
  (exports.formatCurrency = (e) => {
    if (!e) return '0.00';
    return Zl(e).divide(100).format('0[.]00');
  }),
  (exports.formatPatientAge = Td),
  (exports.formatValue = (e) =>
    Array.isArray(e) ? (e.length ? e.join(' / ') : '--') : e || '--'),
  (exports.getCurrentInstance = sa),
  (exports.getFormSourceAndPayWay = () => {
    let e = null,
      t = null;
    return (e = hd.Wechat), (t = fd.Wechatpay), { formSource: e, payWay: t };
  }),
  (exports.getMainClass = Qq),
  (exports.getMainStyle = eV),
  (exports.getRandomId = Pq),
  (exports.getTimeStamp = function (e) {
    if (!e) return Date.now();
    let t = e;
    return (
      (t = t > 0 ? +t : t.toString().replace(/\-/g, '/')), new Date(t).getTime()
    );
  }),
  (exports.globalDataSymbol = Dc),
  (exports.handleAppHide = () => {
    console.log('App Hide');
    const e = pr(Dc);
    null == e || e.updateGlobalData({ onShowFlag: !1 });
  }),
  (exports.handleAppLaunch = async (e) => {
    var t, n;
    const i = eu(),
      o = Qc(),
      r = tu(),
      { userInfo: a } = Wc(r),
      { autoUpdate: s } = bd();
    e &&
      (null == (t = a.value) ? void 0 : t.keyID) &&
      (null == (n = a.value) ? void 0 : n.imSign) &&
      e.init({ userID: a.value.keyID, userSig: a.value.imSign }),
      Nd.setBaseInfo({
        baseUrl: o.CONFIG.BASE_URL,
        orgCode: o.CONFIG.ORG_CODE,
      });
    const { data: c } = await Nd.get({
      url: '/his/medicare/payment/isClosePay',
    });
    i.setMedicalAuthStatus(c);
    const { data: u } = await Nd.get({ url: '/his/hlp/tokenWay' });
    i.setMedicalAuthType(u), s();
  }),
  (exports.handleAppShow = (e) => {
    var t, n, i;
    console.log('App Show', e);
    const o = eu(),
      r = Yn.getStorageSync('medicalAuthType'),
      a =
        null !=
        (i =
          null ==
          (n =
            null == (t = null == e ? void 0 : e.referrerInfo)
              ? void 0
              : t.extraData)
            ? void 0
            : n.authCode)
          ? i
          : '';
    if (1038 === (null == e ? void 0 : e.scene) && a)
      switch (r) {
        case nd.UserInfo:
          o.setUserAuthInfo({ authNo: a });
          break;
        case nd.Prescription:
          o.setPrescriptionAuthInfo({ authNo: a });
          break;
        case nd.Payment:
          o.setPayAuthInfo({ authNo: a });
      }
    const s = null == e ? void 0 : e.query;
    1038 === (null == e ? void 0 : e.scene) && s && o.setPaymentInfo(s);
  }),
  (exports.iconEmits = eB),
  (exports.iconProps = QV),
  (exports.index = Yn),
  (exports.initAppConfig = ({ app: e, config: t }) => {
    e.provide(Dc, { globalData: Sc, updateGlobalData: kc });
    Qc().setAppConfig(t);
  }),
  (exports.initVueI18n = function (e, t = {}, n, i) {
    if ('string' != typeof e) {
      const n = [t, e];
      (e = n[0]), (t = n[1]);
    }
    'string' != typeof e &&
      (e =
        void 0 !== Yn && Yn.getLocale
          ? Yn.getLocale()
          : 'undefined' != typeof global && global.getLocale
            ? global.getLocale()
            : nt),
      'string' != typeof n &&
        (n =
          ('undefined' != typeof __uniConfig && __uniConfig.fallbackLocale) ||
          nt);
    const o = new ut({ locale: e, fallbackLocale: n, messages: t, watcher: i });
    let r = (e, t) => {
      if ('function' != typeof getApp)
        r = function (e, t) {
          return o.t(e, t);
        };
      else {
        let e = !1;
        r = function (t, n) {
          const i = getApp().$vm;
          return (
            i &&
              (i.$locale,
              e ||
                ((e = !0),
                (function (e, t) {
                  e.$watchLocale
                    ? e.$watchLocale((e) => {
                        t.setLocale(e);
                      })
                    : e.$watch(
                        () => e.$locale,
                        (e) => {
                          t.setLocale(e);
                        }
                      );
                })(i, o))),
            o.t(t, n)
          );
        };
      }
      return r(e, t);
    };
    return {
      i18n: o,
      f: (e, t, n) => o.f(e, t, n),
      t: (e, t) => r(e, t),
      add: (e, t, n = !0) => o.add(e, t, n),
      watch: (e) => o.watchLocale(e),
      getLocale: () => o.getLocale(),
      setLocale: (e) => o.setLocale(e),
    };
  }),
  (exports.inject = pr),
  (exports.inquiryModeDesc = _d),
  (exports.isDate = function (e) {
    return Tq(e, 'Date');
  }),
  (exports.isEqualValue = Uq),
  (exports.isH5 = Iq),
  (exports.isMpAlipay = Mq),
  (exports.isValidBarcode = (e) =>
    ((e) => Od(e, 13, 12, (e) => (e % 2 == 0 ? 1 : 3)))(e) ||
    ((e) => Od(e, 12, 11, (e) => (e % 2 == 0 ? 3 : 1)))(e)),
  (exports.jv = CR),
  (exports.m = (e, t, n = !1) =>
    (function (e, { number: t, trim: n }, i = !1) {
      return i
        ? (...i) => (
            n ? (i = i.map((e) => e.trim())) : t && (i = i.map(X)), e(...i)
          )
        : (i) => {
            const o = i.detail.value;
            return (
              n ? (i.detail.value = o.trim()) : t && (i.detail.value = X(o)),
              e(i)
            );
          };
    })(e, t, n)),
  (exports.messages = VV),
  (exports.n = (e) => oe(e)),
  (exports.nextTick$1 = Vo),
  (exports.o = (e, t) => as(e, t)),
  (exports.onActivated = fr),
  (exports.onBeforeMount = Ir),
  (exports.onHide = qd),
  (exports.onLaunch = Vd),
  (exports.onLoad = Bd),
  (exports.onMounted = Mr),
  (exports.onPageScroll = Kd),
  (exports.onPageShow = zd),
  (exports.onReachBottom = Wd),
  (exports.onShow = Fd),
  (exports.onUnload = Hd),
  (exports.onUnmounted = Dr),
  (exports.overlayEmits = OV),
  (exports.overlayProps = AV),
  (exports.p = (e) =>
    (function (e) {
      const { uid: t, __counter: n } = sa();
      return t + ',' + ((ns[t] || (ns[t] = [])).push(na(e)) - 1) + ',' + n;
    })(e)),
  (exports.padZero = function (e, t = 2) {
    for (e += ''; e.length < t; ) e = `0${e}`;
    return e.toString();
  }),
  (exports.padZeroToTwoDigits = (e) => (e ? String(e).padStart(2, '0') : '00')),
  (exports.parseCustom = (e) => {
    var t, n, i, o, r, a, s;
    const c = JSON.parse(null != (t = e.payload.data) ? t : '{}');
    if ('image' === c.customType)
      return { type: 'image', src: null == (n = c.data) ? void 0 : n.url };
    if ('patientInfo' === c.childType) {
      const e =
          null !=
          (o = JSON.parse(
            null == (i = JSON.parse(c.data)) ? void 0 : i.certificateData
          ))
            ? o
            : [],
        t =
          null !=
          (a = JSON.parse(
            null == (r = JSON.parse(c.data)) ? void 0 : r.patientData
          ))
            ? a
            : {};
      return {
        type: 'patientInfo',
        ...t,
        treatedFileUrls: e,
        patientAge: Td(t.patientAge, t.patientMonth),
        patientSex: Md[t.patientSex],
      };
    }
    if ('reviewPass' === c.childType) {
      const e = null != (s = JSON.parse(c.data)) ? s : {};
      return {
        type: 'reviewPass',
        ...e,
        patientAge: Td(e.patientAge, e.patientMonth),
        patientSex: Md[e.patientSex],
      };
    }
    return 'transfer' === c.childType
      ? { type: 'transfer', ...c.data }
      : 'goOn' === c.childType
        ? { type: 'goOn', ...c.data }
        : 'refund' === c.childType
          ? { type: 'refund', ...c.data }
          : 'checkOutRefund' === c.childType
            ? { type: 'checkOutRefund', ...c.data }
            : { type: 'notSupport', text: '[自定义消息]' };
  }),
  (exports.parseSystem = (e) => {
    var t;
    const n = null != (t = e.payload.data) ? t : '{}',
      { childType: i, data: o } = JSON.parse(n);
    if ('finish' === i)
      return {
        type: 'finish',
        text: '线上咨询不能代替面诊，医生的回复仅为建议',
      };
    if ('rpHint' === i) {
      return { type: 'rpHint', text: JSON.parse(o || '{}').text || '' };
    }
    return { type: 'text', text: (null == o ? void 0 : o.patientText) || '' };
  }),
  (exports.parseText = (e) => {
    const t = [];
    let n = e.payload.text,
      i = -1,
      o = -1;
    for (; n && '' !== n; )
      switch (((i = n.indexOf('[')), (o = n.indexOf(']')), i)) {
        case 0:
          if (-1 === o) t.push({ type: 'text', text: n }), (n = '');
          else {
            const e = n.slice(0, o + 1);
            _q[e]
              ? (t.push({
                  type: 'emoji',
                  src: 'https://web.sdk.qcloud.com/im/assets/emoji/' + _q[e],
                }),
                (n = n.substring(o + 1)))
              : (t.push({ type: 'text', text: '[' }), (n = n.slice(1)));
          }
          break;
        case -1:
          '已取消' === n
            ? (t.push({ type: 'cancelVideo', text: n }), (n = ''))
            : -1 !== n.indexOf('视频时长')
              ? (t.push({ type: 'finishVideo', text: n }), (n = ''))
              : (t.push({ type: 'text', text: n }), (n = ''));
          break;
        default:
          t.push({ type: 'text', text: n.slice(0, i) }), (n = n.substring(i));
      }
    return t;
  }),
  (exports.pickerDateFormatter = (e, t) => {
    const n = {
      year: '年',
      month: '月',
      day: '日',
      hour: '时',
      minute: '分',
      seconds: '秒',
    }[e];
    return n && (t.text += n), t;
  }),
  (exports.pickerEmits = WV),
  (exports.pickerProps = KV),
  (exports.pinia = nu),
  (exports.popupEmits = NV),
  (exports.popupProps = bV),
  (exports.processPatientHealthInfo = (e, t) => {
    if (!t.length) return e;
    const n = (e) => t.find((t) => t.docItemCode === e),
      i = (e) => {
        var t;
        return '异常' === (null == (t = n(e)) ? void 0 : t.docItemValue)
          ? '1'
          : '0';
      },
      o = n('INHERIT'),
      r = n('ALLERGY'),
      a = n('ILLNESS'),
      s = n('PREGNANCY');
    switch (
      ((e.familyGeneticHistory =
        '有' === (null == o ? void 0 : o.docItemValue) ? '1' : '0'),
      (e.familyGeneticHistoryDetail =
        '有' === (null == o ? void 0 : o.docItemValue) ? o.docItemDesc : ''),
      (e.historyOfAllergy =
        '有' === (null == r ? void 0 : r.docItemValue) ? '1' : '0'),
      (e.allergyDetail =
        '有' === (null == r ? void 0 : r.docItemValue) ? r.docItemDesc : ''),
      (e.historyOfSickness =
        '有' === (null == a ? void 0 : a.docItemValue) ? '1' : '0'),
      (e.sicknessDetail =
        '有' === (null == a ? void 0 : a.docItemValue) ? a.docItemDesc : ''),
      (e.liver = i('LIVER')),
      (e.renal = i('KIDNEY')),
      null == s ? void 0 : s.docItemDesc)
    ) {
      case '否':
      default:
        e.pregnancy = '0';
        break;
      case '备孕':
        e.pregnancy = '1';
        break;
      case '妊娠':
        e.pregnancy = '2';
        break;
      case '哺乳':
        e.pregnancy = '3';
    }
    return e;
  }),
  (exports.provide = dr),
  (exports.pxCheck = function (e) {
    return Number.isNaN(Number(e)) ? String(e) : `${e}px`;
  }),
  (exports.queryURLParams = (e) => {
    const t = e.split('?')[1],
      n = {};
    if (t) {
      t.split('&').forEach((e) => {
        const [t, i = ''] = e.split('=');
        t && (n[t] = decodeURIComponent(i));
      });
    }
    return n;
  }),
  (exports.r = YF),
  (exports.r$1 = (e, t, n) => cs(e, t, n)),
  (exports.radioProps = EV),
  (exports.radiogroupEmits = kV),
  (exports.radiogroupProps = SV),
  (exports.raf = nV),
  (exports.reactive = io),
  (exports.readonly = ro),
  (exports.ref = yo),
  (exports.requestAddOrgPersonFamily = (e) =>
    Nd.post({ url: '/peachuser/orgPersonFamily/addOrgPersonFamily', data: e })),
  (exports.requestArousePay = (e) =>
    Nd.post({ url: '/payment/pay/arousePay', data: e })),
  (exports.requestCancelOrder = (e) =>
    Nd.post({ url: '/healthcenter/doctorWorkbench/cancelOrder', data: e })),
  (exports.requestCheckH5Medicine = (e, t) =>
    Nd.post({
      url: '/healthcenter/inquiryOrderMedicine/checkH5Medicine',
      data: e,
      toast: t,
    })),
  (exports.requestCheckH5MedicineSwitch = (e, t) =>
    Nd.post({
      url: '/healthcenter/inquiryOrderMedicine/checkH5MedicineSwitch',
      data: e,
      toast: t,
    })),
  (exports.requestCheckUrlExpire = (e) =>
    Nd.get({ url: '/healthcenter/doctorWorkbench/checkUrlExpire', data: e })),
  (exports.requestCreateTransferInquiryOrder = (e) =>
    Nd.post({
      url: '/healthcenter/doctorWorkbench/createTransferInquiryOrder',
      data: e,
    })),
  (exports.requestCusPageMyInquiryOrder = (e) =>
    Nd.post({
      url: '/healthcenter/myinquiryorder/cusPageMyInquiryOrder',
      data: e,
    })),
  (exports.requestDelErpInquiryOrder = (e) =>
    Nd.get({
      url: '/healthcenter/doctorWorkbench/yishu/delErpInquiryOrder',
      data: e,
    })),
  (exports.requestDelPersonFamilyInfo = (e) =>
    Nd.get({ url: '/peachuser/orgPersonFamily/delPersonFamilyInfo', data: e })),
  (exports.requestDeleteOrgPatientFiles = (e) =>
    Nd.post({ url: '/peachuser/OrgPatientFiles/delete', data: e })),
  (exports.requestDetailInquiryOrderWithDoctorComment = (e) =>
    Nd.post({
      url: '/healthcenter/inquiryOrder/detailInquiryOrderWithDoctorComment',
      data: e,
    })),
  (exports.requestGeneralBasicOCR = (e) =>
    Nd.post({ url: '/peachuser/idcardInfo/generalBasicOCR', data: e })),
  (exports.requestGetBaseInfo = (e) =>
    Nd.post({ url: '/healthcenter/clientApp/getBaseInfo', data: e })),
  (exports.requestGetByPersonID = (e) =>
    Nd.get({ url: '/peachuser/personUserThirdRel/getByPersonID', data: e })),
  (exports.requestGetCity = () =>
    Nd.get({ url: '/peachuser/organization/getCity' })),
  (exports.requestGetDetailXz = (e) =>
    Nd.post({ url: '/healthcenter/saasInquiryOrder/getDetailXz', data: e })),
  (exports.requestGetDoctorInfoDetail = (e) =>
    Nd.get({ url: '/peachuser/doctorInfo/getDoctorInfoDetail', data: e })),
  (exports.requestGetErpInquiryOrder = (e) =>
    Nd.get({
      url: '/healthcenter/doctorWorkbench/yishu/getErpInquiryOrder',
      data: e,
    })),
  (exports.requestGetErpOpen = (e) =>
    Nd.get({ url: '/healthcenter/doctorWorkbench/yishu/getErpOpen', data: e })),
  (exports.requestGetHlpDoctorOrderSize = (e) =>
    Nd.get({
      url: '/healthcenter/doctorWorkbench/getHlpDoctorOrderSize',
      data: e,
    })),
  (exports.requestGetImInfo = (e) =>
    Nd.get({ url: '/notice/im/getImInfo', data: e })),
  (exports.requestGetInquiryOrderDetail = wd),
  (exports.requestGetListByOrgPersonUserID = (e) =>
    Nd.post({
      url: '/peachuser/OrgPatientFiles/getListByOrgPersonUserID',
      data: e,
    })),
  (exports.requestGetOrgPersonFamily = (e) =>
    Nd.post({
      url: '/peachuser/orgPersonFamily/orgPersonHealth/getOrgPersonFamily',
      data: e,
    })),
  (exports.requestGetOrgPersonFamilyInfo = (e) =>
    Nd.post({
      url: '/peachuser/orgPersonFamily/getOrgPersonFamilyInfo',
      data: e,
    })),
  (exports.requestGetOrgPersonUser = (e) =>
    Nd.post({ url: '/peachuser/orgPersonUser/getOrgPersonUser', data: e })),
  (exports.requestGetOrgPersonUserByPersonID = (e) =>
    Nd.post({
      url: '/peachuser/orgPersonUser/getOrgPersonUserByPersonID',
      data: e,
    })),
  (exports.requestGetPatientNoFinishOrder = (e) =>
    Nd.post({
      url: '/healthcenter/myinquiryorder/getPatientNoFinishOrder',
      data: e,
    })),
  (exports.requestGetPatientQrCode = (e) =>
    Nd.post({
      url: '/healthcenter/doctorWorkbench/yishu/getPatientQrCode',
      data: e,
    })),
  (exports.requestGetPayOrder = (e) =>
    Nd.post({ url: '/payment/pay/getPayOrder', data: e })),
  (exports.requestGetPhoneByCode = (e) =>
    Nd.post({ url: '/peachlogin/wxAuth/getPhoneByCode', data: e })),
  (exports.requestGetRecordsForChat = (e) =>
    Nd.post({ url: '/notice/imRecord/getRecordsForChat', data: e })),
  (exports.requestGetRp = (e) =>
    Nd.get({ url: '/healthcenter/saasRp/getRp', data: e })),
  (exports.requestGetRpUpdateStatusAndUpdate = (e) =>
    Nd.get({ url: '/his/hlp/getRpUpdateStatusAndUpdate', data: e })),
  (exports.requestMedicineByBarCode = (e) =>
    Nd.post({ url: '/mall/inquiry/item/medicineByBarCode', data: e })),
  (exports.requestPageMedicine = (e) =>
    Nd.post({ url: '/mall/inquiry/item/pageMedicine', data: e })),
  (exports.requestQueryAllClientAppServiceAndClientApp = (e) =>
    Nd.get({
      url: '/healthcenter/clientAppService/queryAllClientAppServiceAndClientApp',
      data: e,
    })),
  (exports.requestQueryCurrentPrepaid = (e) =>
    Nd.post({
      url: '/peachuser/orgRpPrepaid/queryCurrentPrepaid',
      data: e,
      toast: !1,
    })),
  (exports.requestQuerySysDictByCode = (e) =>
    Nd.get({ url: '/baseconfig/sysDict/querySysDictByCode', data: e })),
  (exports.requestQueryWxPayResult = (e) =>
    Nd.post({ url: '/his/medicare/payment/queryWxPayResult', data: e })),
  (exports.requestRecipePush = (e) =>
    Nd.post({ url: '/his/hlp/recipePush', data: e })),
  (exports.requestRefundCash = (e) =>
    Nd.post({ url: '/payment/refund/refund', data: e })),
  (exports.requestRefundSubmission = (e) =>
    Nd.post({ url: '/his/medicare/payment/refundOrder', data: e })),
  (exports.requestSaveConvenientInquiryOrder = (e) =>
    Nd.post({
      url: '/healthcenter/doctorWorkbench/saveConvenientInquiryOrder',
      data: e,
      toast: !1,
    })),
  (exports.requestSaveHlpH5ConvenientInquiryOrder = (e) =>
    Nd.post({
      url: '/healthcenter/doctorWorkbench/saveHlpH5ConvenientInquiryOrder',
      data: e,
      toast: !1,
    })),
  (exports.requestSaveOrgPatientFiles = (e) =>
    Nd.post({
      url: '/peachuser/OrgPatientFiles/saveOrgPatientFiles',
      data: e,
    })),
  (exports.requestSelectGroupOneJson = (e) =>
    Nd.get({ url: '/baseconfig/orgPara/selectGroupOneJson', data: e })),
  (exports.requestSelectMedicineByOrderId = (e) =>
    Nd.post({
      url: '/healthcenter/inquiryOrderMedicine/selectMedicineByOrderId',
      data: e,
    })),
  (exports.requestSelectOrgPersonFamily = (e) =>
    Nd.post({
      url: '/peachuser/orgPersonFamily/selectOrgPersonFamily',
      data: e,
    })),
  (exports.requestUldFeeInfo = (e) =>
    Nd.post({ url: '/his/medicare/payment/uldFeeInfo', data: e })),
  (exports.requestUnifieOrder = (e) =>
    Nd.post({ url: '/his/medicare/payment/unifieOrder', data: e })),
  (exports.requestUpdateOrgPatientFiles = (e) =>
    Nd.post({
      url: '/peachuser/OrgPatientFiles/updateOrgPatientFiles',
      data: e,
    })),
  (exports.requestUpdatePersonUser = (e) =>
    Nd.post({ url: '/peachuser/personUser/updatePersonUser', data: e })),
  (exports.requestUpload = Pd),
  (exports.requestWxLogin = (e) =>
    Nd.post({ url: '/peachlogin/wxAuth/wxLogin', data: e })),
  (exports.requestWxLoginByCode = (e) =>
    Nd.post({ url: '/peachlogin/wxAuth/wxLoginByCode', data: e })),
  (exports.resolveComponent = function (e, t) {
    return (
      (function (e, t, n = !0, i = !1) {
        const o = Zo || aa;
        if (o) {
          const n = o.type;
          {
            const e = (function (e, t = !0) {
              return L(e) ? e.displayName || e.name : e.name || (t && e.__name);
            })(n, !1);
            if (e && (e === t || e === B(t) || e === K(B(t)))) return n;
          }
          const r = er(o[e] || n[e], t) || er(o.appContext[e], t);
          return !r && i ? n : r;
        }
      })('components', e, !0, t) || e
    );
  }),
  (exports.s = (e) => us(e)),
  (exports.sleep = (e) => new Promise((t) => setTimeout(t, e))),
  (exports.sr = (e, t, n) =>
    (function (e, t, n = {}) {
      const { $templateRefs: i } = sa();
      i.push({ i: t, r: e, k: n.k, f: n.f });
    })(e, t, n)),
  (exports.storeToRefs = Wc),
  (exports.t = (e) =>
    ((e) =>
      A(e)
        ? e
        : null == e
          ? ''
          : S(e) || (b(e) && (e.toString === P || !L(e.toString)))
            ? JSON.stringify(e, re, 2)
            : String(e))(e)),
  (exports.tabpaneEmits = gB),
  (exports.tabpaneProps = fB),
  (exports.tabsEmits = hB),
  (exports.tabsProps = pB),
  (exports.textareaEmits = ZV),
  (exports.textareaProps = XV),
  (exports.toRef = ko),
  (exports.toRefs = Eo),
  (exports.transitionEmits = nB),
  (exports.transitionProps = tB),
  (exports.unref = Mo),
  (exports.useAppConfigStore = Qc),
  (exports.useFormDisabled = function (e) {
    const { parent: t } = CV(TV);
    return ma(() => {
      var n;
      return (
        e.value ||
        (null == (n = null == t ? void 0 : t.props) ? void 0 : n.disabled) ||
        !1
      );
    });
  }),
  (exports.useInject = CV),
  (exports.useMedicalInfo = ou),
  (exports.useMedicalInsuranceAuthStore = eu),
  (exports.useNavSize = () => {
    const e = yo(!1),
      t = yo(0),
      n = yo(0),
      i = yo(0);
    return (
      Mr(() => {
        (() => {
          var o, r;
          const a = Yn.getSystemInfoSync(),
            s = (null == (o = a.system) ? void 0 : o.indexOf('iOS')) > -1;
          (e.value = a.screenHeight < 700),
            (t.value = s ? 44 : 48),
            (n.value = null != (r = a.statusBarHeight) ? r : 0),
            (i.value = t.value + n.value);
        })();
      }),
      {
        isSmallScreen: e,
        customNavbarHeight: t,
        statusBarHeight: n,
        navBarHeight: i,
      }
    );
  }),
  (exports.useOrderAction = (e) => {
    const t = eu(),
      { medicalAuthStatus: n, payAuthInfo: i, prescriptionAuthInfo: o } = Wc(t),
      {
        medicalInfo: r,
        fetchMedicalPayment: a,
        fetchMedicalPrescription: s,
      } = ou(),
      c = yo(null),
      u = yo(null),
      l = yo('');
    return {
      handleToTransfer: async (t) => {
        const i = (null == t ? void 0 : t.inquiryOrderID) || '';
        l.value = i;
        try {
          Yn.showLoading({ title: '转诊中…', mask: !0 });
          const { success: t } = await (async (e) =>
            Nd.get({
              url: '/healthcenter/doctorWorkbench/getTransferOrderCreateStatus',
              data: e,
            }))({ inquiryOrderID: i });
          if (!t) return;
          if (!e || n.value === Ql.NO_AUTH)
            return void Ad.navigateTo(Ad.pagesMap['dispatch-wait'], {
              query: { isTransfer: !0, orderID: i, payAuthNo: 'test' },
            });
          n.value === Ql.NEED_AUTH && ((c.value = gd.Prescription), Rd());
        } finally {
          Yn.hideLoading();
        }
      },
      handleToRefund: async (e) => {
        const t = (null == e ? void 0 : e.inquiryOrderID) || '';
        try {
          Yn.showLoading({ title: '取消中…', mask: !0 });
          const { data: e } = await wd({ inquiryOrderID: t });
          (u.value = e),
            Yn.hideLoading(),
            (null == e ? void 0 : e.payStatus) === ad.RefundSuccess &&
              Yn.showToast({ title: '订单已退款', icon: 'none' }),
            (null == e ? void 0 : e.payStatus) === ad.PaySuccess &&
              (n.value === Ql.NO_AUTH &&
                Ad.navigateTo(Ad.pagesMap['refund-result'], {
                  query: { orderDetail: encodeURIComponent(JSON.stringify(e)) },
                }),
              n.value === Ql.NEED_AUTH && ((c.value = gd.Refund), Ld()));
        } catch (i) {
          Yn.hideLoading();
        }
      },
      handleAutoJump: async () => {
        var e, t, n;
        if (c.value === gd.Refund) {
          if (!i.value.authNo) return;
          await a(),
            (null == (e = r.value) ? void 0 : e.pay_auth_no) &&
              ((c.value = null),
              Ad.navigateTo(Ad.pagesMap['refund-result'], {
                query: {
                  payAuthNo: null == (t = r.value) ? void 0 : t.pay_auth_no,
                  orderDetail: encodeURIComponent(JSON.stringify(u.value)),
                },
              }));
        }
        if (c.value === gd.Prescription) {
          if (!o.value.authNo) return;
          await s(),
            (null == (n = r.value) ? void 0 : n.auth_no) &&
              ((c.value = null),
              Ad.navigateTo(Ad.pagesMap['dispatch-wait'], {
                query: {
                  isTransfer: !0,
                  orderID: l.value,
                  payAuthNo: r.value.auth_no,
                },
              }));
        }
      },
    };
  }),
  (exports.usePicker = function (e, t) {
    const n = ma(() => Qq(e, $V)),
      i = io({ formattedColumns: e.columns }),
      o = ma(() => ({ ...zV, ...e.fieldNames })),
      r = yo([]),
      a = ma(() => {
        const e = i.formattedColumns[0],
          t = o.value;
        if (e) {
          if (Array.isArray(e)) return 'multiple';
          if (t.children in e) return 'cascade';
        }
        return 'single';
      }),
      s = ma(() => {
        switch (a.value) {
          case 'single':
            return [i.formattedColumns];
          case 'multiple':
            return i.formattedColumns;
          case 'cascade':
            return ((e, t) => {
              const n = [],
                i = o.value;
              let r = { text: '', value: '', [i.children]: e },
                a = 0;
              for (; r && r[i.children]; ) {
                const e = r[i.children],
                  o = t[a];
                let s = e.findIndex((e) => e[i.value] === o);
                -1 === s && (s = 0),
                  (r = r[i.children][s]),
                  (a += 1),
                  n.push(e);
              }
              return n;
            })(i.formattedColumns, r.value ? r.value : []);
        }
        return [];
      }),
      c = ma(() => {
        const e = o.value;
        return s.value.map((t, n) => {
          const i = t.findIndex((t) => t[e.value] === r.value[n]);
          return -1 === i ? 0 : i;
        });
      }),
      u = yo(s.value.map(() => 0));
    ir(
      c,
      async (e) => {
        await Vo(), (u.value = e);
      },
      { immediate: !0 }
    );
    const l = yo([]),
      d = ma(() => {
        const e = o.value;
        return s.value.map(
          (t, n) => t.find((t) => t[e.value] === r.value[n]) || t[0]
        );
      }),
      p = () => {
        const e = o.value;
        r.value &&
          !r.value.length &&
          s.value.forEach((t) => {
            r.value.push(t[0][e.value]);
          }),
          t(_V, { selectedValue: r.value, selectedOptions: d.value });
      };
    return (
      ir(
        () => e.modelValue,
        (e) => {
          Uq(e, r.value) || (r.value = Gq(e));
        },
        { deep: !0, immediate: !0 }
      ),
      ir(
        r,
        (n) => {
          Uq(n, e.modelValue) || t(rV, n);
        },
        { deep: !0 }
      ),
      ir(
        () => e.columns,
        (e) => {
          i.formattedColumns = e;
        }
      ),
      {
        classes: n,
        ...Eo(i),
        columnsType: a,
        columnsList: s,
        columnFieldNames: o,
        cancel: () => {
          t(vV, { selectedValue: r.value, selectedOptions: d.value });
        },
        changeHandler: (e, n) => {
          const i = o.value;
          if (n && Object.keys(n).length) {
            if (((r.value = r.value ? r.value : []), 'cascade' === a.value)) {
              r.value[e] = n[i.value] ? n[i.value] : '';
              let t = e,
                o = n;
              for (; o && o[i.children] && o[i.children][0]; )
                (r.value[t + 1] = o[i.children][0][i.value]),
                  (t += 1),
                  (o = o[i.children][0]);
              o &&
                o[i.children] &&
                0 === o[i.children].length &&
                (r.value = r.value.slice(0, t + 1));
            } else
              r.value[e] = Object.prototype.hasOwnProperty.call(n, i.value)
                ? n[i.value]
                : '';
            t(sV, {
              columnIndex: e,
              selectedValue: r.value,
              selectedOptions: d.value,
            });
          }
        },
        confirmHandler: () => {
          l.value.length > 0 &&
            l.value.forEach((e) => {
              e.stopMomentum();
            }),
            p();
        },
        confirm: p,
        defaultValues: r,
        defaultIndexes: c,
        delayDefaultIndexes: u,
        columnRefs: l,
        columnRef: (e) => {
          e && l.value.length < s.value.length && l.value.push(e);
        },
        selectedOptions: d,
      }
    );
  }),
  (exports.usePopup = function (e, t) {
    let n;
    const i = io({ zIndex: e.zIndex, showSlot: !0, closed: e.closeable }),
      o = ma(() =>
        Qq(e, wV, {
          round: e.round,
          [`nut-popup--${e.position}`]: !0,
          [`nut-popup--${e.position}--safebottom`]:
            'bottom' === e.position && e.safeAreaInsetBottom,
          [`nut-popup--${e.position}--safetop`]:
            'top' === e.position && e.safeAreaInsetTop,
          [e.popClass]: !0,
        })
      ),
      r = ma(() =>
        eV(e, { zIndex: +i.zIndex, transitionDuration: `${e.duration}ms` })
      ),
      a = ma(() => (e.transition ? e.transition : `${oV[e.position]}`)),
      s = () => {
        n && ((n = !1), t(aV, !1), t(dV));
      };
    return (
      ir(
        () => e.visible,
        (o) => {
          o &&
            !n &&
            (n ||
              ((n = !0),
              500 !== e.zIndex && (PV = Number(e.zIndex)),
              t(aV, !0),
              (i.zIndex = ++PV),
              (i.showSlot = !0),
              t(lV))),
            !o && n && ((n = !1), t('close'));
        }
      ),
      tr(() => {
        i.closed = e.closeable;
      }),
      {
        ...Eo(i),
        popStyle: r,
        transitionName: a,
        classes: o,
        onClick: (e) => {
          t('click-pop', e);
        },
        onClickCloseIcon: (e) => {
          e.stopPropagation(), t('click-close-icon'), s();
        },
        onClickOverlay: () => {
          t('click-overlay'), e.closeOnClickOverlay && s();
        },
        onOpened: () => {
          t('opend'), t(pV);
        },
        onClosed: () => {
          t(hV), (i.showSlot = !e.destroyOnClose);
        },
      }
    );
  }),
  (exports.useProvide = function (e, t) {
    const n = oo([]),
      i = oo([]),
      o = sa(),
      r = (e) => {
        e.proxy && (n.push(po(e)), i.push(po(e.proxy)), MV(o, n, t));
      },
      a = (e) => {
        e.proxy &&
          (n.splice(n.indexOf(po(e)), 1), i.splice(i.indexOf(po(e.proxy)), 1));
      };
    return (t) => (
      dr(e, { add: r, remove: a, internalChildren: n, ...t }),
      { internalChildren: n, children: i }
    );
  }),
  (exports.useRect = function (e, t) {
    const { getSelectorNodeInfo: n } = mV(t);
    return n(`#${e}`);
  }),
  (exports.useScanCode = () => ({
    scanCode: async () =>
      new Promise((e, t) => {
        Yn.scanCode({
          success: (t) => {
            e(t.result);
          },
        });
      }),
  })),
  (exports.useScanCodeAuth = () => {
    const e = yo(null);
    return {
      scanCodeData: e,
      scanCodeAuth: async () =>
        new Promise((t, n) => {
          Yn.scanCode({
            success(i) {
              var o;
              const r =
                ((e) => {
                  try {
                    const t = Wl.enc.Hex.parse(
                        '000102030405060708090A0B0C0D0E0F'
                      ),
                      n = Wl.enc.Hex.parse('ABCDEF0123456789ABCDEF0123456789');
                    let i = Wl.AES.decrypt(e, t, {
                      iv: n,
                      mode: Wl.mode.CBC,
                      padding: Wl.pad.Pkcs7,
                    }).toString(Wl.enc.Utf8);
                    return (
                      i.startsWith("'") &&
                        i.endsWith("'") &&
                        (i = i.slice(1, -1)),
                      JSON.parse(null != i ? i : '{}')
                    );
                  } catch (t) {
                    return console.error('解密失败:', t), {};
                  }
                })(null == i ? void 0 : i.result) || {};
              (null == (o = null == r ? void 0 : r.data)
                ? void 0
                : o.ecToken) ||
                (Yn.showToast({
                  title: '未获取到医保授权码，请重新扫码',
                  icon: 'none',
                }),
                n(new Error('未获取到医保授权码'))),
                (e.value = r.data),
                t(e.value);
            },
          });
        }),
    };
  }),
  (exports.useSelectorQuery = mV),
  (exports.useSlots = function () {
    return (function () {
      const e = sa();
      return e.setupContext || (e.setupContext = _a(e));
    })().slots;
  }),
  (exports.useTabContentTouch = function (e, t, n, i) {
    const o = yo(),
      r = `tabsContentRef-${Pq()}`,
      a = yo({ width: 0, height: 0 });
    Mr(() => {
      setTimeout(() => {
        (async () => {
          var e, t;
          if (n) {
            const e = await i(r, n);
            (a.value.width = e.width || 0), (a.value.height = e.height || 0);
          } else
            (a.value.width =
              (null == (e = o.value) ? void 0 : e.clientWidth) || 0),
              (a.value.height =
                (null == (t = o.value) ? void 0 : t.clientHeight) || 0);
        })();
      }, 100);
    });
    const s = io({ offset: 0, moving: !1 }),
      c = IV();
    let u = '';
    return {
      touchMethods: {
        onTouchStart(t) {
          e.swipeable && c.start(t);
        },
        onTouchMove(n) {
          e.swipeable &&
            (c.move(n),
            (s.moving = !0),
            ((n, i) => {
              var o;
              let r = n;
              switch (
                ('horizontal' === e.direction
                  ? ((u = n > 0 ? 'right' : 'left'),
                    (r = (Math.abs(r) / a.value.width) * 100))
                  : ((u = i > 0 ? 'bottom' : 'top'),
                    (r = i),
                    (r =
                      (Math.abs(r) /
                        (null == (o = a.value) ? void 0 : o.height)) *
                      100)),
                r > 85 && (r = 85),
                u)
              ) {
                case 'left':
                case 'top':
                  t.isEnd() && ((r = 0), (s.moving = !1));
                  break;
                case 'right':
                case 'bottom':
                  (r = -r), t.isBegin() && ((r = 0), (s.moving = !1));
              }
              s.offset = r;
            })(c.deltaX.value, c.deltaY.value),
            'horizontal' === e.direction &&
              c.isHorizontal() &&
              (n.preventDefault(), n.stopPropagation()),
            'vertical' === e.direction &&
              c.isVertical() &&
              (n.preventDefault(), n.stopPropagation()));
        },
        onTouchEnd() {
          if (s.moving)
            switch (((s.moving = !1), u)) {
              case 'left':
              case 'top':
                s.offset > 35 && t.next();
                break;
              case 'right':
              case 'bottom':
                s.offset < -35 && t.prev();
            }
        },
      },
      touchState: s,
      tabsContentRef: o,
      tabsContentID: r,
    };
  }),
  (exports.useTransition = function (e, t) {
    const n = yo(!1),
      i = ma(() => e.name || 'fade'),
      o = ma(() => e.duration || 200),
      r = yo(''),
      a = ma(() =>
        (function (
          e,
          {
            enterClass: t,
            enterActiveClass: n,
            enterToClass: i,
            leaveClass: o,
            leaveActiveClass: r,
            leaveToClass: a,
          }
        ) {
          const s = (function (e) {
            return {
              enter: `${e}-enter-from`,
              enterActive: `${e}-enter-active`,
              enterTo: `${e}-enter-to ${e}-enter-active`,
              leave: `${e}-leave-from`,
              leaveActive: `${e}-leave-active`,
              leaveTo: `${e}-leave-to ${e}-leave-active`,
            };
          })(e);
          return {
            enter: t || s.enter,
            enterActive: n || s.enterActive,
            enterTo: i || s.enterTo,
            leave: o || s.leave,
            leaveActive: r || s.leaveActive,
            leaveTo: a || s.leaveTo,
          };
        })(e.name, {
          enterClass: e.enterFromClass,
          enterActiveClass: e.enterActiveClass,
          enterToClass: e.enterToClass,
          leaveClass: e.leaveFromClass,
          leaveActiveClass: e.leaveActiveClass,
          leaveToClass: e.leaveToClass,
        })
      );
    ir(
      () => e.show,
      (s) => {
        s
          ? (async function () {
              var s, c;
              n.value ||
                (t('beforeEnter'),
                (n.value = !0),
                (r.value = (null == (s = iB[i.value]) ? void 0 : s.enter)
                  ? null == (c = iB[i.value])
                    ? void 0
                    : c.enter
                  : `${a.value.enter} ${a.value.enterActive}`),
                await Vo(),
                t('enter'),
                setTimeout(() => {
                  rB(e.name) || (r.value = a.value.enterTo), t('afterEnter');
                }, o.value));
            })()
          : (async function () {
              var s, c;
              n.value &&
                (t('beforeLeave'),
                (r.value = (null == (s = iB[i.value]) ? void 0 : s.leave)
                  ? null == (c = iB[i.value])
                    ? void 0
                    : c.leave
                  : `${a.value.leave} ${a.value.leaveActive}`),
                await Vo(),
                t('leave'),
                setTimeout(() => {
                  !e.show && n.value && (n.value = !1),
                    rB(e.name) || (r.value = a.value.leaveTo),
                    t('afterLeave');
                }, o.value));
            })();
      },
      { immediate: !0 }
    );
    const s = ma(() => Qq(e, oB, { [r.value]: !0, 'nut-hidden': !n.value })),
      c = ma(() =>
        eV(e, {
          'animation-duration': rB(e.name) ? `${e.duration}ms` : '',
          'animation-timing-function': rB(e.name) ? e.timingFunction : '',
        })
      );
    return {
      display: n,
      classes: s,
      styles: c,
      clickHandler: function (e) {
        t(uV, e);
      },
    };
  }),
  (exports.useTranslate = function (e) {
    return {
      translate: function (t, ...n) {
        const { languages: i } = jV,
          o =
            Lq(
              i(),
              `${e.split('-').slice(1).join('-').replace('-', '')}.${t}`
            ) || Lq(i(), t);
        return 'function' == typeof o ? o(...n) : o;
      },
    };
  }),
  (exports.useUploadImage = () => ({
    handleUploadImage: async (e) =>
      new Promise((t, n) => {
        Yn.chooseImage({
          count: 1,
          sizeType: ['compressed'],
          sourceType: [e],
          success: async (e) => {
            var i;
            const o = e.tempFiles,
              r = null != (i = o[0].name) ? i : o[0].path,
              a = /\.(jpg|jpeg|png|gif|bmp|tiff|webp|svg|ico)$/i.test(r),
              s = o[0].size <= 20971520;
            if (!a)
              return (
                Yn.showToast({ title: '请上传图片格式文件', icon: 'none' }),
                void n(null)
              );
            if (!s)
              return (
                Yn.showToast({ title: '图片大小不能超过20M ', icon: 'none' }),
                void n(null)
              );
            try {
              Yn.showLoading({ title: '发送中…', mask: !0 });
              const e = await Pd(o[0].path);
              Yn.hideLoading(), t(e);
            } catch (c) {
              Yn.showToast({ title: `发送失败: ${c}`, icon: 'none' }), n(c);
            }
          },
          fail: async (e) => {
            if ('chooseImage:fail cancel' === e.errMsg)
              return Yn.showToast({ title: '请选择图片文件', icon: 'none' });
            Yn.showToast({ title: e.errMsg, icon: 'none' });
          },
        });
      }),
  })),
  (exports.useUserInfoStore = tu),
  (exports.useWechatPay = () => ({
    requestWechatPay: async (e) => {
      const {
        timeStamp: t,
        nonceStr: n,
        wxPackage: i,
        signType: o,
        paySign: r,
      } = e.arousePayData;
      return new Promise((e, a) => {
        $n.requestPayment({
          timeStamp: t,
          nonceStr: n,
          package: i,
          signType: o,
          paySign: r,
          success: (t) => {
            'requestPayment:ok' === t.errMsg
              ? e(!0)
              : (Yn.showToast({ title: '支付失败，请重试', icon: 'none' }),
                a(!1));
          },
          fail: (e) => {
            console.log(e),
              Yn.showToast({
                title: e.errMsg || '支付失败，请重试',
                icon: 'none',
              }),
              a(!1);
          },
        });
      });
    },
  })),
  (exports.version = ya),
  (exports.watch = ir),
  (exports.watchEffect = tr),
  (exports.weappJwt = (e, t = {}) => {
    if ('string' != typeof e) throw 'Invalid token specified';
    const n = !0 === (t = t || {}).header ? 0 : 1;
    try {
      return JSON.parse(kd(e.split('.')[n]));
    } catch (i) {
      throw 'Invalid token specified: ' + i.message;
    }
  }),
  (exports.wx$1 = $n),
  (exports.wxPaymentAuth = Ld),
  (exports.wxPrescriptionAuth = Rd),
  (exports.wxUserInfoAuth = async (e) => {
    const t = Qc();
    Yn.navigateToMiniProgram({
      appId: 'wxe183cd55df4b4369',
      path: t.CONFIG.MEDICAL_INSURANCE_USERINFO_AUTH,
      envVersion: t.CONFIG.MEDICAL_INSURANCE_AUTH_ENV_WECHAT_MINI,
      success: () => {
        Yn.setStorageSync('medicalAuthType', nd.UserInfo);
      },
      ...e,
    });
  });
